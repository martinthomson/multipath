{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-05-28T00:43:20.721484+00:00",
  "repo": "quicwg/multipath",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "9F9014"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "has PR",
      "description": "",
      "color": "37F263"
    },
    {
      "name": "separate draft",
      "description": "",
      "color": "5A8582"
    },
    {
      "name": "editorial",
      "description": "",
      "color": "CAC593"
    },
    {
      "name": "design",
      "description": "",
      "color": "F3B663"
    },
    {
      "name": "needs-discussion",
      "description": "",
      "color": "F1217E"
    },
    {
      "name": "no-action-needed",
      "description": "",
      "color": "439B49"
    },
    {
      "name": "needs PR",
      "description": "",
      "color": "F9D0C4"
    },
    {
      "name": "on hold",
      "description": "",
      "color": "d4c5f9"
    },
    {
      "name": "ready-to-merge",
      "description": "",
      "color": "8BFEAC"
    },
    {
      "name": "explicit path ID",
      "description": "",
      "color": "C2D607"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOGNtpaM49OGUy",
      "title": "More illustration figures on different types of path identifiers?",
      "url": "https://github.com/quicwg/multipath/issues/1",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "There is one part I am afraid people might feel a little bit hard to follow: the three types of path identifiers in the PATH_STATUS frame. Those three types of path identifiers were introduced in order to be compatible with zero-length CID use cases, so I think we might need two additional example figures (like figure 3 in the current draft), one for (non-zero length CID, zero-length CID) and the other one for (zero-length CID & zero-length CID). Do you think that is a good idea? I can work on those figures if it doesn't complicate the flow of the draft.",
      "createdAt": "2021-10-15T05:54:13Z",
      "updatedAt": "2022-03-07T09:59:33Z",
      "closedAt": "2022-03-07T09:59:33Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This might be indeed useful in the \"Example\" section.",
          "createdAt": "2021-10-15T09:37:13Z",
          "updatedAt": "2021-10-15T09:37:13Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, please create a PR!",
          "createdAt": "2021-10-15T19:55:43Z",
          "updatedAt": "2021-10-15T19:55:43Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@huitema I am editing the path closing figures with zero-length CID and single PN. Is it similar to what you have in mind?\r\n\r\n~~~\r\n  Client                                                      Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=1, path_id=2]->\r\n                             (server tells client to abandon a path)\r\n                <-1-RTT[Y]: PATH_ABANDON[path_id_type=0, path_id=2],\r\n                                                 ACK_MP[Seq=0, PN=X]\r\n  (client abandons the path that it is using)\r\n  1-RTT[X+1]: DCID=S3 RETIRE_CONNECTION_ID[2],\r\n                            ACK_MP[Seq=0, PN=Y]->\r\n                                 <-1-RTT[Y+1]: ACK_MP[Seq=0, PN=X+1]\r\n  (client waits for idle timeout to release resources)\r\n\r\n~~~\r\n{: #fig-example-path-close2 title=\"Example of closing a path when the server chooses to use zero-length CID\"}\r\n\r\n~~~\r\n  Client                                                     Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=2]->\r\n                            (server tells client to abandon a path)\r\n                          <-1-RTT[Y]: PATH_ABANDON[path_id_type=2],\r\n                                                ACK_MP[Seq=0, PN=X]\r\n  1-RTT[X+1]: ACK_MP[Seq=0, PN=Y]->\r\n  (client waits for idle timeout to release resources)\r\n               (server waits for idle timeout to release resources)\r\n\r\n~~~\r\n{: #fig-example-path-close3 title=\"Example of closing a path when the both client and server choose to use zero-length CIDs.\"}",
          "createdAt": "2021-10-17T01:46:28Z",
          "updatedAt": "2021-10-17T01:46:28Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In the case of single number space, we use ACK, not ACK_MP.  But in fact you do not need to draw the ACKs there, there is no special processing of ACKs required. Also, there is no need to wait for an idle timeout, which typically is 10 to 30 seconds. That's too large. \r\n\r\nDo we really need to send \"abandon path\" in both directions? If I think about it, the real concern is that client will send a PATH_ABANDON message, but some time later, due to differences in delay, etc., the server receive data on the same four tuples.\r\nHow does the server know whether it should create a new path or not?\r\n\r\nIn the single space case, the logical test may be to check the sequence numbers of the packet. If the sequence number of the new packet is greater than that of the path_abandon, then the client is reactivating a path that was abandoned previously. Maybe the client connected again to the same network, after some disconnected interval. The server can start sending on the reactivated path. If the packet number is lower than that of the path abandon, then the server should not reactivate the path.\r\n\r\nIn the multiple space case, if the CID is defined, there is no ambiguity.",
          "createdAt": "2021-10-17T02:28:23Z",
          "updatedAt": "2021-10-17T02:28:23Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> In the case of single number space, we use ACK, not ACK_MP. But in fact you do not need to draw the ACKs there, there is no special processing of ACKs required. Also, there is no need to wait for an idle timeout, which typically is 10 to 30 seconds. That's too large.\r\n\r\nACK works for me. I think we might also want to add a sentence in the Sec. of \"one packet number space\" explicitly specifying that \"for single PN, use ACK instead of ACK_MP\", and change some texts in the ACK_MP frame section that is related to zero-length CID (the current draft says \"if the endpoint receives 1-RTT packets with 0-length Connection ID, it SHOULD use Packet Number Space Identifier 0 in ACK_MP frames\". ).\r\n\r\n> \r\n> Do we really need to send \"abandon path\" in both directions? If I think about it, the real concern is that client will send a PATH_ABANDON message, but some time later, due to differences in delay, etc., the server receive data on the same four tuples. How does the server know whether it should create a new path or not?\r\n\r\nI think in single PN, sending \"abandon path\" in both directions is helpful. When the client sends \"PATH_ABANDON\", it promises not to send non-probing packets in the current activity cycle. It could send probing packets to reactivate the path a moment later if the client thinks the network environment has changed. After sending out \"PATH_ABANDON\", the client should still be able to receive packets from the server for a while on that path because there may be the server's inflight packets on that path. It was not until the client sees the server's \"PATH_ABANDON\", the client then knows that no more server's data is to be expected except for some out-of-order packets. So after receiving \"PATH_ABANDON\", the endpoint can start preparing to free memories and clear path stats allocated for that path. The time interval from seeing \"PATH_ABANDON\" to actually releasing relevant resources is going to be an important parameter, and yes, 10-30 seconds is too long. What would be a more appropriate number for this interval? \r\n\r\n> \r\n> In the single space case, the logical test may be to check the sequence numbers of the packet. If the sequence number of the new packet is greater than that of the path_abandon, then the client is reactivating a path that was abandoned previously. Maybe the client connected again to the same network, after some disconnected interval. The server can start sending on the reactivated path. If the packet number is lower than that of the path abandon, then the server should not reactivate the path.\r\n\r\nDoes it imply that we need to track the packet number of the PATH_ABANDON for a path that is closed? When a path is in a closed state, the server may reject any newly received packets unless it is a probing packet (back to our path initialization process). In this way, it should be OK to forget any info related to that path in the last activity cycle.\r\n\r\n> \r\n> In the multiple space case, if the CID is defined, there is no ambiguity.\r\n\r\n",
          "createdAt": "2021-10-17T04:46:07Z",
          "updatedAt": "2021-10-17T04:46:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In most similar situations, RFC 9000 uses a delay of 3xRTO.\r\n\r\nNote that in the \"simple\" case, the client can receive packets from the server on any tuple. There are no resource allocated per path for receiving packets. There will be local resource allocated for sending packets, congestion context for example. But not on for receiving: all packets can be decrypted and processed. If the client knows that it will not send, it can discard the resource allocated for sending without risking a side effect.",
          "createdAt": "2021-10-17T05:46:07Z",
          "updatedAt": "2021-10-17T05:46:07Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I changed the timeout to 3RTO. As the problem is similar to FIN-ACK&FIN-ACK when TCP closes, I kept the ACK in the graph (because the path_id_type=2 refers to the path where the packet is traveling, we want to make sure it is acked before we close the path.). Regarding the resource, I think if we keep a unified receive record, which is not per-path, yes, we can discard the sending resources. But if we have some path stats (e.g. how many packets received in total in this current activity cycle), we need to keep these data structures until we are sure that the peer is not going to send more packets on that path. Indeed, it depends on the implementation, but I feel it is generally helpful to have PATH_ABANDON sent in both directions. What do you think?\r\n\r\n~~~\r\n  Client                                                      Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=1, path_id=2]->\r\n                             (server tells client to abandon a path)\r\n                <-1-RTT[Y]: PATH_ABANDON[path_id_type=0, path_id=2],\r\n                                                           ACK[PN=X]\r\n  (client abandons the path that it is using\r\n  and waits for 3*RTO to close the path)\r\n  1-RTT[X+1]: DCID=S3 RETIRE_CONNECTION_ID[2],\r\n                                     ACK[PN=Y]->\r\n                                            (server closes the path)\r\n\r\n~~~\r\n{: #fig-example-path-close2 title=\"Example of closing a path when the server chooses to use zero-length CID\"}\r\n\r\n~~~\r\n  Client                                                     Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=2]->\r\n                            (server tells client to abandon a path)\r\n                          <-1-RTT[Y]: PATH_ABANDON[path_id_type=2],\r\n                                                          ACK[PN=X]\r\n  (client waits for 3*RTO to close the path)\r\n  1-RTT[X+1]: ACK[PN=Y]->\r\n                         (server waits for 3*RTO to close the path)\r\n\r\n~~~\r\n{: #fig-example-path-close3 title=\"Example of closing a path when both client and server choose to use zero-length CIDs.\"}",
          "createdAt": "2021-10-18T01:51:53Z",
          "updatedAt": "2021-10-18T01:51:53Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I submitted PR #28 . Let's first have sth that we can start modifying.",
          "createdAt": "2021-10-21T05:53:51Z",
          "updatedAt": "2021-10-21T05:53:51Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "addressed by PR #104",
          "createdAt": "2022-03-07T09:59:33Z",
          "updatedAt": "2022-03-07T09:59:33Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOGNtpaM49OM7s",
      "title": "idle timeout issues",
      "url": "https://github.com/quicwg/multipath/issues/2",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current draft says \"_Servers SHOULD stop sending traffic on paths through which non-probing packet was received in the last 3 path RTTs, but MAY ignore that rule if it would disqualify all available paths_\". First, I believe there is a typo, where the \"non-probing packet\" should be \"**no** non-probing packet\". Second, 3 RTT is too short for our applications and we prefer a longer timeout. Maybe we want to add a new parameter (e.g. max_path_idle_timeout) to allow the server and client to negotiate?",
      "createdAt": "2021-10-15T06:47:33Z",
      "updatedAt": "2021-10-21T14:43:08Z",
      "closedAt": "2021-10-21T14:43:08Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I fixed the missing no.\r\n\r\nI took this text from Christian's draft. So maybe he can comment. @huitema ?",
          "createdAt": "2021-10-15T07:48:32Z",
          "updatedAt": "2021-10-15T07:48:32Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would suggest to leave the path closing problem for further work and indicate that the next version of the draft will define how a path can be closed by one of the endpoints. ",
          "createdAt": "2021-10-15T12:19:41Z",
          "updatedAt": "2021-10-15T12:19:41Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are two issues, path closing and packet scheduling.\r\n\r\nFor path closing, the simplest solution is to use an idle timer, either the idle timer negotiated for the connection or a new parameter negotiated as part of multipath setup.\r\n\r\nFor packet scheduling, the first rule is to not send data on paths that do not work, e.g., lots of packet losses, or maybe absence of ACK. This is basically the same issue as determining whether a connection is broken, just applied to a path. But that is not entirely sufficient, because the server needs to also infer whether the client still wants to use that path.\r\n\r\nThe monitoring of non probing packets is just an heuristic. The server observes that if the client is not using the path, and deduces that it should not be using it itself. That's not a bad heuristic, but it requires the client to send some kinds of \"keep alive\" if it wants the server to continue using a path. We may debate how often that should happen. Maybe reuse the same timeout as for jettisoning paths.\r\n\r\nAnother solution may be for the client to tell something like \"please don't use that path anymore\", but that requires adding a new frame as part of the core multipath specification. In draft-liu, this was done with a specialization of the \"path status\", setting the status to \"Abandon\". Maybe we should just use a simplified for of the PATH_STATUS, leaving out the complexities of managing priorities for the advanced scheduling drafts:\r\n```\r\nABANDON_PATH Frame {\r\n  Type (i) = TBD,\r\n  Path_identifier (i),\r\n  Error Code (i),\r\n  Reason Phrase Length (i),\r\n  Reason Phrase (..),\r\n}\r\n```\r\n\r\n",
          "createdAt": "2021-10-15T16:03:51Z",
          "updatedAt": "2021-10-15T16:04:41Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I prefer the second approach that Christian proposed, i.e., sending explicit signals like \"abandon\". But there is an issue with path id type 0x02 in the current draft, which refers to the path over which the control frame is sent or received. The current draft says \" If both endpoints are using 0-length Connection IDs on that path, endpoints SHOULD only use type 0x02 for path identifier\", so in this case, if a path is broken, we cannot send an explicit \"abandon\" signal for that path thru other paths, and we have to rely on implicit signals like an idle timeout. That means we may still want to negotiate the idle timer?",
          "createdAt": "2021-10-15T19:23:21Z",
          "updatedAt": "2021-10-15T19:23:21Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The client can always force the issue by dropping all packets received on an old path. They will not be acknowledged, and the server will automatically deduce that the path does not work. Of course, that is ugly...",
          "createdAt": "2021-10-15T20:09:35Z",
          "updatedAt": "2021-10-15T20:09:35Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that the \"Abandon Path\" would be a replacement or a simplification of the \"Path Status\" frame in the current draft. In my code, I only use the \"Abandon\" variant of the Path Status. I wonder whether we need alternative statuses like \"standby\", and whether we should define priorities here, rather than in a separate draft for advanced scheduling.",
          "createdAt": "2021-10-15T20:20:18Z",
          "updatedAt": "2021-10-15T20:20:18Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I agree. We should put the alternative statuses and priority in a separate draft on advanced scheduling. ",
          "createdAt": "2021-10-15T22:35:38Z",
          "updatedAt": "2021-10-15T22:35:38Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I submitted PR #19  on this issue.",
          "createdAt": "2021-10-15T22:41:04Z",
          "updatedAt": "2021-10-15T22:44:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR was merged.",
          "createdAt": "2021-10-21T14:43:08Z",
          "updatedAt": "2021-10-21T14:43:08Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOGNtpaM49ONTu",
      "title": "Section 3.2. Path Initiation",
      "url": "https://github.com/quicwg/multipath/issues/3",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We need some description for how to init new paths in this section.",
      "createdAt": "2021-10-15T06:50:23Z",
      "updatedAt": "2021-10-15T12:04:19Z",
      "closedAt": "2021-10-15T12:04:19Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To me path validation and path initiation are very coupled together. In #7 I merged both sections together.",
          "createdAt": "2021-10-15T09:39:04Z",
          "updatedAt": "2021-10-15T09:39:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "That's probably fine. I was keeping this as a placeholder in case we need anything in addition but probably not.",
          "createdAt": "2021-10-15T10:15:20Z",
          "updatedAt": "2021-10-15T10:22:24Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's ok.",
          "createdAt": "2021-10-15T12:04:19Z",
          "updatedAt": "2021-10-15T12:04:19Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOGNtpaM49OYC9",
      "title": "One packet number space as mandatory to implement?",
      "url": "https://github.com/quicwg/multipath/issues/4",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I took the following text from draft-liu:\r\n\r\n`Note: Even if use of multiple packet number spaces is negotiated but a peer uses an zero length connection ID, then all packets sent to that peer MUST be numbered in a single number space (as specified in the previous section), because the packet level decryption implementation will only see one Connection ID sequence number (the default number 0).`\r\n\r\nThis basically makes the one packet number handling mandatory to implement as you also need it if multiple packet number spaces were negotiated but zero length CID is used.\r\n\r\nThe alternative would be to say that you can't used zero length CID if multiple packet number spaces are negotiated.\r\n\r\nAlso I'm currently proposing  enable_multipath=1 for multiple number space and enable_multipath=2 for one number space to be compatible with the draft-liu and the alibaba implementation. However if we think one packet number space is mandatory to implement, it would make more sense to have it the other way around and allow fallback to one packet number space, namely if the client ask for two packet number spaces but the server supports only one but would also lead to a successful negotiation.\r\n\r\nWhat do people think about this?",
      "createdAt": "2021-10-15T07:54:04Z",
      "updatedAt": "2021-10-25T08:48:34Z",
      "closedAt": "2021-10-25T08:48:34Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As long as inter-op is allowed, I think it might be better to keep both PN space choices optional (Mirja's proposal of using enable_multipath=1 or 2 works for me). The first thing is to allow people more freedom. If some implementors only want to use one option, they just need to implement one code branch.  Second, single packet number space requires the modification of loss detection algorithm, the way how rtt is sampled (the overall largest ack may not be the largest acked packet on a given path), and some delayed ACK strategies, which might take additional effort. People may also want to avoid round-robin scheduling in single PN as it creates a lot of holes in the ack range, so certain things regarding performance get coupled. Christian introduced many good practices and we are currently learning from it, so we probably need more experience on that.  ",
          "createdAt": "2021-10-15T10:11:07Z",
          "updatedAt": "2021-10-15T10:11:07Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Adding the option to negotiate is a very good solution at this point. It would be helpful to hear more people's implementation experience. To avoid failure for interop tests, I suggest that we could negotiate the transport parameter like this: use 2-bits in the value field for negotiating one or more PN spaces.\r\n\r\n- 0x0: don't support multi-path\r\n- 0x1: only support multiple PN spaces for multi-path\r\n- 0x2: only support one PN space for multi-path\r\n- 0x3: support both one PN space and multiple PN space \r\n\r\nThe client could send all these 4 values in the enable_multipath transport parameter which depends on what kind of modes it supports. If the server just support one mode(such as one PN space), it could return 0x2 so that the client knows how to do next. If the server support both, it could choose 0x1 or 0x2 as it prefers, and make sure that the server don't return 0x3 as it need to decide which mode to choose. In 0x2 mode, the endpoints must not use 0-length CID.\r\n\r\nThen for people who just want one PN space, it would be ok to just support 0x2 mode. For the other guys who don't use 0-length Connection ID and want to get less overhead for ack ranges, they could choose to use 0x1 mode. And for people who want to support both 0-length CID and multiple PN spaces, they could choose 0x3 and of course it will add more modification in the implementation.\r\nMaybe this could meet everyone's need for experiments. \r\n\r\n",
          "createdAt": "2021-10-15T13:35:08Z",
          "updatedAt": "2021-10-15T13:35:08Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema any views?",
          "createdAt": "2021-10-15T19:55:22Z",
          "updatedAt": "2021-10-15T19:55:22Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with Yanmei's proposal of 4 options 0, 1, 2 or 3, although I have a slight preference for \"the other way around\":\r\n\r\nClient Option | Definition | Allowed server responses\r\n---------------|-------------|-----------------------------\r\n0x0 | don't support multi-path | 0x0\r\n0x1 | only support one PN space for multi-path | 0x0 or 0x1\r\n0x2 | only support multiple PN spaces for multi-path | 0x0 or 0x2\r\n0x3 | support both one PN space and multiple PN space | 0x0, 0x1 or 0x2\r\n\r\nReceiving an unexpected value from the server should be a protocol violation. If the transport parameter is not present, the value defaults to zero.\r\n",
          "createdAt": "2021-10-15T20:05:29Z",
          "updatedAt": "2021-10-15T20:06:08Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agree with Christian's design for value definitions.\r\nSubmitted PR #20 for this issue.",
          "createdAt": "2021-10-16T10:59:39Z",
          "updatedAt": "2021-10-16T10:59:39Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As #20 got merged, I think this is now resolved.",
          "createdAt": "2021-10-18T09:30:20Z",
          "updatedAt": "2021-10-18T09:30:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually I think this is not fully resolved. The initial question was about use of multiple packet number spaces and zero length connection ID.\r\n\r\nDo we now say that if multiple packet number spaces are used, zero connection ID cannot be used? If yes, that means we need to remove the text I've cited in the initial issue description from the draft. And also add some text that \"zero-length CID MUST not be used with enable_multipath=2\".\r\n\r\nOr if we want to keep that option that basically means that you need to always implement also singe packet number handling even if use of multiple packet number spaces is negotiated, and then we should say that more explicitly in the negotiation section.\r\n\r\nTo me it's not fully clear which option you have agreed to now...?",
          "createdAt": "2021-10-18T12:16:56Z",
          "updatedAt": "2021-10-18T12:16:56Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I opened #43 to track the remaining point.",
          "createdAt": "2021-10-25T08:48:34Z",
          "updatedAt": "2021-10-25T08:48:34Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOGNtpaM49OZub",
      "title": "SHOULD vs MUST for check available CIDs",
      "url": "https://github.com/quicwg/multipath/issues/5",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I copied this sentence from draft-liu:\r\n\r\n`Before an endpoint adds a new path, it SHOULD check whether there is at least one unused available Connection ID for each side.`\r\n\r\nShouldn't this be a MUST instead of a SHOULD? ",
      "createdAt": "2021-10-15T08:01:32Z",
      "updatedAt": "2021-10-15T19:58:51Z",
      "closedAt": "2021-10-15T19:58:51Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We can describe it in a more accurate way:\r\n- Before an endpoint adds a new path, it MUST check whether there is at lease one unused available Connection ID for each side, unless the endpoints use zero-length Connection ID.\r\n",
          "createdAt": "2021-10-15T08:53:28Z",
          "updatedAt": "2021-10-15T08:53:28Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Submitted PR #6 for this issue.",
          "createdAt": "2021-10-15T09:00:00Z",
          "updatedAt": "2021-10-15T09:00:00Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOGNtpaM49Ou03",
      "title": "ACK_MP and single packet number space",
      "url": "https://github.com/quicwg/multipath/issues/8",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When negotiating the use of a single packet number space, it is not clear whether the use of ACK_MP frame is acceptable or not. Should we only stick to ACK frames and consider reception of ACK_MP frames to be MP_PROTOCOL_VIOLATION error? Or should we tolerate their reception if the packet number space identifier is 0?",
      "createdAt": "2021-10-15T09:46:01Z",
      "updatedAt": "2021-10-18T17:26:24Z",
      "closedAt": "2021-10-18T17:26:24Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah good point. I moved the text about ACK_MP this morning because I assumed that you would only implement this frame if you use multiple packet number spaces. If that's the case receiving an ACK_MP with enable_multipath=2 should be a PROTOCOL_VIOLATION and we should specify that.",
          "createdAt": "2021-10-15T10:18:47Z",
          "updatedAt": "2021-10-15T10:18:47Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOGNtpaM49OvMs",
      "title": "ACK_MP acknowledging unknown packet number spaces",
      "url": "https://github.com/quicwg/multipath/issues/9",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Should we trigger an connection closure with a MP_CONNECTION_ERROR in the case an endpoint receives an ACK_MP frame acknowledging packets on a non-existing packet number space ID?",
      "createdAt": "2021-10-15T09:47:58Z",
      "updatedAt": "2021-10-15T12:01:15Z",
      "closedAt": "2021-10-15T12:01:15Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes. I just submitted PR #11 for this issue.",
          "createdAt": "2021-10-15T10:14:52Z",
          "updatedAt": "2021-10-15T10:14:52Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR #11 merged.",
          "createdAt": "2021-10-15T12:01:15Z",
          "updatedAt": "2021-10-15T12:01:15Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOGNtpaM49Ov4l",
      "title": "States of paths",
      "url": "https://github.com/quicwg/multipath/issues/10",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "Given that paths are initiating/validating/active/closed, it looks like we will need at some point to specify some path state (finite state machine?) and what behavior is acceptable in each of them (e.g., we cannot send packets on a closed state,...).",
      "createdAt": "2021-10-15T09:51:35Z",
      "updatedAt": "2021-10-25T12:23:20Z",
      "closedAt": "2021-10-25T12:23:20Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can you create a PR?",
          "createdAt": "2021-10-15T19:54:40Z",
          "updatedAt": "2021-10-15T19:54:40Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOGNtpaM49PUmd",
      "title": "Nonce example error?",
      "url": "https://github.com/quicwg/multipath/issues/12",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The draft states that\r\n\r\n> For example, assuming the IV value is 6b26114b9cba2b63a9e8dd4f, the connection ID sequence number is 3, and the packet number is aead, the nonce will be set to 6b2611489cba2b63a9a873e2.\r\n\r\nShouldn't be the result 6b2611489cba2b63a9**e**873e2 instead of 6b2611489cba2b63a9**a**873e2?",
      "createdAt": "2021-10-15T13:09:13Z",
      "updatedAt": "2021-10-15T15:16:39Z",
      "closedAt": "2021-10-15T15:16:39Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I submitted PR #13 for this issue.",
          "createdAt": "2021-10-15T14:34:15Z",
          "updatedAt": "2021-10-15T14:34:15Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOGNtpaM49QnO1",
      "title": "add MP_CONNECTION_ERROR to IANA section",
      "url": "https://github.com/quicwg/multipath/issues/15",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "If we want an MP specific error type we need to also add this to the IANA section.",
      "createdAt": "2021-10-15T19:58:26Z",
      "updatedAt": "2021-10-18T07:32:20Z",
      "closedAt": "2021-10-18T07:32:20Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Submitted PR #21 for this issue.\r\nI just added MP_PROTOCOL_VIOLATION for connection close. If we have more specific error codes in the future, we can add them in the table.",
          "createdAt": "2021-10-16T11:48:17Z",
          "updatedAt": "2021-10-18T04:44:15Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOGNtpaM49RAU3",
      "title": "Timer computation issues not specific to single space",
      "url": "https://github.com/quicwg/multipath/issues/18",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "The text about computation of RTT was copied from the \"simple option\" draft to section 6.2.2. Computing Path RTT, but the issues around RTT computation are common to both single number space and multiple number spaces. Maybe move that text to a new section 6.5?",
      "createdAt": "2021-10-15T22:38:57Z",
      "updatedAt": "2021-10-25T10:16:55Z",
      "closedAt": "2021-10-25T10:16:55Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree. The text applies to both situations.",
          "createdAt": "2021-10-16T22:50:00Z",
          "updatedAt": "2021-10-16T22:50:00Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOGNtpaM49UY5P",
      "title": "Are we sure we really don't need stand-by?",
      "url": "https://github.com/quicwg/multipath/issues/22",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR",
        "design",
        "needs-discussion"
      ],
      "body": "I believe stand-by (or backup) has been useful in MPTCP. This is not really about scheduling because all it says is: I won't use this path actively(yet)  but please leave it open.",
      "createdAt": "2021-10-18T07:56:55Z",
      "updatedAt": "2022-07-11T12:19:39Z",
      "closedAt": "2022-07-11T12:19:39Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IMHO, this is a (simple) form of path prioritization. I'm not sure it should be part of the current. We could delegate this point to an \"advanced\" path management draft.",
          "createdAt": "2021-10-18T09:34:28Z",
          "updatedAt": "2021-10-18T09:34:28Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that this should not be in the core. Let's start by assuming that all established paths can be used. We will then be able to add mechanisms to indicate that some existing paths should not currently be used. In MPTCP we only had limit messages to do this. In QUIC, we will have more flexibility in the definition of frames to encode such information if needed.\r\n",
          "createdAt": "2021-10-19T09:33:04Z",
          "updatedAt": "2021-10-19T09:33:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, actually there might be two different signals here: One is \"please do not use this path as long as you have others\" but the other is \"please keep this path open even if I don't use it\". I agree we don't need the first one but I thought the second one might be useful because otherwise if no packets are received on a path the other end might assume the path to be closed after an idle time, no?",
          "createdAt": "2021-10-19T09:40:09Z",
          "updatedAt": "2021-10-19T09:40:09Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One problem is NAT timeout when we want to keep a path open but do not send any traffic. To solve this, we may want to send \"ping\" at a very low frequency to keep that path alive. Suppose if we don't have a stand-by state (which I think we should have eventually), but we do employ this ping mechanism to keep that path alive, does it solve Mirja's problem as now the other end won't close that path because it receives some \"ping\"s at a very low frequency?",
          "createdAt": "2021-10-19T20:57:48Z",
          "updatedAt": "2021-10-19T20:57:48Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I indeed think that we should have some mechanism (like sending a PING frame) to avoid some \"path idle timeout\".",
          "createdAt": "2021-10-20T07:54:55Z",
          "updatedAt": "2021-10-20T07:54:55Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we need any more text in the draft or can we just close this issue?",
          "createdAt": "2022-01-11T12:30:36Z",
          "updatedAt": "2022-01-11T12:30:36Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The current text in Section 3.2.3 (\"To avoid idle timeout of a path, endpoints can send ack-eliciting packets such as packets containing PING frames Section 19.2 of [QUIC-TRANSPORT] on that path to keep it alive. Sending periodic PING frames also helps prevent middlebox timeout, as discussed in Section 10.1.2 of [QUIC-TRANSPORT].\") is fine for me.",
          "createdAt": "2022-01-11T15:07:19Z",
          "updatedAt": "2022-01-11T15:07:19Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is still much more expensive than MPTCP's backup subflows since we send a PING frame every N rtts, with N being close to 3.\r\n",
          "createdAt": "2022-01-11T15:51:49Z",
          "updatedAt": "2022-01-11T15:51:49Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't see many QUIC applications relying on keep-alive. For example, when studying DNS over QUIC, we concluded that it was much easier to use resumption and 0-RTT than to try to keep the paths open through NAT. I also think the issue is asymmetric:\r\n\r\n* Servers have no good way to know that a path that has been idle for some time is still valid. The client might have moved, or the NAT binding might have changed. If servers send traffic on an idle path, there is a high risk that the traffic will be lost. The default should be, \"silent close on idle\".\r\n\r\n* Clients typically do not have such limitations, because their traffic will force a new NAT binding if one is missing.\r\n\r\nThere are mitigating strategies, such as only sending redundant traffic on suspect paths, but we probably don't need to discuss that here.",
          "createdAt": "2022-01-11T21:25:28Z",
          "updatedAt": "2022-01-11T21:25:28Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "QUIC applications rely less on keep-alive (as you have 0-RTT resumption), however, I think the situation is different for multipath. If you have multiple paths available, you might still decide to only send data on one path at a time, e.g. you want to have a hot stand-by, meaning you already open a new path but didn't decide to use it yet, or want to be able to switch back to an \"old\" path anytime.",
          "createdAt": "2022-01-12T09:23:52Z",
          "updatedAt": "2022-01-12T09:23:52Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we need further text here or can we close this issue?",
          "createdAt": "2022-03-03T13:39:36Z",
          "updatedAt": "2022-03-03T13:39:36Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually thinking about this further I still think we should have at least one signal  to tell the other end that a path should not be used.\r\n\r\nThis is the typical handover case: a client opens both a wifi and a cellular path, also sends keep-alive on the cellular path to make sure one can switch over quickly. However, when it requests data from the server, the server doesn't know which path to use or that it should actually not use one of path as it is more costly. Therefore I think we need a signal to tell the _other end_ that a path should not actively be used for sending data (as long as another path is still available).",
          "createdAt": "2022-03-05T14:34:30Z",
          "updatedAt": "2022-03-05T14:34:30Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak  I agree that having a signal for stand-by is beneficial. Actually, we did have the standy-by signal with the PATH_STATUS frame in draft-liu. The PATH_STATUS frame signals three status: (1) abandon, (2) stand-by, and (3) available. \r\n     PATH_STATUS Frame {\r\n       Type (i) = TBD-03 (experiments use 0xbaba03),\r\n       Path Identifier (..),\r\n       Path Status sequence number (i),\r\n       Path Status (i),\r\n       Path Priority (i),\r\n     }\r\nWhen the three drafts were merged, the PATH_STATUS frame was replaced by the current PATH_ABANDON frame, as at that time we wanted the first version to focus on the very basic features. I think we can put the stand-by status back if it proves to be a general requirement.",
          "createdAt": "2022-03-06T07:45:39Z",
          "updatedAt": "2022-03-06T07:45:39Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The stand-by status in draft-liu is used to explicitly inform the sender not to schedule packets on this path, but endpoints can keep the path context not to be removed. Once the endpoints need to use this path again, they can send PATH_STATUS(active) to update the status, and send packets on the path immediately without path validation and other preparation for this path.\r\n\r\nWe can discuss about whether if we need to add the mechanism into the working group version.",
          "createdAt": "2022-03-10T05:53:54Z",
          "updatedAt": "2022-03-10T05:53:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "At IETF-113 there was general support for this idea. Next step: write PR",
          "createdAt": "2022-03-23T14:38:59Z",
          "updatedAt": "2022-03-23T14:38:59Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The PATH_STATUS frame as described in PR#117 is a rather generic way to update path information. Actually not sure if we need this at this point. I was assuming that indicating a path to be a stand-by or back-up path is a rather static information. E.g. if your mobile link is more expensive, this is static and will not change over the life time of the path. As such another option would be to signal this information during path initiation, e.g. creating an MP_PATH_CHALLANGE frame that contains a flag.",
          "createdAt": "2022-04-06T10:07:53Z",
          "updatedAt": "2022-04-06T10:07:53Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is generally preferred to defined composable frames, rather than create a special purpose version of an existing frame. I would combine Status & Challenge in a single message rather than modifying challenge. But we have to understand what happens if a challenge is lost, repeated, etc.\r\n\r\nI am also not sure that the 'status' is \"once and forever\". I could see the status evolving over time, and alternating between standby and available. But we need to add a bit to the specification. In particular:\r\n\r\n* is there a default status when no status frame have been received on a path?\r\n* does the status change if the peer starts sending non-probing frames on the path?\r\n* can both client and server change the status of a path?\r\n* do frames affect both directions of a path?",
          "createdAt": "2022-04-07T00:47:04Z",
          "updatedAt": "2022-04-07T00:47:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "> is there a default status when no status frame have been received on a path?\r\n\r\nYes, available. However, I wouldn't really call this a default status, because this info is a signal to the other end in order to give a recommendation if that should be sent on this path or not, but the fine sending decision is a local decision. If this info is not available, the sender has to base its decision on other (local known) criteria. \r\n\r\n> does the status change if the peer starts sending non-probing frames on the path?\r\n\r\nNo.\r\n\r\n> can both client and server change the status of a path?\r\n\r\nYes and no. The status tells the other end if or if not it should send data on the path. So effectively it impacts only one direction of the path as the other direction is a local decision.\r\n\r\n> do frames affect both directions of a path?\r\n\r\nNo. As I just said. This is a recommendation for the sender, however, if the sender follows that recommendation is effectively also a local decision.\r\n\r\nAgain, I think we should at this point really just focus on the standby function and not make this too generic because that makes is more complicated.",
          "createdAt": "2022-04-07T08:33:19Z",
          "updatedAt": "2022-04-07T08:33:19Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak the current default status is \"standby until the client has sent non probing frames, available after that\" -- per RFC 9000. I would think that the client sending a status frame overrides that, since \"status\" is not \"probing\", but it is probably worth specifying.\r\n\r\nSimilarly, I do agree with the \"unilateral\" view of status that you are presenting, \"just tell the other end whether to send on that path of not.\" But it is worth specifying.",
          "createdAt": "2022-04-07T19:55:07Z",
          "updatedAt": "2022-04-07T19:55:07Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, if we agree that we want a separate PATH_STATUS frame then I think PR #117 is ready to merge. @huitema and @qdeconinck can you review and approve PR #117 ? Thanks!",
          "createdAt": "2022-07-06T13:58:11Z",
          "updatedAt": "2022-07-06T13:58:11Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOGNtpaM49WqUt",
      "title": "Take Hardware Offloads into Account",
      "url": "https://github.com/quicwg/multipath/issues/25",
      "state": "OPEN",
      "author": "nibanks",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "While discussing single packet space vs multi packet space designs, @martinduke brought up the topic of hardware offloading. The effect of any design changes on packet encryption/decryption should take HW offloads into account. As I understand it, single packet space would not modify the packet encryption/decryption logic, but the multi packet space design would because of the difference nonce length. Additionally, since multi-path would be a negotiated feature/extension, that would mean all connections that don't negotiate the feature would have the \"old\" model/logic, where as the connections that do would have the new encryption/decryption logic. IMO, this could significantly complicated HW offloads.",
      "createdAt": "2021-10-18T16:38:38Z",
      "updatedAt": "2024-01-12T05:17:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "A few disconnected points on this subject:\r\n- based on my (limited) engagement with hardware people, no one has cut any silicon for these workloads, so there is time to make changes\r\n- we don't know what the hardware APIs will look like, and if the multi-space design will conflict with them\r\n\r\non the other hand:\r\n- if there turned out to be a conflict, that would be very bad for the future of multipath\r\n- it is unclear if multipath, given its current status, likely status in the near future, and addressable market, would move the needle for vendors\r\n- creating the impression that the QUIC crypto API is not stable is bad for QUIC\r\n\r\nIt would be very good to engage with the right people in industry, do some thinking about what these APIs would likely resemble, and if possible come up with a crypto design that is consistent with that.",
          "createdAt": "2021-10-18T17:15:01Z",
          "updatedAt": "2021-10-18T17:15:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I would be hoping that any hardware offload would already be able to handle a different nonce length as that seem more future proof anyway. However, Martin probably has a good point that is makes sense to reach out and make this requirement explicit now.",
          "createdAt": "2021-10-18T17:38:49Z",
          "updatedAt": "2021-10-18T17:38:49Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "Based on recent changes about removing single packet number space, have there been changes on this topic? We'd love to get feedback on https://github.com/microsoft/quic-offloads with response to multi-path to make sure our HW offload design can support it.",
          "createdAt": "2022-11-11T14:17:22Z",
          "updatedAt": "2022-11-11T14:17:22Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we need to find out whether hardware offloading is still working with multi-path extension before the WG last call.\r\nConsidering: https://lpc.events/event/17/contributions/1592/\r\n",
          "createdAt": "2023-11-24T12:00:37Z",
          "updatedAt": "2023-11-24T12:00:37Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We've had some discussion with Eric for supporting hardware offloading with multi-path extension. \r\nHere's the solution suggested by Eric: \r\n\r\n> (original e-mail content)\r\n> From:Eric Davis <eric.davis@broadcom.com>\r\n> Sent At:2024 Jan. 5 (Fri.) 20:36\r\n> To:LIU Yanmei <miaoji.lym@alibaba-inc.com>\r\n> Cc:Andy Gospodarek <andrew.gospodarek@broadcom.com>; mbuhl <mbuhl@moritzbuhl.de>; martenseemann <martenseemann@gmail.com>\r\n> Subject:Re: Offloading Encryption to QUIC Enabled NICs with Multi-path Extension\r\n> \r\n> Hi Yanmei,\r\n> \r\n> Thank you for presenting the high level details of the multipath draft. I've also read through the draft itself and I think it's in a good place to support the current QUIC offload design without requiring any hardware changes. This is good.\r\n> \r\n> First thing to address is the tweaks to the AEAD nonce generation required for multipath. As we know, the non-multipath nonce generation has the hardware XOR'ing the 12B IV with the 62b pkt_num (which is left padded with zeros to 12B). For multipath, the nonce must be tweaked even more to ensure a unique nonce is always used for any multipath packet using the same key. The solution in the current draft rolls in the destination connID sequence number. This makes sense. In order to not change the hardware and still support multipath, the QUIC kernel module and/or driver must XOR in the destination connID sequence number to the IV. The result is the IV that is offloaded for the flow to the hardware. The hardware continues to do the same nonce generation with this IV XOR'ed with the pkt_num. \r\n> \r\n> Example from the multipath draft RFC:\r\n> IV: 0x6b26114b9cba2b63a9e8dd4f\r\n> Connection ID Sequence Number: 0x3\r\n> Packet Number = 0xaead\r\n> Nonce = (IV XOR ((connid_seq_num << 64) | pkt_num))\r\n> ((0x3 << 64) | 0xaead) = 0x00000003000000000000aead\r\n>     0x6b26114b9cba2b63a9e8dd4f (IV)\r\n> XOR 0x00000003000000000000aead ((connid_seq_num << 64) | pkt_num)\r\n>     --------------------------\r\n>     0x6b2611489cba2b63a9e873e2\r\n> \r\n> Same method supporting existing offload mechanism:\r\n> IV: 0x6b26114b9cba2b63a9e8dd4f\r\n> Connection ID Sequence Number: 0x3\r\n> Packet Number = 0xaead\r\n> New IV passed in flow offload = (IV XOR (connid_seq_num << 64))\r\n>     0x6b26114b9cba2b63a9e8dd4f (IV)\r\n> XOR 0x000000030000000000000000 (connid_seq_num << 64)\r\n>     --------------------------\r\n>     0x6b2611489cba2b63a9e8dd4f\r\n> Nonce (hardware): (IV XOR pkt_num)\r\n>     0x6b2611489cba2b63a9e8dd4f (offloaded IV)\r\n> XOR 0x00000000000000000000aead (pkt_num)\r\n>     --------------------------\r\n>     0x6b2611489cba2b63a9e873e2\r\n> \r\n> Second thing is whether or not the destination connID sequence number is used in the nonce or a new path identifier. From a hardware perspective it doesn't matter. The nonce construction would be the same as I detailed above with the driver XOR'ing in the connid_seq_num or the path_id into the IV before offloading the flow. There is an implication though, as you mentioned, if the destination connID sequence number is used, the IV in the offloaded flow will change. To support this, the offloaded flow would have to be deleted from the hardware and then re-offloaded with the updated IV. Alternatively, if a unique path identifier is used, the flow would never need to be removed and re-offloaded again.\r\n> \r\n> My vote is to move the multipath design to support a unique path identifier as it's cleaner. But as you can see, it's not required from a hardware perspective. Another thing to note, the connID is part of the flow lookup on the Rx side. Simple hardware implementations would require the flow to be removed and re-offloaded with a connID change. As we've discussed with numerous customers, this is acceptable.\r\n> \r\n> Feel free to copy these ideas into this GitHub issue for further discussion: https://github.com/quicwg/multipath/issues/25\r\n> \r\n> If you haven't seen it, we also presented QUIC offload at the last OCP Summit. This presentation complements that one Andy gave at Linux Plumbers. https://www.youtube.com/watch?v=IAvQhJSm6O8\r\n> \r\n> It's important to keep the hardware offload design as simple as possible. I don't see any need to make changes to the current offload design in order to support multipath. Let us know if you need any help with specifics going into the next IETF wg meeting. :-)\r\n> \r\n> Thanks,\r\n> - e",
          "createdAt": "2024-01-12T05:17:45Z",
          "updatedAt": "2024-01-12T05:17:45Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOGNtpaM49W2VG",
      "title": "More text on packet number space options",
      "url": "https://github.com/quicwg/multipath/issues/26",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "Based on the discussed from the side meeting, we need to\r\n\r\n- Clarify that the goal is to only select one approach for the finally published solution in an RFC\r\n- Add some discussion about the pros and cons to the appendix",
      "createdAt": "2021-10-18T17:28:52Z",
      "updatedAt": "2021-10-25T11:11:36Z",
      "closedAt": "2021-10-25T11:11:36Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I think we should have these discussions in the current draft.",
          "createdAt": "2021-10-19T21:00:01Z",
          "updatedAt": "2021-10-19T21:00:01Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should we use a new code point for the transport parameter of the options? \r\nFor 2 reasons:\r\n- It's a new joint version\r\n- As we use a different value definition in our current implementation, it's hard to deploy the new version in a synchronised way, at least we could keep compatible if we use a new transport parameter.\r\n\r\nWhat do you think? Or maybe we should keep it unchanged until the WG is ready to adopt the draft?",
          "createdAt": "2021-10-22T06:07:07Z",
          "updatedAt": "2021-10-22T06:07:07Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it is fine to define a new value for the transport parameter, the 00 version of this draft is not yet out anyway.",
          "createdAt": "2021-10-22T07:07:03Z",
          "updatedAt": "2021-10-22T07:07:03Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, please use a new parameter.",
          "createdAt": "2021-10-23T05:36:24Z",
          "updatedAt": "2021-10-23T05:36:24Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created #49 to add one more sentence and a reference to the slides from the side meeting. I believe this is sufficient to address this issue for -00.",
          "createdAt": "2021-10-25T11:00:15Z",
          "updatedAt": "2021-10-25T11:00:15Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "I_kwDOGNtpaM49ZPRt",
      "title": "Multiple packet number spaces can be compatible with zero-length Connection IDs",
      "url": "https://github.com/quicwg/multipath/issues/27",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "design",
        "needs-discussion"
      ],
      "body": "Currently, the multiple packet number spaces proposal relies on the sequence number of the Connection ID when a non-zero connection ID is used. With non-zero-length Connection IDs at both ends, it is indeed possible that over a same path/5-tuple, the client reaches the server using a DCID with a sequence number that is different from the sequence number of the DCID used by the server to reach the client (e.g., Figure 2). In the current draft, we consider that if the connection ID is zero-length, the packet number space identifier is 0, and applying multiple packet number spaces is thus not possible.\r\n\r\nI believe we can do better than this. Consider the situation where the client uses a non-zero length DCID to reach the server while the server uses zero-length DCID. In this case, it is the client that initiates the usage of a path with path validation, associating a server-provided non-zero-length DCID to reach the server. Once the first client's packet reaches the server on the new path, the server can associate the client's 5-tuple to the sequence number of the used Destination Connection ID, making a valid Packet Number Space Identifier. The client can easily map incoming packets on the 5-tuple to the associated DCID sequence number.\r\n\r\nDoes this sound reasonable?",
      "createdAt": "2021-10-19T08:43:58Z",
      "updatedAt": "2022-07-07T09:40:29Z",
      "closedAt": "2022-07-07T09:40:29Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think there is room to find a solution here but as I understand it, currently the PN Space ID is independent on each side because the DID sequence number is as well. In order to realise an approach as you describe you need some kind of synchronisation on the used CID sequence numbers to avoid that the same number is used on both side. But such sync could be easy (e.g. use even and odd numbers) and maybe it would make sense...?",
          "createdAt": "2021-10-19T09:16:47Z",
          "updatedAt": "2021-10-19T09:16:47Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "When null-CID is used for the server->client direction, the client does not propose any CID nor use them. All the CID numbers are thus only provided by the server and there is no risk of confusion.",
          "createdAt": "2021-10-19T09:30:44Z",
          "updatedAt": "2021-10-19T09:30:44Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah right! Yes we should add that!",
          "createdAt": "2021-10-19T09:37:32Z",
          "updatedAt": "2021-10-19T09:37:32Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "I believe this design _may_ work, but I would be a bit sad that the client would have to support one mode of decryption when using a zero-length CID and another mode when it's not.\r\n\r\nAlso, I think there have been discussions of scenarios where the server may use zero-length CIDs too, maybe in the P2P scenarios. Things break down there, and it's not great to have a design where it breaks down in certain circumstances.",
          "createdAt": "2021-10-19T12:47:11Z",
          "updatedAt": "2021-10-19T12:47:11Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Ah right! Yes we should add that!\r\n\r\nIn the path identifier, we currently have three types. \r\n\r\n Path Identifier {\r\n    Identifier Type (i) = 0x00..0x02,\r\n    Path Identifier Content (i),\r\n  }\r\n\r\nWhen a client uses non-zero CID, but the server uses zero-length CID, type 0x02 should be used. What Olivier suggested was that we should also apply a similar strategy to the PN space identifier.\r\n ",
          "createdAt": "2021-10-19T20:30:04Z",
          "updatedAt": "2021-10-19T20:30:04Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The current proposal derives the nonce strictly from bytes in the packet. The decryption module only needs to know which CID belong to the connection and what is their CID sequence number. You could offload that. But if you want to use different encryption for different packets all with the same CID, you need some other context, such as addresses and port numbers. That will not work for the first packet received on a four tuple, or if in the case of NAT rebinding. Seems much more error prone.",
          "createdAt": "2021-10-20T02:28:46Z",
          "updatedAt": "2021-10-20T02:28:46Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also, let's be clear that receivers and senders always use different sequence numbers, even with tcp. I cannot see why this is a problem.",
          "createdAt": "2021-10-20T02:29:54Z",
          "updatedAt": "2021-10-20T02:29:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "In case of a NAT rebinding you should have a CID (from the client to server). However, you are right that this would mean that only the client can open new paths.",
          "createdAt": "2021-10-20T07:48:17Z",
          "updatedAt": "2021-10-20T07:48:17Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this issue @qdeconinck ?",
          "createdAt": "2022-07-06T14:01:09Z",
          "updatedAt": "2022-07-06T14:01:09Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given that #103 got merged, we can now close this.",
          "createdAt": "2022-07-07T09:40:29Z",
          "updatedAt": "2022-07-07T09:40:29Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOGNtpaM49nWKa",
      "title": "Use of client/server",
      "url": "https://github.com/quicwg/multipath/issues/31",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Due to the copying&pasting from different documents, we use sometimes client/server and sometimes endpoint/peer in the draft. If I understand everything correctly, both endpoint can open (start validation) and close paths, correct?\r\n\r\nThere I would propose to remove all instances of client/server from the draft (expect for the handshake negotiation part). I can do that but wanted to check first if that's the correct thing to do",
      "createdAt": "2021-10-22T15:50:38Z",
      "updatedAt": "2021-10-25T10:44:19Z",
      "closedAt": "2021-10-25T10:44:19Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No, that is not correct. Only the client can open new paths, per section 9 of RFC 9000:\r\n```\r\n   This document limits migration of connections to new client\r\n   addresses, except as described in Section 9.6.  Clients are\r\n   responsible for initiating all migrations.  Servers do not send non-\r\n   probing packets (see Section 9.1) toward a client address until they\r\n   see a non-probing packet from that address.  If a client receives\r\n   packets from an unknown server address, the client MUST discard these\r\n   packets.\r\n```",
          "createdAt": "2021-10-23T06:41:15Z",
          "updatedAt": "2021-10-23T06:41:15Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I know this text in RFC9000. I was wondering if we can release this restriction?\r\n\r\nFor migration all use cases assumped that the client would move (or be NATed). However for multiipath I think there are also use cases where the server side might have multiple paths (e.g. in the proxy case).\r\n\r\nSo could we remove this restriction just, or are there problem with that?",
          "createdAt": "2021-10-23T07:30:45Z",
          "updatedAt": "2021-10-23T07:30:45Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The restriction is due to general considerations about NAT traversal, server farms, etc. I think we agreed already that this kind of deviation from RFC 9000 belongs in a separate extension, much like unidirectional paths or discovery of alternate server addresses. It should not be negotiated as part of the \"multipath core\". I would rather see that as part of peer-to-peer extensions.",
          "createdAt": "2021-10-23T15:21:18Z",
          "updatedAt": "2021-10-23T15:21:18Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This restrictions makes sense for migration because you avoid the synchronisation problem what happen if both end try to migrate at the same time. However, this problem doesn't exist for multipath because if both end try to open a new path at the same time, you just open two paths. If there is no technical reason to keep this restriction, I don't still we should keep it artificially.",
          "createdAt": "2021-10-24T06:54:58Z",
          "updatedAt": "2021-10-24T06:54:58Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's not the only problem. Most clients are behind some kind of NAT or stateful firewall, which will only let a packet in if it saw a packet out from the same 5 tuple. In such scenarios, migration originating from the server will just fail. If you want to make them work, you have to get a cooperation between client and server. In the case of big cloud servers, the solution is something like the preferred address extension: the server tells the client that it can also be joined at an alternate address, and the client opens a path to that. In the case of peer to peer servers, the solution requires something like ICE. These are valuable things to do, but they should be described in an extension, not in the core document.",
          "createdAt": "2021-10-24T22:29:50Z",
          "updatedAt": "2021-10-24T22:30:39Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a problem for migration but if the server tries to open a path and it fails that just fine and not a problem. Signaling of alternative address to the client we already decided to leave to an extension. However, that still doesn't mean for me that we need to restrict the opening of new path to client.",
          "createdAt": "2021-10-25T08:39:28Z",
          "updatedAt": "2021-10-25T08:39:28Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "To address this point before the submission deadline, I think we should add something to the intro to clarify that new paths can only be opened by the client and maybe also say that this issue needs further discussion?\r\n\r\nI will anyway make a pass and check all use of the terms client/server but keep it where appropriate.\r\n\r\nRegarding path_abandon it seems okay to me that both ends can send it because it really just an indication that a certain path should not used anymore. I guess usually the client will send this, e g. due to a mobility event, but I don't see a reason to restrict this to the client only. I will propose some text to address issue #32 ",
          "createdAt": "2021-10-25T08:43:36Z",
          "updatedAt": "2021-10-25T08:43:36Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "In #32 I also changed one occasion of client/server. I think the other ones are fine (given the current restriction that paths can only be opened by the client). I will open a separate issue for this question but with the intention to solve it after submission of -00",
          "createdAt": "2021-10-25T10:44:19Z",
          "updatedAt": "2021-10-25T10:44:19Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOGNtpaM49nX22",
      "title": "Abandon needs clarification",
      "url": "https://github.com/quicwg/multipath/issues/32",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "The text says that both endpoint can send an abandon frame. However, if I understand the current text correctly it only says that the receiving peer of that frame can remove its state as the sender of the abandon frame indicated it will not send any more packets ion that path. However, the sender of the abandon frame can't remove its state until it also receives an abandon frame from the other end. That would mean a path can \"half-open\"... \r\n\r\nDo we need to say something that that the receiver of an abandon frame SHOULD also send an abandon frame in response? Or MAY? Or MUST?\r\n\r\nOr is the path considered completely closed as soon as an ACK for the packet containing the abandon frame is received? In this case we need to say that when an abandon frame is received, the receiver MUST not use that path anymore.\r\n\r\nI think we need to clarify that!\r\n\r\nPlease provide a PR or let me know what the intention was and I can write something!\r\n\r\n\r\n",
      "createdAt": "2021-10-22T15:58:37Z",
      "updatedAt": "2021-10-25T12:22:37Z",
      "closedAt": "2021-10-25T12:22:37Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For me, ABANDON_PATH means \"please stop sending on that path, I may soon stop listening\". The peer should definitely stop sending on that path. It may want to keep listening for a short time, because some packets may still be sent out of order. It may also want to keep some context to process acknowledgement of packets previously sent on that path. The general guidance is to to wait for something like 3xRTO before dropping path management resource.\r\n\r\nI don't think that we need symmetry, that both peers have to abandon the path before they can release resource. But we have to solve a potential path suicide problem. Suppose we have two paths, peer 1 abandons path #1, peer 2 abandon path #2. Now we have zero path, and the connection is closed -- unless the client promptly opens a new path #3. My original intention is that only the client ever sends an ABANDON_PATH, since only the client can initiate a new path, which dodges the path suicide issue. ",
          "createdAt": "2021-10-23T06:55:49Z",
          "updatedAt": "2021-10-23T06:55:49Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good questions! For me, the issue is that when an endpoint decides to close a path, it is probably due to that the path condition is getting worse, which also means that further communication on that path may fail. When we use non-zero CID, as we should have at least one path that is working (if no path is working, the connection will be closed), and we are not constraint to send PATH_ABANDON frame on the same path that we want to close, the sender should be able to receive the ACK of PATH_ABANDON. But when we use null CID, we use path_id_type 0x02, which refers to the path where the packet is coming from, and hence, we are constraint to send PATH_ABANDON on the same path we want to close. In such a case, it is likely that the ACK of PATH_ABANDON will not be received, resulting in the \"half-open\" problem. Therefore, we should say sth like \"when the sender moves into the \"ABANDON_SENT\" state, and after 3RTO, it should close the path even if it hasn't seen the PATH_ABANDON sent from its peer\". \r\n",
          "createdAt": "2021-10-23T07:05:08Z",
          "updatedAt": "2021-10-23T07:05:08Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also, regarding when a path is considered completely closed, the current intention is that a path is considered closed when both the sender-side and the receiver-side resources of that path are released. The sender-side resources can be readily released when PATH_ABANDON is acked (We may need to retransmit the path_abandon). The receiver-side resources are released when the RETIRE_CID frame is received. However, when zero-CID is used, it is possible that an endpoint is not going to receive any RETIRE_CID frames, so the receiver-side resources are released 3RTO after sending out the PATH_ABANDON.",
          "createdAt": "2021-10-23T07:20:13Z",
          "updatedAt": "2021-10-23T07:20:13Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created PR #46. I think this is the biggest issue we need to address and agree on before submission of -00. So please review @huitema @Yanmei-Liu @qdeconinck !",
          "createdAt": "2021-10-25T10:41:52Z",
          "updatedAt": "2021-10-25T10:41:52Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOGNtpaM49nYca",
      "title": "Basic Scheduling Guidance ",
      "url": "https://github.com/quicwg/multipath/issues/33",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "design"
      ],
      "body": "I have a sentence in the intro that this draft provide some basic scheduling guidance. I was think about something like: Data belonging to the same stream should be sent over the same path. If a new stream is opened, a packet is selected based on the current load (e.g. number of stream/max congestion window). Or something else?\r\n\r\nOr is the plan to really not say anything here?",
      "createdAt": "2021-10-22T16:01:19Z",
      "updatedAt": "2022-07-06T15:19:06Z",
      "closedAt": "2022-07-06T15:19:06Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How about we specify two basic modes according to steering and aggregation? For steering, we send data belonging to the same stream over the same path. For aggregation, we simply use round-robin to split data of the same stream over multiple paths. ",
          "createdAt": "2021-10-23T06:07:10Z",
          "updatedAt": "2021-10-23T06:07:10Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The same-stream same-path rule is actually counter-productive when sending a big file on a stream. I don't think it belongs in the \"basic scheduling guidance.\"",
          "createdAt": "2021-10-23T06:57:43Z",
          "updatedAt": "2021-10-23T06:57:43Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would suggest to leave scheduling outside of the first version of the draft and reference draft-bonaventure-iccrg-schedulers-01 that already contains generic discussion. I will resubmit this draft today (without changes) and we can update it to discuss multipath transport protocols in a generic draft. ",
          "createdAt": "2021-10-25T06:26:19Z",
          "updatedAt": "2021-10-25T06:26:19Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "There is already a reference to that draft. I don't think we need anything else for the -00 version but will leave this issue open for later eventually.",
          "createdAt": "2021-10-25T08:49:41Z",
          "updatedAt": "2021-10-25T08:49:41Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this issue or is there any more text we want to add to this draft?",
          "createdAt": "2022-01-11T12:28:55Z",
          "updatedAt": "2022-01-11T12:28:55Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm writing an overview section to briefly present multipath quic that could contain this information. I'll send a PR later this week.",
          "createdAt": "2022-01-11T15:57:03Z",
          "updatedAt": "2022-01-11T15:57:03Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@obonaventure I just commented on the PR. My suggestion is to move the scheduling text to a separate PR and merge it into the Packet Scheduling section that is already there later in the document, given there is now some redundancy anyway. Are you able to do that? Or should I give it a try to split up the PR?",
          "createdAt": "2022-03-03T17:03:20Z",
          "updatedAt": "2022-03-03T17:03:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Text from Olivier from older PR:\r\n\r\n```\r\nThe second algorithm that multipath QUIC applications will require is a packet scheduler (PS).\r\nThe PS is used when there are two or more paths that are active for a given multipath QUIC connection. In\r\nthis case, QUIC must select the path over which each frame will be sent. Many PS strategies\r\nare possible and the best one will depend on the application's requirements. The PS should\r\nhave access to (an abstraction of) the congestion control state of each path to be able to determine\r\nwhether a path has enough capacity to carry a new packet. The PS also needs to have access to the\r\npath's MTU as different paths do not necessarily have the same MTU. A simple PS is a round-robin\r\nscheduler that checks the congestion window of a path before sending a QUIC packet.\r\nAnother sample PS is an algorithm that selects the path whose congestion window is open and\r\nthat has the smallest round-trip-time. This is the PS used by the Linux implementation of Multipath\r\nTCP. Note that a multipath QUIC PS will probably treat control and data packets differently. For\r\nexample, a PS could favor low delay paths to send acknowledgments and higher bandwidth\r\nones for data packets. A companion draft\r\n{{I-D.bonaventure-iccrg-schedulers}} provides several general-purpose multipath\r\npacket schedulers. \r\n```",
          "createdAt": "2022-03-07T10:01:45Z",
          "updatedAt": "2022-03-07T10:01:45Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@qdeconinck also mention in the cal on March 7 that we need more guidance about scheduling of ACKs",
          "createdAt": "2022-03-07T10:02:17Z",
          "updatedAt": "2022-03-07T10:02:17Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I opened a new issue for the ACK guidance (#123) and am closing this one now.",
          "createdAt": "2022-07-06T15:19:06Z",
          "updatedAt": "2022-07-06T15:19:06Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOGNtpaM49ovzu",
      "title": "Text on number of CID and number of path should be common to single and multiple PN spaces",
      "url": "https://github.com/quicwg/multipath/issues/34",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We mention in the introduction that if a node uses non null CID, it must use different CID for different paths. This is true whether the peers negotiated single or multiple packet number spaces. The text about connection ID in the introduction of the multiple PN space section should be moved to a common section.",
      "createdAt": "2021-10-23T06:26:14Z",
      "updatedAt": "2021-10-25T00:13:50Z",
      "closedAt": "2021-10-25T00:13:50Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "In my editorial pass in #30 I already moved some of that text, so let me merge that first (after @Yanmei-Liu Yanmei and @qdeconinck Quentin have reviewer it).\r\n\r\nWhen that is merged and there is still something that needs to move, you could please indicate exactly which part you are talking about?",
          "createdAt": "2021-10-23T07:42:38Z",
          "updatedAt": "2021-10-23T07:42:38Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Edited text looks good, let's avoid one more last minute edit.",
          "createdAt": "2021-10-25T00:13:50Z",
          "updatedAt": "2021-10-25T00:13:50Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOGNtpaM49owAN",
      "title": "Path identifier type 2 unclear",
      "url": "https://github.com/quicwg/multipath/issues/35",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the \"path abandon\" frame, the path identifier is defined as:\r\n~~~\r\n  Path Identifier {\r\n    Identifier Type (i) = 0x00..0x02,\r\n    Path Identifier Content (i),\r\n  }\r\n~~~\r\nBut in the identifier type 2, the \"path identifier content\" is empty. We should fix that.",
      "createdAt": "2021-10-23T06:31:26Z",
      "updatedAt": "2021-10-25T08:24:40Z",
      "closedAt": "2021-10-25T08:24:40Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Submitted PR #37 for this issue.",
          "createdAt": "2021-10-24T18:35:11Z",
          "updatedAt": "2021-10-24T18:35:11Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "I_kwDOGNtpaM49qcY6",
      "title": "More editorial issues",
      "url": "https://github.com/quicwg/multipath/issues/39",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When I try to produce the draft, I get a number of warnings:\r\n```\r\nPS C:\\Users\\huite\\GitHub\\draft-lmbdhk-quic-multipath> kramdown-rfc2629 --v3 .\\draft-lmbdhk-quic-multipath.md > draft.xml\r\n\r\n*** Input contains HT (\"tab\") characters. Undefined behavior will ensue.\r\n*** overwriting RFC2119\r\n*** overwriting QUIC-TLS\r\nPS C:\\Users\\huite\\GitHub\\draft-lmbdhk-quic-multipath> xml2rfc --text draft.xml\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(12): Warning: Setting consensus=\"true\" for IETF STD document (this is not the schema default, but is the only value permitted for this type of document)\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(935): Warning: Unused reference: There seems to be no reference to [QUIC-Invariants] in the document\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(553): Warning: Artwork too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(553): Warning: Figure too wide, reducing indentation from 3 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(675): Warning: Artwork too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(675): Warning: Figure too wide, reducing indentation from 3 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(665): Warning: Section too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(574): Warning: Section too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(72): Warning: Middle too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(675): Warning: Too long line found (L940), 8 characters longer than 72 characters:\r\n    Type (i) = TBD-00..TBD-01 (experiments use 0xbaba00..0xbaba01 or 0x42..x43),\r\n Created file draft.txt\r\n ```\r\n\r\n\r\n",
      "createdAt": "2021-10-24T23:04:11Z",
      "updatedAt": "2021-10-25T08:26:39Z",
      "closedAt": "2021-10-25T08:26:39Z",
      "comments": []
    },
    {
      "number": 40,
      "id": "I_kwDOGNtpaM49qdFt",
      "title": "Should pick just one experimental value for ACK MP",
      "url": "https://github.com/quicwg/multipath/issues/40",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "The current text on the defintion of ACK MP says:\r\n```\r\n  ACK_MP frame is formatted as shown in Figure 6.\r\n\r\n  ACK_MP Frame {\r\n    Type (i) = TBD-00..TBD-01 (experiments use 0xbaba00..0xbaba01 or 0x42..x43),\r\n    Packet Number Space Identifier (i),\r\n    Largest Acknowledged (i),\r\n    ACK Delay (i),\r\n    ACK Range Count (i),\r\n    First ACK Range (i),\r\n    ACK Range (..) ...,\r\n    [ECN Counts (..)],\r\n  }\r\n```\r\nThe figure is too wide, and I am fixing that with issue #39, but really we should pick just one set of identifiers, not 2. I understand that draft-liu and draft-deconinck were using these two values, but we should pick one of them, or a third one.",
      "createdAt": "2021-10-24T23:16:48Z",
      "updatedAt": "2021-10-25T10:44:18Z",
      "closedAt": "2021-10-25T10:44:18Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I submitted PR #42 to fix this issue.",
          "createdAt": "2021-10-25T07:08:32Z",
          "updatedAt": "2021-10-25T07:08:32Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR #42 merged.",
          "createdAt": "2021-10-25T10:44:18Z",
          "updatedAt": "2021-10-25T10:44:18Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOGNtpaM49rpeL",
      "title": "Clarify in intro that multiple packet number spaces require use if CID in both directions (for now) ",
      "url": "https://github.com/quicwg/multipath/issues/43",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "I opened issue to make sure we don forget to address this and will close #4 instead.",
      "createdAt": "2021-10-25T08:48:08Z",
      "updatedAt": "2021-10-25T11:21:41Z",
      "closedAt": "2021-10-25T11:21:41Z",
      "comments": []
    },
    {
      "number": 47,
      "id": "I_kwDOGNtpaM49sIct",
      "title": "Should servers be allowed to open new paths?",
      "url": "https://github.com/quicwg/multipath/issues/47",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "separate draft",
        "design"
      ],
      "body": "In RFC9000 path migration is restricted to clients only, mainly because of problems with NATs which a) is the main use case to have migrations (address change at the client only) and b) could anyway cause failure for mitigation attempts from the server.\r\n\r\nHowever, with multipath, failure of opening a new path is less critical as the old path(s) is not abandon at the same time. Therefore we should further discussion if that restriction is still technical useful or if it can be released easily.\r\n\r\nThis issue was initially discussed as part of issue #31 ",
      "createdAt": "2021-10-25T10:49:06Z",
      "updatedAt": "2023-11-03T14:28:21Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think there might be also a security concern. Suppose a victim's address is advertised and the server attempts to open a new path with that address.",
          "createdAt": "2021-10-26T07:43:33Z",
          "updatedAt": "2021-10-26T07:43:33Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we want the server to be able to create a new path, we need to define a new frame that allows the client to advertise the addresses and port numbers that it listens to. This is not difficult and could allow an IPv4 server to advertise its IPv6 address, but my understanding was that such frames were outside the scope of the current draft and should be part of another draft. We can extract material from draft-deconinck-quic-multipath about address advertisement and propose another that in another draft if you think that this could be useful.",
          "createdAt": "2022-01-11T16:28:40Z",
          "updatedAt": "2022-01-11T16:28:40Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think we already agreed that address advertisement should be a separate draft. However, even if the server knows already another address of the client (e.g. by using some advertisement on the higher layer), currently the server is not allowed to open a new path. This restriction made sense for the use cases for migration and made life easier. However as long as you can still use the old path in the multipath case while waiting for path probing to success, I don't see a real risk in letting the server also open new paths.",
          "createdAt": "2022-01-11T18:31:16Z",
          "updatedAt": "2022-01-11T18:31:16Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would rather move that discussion to a separate draft, and keep the initial multipath draft aligned with RFC 9000.",
          "createdAt": "2022-01-11T21:40:31Z",
          "updatedAt": "2022-01-11T21:40:31Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think that this is necessarily something for a separate draft. If there is no good reason to keep this restriction, we should remove it. If there are good reasons we should at least document them. What are the reasons?",
          "createdAt": "2022-01-12T09:12:31Z",
          "updatedAt": "2022-01-12T09:12:31Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should discuss this at the next meeting!",
          "createdAt": "2022-03-03T17:04:58Z",
          "updatedAt": "2022-03-03T17:04:58Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "NONE",
          "body": "I agree with @huitema that this should be a separate draft, where server-initiated paths can be handled holistically. The multipath shouldn't be the place that concept gets introduced.",
          "createdAt": "2022-03-22T10:13:27Z",
          "updatedAt": "2022-03-22T10:13:27Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "At IETF-113 there were concerns about the implications of this change. While some people were interested in this to support additional use cases, there was also quite some feedback to rather leave that for another extension (maybe together with address discovery mechanism). In any case, more analysis of the implication is needed (e.g. review discussion about this restriction for RFC9000). Leaving this open for now for further discussion.",
          "createdAt": "2022-03-23T14:41:56Z",
          "updatedAt": "2022-03-23T14:41:56Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Revisiting this issue now, I agree on the fact that this should be a separate draft. On the other hand, the current draft proposal does not introduce any element that would prevent such server-initiated path in the future, so I suppose the current draft is going in the right direction.",
          "createdAt": "2023-03-10T14:28:30Z",
          "updatedAt": "2023-03-10T14:28:30Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOGNtpaM49sg7X",
      "title": "Sending non-probe packets before path validation complete",
      "url": "https://github.com/quicwg/multipath/issues/50",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "As we have 0-RTT transmission in QUIC-TRANSPORT, and path validation brings at lease one round-trip-time delay for data to be sent on the new path, can we add some mechanism to provide anti-amplification limitation and support this scenario?",
      "createdAt": "2021-10-25T12:31:26Z",
      "updatedAt": "2023-10-22T10:56:53Z",
      "closedAt": "2023-10-22T10:56:53Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@Yanmei-Liu do you have a proposal?",
          "createdAt": "2022-03-03T17:08:30Z",
          "updatedAt": "2022-03-03T17:08:30Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Feedback from IETF-113: This proposal needs a more clear use case. If you have a use case, please describe it here!",
          "createdAt": "2022-03-23T14:42:59Z",
          "updatedAt": "2022-03-23T14:42:59Z"
        },
        {
          "author": "ekinnear",
          "authorAssociation": "NONE",
          "body": "In most cases where it would matter, it seems like we can get path validation out of the way ahead of time, before we need a new path. \r\n\r\nIf you're trying to bring it up as part of 0-RTT/immediately, the amplification limit means that you potentially cannot send a full initial window of data, but you can still get started on slow start/getting that path up and running at the same time as you do path validation.\r\n\r\nAlso, shouldn't the packet sizing requirements help push the congestion window larger even if you're not yet using the path for non-probing packets and are just using padding? This is the same mechanism as how you can pre-warm a path for migration without needing to drop back to zero when you switch to the new path.",
          "createdAt": "2022-11-06T15:36:05Z",
          "updatedAt": "2022-11-06T15:36:05Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We may want to develop a security section a bit more. The only reason to send data frames immediately is the potential for reflection attacks if a peer can be induced to send data on an invalid path. There are degrees of fear. For example, if the destination address is already validated on another path and this is just the client trying sending from a different interface, then the fear-factor is very low. The only risk is that for some reason the new path will not work, causing retransmissions. The sender implementation may want to take the risk.\r\n\r\nOn the other hand, if this is a new destination address, the risk of DOSsing some innocent target is substantial, so maybe only send a minimum amount of traffic!",
          "createdAt": "2023-03-15T06:32:54Z",
          "updatedAt": "2023-03-15T06:32:54Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I am coming to the impression that we should just get rid of \"probing\" state altogether. That's an unnecessary complexity in Multipath.\r\n\r\nOf course, path validation is necessary when an endpoint sends packets to a new remote address. However, from the standpoint of security, there is no need to have \"probing\" state that forbids an endpoint from sending most types of frames.\r\n\r\nIIRC, the only reason we have the distinction of probing packets and non-probing packets in QUIC v1 is because QUIC v1 has only one loss recovery and congestion controller. As there is one, a QUIC v1 endpoint has to send signal that indicates to peer the change of the active path (i.e., the path that uses loss recovery and congestion controller) - that is what non-probing packets are used for.\r\n\r\nWith Multipath QUIC, we have per-path loss recovery and congestion control. Then, why do we have to keep the concept of \"probing\" and \"non-probing\" packets and frames at all?\r\n\r\nWe can just allow any types of frames to be sent even in the packets used to validate a new path, and call it a day.",
          "createdAt": "2023-07-03T01:22:38Z",
          "updatedAt": "2023-07-03T01:24:04Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That\u2019s an interesting idea, @kazuho! I like getting rid of the concept of probing and non-probing frames / packets.\r\n\r\nIt would probably make sense to recommend including a PATH_STATUS frame in the packet containing the PATH_CHALLENGE. Alternatively, we could also define a default status that applies if no PATH_STATUS has been sent yet (there\u2019s a discussion about that in #218).\r\n\r\nAt the very least, whatever we come up with needs to support the following two common scenarios:\r\n1. Establishing a \u201cbackup path\u201d: This is very common for mobile devices that might want to validate a cellular path even when they\u2019re connected to a strong WiFi. In that case, there needs to be a way to make sure that a clear preference for the WiFi path can be expressed.\r\n2. The \u201cparking lot\u201d case, i.e. a mobile device moving away from a WiFi, and wishing to switch to the cellular path asap. In that case, the client would want to communicate a preference for the new path, as soon as this new path is available and validated.\r\n\r\nIf I understand correctly, both scenarios are supported by using PATH_STATUS frames.",
          "createdAt": "2023-07-03T01:49:09Z",
          "updatedAt": "2023-07-03T01:49:09Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I also like this idea. If congestion control was the only reason for this differentiation, we don't need it anymore. And while it is a divergence from RFC9000, it probably rather a simplification.",
          "createdAt": "2023-07-04T14:36:58Z",
          "updatedAt": "2023-07-04T14:36:58Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like the suggestion of inserting a PATH_STATUS frame in the packet carrying the PATH_CHALLENGE. That's one of the areas in which RFC9000 is a bit weak. And I generally prefer having explicit statements like \"consider this pat available\" than implict statement like \"this path will be available if the client sends a frame of the right color\".",
          "createdAt": "2023-07-04T15:14:16Z",
          "updatedAt": "2023-07-04T15:14:16Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "I_kwDOGNtpaM49v64i",
      "title": "Mechanisms to avoid path timeout",
      "url": "https://github.com/quicwg/multipath/issues/51",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "The current draft says that \"Servers SHOULD stop sending traffic on paths through where no non-probing packet was received in the last 3 path RTTs\". However, it is possible that only a few data was generated in the past few RTTs due to app-limit conditions, and as a result, only one path was used. So I think, in section 3.2.3, we should suggest the use of some keep-alive mechanisms such as sending ping frames on a particular path if one is interested in keeping that path alive. Let me know what you think?",
      "createdAt": "2021-10-26T08:06:33Z",
      "updatedAt": "2021-11-05T06:30:22Z",
      "closedAt": "2021-11-05T06:30:22Z",
      "comments": [
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I fully agree this is an issue to be solved (#68).\r\n\r\nHowever, I think that before trying to find measures at the client side to take into account that server behavior, the text should provide a motivation for such restriction, especially that in typical scenarios the data is flying from the servers and that MP_ACK may be over any path \r\n\r\n```\r\n   ACK_MP frame Section 10.2 can be returned via either a different\r\n   path, or the same path identified by the Path Identifier, based on\r\n   different strategies of sending ACK_MP frames. \r\n```\r\n(BTW, s/ACK_MP frame Section 10.2/ACK_MP frame (Section 10.2)\r\n\r\nI'm afraid the use of keepalives may not work in scenarios where the external addresses are not local to the client (and thus has no control on the paths that will be used), e.g.,\r\n\r\n~~~~~\r\n                +----+\r\n                 | @1   \\\r\n  C---------R          ======S\r\n                 | @2    /\r\n                +-----+\r\n~~~~~\r\n\r\n* C/S negotiate multipathing by default.\r\n* R distributes the load based on a local policy.   \r\n* S/C uses PATH_CHALLENGE and PATH_RESPONSE to validate the paths.\r\n* C does not control the path that will be used by R when forwarding packets. \r\n\r\n\r\n\r\n",
          "createdAt": "2021-10-27T07:42:54Z",
          "updatedAt": "2021-10-27T07:47:30Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Med, I am not sure that I understand the scenario that you are describing. There is a router R balancing the load over two paths, and using some NAT like functionality to rewrite the client source address, and presumably the client's port number. This is not supported by either RFC 9000 or by our multipath draft.\r\n\r\nThe server will likely treat arrival from @1 and @2 as NAT rebinding, and the connection will end up using a single path. \r\n\r\n\r\n",
          "createdAt": "2021-10-27T15:47:12Z",
          "updatedAt": "2021-10-27T15:47:12Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "R is multi-homed with PA (Provider Assigned) mode . In such mode, R uses the appropriate source IP address when forwarding packets over a given network attachment. \r\n\r\nWith RFC9000, and depending on the distribution logic used by R (per packet, per flow, round robin, maximize bw usage, RTT-based optimization, ...), there will be a path oscillation for this connection as the server will keep proceeding with path migrations each time it sees a new address (@1, @2, @1, and so on). \r\n\r\nNow, if both the client and server negotiates multipath, we don't have anymore this oscillation and the connection will use more resources. However, prematurely closing the connection nullifies the benefits of using multipath.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-10-28T05:32:14Z",
          "updatedAt": "2021-10-28T05:32:14Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, we will still have oscillation even if the endpoints negotiate multipath. There is not difference of behavior with RFC 9000 here, this scenario will be processed as NAT rebinding.\r\n\r\nThis is not a supported scenario. QUIC is an end to end protocol. Intermediate routers cannot really tell whether the endpoints are supporting multipath, and should not depend on that. For that scenario to work, the alternate addresses @1 and @2 should be somehow managed by the client, and the client should be able to steer traffic towards one or the other.\r\n",
          "createdAt": "2021-10-28T06:17:55Z",
          "updatedAt": "2021-10-28T06:17:55Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> This is not a supported scenario. QUIC is an end to end protocol. Intermediate routers cannot really tell whether the endpoints are supporting multipath, and should not depend on that.\r\n\r\nSure, the connection is end-to-end. The intermediate routers **do not * interfere with the connection. However, an endpoint can still discover the availability of multiple paths (there are plenty mechanisms out there to discover the external IP addresses).\r\n\r\nEven without a discovery mechanism, many service offerings already allow controlling how flows are bound to external links (including bonding). Think about SDWAN, for example. These policies are configured on the CE router. \r\n\r\nIf this scenario is not supported in this version of the protocol, there should be an applicability section where the target deployments are called out. Some text may be considered to discuss concretely when the client can negotiate multipath activation based on that applicability. \r\n\r\nBack to the initial issue, I think that more motivation is needed to justify withdrawing a path too prematurely. \r\n\r\n\r\n",
          "createdAt": "2021-10-28T06:51:26Z",
          "updatedAt": "2021-10-28T06:51:26Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The middlebox design that you describe closely resembles address spoofing attacks against QUIC that we discussed and tried to mitigate during the design, so it is no surprise that QUIC does not really support it. It would also break TCP connections, which means it is probably not deployed yet. My advice would be to not try deploy that.",
          "createdAt": "2021-10-28T12:41:42Z",
          "updatedAt": "2021-10-28T12:42:08Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is deployed in (MP)TCP, but requires another proxy to glue the two connections and hide them to the sever. \r\n\r\nIn QUIC, we can have a much more cleaner design as the router does not have to interfere with the connection  + we avoid the second proxy. \r\n\r\nThat's said, I'm not pushing to have this included. We just need to be clear about the applicability scope.  \r\n",
          "createdAt": "2021-10-28T12:50:10Z",
          "updatedAt": "2021-10-28T12:50:10Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "By default, the applicability scope is the same as QUIC version 1.",
          "createdAt": "2021-10-28T12:55:05Z",
          "updatedAt": "2021-10-28T12:55:05Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "By default, the applicability scope is the same as QUIC version 1.",
          "createdAt": "2021-10-28T12:55:12Z",
          "updatedAt": "2021-10-28T12:55:12Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> By default, the applicability scope is the same as QUIC version 1.\r\n\r\nMaybe, but I think having an architecture figure to illustrate the basic multipath case that is covered would be helpful. \r\n\r\nBTW, there is nothing in the current design that prevents multipath QUIC to be established over the scenario we discussed. I admit this is a side effect, not a desired goal. \r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-10-28T13:18:47Z",
          "updatedAt": "2021-10-28T13:18:47Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's get back to the problem Yunfei mentioned, I just submitted PR #74 for it.\r\n\r\nBy the way, do we need a transport parameter to negotiate max path idle timeout? Like the connection max_idle_timeout in RFC9000, to prevent one of the endpoints end up the path too early...",
          "createdAt": "2021-11-03T09:48:59Z",
          "updatedAt": "2021-11-03T09:48:59Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Why would you have different max_idle_timeout for different paths?",
          "createdAt": "2021-11-03T09:54:22Z",
          "updatedAt": "2021-11-03T09:54:22Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Why would you have different max_idle_timeout for different paths?\r\n\r\nThe max_idle_timeout defined in RFC9000 is used to close whole connection, but not the path. In order to close an idle path more precisely, one might need sth like max_path_idle_timeout. I think we want all paths to have the same max_path_idle_timeout values, which is used to control when a path should be closed when no non-probing packets was received on that path. Another approach is to use PING frame to keep a path alive. ",
          "createdAt": "2021-11-04T08:19:04Z",
          "updatedAt": "2021-11-04T08:19:04Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOGNtpaM49wPGz",
      "title": "this approach requires the use of a connection ID",
      "url": "https://github.com/quicwg/multipath/issues/53",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "`While separate packet number spaces allow for more efficient ACK encoding, especially when paths have highly different latencies, this approach requires the use of a connection ID`\r\n\r\nNot sure to understand why the last part of the sentence is an issue. The use of zero-length connection IDs is problematic anyway in setups with NATs, for example. ",
      "createdAt": "2021-10-26T09:25:47Z",
      "updatedAt": "2021-11-04T15:39:42Z",
      "closedAt": "2021-11-04T15:39:42Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that in many deployments you want at least one CID from the client to server. Multiple packet numbers as currently defined however requires CIDs in both direction; there is separate issue #27 to discuss that.\r\n\r\nThe next sentence also further explains that there might be other deployments though, e.g. in constraint networks, that might also benefit from saving the bits of the CID.\r\n\r\nThis one sentence is of course only a very brief summary of the pros and cons of the different approach and more discussion is needed in the group. So I don't expect to have this part in the draft like this when we finally publish it as RFC.\r\n\r\nIs there anything in the issue that we need to address now? Or can we close this issue?",
          "createdAt": "2021-10-26T10:22:53Z",
          "updatedAt": "2021-10-26T10:22:53Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks, Mirja.\r\n\r\nThat's what I expected, but I do still think more elaboration is needed for this text to be useful. \r\n\r\nI would suggest to make this modification and leave the discussion of pros/cons to be adequately documented in Section 7:\r\n\r\nOLD:\r\n   This proposal supports the negotiation of either the use of one\r\n   packet number space for all paths or the use of separate packet\r\n   number spaces per path.  While separate packet number spaces allow\r\n   for more efficient ACK encoding, especially when paths have highly\r\n   different latencies, this approach requires the use of a connection\r\n   ID.  Therefore use of a single number space can be beneficial in\r\n   highly constrained networks that do not benefit from exposing the\r\n   connection ID in the header.  While both approaches are supported by\r\n   the specification in this version of the document, the intention for\r\n   the final publication of a multipath extension for QUIC is to choose\r\n   one option in order to avoid incompatibility.  More evaluation and\r\n   implementation experience is needed to select one approach before\r\n   final publication.  Some discussion about pros and cons can be found\r\n   here: https://github.com/mirjak/draft-lmbdhk-quic-\r\n   multipath/blob/master/presentations/PacketNumberSpace_s.pdf\r\n\r\nNEW:\r\n   This proposal supports the negotiation of either the use of one\r\n   packet number space for all paths or the use of separate packet\r\n   number spaces per path.  While both approaches are supported by\r\n   the specification in this version of the document, the intention for\r\n   the final publication of a multipath extension for QUIC is to choose\r\n   one option in order to avoid incompatibility.  More evaluation and\r\n   implementation experience is needed to select one approach before\r\n   final publication.  Some discussion about pros and cons can be found\r\n   here: https://github.com/mirjak/draft-lmbdhk-quic-\r\n   multipath/blob/master/presentations/PacketNumberSpace_s.pdf",
          "createdAt": "2021-10-26T11:12:02Z",
          "updatedAt": "2021-10-26T11:12:02Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You are suggesting to strike out the sentences that try to summarize the differences, _\"While separate packet number spaces allow for more efficient ACK encoding, especially when paths have highly different latencies, this approach requires the use of a connectionID. Therefore use of a single number space can be beneficial in highly constrained networks that do not benefit from exposing the connection ID in the header.\"_\r\n\r\nI think that's a good idea. The sentences are a short summary of the arguments presented in the powerpoint, which are not limited to \"_highly constrained networks_\". For example, the Chrome browser, by default, uses NULL CID. I may be placing words in the mouth of Google developers, but I believe their goal is to reduce the overhead of the QUIC header compared to TCP/TLS. This is related to a general quest for performance, not to network constraints.",
          "createdAt": "2021-10-26T19:04:27Z",
          "updatedAt": "2021-10-26T19:04:27Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "I_kwDOGNtpaM49xL55",
      "title": "Path Initiation",
      "url": "https://github.com/quicwg/multipath/issues/56",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> When the multipath option is negotiated, clients that want to use an additional path MUST first initiate the Address Validation procedure with PATH_CHALLENGE and PATH_RESPONSE frames described in Section 8 of {{QUIC-TRANSPORT}}.\r\n\r\nThere are two cases: \r\n* the client uses a distinct source IP address and/or port number: in such case, Address validation does not make sense. \r\n* the client uses a distinct destination IP address and/or port number: I guess this is what is covered in the excerpt. If that's the case, this assumes that the client has discovered a distinct destination IP address/port number (either by some means or that the server has used these address/port).\r\n\r\nI think some elaboration is needed. ",
      "createdAt": "2021-10-26T13:30:36Z",
      "updatedAt": "2021-11-05T06:33:12Z",
      "closedAt": "2021-11-05T06:33:12Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is deliberately left out of the document. What we have now is a simple reference to RFC 9000 -- paths are established in exactly the same way, adding more details would just create confusion. The consensus is that we may very well want to have extensions there, more ways to find addresses, etc., and that those should be detailed in a companion RFC.",
          "createdAt": "2021-10-26T16:00:46Z",
          "updatedAt": "2021-10-26T16:00:46Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see a difference for those two cases. In both cases you need to validate the path and make sure both directions are reachable and that the client address is not spoofed which could otherwise be used as an attack against the spoofed address. This is what path validation does.\r\n\r\nAlso, address discovery is not considered as part of the core functionality, as Christian mentions and as the intro says, but the assumption is that if a client has an out-of band way to learn a new server IP address, it can open a new path to that address.\r\n",
          "createdAt": "2021-10-26T16:31:36Z",
          "updatedAt": "2021-10-26T16:31:36Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On the other hand, in these days of geographic distribution, server farms and load balancers, \"an out-of band way to learn a new server IP address\" has to be somewhat more sophisticated than looking up a list of addresses in the DNS... But yes, if the client tries a new server address and gets it right, there is no reason the core multipath would not work.",
          "createdAt": "2021-10-26T16:37:19Z",
          "updatedAt": "2021-10-26T16:37:19Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually \"out-of-band\" was probably the wrong. The server could tell the client about a new IP address on the application layer...",
          "createdAt": "2021-10-26T16:53:47Z",
          "updatedAt": "2021-10-26T16:53:47Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> \r\n> \r\n> This is deliberately left out of the document. What we have now is a simple reference to RFC 9000 -- paths are established in exactly the same way, adding more details would just create confusion. The consensus is that we may very well want to have extensions there, more ways to find addresses, etc., and that those should be detailed in a companion RFC.\r\n\r\nThanks for the clarification. The case I'm concerned about is not the second case in my initial comment, but the first one. A client may have the knowlegde of the local addresses. I don't see how path validation from the client side applies for this case.  ",
          "createdAt": "2021-10-27T05:36:46Z",
          "updatedAt": "2021-10-27T05:36:46Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Thanks for the clarification. The case I'm concerned about is not the second case in my initial comment, but the first one. A client may have the knowlegde of the local addresses. I don't see how path validation from the client side applies for this case.\r\n\r\nIn the first case, path validation from the server side check the reachability of the client new address. Endpoints do path validation in both directions when initializing new path, as the same in section 8.2 of RFC 9000. You can find the whole work flow in the first figure of Section Example.\r\n",
          "createdAt": "2021-11-03T08:19:19Z",
          "updatedAt": "2021-11-03T08:19:19Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "I_kwDOGNtpaM49x6I8",
      "title": "Use structured references to section of other documents",
      "url": "https://github.com/quicwg/multipath/issues/58",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has PR"
      ],
      "body": "The draft is using old style references, such as \"section 9 of {{RFC9000}}\". Version 3 of XML2RFC defines a structure way to do that, such as: `<xref section=\"9\" sectionFormat=\"of\" target=\"RFC9000\"/>`, which can be expressed in recent versions of Markdown as `{{Section 9 of RFC9000}}`. The new style references don't change the text version much, but in the HTML rendering they generate direct references to the target section, which is nice for the readers.",
      "createdAt": "2021-10-26T16:10:41Z",
      "updatedAt": "2021-10-29T15:00:05Z",
      "closedAt": "2021-10-29T15:00:05Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, that's my fault because of my local build system. Will fix this for the next revision...",
          "createdAt": "2021-10-26T16:32:34Z",
          "updatedAt": "2021-10-26T16:32:34Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOGNtpaM49x7Kp",
      "title": "Inconsistent use of multi-path and multipath",
      "url": "https://github.com/quicwg/multipath/issues/59",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has PR"
      ],
      "body": "@boucadair flagged in his PRs that there are many places using hyphenated \"multi-path\" and many using \"multipath\". We need to fix that.",
      "createdAt": "2021-10-26T16:14:58Z",
      "updatedAt": "2021-11-04T05:55:53Z",
      "closedAt": "2021-11-04T05:55:53Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is due to the merge of the different drafts. I thought I fixed most of them, but I guess I could have done a search :-) Will do",
          "createdAt": "2021-10-26T16:33:46Z",
          "updatedAt": "2021-10-26T16:33:46Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOGNtpaM49x7nO",
      "title": "Lines in markdown text are too long",
      "url": "https://github.com/quicwg/multipath/issues/60",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "There are many isntances in the markdown source where a whole paragraph is entered in a single line of text. This makes the reviewing harder, and messes up the \"what changed\" view when reviewing PRs.",
      "createdAt": "2021-10-26T16:16:49Z",
      "updatedAt": "2021-11-02T12:32:11Z",
      "closedAt": "2021-11-02T12:32:11Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just to be on the same page, how should we format the text? I see two possible ways.\r\n\r\n- Hard-constraint the number of characters per line to a given limit (e.g., 80)\r\n- Make one sentence = one line\r\n\r\nI have a slight preference for option 2, but I can of course live with the other or a mix of both.",
          "createdAt": "2021-10-27T06:21:52Z",
          "updatedAt": "2021-10-27T06:21:52Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would prefer something like 72 characters, because the last 8 positions are used for numbering the cards in your deck. ",
          "createdAt": "2021-10-27T06:55:57Z",
          "updatedAt": "2021-10-27T06:55:57Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "I_kwDOGNtpaM49zfQV",
      "title": "Mixed use of ACK_MP and MP_ACK",
      "url": "https://github.com/quicwg/multipath/issues/61",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the current draft, we are having two names of multi-path ACK. I think we should stick to just one.",
      "createdAt": "2021-10-27T02:30:42Z",
      "updatedAt": "2021-10-31T14:51:54Z",
      "closedAt": "2021-10-31T14:51:54Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have a slight preference for ACK_MP, on the model of ACK_ECN.",
          "createdAt": "2021-10-27T04:43:28Z",
          "updatedAt": "2021-10-27T04:43:28Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I submitted PR #62 to fix this.",
          "createdAt": "2021-10-27T05:00:33Z",
          "updatedAt": "2021-10-27T05:00:33Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would be consistent in how the I-D identifies MP additions vs. RFC9000. \r\n\r\nGiven that the document uses MP_CONNECTION_ERROR and MP_PROTOCOL_VIOLATION, I have a preference for MP_ACK.",
          "createdAt": "2021-10-28T05:36:56Z",
          "updatedAt": "2021-10-28T05:36:56Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "I_kwDOGNtpaM49z2LI",
      "title": "Add \"Path\" to the terminology section",
      "url": "https://github.com/quicwg/multipath/issues/63",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "Consider adding this entry to the terminology section:\r\n\r\n`- Path: refers to the 4-tuple {source IP address, source port number, destination IP address, destination port number}. A path refers to \"network path\" used in {{QUIC-TRANSPORT}}.`\r\n\r\nThis also clarifies the link with \"network path\" in RFC9000.",
      "createdAt": "2021-10-27T05:47:43Z",
      "updatedAt": "2022-01-12T09:19:43Z",
      "closedAt": "2022-01-12T09:19:42Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-01-12T09:19:42Z",
          "updatedAt": "2022-01-12T09:19:42Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "I_kwDOGNtpaM49z3Ha",
      "title": "Mention the exact section whenever RFC9000 is cited",
      "url": "https://github.com/quicwg/multipath/issues/64",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC9000 is cited massively in the draft. It would be helpful to indicate to the reader where to look by indicating the section. \r\n\r\nSome change examples are provided below: \r\n```\r\n\r\nOLD:\r\n`We assume that the reader is familiar with the terminology used in {{QUIC-TRANSPORT}}.`\r\n\r\nNEW:\r\n`We assume that the reader is familiar with the terminology used in {{QUIC-TRANSPORT}} (Section 1.2, in particular).`\r\n```\r\n\r\n```\r\nOLD:\r\n`RTT measurements and PMTU discovery should be per-path (following {{QUIC-TRANSPORT}})`\r\n\r\nNEW:\r\n`RTT measurements and PMTU discovery should `be` per-path (Section 14 of {{QUIC-TRANSPORT}})`\r\n```\r\n\r\nand so on.",
      "createdAt": "2021-10-27T05:55:15Z",
      "updatedAt": "2021-10-29T15:00:05Z",
      "closedAt": "2021-10-29T15:00:05Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Side comment -- please see issue #58 about the use of XML2RFC v3 syntax for links.\r\n\r\nWe can do some of that, but not necessarily everywhere. We do expect that readers are familiar with QUIC V1. If we want to say \"we are just in line with QUIC V1\", then a global reference to RFC 9000 should suffice. If we want to say \"please read this text in QUIC V1, we don't want to replicate here\", then yes, we should refer to the specific section.",
          "createdAt": "2021-10-27T06:22:55Z",
          "updatedAt": "2021-10-27T06:22:55Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks, Christian. That's the intent. ",
          "createdAt": "2021-10-28T05:37:46Z",
          "updatedAt": "2021-10-28T05:37:46Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "I_kwDOGNtpaM49z3aH",
      "title": "QUIC version 1 (very minor)",
      "url": "https://github.com/quicwg/multipath/issues/65",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "In order to be consistent with RFC9000, use \"QUIC version 1\" instead of \"QUIC v1\" through the document. \r\n\r\n\r\n\r\n",
      "createdAt": "2021-10-27T05:57:32Z",
      "updatedAt": "2021-10-28T13:16:17Z",
      "closedAt": "2021-10-28T13:16:17Z",
      "comments": []
    },
    {
      "number": 66,
      "id": "I_kwDOGNtpaM49z6Xt",
      "title": "Handshake Negotiation",
      "url": "https://github.com/quicwg/multipath/issues/66",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "* Lack of the reference to Section 7.4/Section 7.4.2 of 9000 where the general handling of (new) transport parameters is discussed. \r\n\r\n* When the new transport parameter is not present, this does not necessarily mean multipath is not supported as it can be supported, but disabled (for this connection as a function of local policy). I would update this text\r\n\r\n```\r\nOLD: \r\nIf the peer does not carry the enable_multipath transport parameter, which means the peer does not\r\nsupport multipath\r\n```\r\n",
      "createdAt": "2021-10-27T06:16:00Z",
      "updatedAt": "2021-10-28T07:06:45Z",
      "closedAt": "2021-10-28T07:06:45Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The absence of the parameter does indeed indicate that the peer will not support multipath for this connection. But yes, the current text does not read too well. I think we should simplify and just say the same as QUIc V1, i.e. \"Transport parameters have a default value of 0 if the transport parameter is absent\". So something like:\r\n```\r\nIf the transport parameter is absent, the value 0 is assumed, i.e., no support for multipath.\r\nEndpoint MUST fallback to {{QUIC-TRANSPORT}} with single path and MUST NOT use\r\nany frame or mechanism defined in this document.\r\n```\r\n\r\n\r\n",
          "createdAt": "2021-10-27T06:34:01Z",
          "updatedAt": "2021-10-27T06:34:01Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The negotiation only refers to \"support for this connection\". We cannot make any statement about whether the same server might negotiate the feature in another connection attempt. There is no practical difference between \"not supported\" and \"supported, but disabled\". It could very well be for example that some server in a farm support the feature and some don't.",
          "createdAt": "2021-10-27T06:54:05Z",
          "updatedAt": "2021-10-27T06:54:05Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@boucadair, please review PR #67 ",
          "createdAt": "2021-10-27T06:57:23Z",
          "updatedAt": "2021-10-27T06:57:23Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "I_kwDOGNtpaM490ErH",
      "title": "Servers stop using a path",
      "url": "https://github.com/quicwg/multipath/issues/68",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I wonder whether this behavior would nullify the activation of multipath in some cases (e.g., backup purposes or when MP_ACKs are not sent over the same path).  \r\n\r\n```\r\n Servers\r\n   SHOULD stop sending traffic on paths through where no non-probing\r\n   packet was received in the last 3 path RTTs, but MAY ignore that rule\r\n   if it would disqualify all available paths.\r\n```\r\n\r\nThe implication on the client should be discussed, especially that the I-D says: \r\n\r\n```\r\n   ACK_MP frame Section 10.2 can be returned via either a different\r\n   path, or the same path identified by the Path Identifier, based on\r\n   different strategies of sending ACK_MP frames.\r\n```\r\n(BTW, s/ACK_MP frame Section 10.2/ACK_MP frame (Section 10.2) ",
      "createdAt": "2021-10-27T07:16:46Z",
      "updatedAt": "2021-10-27T07:22:52Z",
      "closedAt": "2021-10-27T07:22:52Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think there is already issue #51 that discusses this. The idea would be to periodically trigger a PING frame when the path is \"unused\".",
          "createdAt": "2021-10-27T07:19:37Z",
          "updatedAt": "2021-10-27T07:19:37Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks @qdeconinck. Will move my comments there. ",
          "createdAt": "2021-10-27T07:22:52Z",
          "updatedAt": "2021-10-27T07:22:52Z"
        }
      ]
    },
    {
      "number": 75,
      "id": "I_kwDOGNtpaM4-WSyw",
      "title": "Handshake negotiation: what does \"Allowed server responses\" mean",
      "url": "https://github.com/quicwg/multipath/issues/75",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "In Section 2 you define a transport parameter and set of values. These are presented in a table with a column header \"Allowed server responses\", what does that mean? One way to read this is that it implies servers would tailor their Transport Parameters to the value sent by the client but that's conflicting with our philosophy that TPs are unilateral declarations, not active negotiation.\r\n\r\nSo the question for me is, is this just a wording issue or a design one?",
      "createdAt": "2021-11-05T16:29:58Z",
      "updatedAt": "2021-11-06T08:30:49Z",
      "closedAt": "2021-11-06T08:30:49Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this mainly means that server are not allow to send 0x3. However, if the client sends 0x3, the server's reply will impact the client behaviour for 1-RTT packets. Is that a negotiation? However, keep in mind that the intention is not to publish this as it.",
          "createdAt": "2021-11-05T16:34:37Z",
          "updatedAt": "2021-11-05T16:34:37Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "unilateral negotiation is ok by me. If that's the intent then maybe just rewording of the table to be clariy it is a matrix of combinations is ok, and state somewhere that server 0x3 is illegal.\r\n\r\n> keep in mind that the intention is not to publish this as it.\r\n\r\ndo you mean not to adopt the draft with this type of TP, or the final RFC? I think better clarity is needed for implementation and experiementation as we try and answer the PN question",
          "createdAt": "2021-11-05T16:53:48Z",
          "updatedAt": "2021-11-05T16:53:48Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@LPardue that's my fault. I wrote that table based on my implementation, in which the server response does depend on the client proposal. We should replace it by a matrix showing what is expected if the client proposes 0-1-2-3 and the server 0-1-2-3. The only problematic case is \"3 and 3\", and we should simply state what happens there.",
          "createdAt": "2021-11-05T17:01:47Z",
          "updatedAt": "2021-11-05T17:01:47Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@LPardue please review PR #76",
          "createdAt": "2021-11-05T17:47:41Z",
          "updatedAt": "2021-11-05T17:47:41Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "@huitema thanks for the clarification, the new text makes the intent much more clear IMO.",
          "createdAt": "2021-11-05T18:03:45Z",
          "updatedAt": "2021-11-05T18:03:45Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Just to clarify, we are not intending to have this in the final *RFC*. We would like to have it adopted as it to enable more experimentation.",
          "createdAt": "2021-11-05T19:38:39Z",
          "updatedAt": "2021-11-05T19:38:39Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "thanks @mirjak that also works for me!",
          "createdAt": "2021-11-05T19:51:43Z",
          "updatedAt": "2021-11-05T19:51:43Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "I_kwDOGNtpaM4-X7jr",
      "title": "Do we need ack frequency control per path?",
      "url": "https://github.com/quicwg/multipath/issues/77",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "separate draft"
      ],
      "body": "In our testing, one thing worth noticing is that for different sim cards, the uplink/downlink ratio can be quite different. For example, with a China Mobile 4G card, we measured a downlink at 35Mbps and an uplink at 3Mbps, while with a China Telecom 4G card, we measured a downlink at 45Mbps and an uplink at 23Mbps at the same time in the same spot. \r\n\r\nIf we want to measure RTT more precisely, we let ACK return from the same path. However, because some sim cards are more asymmetrical than the others, it introduced a question, do we want ack frequency control per path?\r\n\r\nIn the QUIC ack-frequency draft, one of the motivations is to handle link asymmetry such that the link throughput won't be constraint by ack packets in the reverse direction. My understanding is that some 5G IoT cards can be more asymmetrical, so do we want to add a mechanism to address this issue? What do you think?",
      "createdAt": "2021-11-06T08:27:09Z",
      "updatedAt": "2022-07-06T15:20:50Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is likely rather a separate extension. There are actually two questions here: 1) the per-path ack frequency and 2) guidance on which path to use for acks. ",
          "createdAt": "2022-01-11T12:22:45Z",
          "updatedAt": "2022-01-11T18:44:31Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that 1) should be an extension of the draft-ietf-quic-ack-frequency. 2) probably deserves some further discussion in the current draft (maybe track this in #33?).",
          "createdAt": "2022-01-11T15:17:13Z",
          "updatedAt": "2022-01-11T15:17:13Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Might be best to open a new separate issue on guidance for sending acks.",
          "createdAt": "2022-01-11T18:45:01Z",
          "updatedAt": "2022-01-11T18:45:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "opened issue #123  now for ACK guidance. ",
          "createdAt": "2022-07-06T15:20:50Z",
          "updatedAt": "2022-07-06T15:20:50Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "I_kwDOGNtpaM4-nJlM",
      "title": "[single packet number space] talk about ack delay measurement",
      "url": "https://github.com/quicwg/multipath/issues/79",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "To estimate path delay accurately, loss recovery of QUIC utilizes the ACK Delay field of ACK frame (see [RFC 9002; section 5.3.2](https://quicwg.org/base-drafts/rfc9002.html#section-5.3-2)).\r\n\r\nHowever, when single packet number space is being used, it is difficult for the sender to obtain ACK Delay for all the paths being used, because ACK Delay is reported only for the packet carrying the largest packet number. It is the only the ACK delay of the path with shortest path-delay that can be reported.\r\n\r\nI think it might be a good idea to acknowledge this shortcoming in the documentation, so that we do not miss the downside when we compare the approaches (or when we try to address the shortcomings of the single packet number space approach).",
      "createdAt": "2021-11-11T00:25:58Z",
      "updatedAt": "2022-01-19T11:20:53Z",
      "closedAt": "2022-01-19T11:20:53Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that this issue should be addressed in the current draft. Regarding the problem itself, I think using the one-way timestamp can solve this problem for single PN.",
          "createdAt": "2021-11-11T07:50:54Z",
          "updatedAt": "2021-11-11T07:50:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this is discussed in section 5: https://mirjak.github.io/draft-lmbdhk-quic-multipath/draft-lmbdhk-quic-multipath.html#name-computing-path-rtt\r\n\r\nCan you propose a PR if you think more text is useful?!",
          "createdAt": "2022-01-11T12:36:13Z",
          "updatedAt": "2022-01-11T12:36:22Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think Section 5 should relate to both packet number space designs, while this issue is specific to one. I summarised the discussion in #85.",
          "createdAt": "2022-01-11T15:53:59Z",
          "updatedAt": "2022-01-11T15:53:59Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "We move section 5 from the single packet number section into an own section, as we agreed that it is applicable to both cases as we don't require ack to be send on the same path and the packet was received.\r\n\r\nI also don't understand the point about being only able to measure the shortest path with a single PN space. It kind of randomly depends on with packet you ack as discussed in section 5.\r\n\r\nIf we want to add some additional consideration we should probably add them to section 5.",
          "createdAt": "2022-01-11T18:36:43Z",
          "updatedAt": "2022-01-11T18:36:43Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, there is an issue with single space here. Suppose that the sender sends packets 1 and later 3 on path long delay path A, packets 2 and later 4 on short delay path B. The receiver will get the packets in the order 2, 1, 4, 2. The ACK will be:\r\n\r\n* ACK, highest = 2. Ack delay = time ACK sent minus time 2 received.\r\n* ACK, highest = 2, also ACK 1. Ack delay = time ACK sent minus time 2 received.\r\n* ACK, highest = 4, also ACK 2 and 1. Ack delay = time ACK sent minus time 4 received.\r\n* ACK, highest = 4, also ACK 3, 2 and 1. Ack delay = time ACK sent minus time 4 received.\r\n\r\nThe RTT of path B will be evaluated precisely, with the help of the ACK delay. The RTT of path A will be evaluated less precisely. When the ACK of 2 and 1 is received, the sender cannot use the ACK delay to narrow the estimate of the RTT of path A. Same for packet 4.",
          "createdAt": "2022-01-11T21:35:47Z",
          "updatedAt": "2022-01-11T21:35:47Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "I_kwDOGNtpaM4_iJx8",
      "title": "Stream scheduling",
      "url": "https://github.com/quicwg/multipath/issues/81",
      "state": "CLOSED",
      "author": "markusa",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "separate draft"
      ],
      "body": "As RFC9000 provides the handling of streams, I wonder if a MP-QUIC has to consider this as well, at least in a section similar to the exisiting \"Packet scheduling\" one?\r\n\r\nTo become more precise, assuming within one MP-QUIC connection the availability of different streams with different demands. Maybe one stream is \"best effort\", while another is latency critical and expects in-order devilery. In a multipath scenario using a DSL and a cellular access, there might be the wish to send the latency critical stream through DSL prioritized over other streams, while the \"best effort\" stream then keeps access to the remaining DSL capacity + the cellular capacity.",
      "createdAt": "2021-11-29T11:20:16Z",
      "updatedAt": "2022-01-20T08:01:34Z",
      "closedAt": "2022-01-20T08:01:33Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We discussed stream scheduling in the sec.7.3 of the previous draft https://datatracker.ietf.org/doc/html/draft-liu-multipath-quic-04. I agree, in practice, what you mention is important, and in our implementation, we use stream group that consists of streams of different policies. The reason we did not discuss the issue in the new draft was that we were trying to focus on the most fundamental issues of multi-path. I think the scheduling part are considered as more advanced features of multi-path, which may be addressed in an extension draft.",
          "createdAt": "2021-11-30T09:11:12Z",
          "updatedAt": "2021-11-30T09:11:12Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, detailed scheduling algorithms are out-of scope for this document. However, I think it could be useful that add a sentence to the packet scheduling section saying that stream-aware scheduling is likely beneficial. ",
          "createdAt": "2021-11-30T10:45:07Z",
          "updatedAt": "2021-11-30T10:45:07Z"
        },
        {
          "author": "markusa",
          "authorAssociation": "NONE",
          "body": "@mirjak I wonder in generell how you want to perform path and stream scheduling without having indications about path/stream priorities and availability which can be used then from the stream/path scheduling process, also at the far-end?\r\nLook for example at MPTCP RFC8684 MP_PRIO as well as the backup bit, or compare it to the enhanced definition for MP_PRIO in MP-DCCP https://datatracker.ietf.org/doc/html/draft-ietf-tsvwg-multipath-dccp-02#section-3.2.10.",
          "createdAt": "2021-11-30T14:06:56Z",
          "updatedAt": "2021-11-30T14:06:56Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Without any additional knowledge it's a sender side decision which path to use. If you want to provide any additional input from the receiver side, this should be a separate extension.",
          "createdAt": "2021-11-30T14:44:17Z",
          "updatedAt": "2021-11-30T14:44:17Z"
        },
        {
          "author": "markusa",
          "authorAssociation": "NONE",
          "body": "Shouldn't be the exchange of path/stream prios be a fundamental part of a MP protocol?\r\nI wonder if delegating too much, especially fundamental things, into follow-up extensions will cause confusion and complexity.",
          "createdAt": "2021-12-02T10:24:12Z",
          "updatedAt": "2021-12-02T10:24:12Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Different applications use streams in different ways, and that can lead to very different solutions. For example, you may have a mental model of an application use one stream for video, another for audio, and another for data, but there are applications that use one separate stream for each video frame, leading to very different ways of doing scheduling. Or, we see what Ali Baba has done for video download, using redundant transmission on multiple paths to minimize buffering of videos. That's very interesting, but is very different from simply scheduling streams on specific paths. \r\n\r\nWe are barely scratching the surface of what can be possible. Scheduling decisions depend on applications, and applications are not blocked. Information about priorities, expected completion time and the like can be carried in application protocols. Nothing stops developers of QUIC stack from providing applications with scheduling control APIs. Delaying standardization of scheduling will not stop deployments. It seems prudent to not standardize too soon.\r\n",
          "createdAt": "2021-12-02T17:41:21Z",
          "updatedAt": "2021-12-02T17:41:21Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We can adapt https://datatracker.ietf.org/doc/draft-bonaventure-iccrg-schedulers/ and submit it to the QUIC WG to discuss those issues in a separate draft.",
          "createdAt": "2022-01-11T15:55:38Z",
          "updatedAt": "2022-01-11T15:55:38Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that this belongs in a separate draft.",
          "createdAt": "2022-01-11T21:37:37Z",
          "updatedAt": "2022-01-11T21:37:37Z"
        },
        {
          "author": "markusa",
          "authorAssociation": "NONE",
          "body": "@obonaventure happy to help here, if I can.",
          "createdAt": "2022-01-20T08:01:33Z",
          "updatedAt": "2022-01-20T08:01:33Z"
        }
      ]
    },
    {
      "number": 86,
      "id": "I_kwDOGNtpaM5Bhtou",
      "title": "Stream-level and flow-level controls",
      "url": "https://github.com/quicwg/multipath/issues/86",
      "state": "OPEN",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "separate draft"
      ],
      "body": "QUIC defines different ways that enable a host to control the amount of data that the other host can transmit at the connection level (MAX_DATA) and at the stream level (MAX_STREAMS and MAX_STREAMS_DATA).\r\n\r\nThe MAX_STREAMS and MAX_STREAMS_DATA relate to the connection and should not be affected by the fact that it uses multiple paths.\r\n\r\nFor MAX_DATA, the situation is a bit different. There are deployments and applications that would like to restrict the amount of data or bandwidth that is sent on a given path. A typical example is a smartphone that does not want to use too much data on cellular but has no restriction on WiFi. As in MPTCP, we need a connection-level MAX_DATA that limits the amount of data which can be in flight. In MPTCP, this corresponds to the receive window and the same window is advertised over all subflows. We could not do better than this within the IETF. \r\n\r\nIn MPQUIC, there is an opportunity to send a per-path MAX_DATA to restrict the utilization of a path or define other control frames to specify the maximum allowed bandwidth per path. \r\n\r\nWe might discuss whether we should include this functionality in version 1 or leave it to another draft.\r\n\r\n",
      "createdAt": "2022-01-11T16:10:36Z",
      "updatedAt": "2022-01-12T10:35:30Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it is useful to restrict the amount of data on a particular interface. But I am not sure if the best way is per-path MAX_DATA. For example, a path on a 4G interface can be teared down and setup multiple times during the lifetime of a connection. I guess the real purpose here is to put a limit on the total amount of data sent an interface, rather than a path with a particular path ID ? It seems difficult to calculate a per-path quota in advance, since we don't know how many times we are going to abandon and re-establish a path on that interface.",
          "createdAt": "2022-01-11T23:56:27Z",
          "updatedAt": "2022-01-11T23:56:27Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "MAX DATA is not at all equivalent to the flow control in TCP. For example, it only applies to the amount of bytes sent in stream frames, would not apply for example to video sent in Datagram frames, let alone ACKs and other control frames. It counts only the new stream bytes, which means a packet sent multiple times would only be counted once.\r\n\r\nWe know that we will need complementary drafts. The per path control seems like something for one of these drafts, maybe some form of advance scheduling.",
          "createdAt": "2022-01-12T01:00:39Z",
          "updatedAt": "2022-01-12T01:00:39Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To me, it seems that additional mechanisms are required to implement the scenario where you want to limit the number of total bytes (not unique ones) over a given path, and in particular [DATAGRAM frames are not subject to flow control](https://www.ietf.org/archive/id/draft-ietf-quic-datagram-07.html#name-flow-control). As this looks like a form of path prioritisation, maybe should we delegate this in a separate draft?",
          "createdAt": "2022-01-12T08:24:54Z",
          "updatedAt": "2022-01-12T08:24:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think this is related to scheduling and probably also prioritisation and QoS signalling, which should go into a separate draft.",
          "createdAt": "2022-01-12T09:16:47Z",
          "updatedAt": "2022-01-12T09:16:47Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed with your responses. I would suggest to add a sentence in the current draft indicating something like.\r\n\r\nWhen used with multipath QUIC, the stream and flow level control mechanisms defined in RFC9000 apply to the entire connection. This document does not specify how restriction or prioritization can be applied to specific paths.",
          "createdAt": "2022-01-12T10:35:30Z",
          "updatedAt": "2022-01-12T10:35:30Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "I_kwDOGNtpaM5BmOFi",
      "title": "ECN support and single/multiple packet number spaces",
      "url": "https://github.com/quicwg/multipath/issues/87",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has PR",
        "design",
        "needs-discussion"
      ],
      "body": "With a packet number space per path, the ACK_MP frame provides the per path ECN feedback that enables a sender to detect congestion using ECN on a specific path. The per-path congestion control can adjust the congestion window based on the received feedback.\r\n\r\nWith a single packet number space shared among the different paths, the ECN fields of the ACK frame provide ECN information that is common to all paths. This makes it impossible for a sender to determine which path is affected by congestion when it receives an ACK frame with positive ECN counters. A per-path congestion control cannot easily react to such an ambiguous ECN feedback.",
      "createdAt": "2022-01-12T16:24:11Z",
      "updatedAt": "2022-07-07T15:56:08Z",
      "closedAt": "2022-07-07T15:56:08Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a very point and should also be consider in the discussion on one vs. multiple PNSs. I will try to make a text proposal for the draft to explain the problem. I think for the single number space approach this means that you cannot use ECN or you need to specify a new ECN ACK frame. I guess that could be a separate draft or in this draft but maybe we just leave this open for now as long as we didn't decide for one or the other approach.",
          "createdAt": "2022-03-03T17:12:50Z",
          "updatedAt": "2022-03-03T17:12:50Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Briefly discussed at IETF-113. One comment that we should support ECN.",
          "createdAt": "2022-03-23T14:44:40Z",
          "updatedAt": "2022-03-23T14:44:40Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "ECN text is included in PR #103 now.",
          "createdAt": "2022-07-06T15:22:05Z",
          "updatedAt": "2022-07-06T15:22:05Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "#103 was merged.",
          "createdAt": "2022-07-07T15:56:08Z",
          "updatedAt": "2022-07-07T15:56:08Z"
        }
      ]
    },
    {
      "number": 89,
      "id": "I_kwDOGNtpaM5Bmf8M",
      "title": " Congestion Control, RTT measurements and PMTU discovery should be per-path ",
      "url": "https://github.com/quicwg/multipath/issues/89",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "The sentence above is part of the introduction, but the should is misleading for congestion control at least (we have a MUST for per-path congestion control later).\r\n\r\nI would suggest to split the above sentence in two parts:\r\n-  Congestion Control must be performed per-path \r\n-  Path MTU should be performed per path\r\n\r\nWe should probably list somewhere in the document the state that must/should be maintained on a per-path basis and the state that is related to the connection. This could clarify some of the mechanisms.\r\n\r\nConcerning PathMTU, I would suggest to stay with a should and not a must since an implementation could simply track the minimum MTU among the different paths without maintaining per-path MTU. Such an implementation would work and if the MTUs do not differ significantly, it would probably be simpler than an implementation than maintains per-path MTU and needs to adjust the packets based on the path where each packet is sent.\r\n\r\nConcerning RTT, we discuss the problem of measuring the RTT later with the packet number spaces discussion. Furthermore, some congestion control schemes need an accurate per-path RTT while others do not strictly require rtt estimations. ",
      "createdAt": "2022-01-12T17:33:01Z",
      "updatedAt": "2022-03-07T07:54:53Z",
      "closedAt": "2022-03-07T07:54:53Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@obonaventure this \"should\" in the intro was not meant to be normative. However, I anyway created PR #98 to clarify. \r\n\r\nHowever, I didn't address your point about having a list of all state. Do we really need that? If so, where does that below? A new section somewhere? Can you provide such a list or create a PR? Or should we open a new separate issue for that?",
          "createdAt": "2022-03-03T18:41:27Z",
          "updatedAt": "2022-03-03T18:41:27Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that specifying PMTUD per path is a good idea. We do have a slight ambiguity, because the draft uses the overlapping notions of \"path\" and \"number space\", with the number space tied to the DCID of packets. The DCID may change over time for privacy reasons, or because the server wants to retire old CIDs tied to a previous configuration of the load balancer. In these cases, there is no need to restart PMTUD or reset congestion control.",
          "createdAt": "2022-03-03T19:27:37Z",
          "updatedAt": "2022-03-03T19:27:37Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "I_kwDOGNtpaM5Byrf2",
      "title": "A path can be active even if it does not carry packets in both directions since ACKs can be returned on another path",
      "url": "https://github.com/quicwg/multipath/issues/90",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "In 3.2.3, we have the following paragraph:\r\n\r\n     When more than one path is available, servers shall monitor the arrival of non-probing packets on the available paths. Servers   \r\n     SHOULD stop sending traffic on paths through where no non-probing packet was received in the last 3 path RTTs, but MAY\r\n     ignore that rule if it would disqualify all available paths. To avoid idle timeout of a path, endpoints can send ack-eliciting packets\r\n     such as packets containing PING frames Section 19.2 of [QUIC-TRANSPORT] on that path to keep it alive. Sending periodic\r\n     PING frames also helps prevent middlebox timeout, as discussed in Section 10.1.2 of [QUIC-TRANSPORT].\r\n\r\nThis paragraph implicitly indicates that we consider a path to be active if we send and receive packets on this path. This definition works well for MPTCP where each data packet triggers an ACK on the same path. In MPQUIC, a server could have two paths that it uses to send data. However, the client might decide to always send the ACKs on only one path (e.g. the lowest delay one). In this case, the two paths are clearly active, but the server could consider the higher delay path to be inactive since it does not receive packets over this path. It could send PING frames to trigger data packets, but then it would need to send one PING every 3 RTT, which seams excessive. \r\n\r\nI would suggest to rewrite the text as follows (I removed Server, because I think the recommendation should be generic):\r\n\r\n     When more than one path is available, hosts shall monitor both the arrival of non-probing packets and the acknowledgements \r\n     for the packets sent over each path. Hosts SHOULD stop sending traffic on paths whether either: (a) no non-probing packet\r\n     was received in the last 3 path RTT or (b) no non-probing packet sent over this path was acknowledged during the last 3 path \r\n     RTT, but MAY ignore that rule if it would disqualify all available paths. To avoid idle timeout of a path, endpoints can send \r\n     ack-eliciting packets such as packets containing PING frames Section 19.2 of [QUIC-TRANSPORT] on that path to keep \r\n     it alive. Sending periodic PING frames also helps prevent middlebox timeout, as discussed in Section 10.1.2 of [QUIC-TRANSPORT].\r\n",
      "createdAt": "2022-01-14T15:37:35Z",
      "updatedAt": "2022-03-07T04:40:22Z",
      "closedAt": "2022-03-07T04:40:22Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The word \"either\" means that STOP sending becomes true If either (a) is true or (b) is true. If I understand correctly, the actual meaning is to use the word \"both\" here, instead. So stop sending if both (a) no non-probing packets received and (b) no packets was acknowledged.",
          "createdAt": "2022-01-20T09:07:58Z",
          "updatedAt": "2022-01-20T09:07:58Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think this is a good clarification and yes \"either\" might be confusing here. ",
          "createdAt": "2022-01-20T10:59:03Z",
          "updatedAt": "2022-01-20T10:59:03Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I commented on the PR. I don't like the idea that receivers would have to stop acknowledging packets in order to signal preference to not use a path. We need to think that a little more.",
          "createdAt": "2022-02-02T19:39:38Z",
          "updatedAt": "2022-02-02T19:39:38Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So we have a choice:\r\n\r\n* either say that nodes should regularly send non-probing packets over the path that they want to keep using,\r\n* or if we don't want that, accept the idea that acks on other paths show continuity, and require \"abandon path\" to terminate a path that is otherwise working, acknowledges packets, etc..",
          "createdAt": "2022-02-02T19:51:40Z",
          "updatedAt": "2022-02-02T19:51:40Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think the second option is what we are aiming for with the new text. Stopping ack'ing packets to stop someone sending on a path is wrong and is something you should never do. If you receive a packet successfully you should ack it (also because that would otherwise confuse congestion control). But we have the abandon frame exactly for that case.\r\n\r\nHowever, it also seems wrong to me to require sending acks on the same path taen the data is received. So if you decide to always only send ack on one path and all payload data flows into one direction only over multiple paths, the current text would require you to send potentially unnecessary ping packets over each non-ack'ing paths or you would end up closing those paths which also is wrong as everything seems to work fine.\r\n\r\nSo the question is really is, do we want to require pings in this scenario (payload traffic over multiple paths but acks only on one path) in order to ensure that all paths are usable bidirectionally? I think that's unnecessary overhead and believe Olivier's proposed addition is the correct thing to do.",
          "createdAt": "2022-02-03T09:59:01Z",
          "updatedAt": "2022-02-03T09:59:01Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can look at what I implemented in picoquic:\r\n\r\n* If there is no traffic in either direction for the idle period, the path is automatically abandoned. If traffic is sent and acked, or traffic is received, the path is not considered idle. This is pretty much what Olivier proposed.\r\n* If there is a \"timer loss\", and if there is an alternate, the path is put in a low priority list. The node will send ping and try get an ack. If no ack is received after N trials, the path is abandoned.\r\n* If \"abandon path\" frame is received, the path is abandoned.",
          "createdAt": "2022-02-03T19:02:24Z",
          "updatedAt": "2022-02-03T19:02:24Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I marked this issue as editorial as we have an editorial PR for it. However, I open a new issue for the per path idle timeout discussion (#95).\r\n\r\nDo we need another issue to clarify path closure or sending of keep-alive traffic? However this might be covered in other parts of the draft already...? ",
          "createdAt": "2022-02-09T09:28:13Z",
          "updatedAt": "2022-02-09T09:28:13Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "I_kwDOGNtpaM5B-kw_",
      "title": "Existing transport parameters",
      "url": "https://github.com/quicwg/multipath/issues/91",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "RFC9000 defines a list of transport parameters.\r\n\r\n0x01 | max_idle_timeout | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x02 | stateless_reset_token | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x03 | max_udp_payload_size | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x04 | initial_max_data | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x05 | initial_max_stream_data_bidi_local | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x06 | initial_max_stream_data_bidi_remote | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x07 | initial_max_stream_data_uni | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x08 | initial_max_streams_bidi | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x09 | initial_max_streams_uni | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0a | ack_delay_exponent | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0b | max_ack_delay | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0c | disable_active_migration | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0d | preferred_address | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0e | active_connection_id_limit | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x0f | initial_source_connection_id | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG] | \u00a0\r\n0x10 | retry_source_connection_id | permanent | [RFC9000, Section 18.2] | 2021-02-11 | IETF | [QUIC_WG]\r\n\r\n\r\nThese transport parameters apply to all the paths that compose a Multipath QUIC connection. We should probably confirm this in the mpquic draft to avoid any misinterpretation (e.g. for max_idle_timeout or ack delays). There are two transport parameters that could warrant some discussion:\r\n\r\n- disable_active_migration : This transport parameter is incompatible with enable_multipath. An endpoint that receives both this transport parameter and a non zero enable_multipath parameter MUST treat this as a connection error of type\r\nMP_CONNECTION_ERROR and close the connection.\r\n- preferred_address: RFC9000, section 9.2.1 contains the following:\r\n\r\n   Once the handshake is confirmed, the client SHOULD select one of the two addresses provided by the server and initiate path    \r\n  validation (see Section 8.2). A client constructs packets using any previously unused active connection ID, taken from either the \r\n  preferred_address transport parameter or a NEW_CONNECTION_ID frame.\r\n\r\n  As soon as path validation succeeds, the client SHOULD begin sending all future packets to the new server address using the \r\n  new connection ID and discontinue use of the old server address. If path validation fails, the client MUST continue sending all \r\n  future packets to the server's original IP address.\r\n\r\nFor multipath, do we want to be stronger than SHOULD select one ? Can a client create news paths towards the initial address or only to one of the preferred addresses ? Should the client use both addresses (IPv4 and IPv6) if non-empty ?",
      "createdAt": "2022-01-18T13:39:57Z",
      "updatedAt": "2022-03-07T04:25:25Z",
      "closedAt": "2022-03-07T04:25:25Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good point about \"disable_active_migration\". I would read it as also disabling multipath.\r\n\r\nWe do not need to say that \"transport parameters apply to all the paths that compose a Multipath QUIC connection\". We are already inheriting that property from compatibility with path migration in RFC 9000. Multipath support is an extension to QUIC v1, not a new protocol, so we do not need to specify all the defaults. Same goes for the preferred address -- meaning does not change just because the nodes negotiate multipath.\r\n\r\nI would avoid debating \"which server addresses the client can try\" in the base multipath document. If we want the server to signal plausible addresses to the client, let's have a specific document for that.\r\n",
          "createdAt": "2022-01-18T19:43:42Z",
          "updatedAt": "2022-01-18T19:43:42Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I would maybe add a sentence that this draft does not change the meaning of preferred_address and if that address could also be used for multipath is out of scope for this extension.",
          "createdAt": "2022-02-02T12:27:32Z",
          "updatedAt": "2022-02-02T12:27:32Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding disable_active_migration: this cannot be a connection error, as you can also send preferred address and after migration to the preferred address you can still use migration or multipath (if negotiated). I think the definition in RFC9000 is still valid; it means you can't send any packets from another address than the one used in the handshake. Which effectively means disabling multipath as well as Christian noted (if not moved to another preferred address). I guess we could explicitly note that this draft does not change the definition of disable_active_migration. \r\n\r\nFor your reference this is what RFC9000 says:\r\n```\r\ndisable_active_migration (0x0c):\r\nThe disable active migration transport parameter is included if the endpoint does not support active \r\nconnection migration (Section 9) on the address being used during the handshake. An endpoint\r\nthat receives this transport parameter MUST NOT use a new local address when sending to the\r\naddress that the peer used during the handshake. This transport parameter does not prohibit\r\nconnection migration after a client has acted on a preferred_address transport parameter.\r\nThis parameter is a zero-length value.\r\n```",
          "createdAt": "2022-02-02T12:36:23Z",
          "updatedAt": "2022-02-02T12:36:53Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created a PR in #99. Is this sufficient to address this issue or do we need to say more? @obonaventure ?",
          "createdAt": "2022-03-03T19:08:11Z",
          "updatedAt": "2022-03-03T19:08:11Z"
        }
      ]
    },
    {
      "number": 92,
      "id": "I_kwDOGNtpaM5CGxjx",
      "title": "Inband priority exchange for stream/path scheduler",
      "url": "https://github.com/quicwg/multipath/issues/92",
      "state": "OPEN",
      "author": "markusa",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "separate draft"
      ],
      "body": "### Problem\r\nScheduling and re-ordering mechanism are usually out of scope of a multi-path standard and is up to implementers and/or separate IETF work. However, there might be the wish to align between sender and receiver the priority and usage of paths. Multi-path protocols like [MPTCP](https://datatracker.ietf.org/doc/html/rfc8684.html#section-2.5) and [MP-DCCP](https://datatracker.ietf.org/doc/html/draft-ietf-tsvwg-multipath-dccp-02#section-3.2.10), see this in scope and define therefore a `MP_PRIO` option.\r\n**So far, MP-QUIC does not define anything in this direction.**\r\nBeyond path scheduling MP-QUIC also offers stream multiplexing, where it can be useful to have a prioritization indication for stream schedulers at both ends. Per https://datatracker.ietf.org/doc/html/rfc9000#section-2.3, stream prioritization is so far not not part of QUIC v1.\r\n\r\n### Request\r\n**Define a prioritization exchange for paths and streams within the MP-QUIC draft.** \r\n\r\n### Benefit\r\nThis facilitates scenarios where both sides should apply the same path/stream prioritization (e.g. trigger a handover or respect cost) or the information about the sender prioritization is useful for e.g. re-ordering mechanisms on receiver side. While this can be applied in end-to-end scenarios it will be in particular useful for Hybrid Access and 3GPP ATSSS.\r\n\r\n\r\nBtw. that was the original question I intended to ask in #81 , but probably misleading :grinning:",
      "createdAt": "2022-01-20T09:38:09Z",
      "updatedAt": "2022-01-20T10:59:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This might be a bit related to issue #22. I believe we already decided that a more advanced priority scheme will not be part of the base draft, however, you can make a proposal for an additional extension to provide such a scheme in a separate draft.",
          "createdAt": "2022-01-20T10:52:30Z",
          "updatedAt": "2022-01-20T10:52:30Z"
        },
        {
          "author": "markusa",
          "authorAssociation": "NONE",
          "body": "I see that there was a consensus at least from the few people who engaged in the #22 discussion. In respect to the 3GPP ATSSS Rel. 18 development, where MP-QUIC was adopted (beside MP-DCCP) for the Study Phase, it's probably not useful to have too much defined outside the basic MP-QUIC draft?!",
          "createdAt": "2022-01-20T10:59:31Z",
          "updatedAt": "2022-01-20T10:59:31Z"
        }
      ]
    },
    {
      "number": 95,
      "id": "I_kwDOGNtpaM5DQA8q",
      "title": "Do we need a transport parameter to negotiate max path idle timeout?",
      "url": "https://github.com/quicwg/multipath/issues/95",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "yfmascgy"
      ],
      "labels": [
        "has PR",
        "design",
        "needs-discussion"
      ],
      "body": "This was discussed in issue #51 and PR #94.",
      "createdAt": "2022-02-09T09:25:51Z",
      "updatedAt": "2022-10-21T10:23:00Z",
      "closedAt": "2022-10-21T10:23:00Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Regarding the max_idle_timeout, RFC9000 says \"To avoid excessively small idle timeout periods, endpoints MUST increase the idle timeout period to be at least three times the current Probe Timeout (PTO).\" As in multi-path QUIC, the PTO is per-path, when max_idle_timeout is used to close a connection, it makes sense to set max_idle_timeout = 3*max(PTO_1, PTO_2). But when it comes to close a path, I am not sure if the timeout for path1 should also depend on the PTO of path 2?",
          "createdAt": "2022-03-03T23:30:44Z",
          "updatedAt": "2022-03-03T23:30:44Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think there are two idle timeouts: the \"connection idle timeout\" and the \"path idle timeout\".\r\n\r\nFor the \"connection idle timeout\", I agree that it should be at least 3*PTO_max. Triggering this timeout closes the connection.\r\n\r\nFor the \"path idle timeout\", this might be a way to have a stronger guarantee to stop using paths (closing them) after some inactivity than the text proposed in #94. Still, if we define such a mechanism, we need to know whether all paths should have the same path timeout value or not (in the latter case, a transport parameter might not be the best way).",
          "createdAt": "2022-03-04T12:59:47Z",
          "updatedAt": "2022-03-04T12:59:47Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would avoid having a different timer for a path than for a connection. That would make the protocol more complex without a lot of benefits. If a host wants to use a shorter timeout per path than the connection timeout, it can simply define it and use a PATH_ABANDON frame to indicate that the path is abandoned. \r\n\r\nHowever, we need to be clearer in 3.2.3 to indicate that a path can be considered valid if either packets are received on that path or packets sent on that path are acknowledged (possibly on another path)",
          "createdAt": "2022-03-04T17:32:34Z",
          "updatedAt": "2022-03-04T17:32:34Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Presented at IETF-113 but no time for discussion.",
          "createdAt": "2022-03-23T14:45:16Z",
          "updatedAt": "2022-03-23T14:45:16Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have submitted PR #124 to resolve this issue according to the above discussions.",
          "createdAt": "2022-07-07T09:01:47Z",
          "updatedAt": "2022-07-07T09:02:28Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "PR was merged but forgot to close issue...",
          "createdAt": "2022-10-21T10:23:00Z",
          "updatedAt": "2022-10-21T10:23:00Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "I_kwDOGNtpaM5FBv52",
      "title": "Choosing between a single packet number space vs. multiple packet number spaces",
      "url": "https://github.com/quicwg/multipath/issues/96",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "needs-discussion"
      ],
      "body": "This draft initially originates from a merging effort of previous Multipath proposals. While many points were found to be common between them, there remains one design point that still requires consensus: the number of packet number spaces that a Multipath QUIC connection should support (i.e., one for the whole connection vs. one per path).\r\n\r\nThe current draft enables experimentation with both variants, but in the final version we will certainly need to choose between one of the versions.",
      "createdAt": "2022-03-03T07:57:04Z",
      "updatedAt": "2022-07-07T09:19:17Z",
      "closedAt": "2022-07-07T09:19:17Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The main issues mentioned so far:\r\n\r\n* Efficiency. One number space per path should be more efficient, because implementations can directly reuse the loss-recovery logic specified for QUIC\r\n* ACK size. Single space leads to lots of out of order delivery, which causes ACK sizes to grow\r\n* Simplicity of code. Single space can be implemented without adding mane new code paths to uni-path QUIC\r\n* Shorter header. Single space works well with NULL length CID\r\n\r\nThe picoquic implementation shows that \"efficiency\" and \"ack size\" issues of single space implementations can be mitigated. However, that required significant improvements in the code:\r\n\r\n* to obtain good loss efficiency, picoquic remembers not just the path on which a packet was sent, but also the order of the packet on this path, i.e. a \"virtual sequence number\". The loss detection logic then operates on that virtual sequence number.\r\n\r\n* to contain ACK size, picoquic implements a prioritization logic to select the most important ranges in an ACK, avoid acking the same range more than 3 or 4 times, and keep knowledge of already acknowledged ranges so range coalescing works.\r\n\r\nI think these improvements are good in general, and I will keep them in the implementations whether we go for single space or not. The virtual sequence number is for example useful if the CID changes for reasons not related to path changes in multiple number space variants. It is also useful in unipath variants to avoid interference between sequence numbers used in probes and the RACK logic. The ACK size improvements do reduce the size of ACKs in presence of out of order delivery, e.g., if the network is doing some kind of internal load balancing. On the other hand, the improvements are somewhat complex, would need to be described in separate drafts, and pretty much contradicts the \"simplicity of code\" argument.\r\n\r\nSo we are left with the \"Null length CID\" issue. I see for cases:\r\n\r\nClient CID | Sender CID | Support | Priority\r\n-----------|------------|-----------|------------\r\nlong | long | Supported in both variants | Used by many implementations\r\nNULL | long | Requires special support in multiple spaces case, but could work | Preferred configuration of many big deployments\r\nlong | NULL | Requires special support in multiple spaces case, but could work | Rarely used, server load balancing does not work\r\nNULL | NULL | Does not work for multiple spaces | Only mentioned in some P2P deployments\r\n\r\nThe point here is that it is somewhat hard to deploy a large server with NULL CID and use server load balancing. This configuration is mostly favored by planned P2P deployments.",
          "createdAt": "2022-03-03T16:18:21Z",
          "updatedAt": "2022-03-03T16:18:21Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The big debate is for the configuration with NULL CID on client, long CID on server. The packets from server to client do not carry a CID, and only the last bytes of the sequence number. The client will need some logic to infer the full sequence number before decrypting the packet. The client could maybe use the incoming 5 tuple as part of the logic, but it is not obvious. It is much simpler to assume a direct map from destination CID to number space. That means, if a peer uses a NULL CID, all packets sent to that peer are in the same number space.",
          "createdAt": "2022-03-03T16:46:31Z",
          "updatedAt": "2022-03-03T16:46:31Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Revised table:\r\n\r\nClient CID | Sender CID | What\r\n-- | -- | -- \r\nlong | long | Multiple number space\r\nNULL | long | Multiple number spaces on client side (one per CID), single space on server side\r\nlong | NULL | Multiple number spaces on server side (one per CID), single space on client side\r\nNULL | NULL | single number space on each side\r\n\r\nIf a node advertises both NULL CID and multipath support, they SHOULD have logic to contain the size of ACK.\r\nIf a node engages in multipath with a NULL CID peer, they SHOULD have special logic to make loss recovery work well.\r\n",
          "createdAt": "2022-03-03T16:53:20Z",
          "updatedAt": "2022-03-03T16:53:52Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the above points to a possible \"unified solution\":\r\n\r\n* if multipath negotiated, tie number spaces to destination CID, use default (N=0) if NULL CID.\r\n* use multipath ack; in multipath ACK, identify number space by sequence number of DCID in received packets. Default that number to zero if received with NULL CID.\r\n* in ABANDON path, identify path either by DCID of received packets, SCID of sent packet, or \"this path\" (sending path) if CID is NULL.",
          "createdAt": "2022-03-03T18:36:52Z",
          "updatedAt": "2022-03-03T18:36:52Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like the proposal of the \"unified solution\". I think the elegance lies in the fact that it allows us to automatically cover all four cases listed above. The previous dilemma for me was that on one hand we have some use cases where we need to support more than two paths and separate PN makes the job easier, but on the other hand, I think we should not ignore the NULL CID use cases as it is also important. Now, with this proposal, a big part of the problem is solved. The rest of challenge is to make sure single PN remains efficient in terms of ACK and loss recovery. On that part, we plan to do an A/B test and would love to share the results when we get them.\r\n\r\nThere is one more problem as pointed in issue #25 , when we want to take hardware offloads into account. In such a case, we may still need single PN for long server CID.  However, if hardware supports nonce modification, this problem can be addressed with the proposed \"unified solution\".",
          "createdAt": "2022-03-03T22:48:16Z",
          "updatedAt": "2022-03-03T22:48:16Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If the APi does not support 96 bit sequence numbers, it should always be possible to create an encryption context per number space, using Key=current key and ID = current-ID + CID sequence number. Of course, that forces creation of multiple context, and that makes key rotation a bit harder to manage. But still, that should be possible.",
          "createdAt": "2022-03-03T23:26:23Z",
          "updatedAt": "2022-03-03T23:26:23Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the summary @huitema. I think one point is missing in your list which is related to issue #87. Use of a single packet number space might not support ECN.\r\n\r\nRegarding the unified solution: I think what you actually say is that we would specify both solutions and everybody would need to implement both logics. At least regarding the \"simplicity of code\" argument, that would be the worst choice.\r\n\r\nIf we can make the multiple packet number spaces solution work with one-sided CIDs, I'm tending toward such an approach. Use of multiple packet number spaces avoids ambiguity/needed \"smartness\" in ACK handling and packet scheduling which, as you say above, can make the implementation more complex and, moreover,  wrong decisions may have large impact on efficient (both local processing and on-the-wire). I don't think we want to leave these things to each implementation individually.",
          "createdAt": "2022-03-04T12:32:57Z",
          "updatedAt": "2022-03-04T12:32:57Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The summary Christian made above about design comparison sounds indeed quite accurate. Besides ECN, my other concern about single packet number is that it require cleverness from the receiver side if you want to be performant in some scenarios. At the sender-side, you need to consider a path-relative packet number threshold instead of an absolute one to avoid spurious losses.\r\n\r\nJust a point I think we did not mentioned yet is that there can be some interactions between Multipath out-of-order number delivery and incoming packet number duplicate detection. This requires maintaining some state at the receiver side, as described by https://www.rfc-editor.org/rfc/rfc9000.html#section-12.3-12. With single packet number space, the receiver should take extra care when updating the \"minimum packet number below which all packets are immediately dropped\". Otherwise, in presence of paths with very different latencies, the receiver might end up discarding packets from a (slower) path.\r\n\r\nI'm also preferring the multiple packet number spaces solution for the above reasons. I'm not against thinking for a \"unified\" solution (the proposal sounds interesting), but I wonder how much complexity this would add compared to requiring end hosts to use one-byte CIDs.",
          "createdAt": "2022-03-04T13:57:38Z",
          "updatedAt": "2022-03-04T13:57:38Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the issue is not really so much \"single vs multiple number space\" as \"support for multipath and NULL CID\". As noted by Mirja, there is an implementation cost there. My take is:\r\n\r\n* If a node uses NULL CID and proposes support of multipath, then that node MUST implement code to deal with size of acknowledgements.\r\n* If a node sees a peer using NULL CID and supporting multipath, then that node MUST either use only one path at a time or implement code to deal with impact on loss detection due to out of order arrivals, and impact on congestion control including ambiguity of ECN signals.\r\n\r\nThen add sections on what it means to deal with the side of acknowledgements, out of order arrivals, and congestion control.\r\n\r\nI think this approach ends up with the correct compromises:\r\n\r\n* It keeps the main case simple. Nodes that rely on multipath just use long CID and one number space per CID.\r\n* Nodes that use long CID never have to implement the ACK length minimization algorithms.\r\n* Nodes that see a peer using NULL CID have a variety of implementation choices, e.g., sending on just one path at a time, sending on mostly one path at a time in \"make or break\" transitions, or implementing sophisticated algorithms.\r\n\r\nIf we do that, we can get rid of the single vs multiple space discussion, and end up with a single solution addressing all use cases.",
          "createdAt": "2022-03-04T18:26:35Z",
          "updatedAt": "2022-03-04T18:26:35Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looking at all the discussions here and in other issues such as ECN, I think that we should try to write two different versions of section 7:\r\n- one covering all the aspects of single packet number space (RTT estimation, retransmissions, ECN, handling of CIDs, ...)\r\n- one covering all the aspects of multiple packet number space (RTT estimation, retransmissions, ECN, handling of CIDs, ...)\r\n\r\nThere would be some overlap between these two sections and also some differences that would become clear as we specify them. At the end of this writing, we'll know whether it is possible to support/unify both or we need to recommend a single one. The other parts of the document are almost independent of that and can evolve in parallel with these two sections.\r\n\r\nHowever, I don't think that such a change would be possible by Monday",
          "createdAt": "2022-03-04T18:27:24Z",
          "updatedAt": "2022-03-04T18:27:24Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we should rush changes before we have agreed on the final vision.",
          "createdAt": "2022-03-04T18:33:56Z",
          "updatedAt": "2022-03-04T18:33:56Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "It might be helpful to have these options as PRs (without merging) them, so people can understand all details of each approach.",
          "createdAt": "2022-03-04T20:05:30Z",
          "updatedAt": "2022-03-04T20:05:30Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @huitema that supporting multi-path with null CIDs is a more fundamental issue than the efficiency comparison between single PN and separate PN, as it would ultimately impact the application scope of multipath QUIC. But indeed, we might want to implement proposed solution first and then decide if we want to adopt such a unified approach.",
          "createdAt": "2022-03-04T20:25:07Z",
          "updatedAt": "2022-03-04T20:25:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since @mirjak prodded me, we now have a PR for the \"unified\" proposal.",
          "createdAt": "2022-03-04T22:50:29Z",
          "updatedAt": "2022-03-04T22:50:29Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I totally agree with Christian that the issue is about \"support for multipath and NULL CID\", and the solution that Christian suggested looks really great!  It both takes advantage of multiple spaces, and support NULL CID users without affect the efficiency of ACK arrangements.\r\n\r\nBesides, the solution is more convenient for implementations, because If both endpoints uses non-zero length cids, endpoints only need to support multiple spaces, and if one of the endpoints use NULL CID, it could use single pn space in one direction and could support NULL CID and multipath at the same time. ",
          "createdAt": "2022-03-07T06:21:20Z",
          "updatedAt": "2022-03-07T06:21:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Very high level summary of IETF-113 discussion seems that there is interest and likely support for the unified solution (review minutes for further details).",
          "createdAt": "2022-03-23T14:47:10Z",
          "updatedAt": "2022-03-23T14:47:10Z"
        }
      ]
    },
    {
      "number": 101,
      "id": "I_kwDOGNtpaM5FIz8p",
      "title": "Server MUST validate paths before using them",
      "url": "https://github.com/quicwg/multipath/issues/101",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "In section 3.1, we wrote \r\n\r\nWhen the multipath option is negotiated, clients that want to use an additional path MUST first initiate the Address Validation procedure with PATH_CHALLENGE and PATH_RESPONSE frames described in [Section 8](https://rfc-editor.org/rfc/rfc9000#section-8) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)]. After receiving packets from the client on the new paths, the servers MAY in turn attempt to validate these paths using the same mechanisms.[\u00b6](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-3.1-1)\r\n\r\nWith multipath, we cannot simply write that the server MAY validate the new path. There is a risk of a malicious client that operates as follows:\r\n- client creates path from its own address, A. Path is validate by server\r\n- client starts long download from server\r\n- client creates a second path to server using a spoofed address, B \r\n- client starts address validation for B but does not care about the response from the server\r\n- client stops acknowledging packets over the first path to force the server to move packets to the second one and then opportunistically acknowledges packets that should have been sent by the server over that second packet (SPNS would probably make such an attack simpler than MPNS)\r\n\r\nWe probably need to start working on the security considerations section of the draft.\r\n",
      "createdAt": "2022-03-04T18:40:31Z",
      "updatedAt": "2022-07-06T15:50:14Z",
      "closedAt": "2022-07-06T15:50:14Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is already covered in the QUIC threat model. The server is supposed to validate new paths by sending a \"path challenge\" on that path, then waiting for a challenge response. If the client spoofs a path, it will never receive the challenge, and thus the server will never receive the response and will not validate the path. See section 8.2 of RFC 9000, path validation. Security section 21.1.3. Connection Migration states that \"Path validation ([Section 8.2](https://www.rfc-editor.org/rfc/rfc9000.html#migrate-validate)) establishes that a peer is both willing and able to receive packets sent on a particular path.\"",
          "createdAt": "2022-03-04T19:39:30Z",
          "updatedAt": "2022-03-04T19:39:30Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So yes, the current text should be \"the servers MUST in turn attempt to validate these paths using the same mechanisms, as specified in {{ Section 8.2 of RFC9000 }}.\"",
          "createdAt": "2022-03-04T19:41:26Z",
          "updatedAt": "2022-03-04T19:41:26Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "No, this should not be a MUST. It is true that the path MUST be validated before it can be used. However, just because the serve receives a new packet on a path, that doesn't automatically mean that the server has to start path validation. It could e.g. also decide to simply withdraw that packet.  ",
          "createdAt": "2022-03-04T20:21:43Z",
          "updatedAt": "2022-03-04T20:21:43Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually, this is also not right.\r\n\r\nThis is what RFC9000 says (section 9):\r\n\r\n`An endpoint MUST perform path validation ([Section 8.2](https://www.rfc-editor.org/rfc/rfc9000#migrate-validate)) if it detects any change to a peer's address, unless it has previously validated that address.`\r\n\r\nSo I guess we should maybe not use normative language here but refer to section 9 in RFC9000 instead...?",
          "createdAt": "2022-03-04T20:28:22Z",
          "updatedAt": "2022-03-04T20:29:59Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just submitted PR #110 for this issue.",
          "createdAt": "2022-03-10T03:44:52Z",
          "updatedAt": "2022-03-10T03:44:52Z"
        }
      ]
    },
    {
      "number": 107,
      "id": "I_kwDOGNtpaM5FNRGW",
      "title": "Clarify path closure based on discussion in issue #90",
      "url": "https://github.com/quicwg/multipath/issues/107",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "We should review the current text and make sure we cover everything clearly. Maybe add some more text to the intro part of 3.2 ",
      "createdAt": "2022-03-07T09:10:49Z",
      "updatedAt": "2022-07-08T11:10:15Z",
      "closedAt": "2022-07-08T11:10:15Z",
      "comments": []
    },
    {
      "number": 111,
      "id": "I_kwDOGNtpaM5Fcuy7",
      "title": "Loss Recovery and Congestion Control Pseudocode for multipath",
      "url": "https://github.com/quicwg/multipath/issues/111",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "no-action-needed"
      ],
      "body": "Do we need some pseudocode like [RFC 9002 Appendix-A](https://datatracker.ietf.org/doc/html/rfc9002#appendix-A) and [Appendix-B](https://datatracker.ietf.org/doc/html/rfc9002#appendix-B) to describe the loss recovery and congestion control processes which are different in multiple paths?  Besides, some of the functions are different in multiple and single packet number space. \r\nThis might be helpful when people try to understand and implement the mechanisms.\r\n\r\n",
      "createdAt": "2022-03-10T12:27:12Z",
      "updatedAt": "2023-07-05T15:36:05Z",
      "closedAt": "2023-07-05T15:36:05Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Depending on how the discussions evolve about the packet number space designs, if we end up having some single packet number space at some point, it would be interesting to show the adapted loss recovery algorithm. In particular, in DetectAndRemoveLostPackets, the packet threshold must be relative to the packet sent over a path (and not be based on the absolute connection-wide number, as any multipath reordering would cause spurious retransmissions).\r\n\r\nHowever, I'm not sure to understand why we should provide alternative algorithms for congestion control. To me, we can just state that these are applied per-path and not connection-wide and this should be sufficient.",
          "createdAt": "2022-03-16T08:13:37Z",
          "updatedAt": "2022-03-16T08:13:37Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we want to provide a Reno like pseudocode, it should be a coupled congestion control scheme that shows how different paths would be coupled. Not sure that someone would deploy such as congestion control...",
          "createdAt": "2022-03-19T10:59:50Z",
          "updatedAt": "2022-03-19T10:59:50Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussing some kind of coupled congestion control (or shared bottleneck detection) is out of scope of this doc in my opinion.",
          "createdAt": "2022-07-06T15:34:46Z",
          "updatedAt": "2022-07-06T15:34:46Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "At this point in the document progress, the question with most issues should be, \"can we leave it out\". For this one, I think we certainly can. RFC are protocol specs, not implementation tutorials. If the spec is clear, leave it at that.",
          "createdAt": "2023-03-15T06:24:59Z",
          "updatedAt": "2023-03-15T06:24:59Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the current content of Section 7.2 (Implementation Considerations: Congestion Control) is sufficient. If at some point we would want to provide pseudocode for such algorithms, they would better be located in companion drafts (that would describe such algorithms), but not this base one.",
          "createdAt": "2023-03-15T08:51:16Z",
          "updatedAt": "2023-03-15T08:51:16Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this issue?",
          "createdAt": "2023-07-03T12:32:50Z",
          "updatedAt": "2023-07-03T12:32:50Z"
        }
      ]
    },
    {
      "number": 112,
      "id": "I_kwDOGNtpaM5Ft7tx",
      "title": "Modifications for Path State Figure in Section 4.2",
      "url": "https://github.com/quicwg/multipath/issues/112",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In Section 4.3 [Path States](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-path-states) we wrote:\r\n```\r\n       o\r\n       | PATH_CHALLENGE sent/received on new path\r\n       v\r\n +------------+    Path validation abandoned\r\n | Validating |----------------------------------+\r\n +------------+                                  |\r\n       |                                         |\r\n       | PATH_RESPONSE received                  |\r\n       |                                         |\r\n       v        Associated CID have been retired |\r\n +------------+        Path's idle timeout       |\r\n |   Active   |----------------------------------+\r\n +------------+                                  |\r\n       |                                         |\r\n       | PATH_ABANDONED sent/received            |\r\n       v                                         |\r\n +------------+                                  |\r\n |   Closing  |                                  |\r\n +------------+                                  |\r\n       |                                         |\r\n       | Associated CID have been retired        |\r\n       | Path's idle timeout                     |\r\n       v                                         |\r\n +------------+                                  |\r\n |   Closed   |<---------------------------------+\r\n +------------+\r\n\r\n```\r\n\r\nThere are 2 problems in this figure:\r\n1. \"Associated CID have been retired\" should not cause the path turn into closed state, because in Section [4.2.2. ](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-4.2.2)[Effect of RETIRE_CONNECTION_ID Frame](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-effect-of-retire_connection) :\r\n\r\n> Receiving a RETIRE_CONNECTION_ID frame causes the endpoint to discard the resources associated with that connection ID. If the connection ID was used by the peer to identify a path from the peer to this endpoint, the resources include the list of received packets used to send acknowledgements. The peer MAY decide to keep sending data using the same IP addresses and UDP ports previously associated with the connection ID, but MUST use a different connection ID when doing so.\r\n\r\n  So retiring associated CID only cause the resources belonging to the corresponding packet number space to be released, but not the whole path to be closed. In CID migration cases, endpoints just want to retire the old CID and use a new one, as path is defined as \"refers to the 4-tuple\"  in the current draft, this operation will not cause the whole path context (including congestion control states, RTT measurements, etc.) to be removed.\r\n\r\n2. Path closing is triggered by PATH_ABANDONED frame, and does not have dependency on CID retiring (Although path closing would trigger the retirement of CID resource). So when path_state transmit from \"Closing\" to \"Closed\", the proper condition might be \"Acknowledgement of PATH_ABANDONED frame received\" or \"Path's draining timeout for at least 3 times the current PTO interval\".\r\n",
      "createdAt": "2022-03-15T13:22:25Z",
      "updatedAt": "2022-07-08T08:27:37Z",
      "closedAt": "2022-07-08T08:27:37Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "First, regarding the transitioning from a \"closing\" state to a \"closed\" state, there will be a problem if we use the receipt of the ACK of a PATH_ABANDON as a condition for the transitioning due to possible out-of-order delivery. Suppose a client uses DCID S2 to on its first path to send three pkts with the packet number 100, 101, and 102, where PATH_ABANDON frame is sent in packet 102. However, due to the out-of-order delivery, it is possible that 102 is acked first, while packet 100 and 101 are still in flight. Therefore, at this point, we cannot mark the first path as \"closed\" since it is also possible that the acks of those two packets will later return from the first path. Due to the above reasons, in the initial design, we say that the path should be closed after CIDs are retired. As shown in the path-closing figure (Fig.3) in the draft, after the client makes sure that the packets (100, 101) sent before PATH_ABANDON on path 1 are also acknowledged, it then decides that the CID S2 is no longer needed, and thus sending out the RETIRE_CONNECTION_ID frame.\r\n\r\nSecond, regarding the transitioning from an \"active\" state to a \"closed\" state, yes, it is possible that we want to retire the old CID and use a new one, and I think the current figure is a bit confusing.  The purpose of this transitioning is to handle exceptions and it basically says that when there are no available CIDs to use for communication on a particular path, we should close it. I think we can simply keep the \"path's timeout\" as the condition because when there are no available CIDs, the path timeout will be triggered anyway.",
          "createdAt": "2022-03-16T00:31:17Z",
          "updatedAt": "2022-03-16T00:31:17Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that the transitioning from \"Active\" to \"Closed\" should not be directly done if we retire the associated CID. We could instead have an intermediate \"Idle\" state in which as long as you have no associated CID, keep relevant recovery/RTT/... contexts.\r\n\r\nIn general, I think it could be worthwhile to make a clearer distinction between the acknowledgment/packet number context and the recovery one. For instance, if for any reason a host changes the DCID used over a given path, it should still keeps track of packets sent with the previous DCID (and thus possibly sent with a different packet number space).\r\n\r\nFor the \"Closing\" to \"Closed\" transition, I tend to agree with Yunfei and I would not directly rely on the acknowledgment of the PATH_ABANDON frame to close my path. But as a sender, I can react to the acknowledgment of my PATH_ABANDON frame and send the RETIRE_CONNECTION_ID frame. On the other hand, relying on 3*PTO to transition from \"Closing\" to \"Closed\" is probably more relevant than using the path's idle timeout.",
          "createdAt": "2022-03-16T08:00:27Z",
          "updatedAt": "2022-03-16T08:00:27Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've just submitted PR #116 for this issue, containing the suggestions from Yunfei and Quentin.\r\n\r\nThe core points for this modification:\r\n- Retiring CIDs would not trigger path closure.\r\n- If a path is idle timeout, endpoints should send PATH_ABANDON frame before closing the path, so the path state transition would be \"Active\" -> \"Closing\" -> \"Closed\" in this situation\r\n- If a path is detected blackhole or can't be used for some reason such as the whole network environment failed, endpoints can close the path immediately, because sending PATH_ABANDON frame on this path seem to be useless. \r\n",
          "createdAt": "2022-03-21T09:31:51Z",
          "updatedAt": "2022-03-21T09:31:51Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@Yanmei-Liu your PR (#116) says \r\n\r\n> Note that if a path became idle timeout, endpoints SHOULD send PATH_ABANDONED frame before closing the path.\r\n\r\nWhile you wrote in your comment above that it might be useless to send PATH_ABANDONED. Am I missing something?",
          "createdAt": "2022-07-06T15:38:19Z",
          "updatedAt": "2022-07-06T15:38:19Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOGNtpaM5F_PiC",
      "title": "PTO calculation in single PN",
      "url": "https://github.com/quicwg/multipath/issues/114",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A PTO is calculated with a path's RTT measurement, which implies that we should calculate PTO per-path. However, in RFC9002, it says \"As with loss detection, the PTO is per packet number space. That is, a PTO value is computed per packet number space.\" The question is that in the single PN case, we send packets in single packet number space over multiple paths, if we stick to what RFC9002 says, we end up with one PTO for multiple paths. ",
      "createdAt": "2022-03-19T08:09:47Z",
      "updatedAt": "2022-07-07T15:56:41Z",
      "closedAt": "2022-07-07T15:56:41Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The point in RFC9000 is that you have to reset PTO if you use a new packet number space. However, in PR #103 we say:\r\n\r\n> Loss detection as specified in {{QUIC-RECOVERY}} uses algorithms\r\n>  based on timers and on sequence numbers. When packets are sent over\r\n>  multiple paths, loss detection must be adapted to allow for different RTTs\r\n>  on different paths.\r\n\r\nI think that is correct. Is that sufficient or do you think we need to say more @yfmascgy ?",
          "createdAt": "2022-07-06T15:59:37Z",
          "updatedAt": "2022-07-06T15:59:37Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for pointing this out. I think the current text should suffice:)",
          "createdAt": "2022-07-07T01:13:56Z",
          "updatedAt": "2022-07-07T01:13:56Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "I_kwDOGNtpaM5F_P81",
      "title": "Path idle timeout for Path State Figure in Section 4.2",
      "url": "https://github.com/quicwg/multipath/issues/115",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "For the transition from a \"closing\" state to a \"closed\" state In the path state figure in section 4.2, I find the phrase \"path idle timeout\" a bit confusing, because right now this value is supposed to be equal to max_idle_timeout, but shouldn't a transition from a \"closing\" state to a \"closed\" state be much quicker than that from an \"active\" state to a \"closed\" state since the first transition is just what we expect to happen?",
      "createdAt": "2022-03-19T08:20:41Z",
      "updatedAt": "2022-07-08T09:58:08Z",
      "closedAt": "2022-07-08T09:58:08Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is now fixed by #116.",
          "createdAt": "2022-07-08T09:58:08Z",
          "updatedAt": "2022-07-08T09:58:08Z"
        }
      ]
    },
    {
      "number": 118,
      "id": "I_kwDOGNtpaM5HPPt_",
      "title": "Handle stateless reset",
      "url": "https://github.com/quicwg/multipath/issues/118",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "Should the spec say something about stateless reset?\r\n\r\nSuppose a node is sending on two paths with two different DCID and two corresponding stateless reset secrets, and receives a stateless reset packet that matches the reset secret on the first path. Should it:\r\n\r\n1) Abandon that path and continue the connection with the other path?\r\n2) Abandon the connection?",
      "createdAt": "2022-04-06T20:57:39Z",
      "updatedAt": "2022-07-08T11:10:15Z",
      "closedAt": "2022-07-08T11:10:15Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's a good point. RFC9000 states that stateless resets should be used in last resort when the endpoint does not have access to the connection state. If hosts have still access to the connection state and want to abandon a specific path, I would expect them to rely on PATH_ABANDON frame (or on path idle timeout). So when receiving a stateless reset, I would abandon the connection.\r\n\r\nDepending on the number of impacts on existing RFC9000 mechanisms, it may be useful to write a section (or at least, a paragraph) clarifying these points.",
          "createdAt": "2022-04-07T09:04:10Z",
          "updatedAt": "2022-04-07T09:04:36Z"
        }
      ]
    },
    {
      "number": 119,
      "id": "I_kwDOGNtpaM5LYjYp",
      "title": "grammar error",
      "url": "https://github.com/quicwg/multipath/issues/119",
      "state": "CLOSED",
      "author": "Kulsk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "from https://github.com/quicwg/multipath/blob/main/draft-ietf-quic-multipath.md#packet-protection-for-quic-multipath-multipath-aead\r\n\r\nThe path ID for 1-RTT packets is the sequence number of of {{QUIC-TRANSPORT}}\r\nmaybe it should be\r\nThe path ID for 1-RTT packets is the sequence number of Connection ID of {{QUIC-TRANSPORT}}",
      "createdAt": "2022-06-08T13:10:43Z",
      "updatedAt": "2022-07-05T11:38:19Z",
      "closedAt": "2022-07-05T11:38:19Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks Wu! I fixed this grammar error in PR #121 .",
          "createdAt": "2022-06-13T07:37:50Z",
          "updatedAt": "2022-06-13T07:37:50Z"
        }
      ]
    },
    {
      "number": 120,
      "id": "I_kwDOGNtpaM5Lh9lX",
      "title": "active_connection_id_limit",
      "url": "https://github.com/quicwg/multipath/issues/120",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [],
      "body": "Is there any reason why a new parameter isn't defined to negotiate max_paths rather than reusing this existing parameter? \r\n\r\nThat design is much more cleaner. For example, the max paths wouldn't be ignored even when zero-length CIDs are in use. \r\n\r\nUnless I'm mistaken, the current design have to comply with the following from RFC9000:\r\n\r\n>If an endpoint issues a zero-length connection ID... and therefore ignores the active_connection_id_limit value received from its peer.\r\n\r\n\r\nBTW, how the following MUST will be honored for the zero-length CID case: \r\n\r\n```\r\nBefore an\r\n   endpoint adds a new path by initiating path validation, it MUST check\r\n   whether at least one unused Connection ID is available for each side.\r\n```\r\n\r\n",
      "createdAt": "2022-06-10T07:54:07Z",
      "updatedAt": "2022-07-11T12:23:05Z",
      "closedAt": "2022-07-11T12:23:05Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From RFC9000 (Section 9.5), an endhost cannot (voluntary) reuse a given CID on different addresses. Since CIDs are the path identifiers, this already restricts the number of concurrent paths. Given that paths must be symmetrical, this should restrict the number of concurrent paths to the minimum advertised value of `active_connection_id_limit`. Note that the actual limit can be lower than this, as you depend on your peer to have your CIDs.\r\n\r\nFor the `max_paths` parameter, this is something we considered in early multipath drafts (such as draft-deconinck-quic-multipath-02). Such value would only be meaningful when it is lower than the advertised `active_connection_id_limit`. And even in such case, it is difficult to enforce that limit. If you provide 8 CIDs to your peer and request `max_paths` to be 2, how would you do that? Especially when handling transient situations (i.e., stop using a path on a network A to use another on network B), the receiver might notice 3 paths being in concurrent use (especially if network B is faster than network A), even if the sender behaves nicely.\r\n\r\nOn the other hand, if one host definitely wants to limit the number of concurrent paths, it can simply as most `max_paths` active CIDs.\r\n\r\nFor the zero-length CIDs, I think there are two parts. If we consider one-sided zero-length CIDs while the other direction uses non-zero-length CIDs, the maximum number of paths is constrained by the `active_connection_id_limit` value of the non-zero-length CID side. If we now consider both sides using zero-length CIDs, then I would keep the minimum of both `active_connection_id_limit` values? RFC9000 states that the host can ignore because it will not send NEW_CONNECTION_ID frames, but we can extend this meaning in the draft. In any case, it might be better to clarify this, and we will likely perform a strong editorial pass on the whole text once we get an agreement on #103.",
          "createdAt": "2022-06-10T15:38:50Z",
          "updatedAt": "2022-06-10T15:38:50Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @qdeconinck. Having two limits instead of just one just introduces complexity with little benefit. Yes, the case of two endpoints both using zero-length CIDs may be under specified. But the deployments of that scenarios are going to be very limited. If the server is part of a frame and uses zero-length CID, the client is identified by its IP address and port. The load balancer will struggle to match the new IP and port of a new path with the original values used in connection establishment. I don't see how that could work. So we are pretty much left to peer to peer scenarios, in which the server is a single computer. Even there, the matching of the new IP and port with the original client requires a combination of guesswork and maybe trial decryption. If developers are ready to do that, they can probably invent a way to manage the path number...",
          "createdAt": "2022-06-10T19:18:46Z",
          "updatedAt": "2022-06-10T19:18:46Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> From RFC9000 (Section 9.5), an endhost cannot (voluntary) reuse a given CID on different addresses. Since CIDs are the path identifiers, this already restricts the number of concurrent paths. Given that paths must be symmetrical, this should restrict the number of concurrent paths to the minimum advertised value of `active_connection_id_limit`.\r\n\r\nI'm not sure to get why you say that CIDs are \"path identifiers\".  Also, please note that an \"address\" in 9000 is defined as follows:\r\n\r\n```\r\nAddress:\r\n\r\n    When used without qualification, the tuple of IP version, IP address, and UDP port number that represents one end of a network path\r\n\r\nConnection ID:\r\n\r\n    An identifier that is used to identify a QUIC connection at an endpoint. Each endpoint selects one or more connection IDs for its peer to include in packets sent towards the endpoint. This value is opaque to the peer.\r\n```",
          "createdAt": "2022-06-16T06:39:49Z",
          "updatedAt": "2022-06-16T06:39:49Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Note that the actual limit can be lower than this, as you depend on your peer to have your CIDs.\r\n\r\nSure, this reasoning is still valid independent of whether active_connection_id_limit or a new transport metric is defined. ",
          "createdAt": "2022-06-16T06:41:08Z",
          "updatedAt": "2022-06-16T06:41:08Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Especially when handling transient situations (i.e., stop using a path on a network A to use another on network B), the receiver might notice 3 paths being in concurrent use (especially if network B is faster than network A), even if the sender behaves nicely.\r\n\r\nThis same case can be considered when more than active_connection_id_limit are used (including in transient situations you mentioned). What concerns me with active_connection_id_limit is that the connection must be closed as per: \r\n\r\n` if the number of active connection IDs exceeds the value advertised in its active_connection_id_limit transport parameter, an endpoint MUST close the connection with an error of type CONNECTION_ID_LIMIT_ERROR.`\r\n\r\nwhile, with a dedicated path_max, new paths can be just discarded while maintaining the connection alive. ",
          "createdAt": "2022-06-16T06:45:30Z",
          "updatedAt": "2022-06-16T06:45:30Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> On the other hand, if one host definitely wants to limit the number of concurrent paths, it can simply as most `max_paths` active CIDs.\r\n\r\nAgree. This is only possible when dedicated parameters are defined. ",
          "createdAt": "2022-06-16T06:46:21Z",
          "updatedAt": "2022-06-16T06:46:21Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> RFC9000 states that the host can ignore because it will not send NEW_CONNECTION_ID frames, but we can extend this meaning in the draft. In any case, it might be better to clarify this\r\n\r\nNoted.",
          "createdAt": "2022-06-16T06:47:37Z",
          "updatedAt": "2022-06-16T06:47:37Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Having two limits instead of just one just introduces complexity with little benefit\r\n\r\nI'm not sure to see complexities out there. Using connection IDs to infer per path specifics is not a clean design, btw. \r\n",
          "createdAt": "2022-06-16T06:50:51Z",
          "updatedAt": "2022-06-16T06:50:51Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Relying to previous comments:\r\n\r\n1) the `active_connection_id_limit` limits the number of CID that a peer MAY advertise at the same time. A peer MAY advertise \"at most\" this limit.\r\n\r\n2) there is no guarantee that a peer will advertise \"at least\" the `active_connection_id_limit`. For example, a node could decide to never advertise more than 3 CID, even if its peer's limit is 9.\r\n\r\n3) if a node reuses a non-zero-length CID on a different path mimics, the peer is most likely to treat that as a \"NAT rebinding\" event. There will be an exchange of probes, after which the peer will retain either the old or the new path. Thus, there can never be more active paths than the `active_connection_id_limit`.\r\n\r\n4) Since a new path requires a new connection ID in each direction, the maximum number of paths cannot be higher than the lowest of the two `active_connection_id_limit` advertised by both peers.\r\n\r\nI think the issue boils down to \"how does a node refuse to establish a new path\". Imagine a node with a hard limit to maximum two simultaneous paths per connection, but advertising 3 CIDs. With RFC 9000 the only option would be to ignore incoming challenges for new paths. The peer will see timeouts, and repeat the challenges a number of time before giving up. If the peer knew that the local node supports at most two paths, it might not bother sending new challenges in the first place, saving some time. But there are synchronization issues.\r\n\r\nThe peer may or may not know how many paths are currently active. For example, one of the current paths may have been abandoned, and the peer does not know that yet. So if we create a \"max path\" mechanism, we also need some kind of synchronization mechanism. Or, we could add a soft-error mechanism of some kind, something like a \"CHALLENGE_REFUSED\" frame, maybe carrying an error reason. But we would have to work out the complexity, etc.\r\n\r\nLooks like something we could do later, maybe an extension on top of the basic multipath.\r\n\r\n",
          "createdAt": "2022-06-16T22:52:17Z",
          "updatedAt": "2022-06-16T22:52:17Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Relying to previous comments:\r\n> \r\n>     1. the `active_connection_id_limit` limits the number of CID that a peer MAY advertise at the same time. A peer MAY advertise \"at most\" this limit.\r\n> \r\n>     2. there is no guarantee that a peer will advertise \"at least\" the `active_connection_id_limit`. For example, a node could decide to never advertise more than 3 CID, even if its peer's limit is 9.\r\n> \r\n>     3. if a node reuses a non-zero-length CID on a different path mimics, the peer is most likely to treat that as a \"NAT rebinding\" event. There will be an exchange of probes, after which the peer will retain either the old or the new path. Thus, there can never be more active paths than the `active_connection_id_limit`.\r\n> \r\n>     4. Since a new path requires a new connection ID in each direction, the maximum number of paths cannot be higher than the lowest of the two `active_connection_id_limit` advertised by both peers.\r\n\r\nFully Agree, Christian. ",
          "createdAt": "2022-06-17T05:51:02Z",
          "updatedAt": "2022-06-17T05:51:02Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I think the issue boils down to \"how does a node refuse to establish a new path\".\r\n\r\nThat's it! \r\n\r\nI'd like the mechanism to not lead to closing the connection when such new paths are being added but a limit is fired. ",
          "createdAt": "2022-06-17T05:53:38Z",
          "updatedAt": "2022-06-17T05:56:12Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's not add additionally frame(s) now, but do we want to add some text about \"how to refuse a new path\"?",
          "createdAt": "2022-07-06T15:44:15Z",
          "updatedAt": "2022-07-06T15:44:15Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, there is a pretty straightforward way to \"refuse a new path\" -- just send back an \"abandon path\" frame.",
          "createdAt": "2022-07-08T03:37:03Z",
          "updatedAt": "2022-07-08T03:37:03Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "True. I think we should add some explicit text that you should send an abandon frame (on an existing path) to refuse a new path and not reply to oath challenge. ",
          "createdAt": "2022-07-08T08:59:30Z",
          "updatedAt": "2022-07-08T08:59:30Z"
        }
      ]
    },
    {
      "number": 122,
      "id": "I_kwDOGNtpaM5NJ_JY",
      "title": "Handling incoming ACK_MP frames with a retired DCID sequence number",
      "url": "https://github.com/quicwg/multipath/issues/122",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "has PR"
      ],
      "body": "It might be possible to be in a state where a sender retires a DCID that was used by still in-flight packets. Hence, it is possible for the sender to receive a ACK_MP frame referencing the retired DCID. Depending on the situation:\r\n\r\n- The sender can keep a way to track the sent packet with the retired DCID sequence number, allowing proper acknowledgement of the packets.\r\n- The sender drops all the state related to the DCID, hence marking the in-flight packets as being lost and ignoring ACK_MP frames having a retired DCID sequence number.\r\n\r\nWhile this should not affect interoperability, it might be worthwhile to add a sentence or two to mention the possible performance issue in such situation.",
      "createdAt": "2022-07-05T15:37:04Z",
      "updatedAt": "2022-07-08T11:40:00Z",
      "closedAt": "2022-07-08T11:40:00Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "We could add some text to [4.2.2. ](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-4.2.2)[Effect of RETIRE_CONNECTION_ID Frame](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-effect-of-retire_connection). Can you propose a PR @qdeconinck ?",
          "createdAt": "2022-07-06T15:46:36Z",
          "updatedAt": "2022-07-06T15:46:36Z"
        }
      ]
    },
    {
      "number": 123,
      "id": "I_kwDOGNtpaM5NP0ww",
      "title": "Guidance on scheduling of packets containing ACK frames",
      "url": "https://github.com/quicwg/multipath/issues/123",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "This issue came up during the discussion of issue #33. We say that ACK or ACK_MP frames can be send over any path, however, maybe we should discuss some guidance and trade-offs. E.g. sending on the same path as the packets received also for RTT measurements; using the shortest delay path might have some performance benefits...?",
      "createdAt": "2022-07-06T15:18:26Z",
      "updatedAt": "2022-07-11T12:30:48Z",
      "closedAt": "2022-07-11T12:30:48Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree. We should add some guidance here. We did some experiment regarding this issue. Our finding is returning ACK on the shortest path is helpful. But the improvement is only more significant when the path rtt ratio is larger than 4:1.",
          "createdAt": "2022-07-07T01:28:05Z",
          "updatedAt": "2022-07-07T01:28:05Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "I_kwDOGNtpaM5NT8tF",
      "title": "Add more explanation on ACK delay and zero-length CID",
      "url": "https://github.com/quicwg/multipath/issues/125",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "yfmascgy"
      ],
      "labels": [],
      "body": "Comment by @yfmascgy (on PR #103):\r\nI think we expand this section a bit as we found getting the delay right was non-trivial. QUIC time-stamp would work for sure. But if one decides not to use QUIC timestamp, we probably want to explain what is needed to be done here.",
      "createdAt": "2022-07-07T09:13:52Z",
      "updatedAt": "2022-11-02T08:50:46Z",
      "closedAt": "2022-11-02T08:50:46Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have submitted PR #131 for this one.",
          "createdAt": "2022-07-08T09:50:40Z",
          "updatedAt": "2022-07-08T09:50:40Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing as #125 got merged.",
          "createdAt": "2022-11-02T08:50:46Z",
          "updatedAt": "2022-11-02T08:50:46Z"
        }
      ]
    },
    {
      "number": 128,
      "id": "I_kwDOGNtpaM5NVBa7",
      "title": "Receiving old packet number space identifier in ACK_MP",
      "url": "https://github.com/quicwg/multipath/issues/128",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "This is somewhat related to #122.\r\n\r\nSection 12.2 states that\r\n```\r\nIf an endpoint receives a ACK_MP frame with a non-existing packet number\r\nspace ID, it MUST treat this as a connection error of type\r\nMP_PROTOCOL_VIOLATION and close the connection.\r\n```\r\nThe notion of \"non-existing\" packet number space ID is somewhat blurry and maybe too aggressive. If for some reason an ACK_MP frame referencing an old, retired DCID sequence number arrives at the endhost, probably we just want to ignore it? And we could instead consider ACK_MP related to a packet number space ID larger than the greatest advertised one being MP_PROTOCOL_VIOLATION?",
      "createdAt": "2022-07-07T12:33:31Z",
      "updatedAt": "2022-07-11T12:57:37Z",
      "closedAt": "2022-07-11T12:57:37Z",
      "comments": []
    },
    {
      "number": 132,
      "id": "I_kwDOGNtpaM5NafCg",
      "title": "Can we be more specific about RTT computation? The word \"statistical\" is a bit broad.",
      "url": "https://github.com/quicwg/multipath/issues/132",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "The current draft says \"If timestamps are not available, implementations could estimate one way delays using statistical techniques\". I find the word \"statistical\" a bit too broad. Can we elaborate what is the exact statistical method recommended to use? Moreover, \"statistical\" also implies variation and randomness, what happens for applications that do not expect such randomness?",
      "createdAt": "2022-07-08T09:59:55Z",
      "updatedAt": "2023-07-05T15:35:18Z",
      "closedAt": "2023-07-05T15:35:18Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I could elaborate, but I am afraid that this is going into lots of details very quickly.\r\n\r\n\r\nEach RTT measurement of the tuple (send path, return path) provides an evaluation of (one-way-delay(send_path, send_time) + one_way_delay(return_path, return_time)). At that point, we have to infer what is the most likely value of the one way delays that produced this result.\r\n\r\nWhatever the number of paths and number of measurements, the system ends up with fewer equations than variables. For example, even in the single path scenario, a delay of 60 ms can be explained equally well by a delay of 30 ms in each direction, a delay of 40 ms on the send path and 20 ms or the return path, or any combination of delays that sums to 60ms. We can extract bounds, such as \"the delay on segment X is not negative\", but that leaves out a wide range of estimations. This is generally handled by making simple assumptions, such as assuming delays on a given path are symmetric -- until we learn something more.\r\n\r\nEven with that symmetry hypothesis, we have to make hypotheses about the probability function for each path. Solutions like Kalman filter assume a Gaussian distribution of delays, which simplifies computations. The classic computation of smoothed RTT and RTT average in the TCP code implicitly assumes a Gaussian distribution of delays, and further simplifies the computations so they can be performed in real time. For a simple implementation, using the same kind of simplifications as seen in TCP, we can use the following algorithm:\r\n\r\n1) Maintain estimates of average delay and delay variation for each segment.\r\n2) When a measurement is received and delay and variation are already initialized for both segments, allocate a sample based on previous knowledge:\r\n         * delta = rtt_sample - average(send_segment) - average(return_segment)\r\n         * range = variation(send_segment) + variation(return_segment)\r\n         * sample(send_segment) = average(send_segment) + delta* variation(send_segment)/range\r\n         * sample(return_segment) = average(return_segment) + delta* variation(return_segment)/range\r\nthen update average and variation for each segment using the same formulas used for TCP.\r\n\r\n3) When delay and variation are not estimated for either segment, split the difference:\r\n        * sample(send_segment) = rtt_sample /2\r\n        * sample(return_segment) = rtt_sample /2.\r\nthen initialize average and deviation for each segment based on the sample for that segment.\r\n\r\n4) When delay and variation are only estimated for return segment, initialize the send segment:\r\n        * sample(return_segment) = min(average(return_segment), rtt_sample)\r\n        * sample(send_segment) = rtt_sample - sample(return_segment),\r\nthen initialize average and deviation for the send segment, but do not update estimates for the receive segment.\r\n\r\n5) When delay and variation are only estimated for send segment, initialize the return segment:\r\n        * sample(send_segment) = min(average(send_segment), rtt_sample)\r\n        * sample(return_segment) = rtt_sample - sample(send_segment) \r\nthen initialize average and deviation for the receive segment, but do not update estimates for the send segment.\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2022-07-08T19:32:55Z",
          "updatedAt": "2022-07-08T19:32:55Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess the previous text could be copied in an annex.",
          "createdAt": "2022-07-08T19:33:53Z",
          "updatedAt": "2022-07-08T19:33:53Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I could elaborate, but I am afraid that this is going into lots of details very quickly.\r\n> \r\n> Each RTT measurement of the tuple (send path, return path) provides an evaluation of (one-way-delay(send_path, send_time) + one_way_delay(return_path, return_time)). At that point, we have to infer what is the most likely value of the one way delays that produced this result.\r\n> \r\n> Whatever the number of paths and number of measurements, the system ends up with fewer equations than variables. For example, even in the single path scenario, a delay of 60 ms can be explained equally well by a delay of 30 ms in each direction, a delay of 40 ms on the send path and 20 ms or the return path, or any combination of delays that sums to 60ms. We can extract bounds, such as \"the delay on segment X is not negative\", but that leaves out a wide range of estimations. This is generally handled by making simple assumptions, such as assuming delays on a given path are symmetric -- until we learn something more.\r\n> \r\n> Even with that symmetry hypothesis, we have to make hypotheses about the probability function for each path. Solutions like Kalman filter assume a Gaussian distribution of delays, which simplifies computations. The classic computation of smoothed RTT and RTT average in the TCP code implicitly assumes a Gaussian distribution of delays, and further simplifies the computations so they can be performed in real time. For a simple implementation, using the same kind of simplifications as seen in TCP, we can use the following algorithm:\r\n> \r\n> 1. Maintain estimates of average delay and delay variation for each segment.\r\n> 2. When a measurement is received and delay and variation are already initialized for both segments, allocate a sample based on previous knowledge:\r\n>    * delta = rtt_sample - average(send_segment) - average(return_segment)\r\n>    * range = variation(send_segment) + variation(return_segment)\r\n>    * sample(send_segment) = average(send_segment) + delta* variation(send_segment)/range\r\n>    * sample(return_segment) = average(return_segment) + delta* variation(return_segment)/range\r\n>    then update average and variation for each segment using the same formulas used for TCP.\r\n> 3. When delay and variation are not estimated for either segment, split the difference:\r\n>    * sample(send_segment) = rtt_sample /2\r\n>    * sample(return_segment) = rtt_sample /2.\r\n>    then initialize average and deviation for each segment based on the sample for that segment.\r\n> 4. When delay and variation are only estimated for return segment, initialize the send segment:\r\n>    * sample(return_segment) = min(average(return_segment), rtt_sample)\r\n>    * sample(send_segment) = rtt_sample - sample(return_segment),\r\n>    then initialize average and deviation for the send segment, but do not update estimates for the receive segment.\r\n> 5. When delay and variation are only estimated for send segment, initialize the return segment:\r\n>    * sample(send_segment) = min(average(send_segment), rtt_sample)\r\n>    * sample(return_segment) = rtt_sample - sample(send_segment)\r\n>    then initialize average and deviation for the receive segment, but do not update estimates for the send segment.\r\n\r\nHi Christian, thank for the explanation. However, there is still sth that is not quite clear to me. You mentioned Kalman filter. My understanding is that your state vector is the one-way-delay for each path in each direction. For example, if I have N paths, then I could write down s=[OWD_inbound_1, ...., OWD_inbound_N, OWD_outbound_1,... OWD_outbound_N]. For the process equation, we can write s_(k+1) = s_k + w_k, where w_k is the process noise/disturbance. The difficult part in the problem is that in the observation equation H is a random matrix, which means in each measurement y, y could be the combination of two one-way delays that the combination could change each time. So to me,  at the first glance, the problem is a bit different from the Kalman's formulation whose observation is y = H*s + v, where v is the noise term and H is fixed. I think this is not that relevant, but I am really curious to learn the technique. ",
          "createdAt": "2022-07-11T05:15:41Z",
          "updatedAt": "2022-07-11T05:18:04Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In a Kalman filter, if you have multiple observations, you use a different matrix H for each observation. But you maintain a single evaluation vector, correlation matrix, etc. Each observation operates on a projection of the whole state. \r\n\r\nBut then, I do not suggest that we try implementing a full Kalman filter. That would be a bit too CPU intensive. Also, the Kalman filter is trying for a min-square estimate, which works well for Gaussian variables but is only an approximation for the kind of probability distributions that we are likely to encounter. Implementing a more precise Kalman filter would be more precisely wrong...",
          "createdAt": "2022-07-11T05:47:36Z",
          "updatedAt": "2022-07-11T05:47:36Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Revisiting this issue now, I wonder if we should just take the same approach as the scheduling guidance, i.e., say the less and delegate advanced discussions in a potential future draft.",
          "createdAt": "2023-03-10T14:31:13Z",
          "updatedAt": "2023-03-10T14:31:13Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Even if we don't provide the more detailed information in the appendix, the section on \"Computing Path RTT\" needs an editorial pass. I agree that the term \"statistical techniques\" is not very clear. I guess one option is also to say rather less than more.\r\n\r\n@huitema can you have a look and propose a PR?",
          "createdAt": "2023-07-03T12:39:35Z",
          "updatedAt": "2023-07-03T12:39:35Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That would be PR #217 ",
          "createdAt": "2023-07-04T03:25:46Z",
          "updatedAt": "2023-07-04T03:25:46Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah, sorry. Do plan to do another pass on #217?",
          "createdAt": "2023-07-04T13:55:24Z",
          "updatedAt": "2023-07-04T13:55:24Z"
        }
      ]
    },
    {
      "number": 136,
      "id": "I_kwDOGNtpaM5Q4FWW",
      "title": "Multipath-specific error codes: undefined MP_CONNECTION_ERROR",
      "url": "https://github.com/quicwg/multipath/issues/136",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In section 3, we have\r\n\r\n```\r\nIf endpoint receives an unexpected value for the transport parameter \"enable_multipath\", it\r\nMUST treat this as a connection error of type MP_CONNECTION_ERROR and close the connection.\r\n```\r\n\r\nHowever, the `MP_CONNECTION_ERROR` error code does not exist (anymore), and I'm not sure we need such a specific error code anyway. Why not raising a `TRANSPORT_PARAMETER_ERROR` in such case?",
      "createdAt": "2022-08-31T06:52:05Z",
      "updatedAt": "2022-09-23T09:27:20Z",
      "closedAt": "2022-09-23T09:27:20Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's reasonable to use TRANSPORT_PARAMETER_ERROR.\r\nSubmitted PR #141 for this issue.",
          "createdAt": "2022-09-21T10:01:49Z",
          "updatedAt": "2022-09-21T10:01:49Z"
        }
      ]
    },
    {
      "number": 137,
      "id": "I_kwDOGNtpaM5Q_rQX",
      "title": "How should a receiver process a PATH_ABANDON having an unknown Path Identifier?",
      "url": "https://github.com/quicwg/multipath/issues/137",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "When using Identifier Types 0 or 1, the current text does not discuss how we should handle related path Identifier that the receiver cannot map to a path.\r\n\r\nWhen using Identifier Type 1, the Path Identifier corresponds to the sequence number of the Destination CID used by the sender to send packets on the related path, hence a sequence number of a source Connection ID of the receiver. When using Identifier Type 0, the Path Identifier corresponds to the sequence number of the Source CID of the sender, hence the sequence number of the Destination CID used by the receiver to send packets on the related path.\r\n\r\nWhile there are obvious values that could be considered as bad and may lead to, e.g., a MP_PROTOCOL_VIOLATION (e.g., a sequence number larger than any sequence number advertised), I don't think we should be as radical with regular values as they might have been retired meanwhile (also possible to face this with packet reordering). The worst edge cases I see are the followings.\r\n\r\nWith type 1, the sender might send a PATH_ABANDON with the seq of the CID in one packet, and then the RETIRE_CID retiring that CID in a subsequent one, but the RETIRE_CID reaches the receiver before the PATH_ABANDON one. If the receiver drops state upon RETIRE_CID reception, it won't be able to map the PATH_ABANDON to the path.\r\n\r\nWith type 0, the sender might send a PATH_ABANDON with the seq of the CID, but before it reaches the peer, the peer sends a RETIRE_CID retiring that CID. If the receiver drops the CID state upon RETIRE_CID sending, it won't be able to map the PATH_ABANDON to the path.\r\n\r\nHandling these edge cases with connection closure is clearly too strong. Still, ignoring or even acknowledging these PATH_ABANDON may have bad consequences. Silently dropping packets (i.e., not acknowledge the packet having PATH_ABANDON) will make the peer retransmit the frame (hoping it updates its path identifier) but could cause the loss/non-acknowledgment of accompanying frames (e.g., STREAM ones), and processing packet content without acknowledging it sounds odd. Acknowledging PATH_ABANDON that cannot be mapped to a path would make some desynchronisation about the status of the path between the peers (the sender now assumes the path is closed, but the receiver not).\r\n\r\nTo address the type 1 issue, we could write some text stating that a sender cannot retire a DCID if a PATH_ABANDON containing the related sequence number is still in flight. But for the type 0, the fix is not obvious (I don't think we could have the same solution as in #135)...",
      "createdAt": "2022-09-01T13:39:57Z",
      "updatedAt": "2023-03-13T10:03:22Z",
      "closedAt": "2023-03-13T10:03:22Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One solution is to put the retired cid into a cid_history_list and keep it for a while before its final deletion. In doing so, one can still find the cid-to-path mapping if the PATH_STATUS frame uses a retired cid. In this case, as long as the path that the peer wants to retire has no ambiguity, the current path close process can still work. If the receiver can no longer find the cid in both the active list and the history list, then it should treat this as a connection error of MP_PROTOCOL_VIOLATION and close the connection.",
          "createdAt": "2022-10-22T08:47:25Z",
          "updatedAt": "2022-10-22T08:48:35Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Another solution would to to not change the path ID (see issue #169). In this case all unknown path IDs could be handled as a connection error. Or is it anyway better to just ignore those frames (e.g. if completely outdated packet arrives and the path was already closed)?",
          "createdAt": "2023-02-21T15:30:39Z",
          "updatedAt": "2023-02-21T15:30:39Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the simplest solution is to just ignore Path Abandon that refer to abandoned connection ID sequence numbers. The problem is self correcting. If the connection ID is not used anymore, it is either because the path was actually abandoned (no problem), or because packets on the same 5-tuple are now sent with a different CID. In that case, the peer will see these packets arriving on the path that it wants to abandon, and can simply send a new Path Abandon.",
          "createdAt": "2023-02-26T19:17:05Z",
          "updatedAt": "2023-02-26T19:17:05Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given that we agree that PATH_ABANDON relates to CID sequence numbers, we can probably apply the same approach to all multipath-specific frames (including ACK_MP): if you receive such a frame with a CID sequence number you cannot map anymore, just ignore it.",
          "createdAt": "2023-03-08T13:50:35Z",
          "updatedAt": "2023-03-08T13:50:35Z"
        }
      ]
    },
    {
      "number": 138,
      "id": "I_kwDOGNtpaM5RDg5G",
      "title": "PATH_STATUS frame not registered in the IANA \"QUIC Frames Types\"",
      "url": "https://github.com/quicwg/multipath/issues/138",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Minor editorial issue, we just need to add the entry in the IANA Considerations section.",
      "createdAt": "2022-09-02T08:30:03Z",
      "updatedAt": "2022-10-21T08:55:57Z",
      "closedAt": "2022-10-21T08:55:57Z",
      "comments": []
    },
    {
      "number": 139,
      "id": "I_kwDOGNtpaM5RLIxi",
      "title": "Multipath transport parameter should negotiate which version of the draft we are using",
      "url": "https://github.com/quicwg/multipath/issues/139",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Now that we are starting seeing several multipath implementations and interoperability works between them, it could be useful to keep in mind to negotiate different transport parameter values when raising new draft versions, especially if we are going to add new frames and/or change their type ids.",
      "createdAt": "2022-09-05T12:31:41Z",
      "updatedAt": "2023-01-23T17:52:38Z",
      "closedAt": "2023-01-23T17:52:38Z",
      "comments": [
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You would change the transport parameter so that one bit includes the multipath support and the other bits a version number or add another transport parameter which is informal and provides the draft version ?",
          "createdAt": "2022-10-18T11:25:33Z",
          "updatedAt": "2022-10-18T11:25:33Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think as long as people don't start deploying it, I would prefer to only have one number and not separate draft numbers.",
          "createdAt": "2022-10-18T12:08:36Z",
          "updatedAt": "2022-10-18T12:08:36Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "I think that ship might have already sailed. Best to pick a versioning approach now and just roll with it: I see no benefit in delaying",
          "createdAt": "2022-10-18T12:11:47Z",
          "updatedAt": "2022-10-18T12:11:47Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My initial idea was to update the TP value used. Currently, it is `0xbabf`, but the next one could be `0xbac0`, `0xbac1`,... for instance (or larger values to be sure there will be no clash with other potential extensions).\r\n\r\nI think there are already first interoperability efforts between implementations. Given that previous versions had breaking changes, I think we should update that value when these occur. Since the latest published version, I don't think such changes are present (yet), but we should keep that in mind.",
          "createdAt": "2022-10-18T13:24:21Z",
          "updatedAt": "2022-10-18T13:25:09Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "+1 Quentin ",
          "createdAt": "2022-10-18T13:42:31Z",
          "updatedAt": "2022-10-18T13:42:31Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 Quentin. One parameter per version is much cleaner.",
          "createdAt": "2022-10-18T17:13:00Z",
          "updatedAt": "2022-10-18T17:13:00Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, but I don't think the next revision will need a new value as I believe we so far only merged clarification, right? Or do you already want a new value because the old one is already not compatible with even older version?\r\n\r\nShould we add a sentence that non compatible version in future will use a new value? Or is there no need to explicitly say that in the draft and make sure we do it next time?",
          "createdAt": "2022-10-21T10:25:44Z",
          "updatedAt": "2022-10-21T10:25:44Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For this version, if until the draft cut-off we do not merge anything breaking and only included clarification/editorial changes, I would be ok. But starting from the next version, I would expect different TP values.\r\n\r\nI don't actually expect any additional text, but that was rather an issue I raised when we kept the same TP value while PATH_STATUS was present in one version but not the other. Of course, we can add some text in a \"to be removed before being an RFC\" section to specify this, but this is not required for me.",
          "createdAt": "2022-10-21T16:04:08Z",
          "updatedAt": "2022-10-21T16:04:08Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #149 was merged with a new value. Will close this issue now.",
          "createdAt": "2023-01-23T17:52:38Z",
          "updatedAt": "2023-01-23T17:52:38Z"
        }
      ]
    },
    {
      "number": 140,
      "id": "I_kwDOGNtpaM5SRbCw",
      "title": "Undefined error code \"MP_CONNECTION_ERROR\"",
      "url": "https://github.com/quicwg/multipath/issues/140",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In section 3, we wrote \r\n```\r\nIf endpoint receives an unexpected value for the transport parameter\r\n   \"enable_multipath\", it MUST treat this as a connection error of type\r\n   MP_CONNECTION_ERROR and close the connection.\r\n```\r\nBut in section 13, we don't have this error code definition. ",
      "createdAt": "2022-09-21T04:29:27Z",
      "updatedAt": "2022-09-21T08:55:23Z",
      "closedAt": "2022-09-21T08:55:23Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds like a duplicate of #136 ? :)",
          "createdAt": "2022-09-21T07:44:14Z",
          "updatedAt": "2022-09-21T07:44:14Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yep, let's discuss in #136. ",
          "createdAt": "2022-09-21T08:55:23Z",
          "updatedAt": "2022-09-21T08:55:23Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "I_kwDOGNtpaM5Snbl2",
      "title": "enable_multipath only has 0 and 1 as possible value",
      "url": "https://github.com/quicwg/multipath/issues/142",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Current text says that\r\n\r\n```\r\nEndpoints use 2-bits in the value field for negotiating one or more PN spaces,\r\navailable option values are listed in Table 1.\r\n```",
      "createdAt": "2022-09-26T13:17:10Z",
      "updatedAt": "2022-10-21T10:21:22Z",
      "closedAt": "2022-10-21T10:21:22Z",
      "comments": []
    },
    {
      "number": 144,
      "id": "I_kwDOGNtpaM5Tu0YM",
      "title": "How to specify over which path to send PING frames?",
      "url": "https://github.com/quicwg/multipath/issues/144",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently we don't mention PING frames in the draft, however, I guess there are use cases where an app wants to send a ping over one specific or both paths. We should probably say something about handling of PING frames if multiple path are available.",
      "createdAt": "2022-10-11T14:49:34Z",
      "updatedAt": "2022-10-24T12:45:31Z",
      "closedAt": "2022-10-24T12:45:31Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We already have the path challenge frame, which provides a way to test continuity of a specific path. I think it is better to leave ping \"connection wide\", parallel to data frames.",
          "createdAt": "2022-10-11T17:33:08Z",
          "updatedAt": "2022-10-11T17:33:08Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "That okay as well but we still would need more guidance how to send ping frames when multiple path are available. E.g. try one and if it fails, try the next. or just send a ping on each path...?",
          "createdAt": "2022-10-11T18:32:22Z",
          "updatedAt": "2022-10-11T18:32:22Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It depends whether you want to test continuity on the forward path, the connection, or the return path.\r\n\r\nThe forward path test is used form example when doing PMTUD or probe time-out. In that case, the Ping frame is sent on the path that the implementation wants to test, and the corresponding ACK will indicate that the packet sent on the specified path has been received. This is exactly as expected, and I don't think it requires clarification.\r\n\r\nThe connection test is used for example in keep-alive mechanisms. There are many possibilities, because this is only used when the connection is almost idle. Should such connections try to keep many paths alive or just one? I suppose different applications will have different constraints. In any case, once they have decided that, sending Ping frames on the selected path or paths is straightforward.\r\n\r\nThe return path is different. I don't think it can be tested using Ping, because there is no way to force ACK frames to use a specific return path. If an application want to do that, they have to use Path Challenge.",
          "createdAt": "2022-10-11T19:46:28Z",
          "updatedAt": "2022-10-11T19:46:28Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I tend to agree with Christian. How the application wants to send PING frames on available paths to probe forward path looks more like an API issue than a specification one. And I agree that testing the return path is not easy (beyond PATH_CHALLENGE/PATH_RESPONSE), but in general \"forcing\" scheduling policies on the other end is not possible (you can only suggest, as with PATH_STATUS frames).",
          "createdAt": "2022-10-12T06:50:19Z",
          "updatedAt": "2022-10-12T06:50:19Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, it mainly an API issue. However, I think there is one point we need to address.\r\n\r\nThis is what RFC9000 says:\r\n\r\n> With this option, an endpoint could send a PING frame ([Section 19.2](https://www.rfc-editor.org/rfc/rfc9000.html#frame-ping)) periodically, which will cause the peer to restart its idle timeout period. Sending a packet containing a PING frame restarts the idle timeout for this endpoint also if this is the first ack-eliciting packet sent since receiving a packet. Sending a PING frame causes the peer to respond with an acknowledgment, which also restarts the idle timeout for the endpoint.\r\n\r\nIf you send a PING only one path and don't get a response, you won't reset the timer and might close the connection even though another path might still be alive. I think that would be wrong.\r\n\r\nSo I think the two options are you either send PINGs on all paths; or you try one path first and if you don't get a reply, reset the timer and try the next one. ",
          "createdAt": "2022-10-12T13:01:31Z",
          "updatedAt": "2022-10-12T13:04:40Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak, you are describing the \"keep alive\" scenario. Yes, keep alive becomes a bit tricky in multipath, because the client may want to select how many paths it wants to keep alive, and which ones. For example, a client with Wi-Fi and cellular may want to keep the cellular path alive, because it will survive a mobility event. It may want to do that even if it is sending traffic over Wi-Fi. That's a local implementation decision. How they do that, however, is straightforward: send a Ping on the path that you want to keep alive.\r\n\r\nI think we should let implementers decide what they want to do. If we do add some text, is should be about keep alive, not about ping. Something like:\r\n```\r\n## Keep Alive\r\n\r\nThe QUIC specification defines an optional keep alive process, see {{Section 5.3 of RFC9000}}.\r\nImplementations of the multipath extension should consider whether this keep alive process\r\nshould be applied to at least one path, all the paths, no path, or a specific subset of the paths.\r\nDifferent applications will likely require different strategies. Once the implementation has\r\ndecided to keep a specific path alive, it can do so by sending Ping frames on that path before\r\nthe idle timeout expires.\r\n```\r\n\r\n",
          "createdAt": "2022-10-12T21:05:53Z",
          "updatedAt": "2022-10-12T21:06:36Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we should recommend sending out ping frames periodically on all paths for keep alive purpose. Sometimes,  if you don't send data on a path for some time, then the path will become a \"black hole\" for UDP packets, probably due to NAT black hole. But I think we already address it in 4.3.4. Idle Timeout part of the draft with the following text:\r\n\r\n\"To avoid idle timeout of a path, endpoints can send ack-eliciting packets such as packets containing PING frames ([Section 19.2](https://rfc-editor.org/rfc/rfc9000#section-19.2) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)]) on that path to keep it alive. Sending periodic PING frames also helps prevent middlebox timeout, as discussed in [Section 10.1.2](https://rfc-editor.org/rfc/rfc9000#section-10.1.2) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)].\"",
          "createdAt": "2022-10-13T10:41:05Z",
          "updatedAt": "2022-10-13T10:41:05Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds like we can add some guidance in the implementation section!",
          "createdAt": "2022-10-13T13:18:58Z",
          "updatedAt": "2022-10-13T13:18:58Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with Quentin and Christian that the problem is application dependent. We should avoid over specifying things in this section. For example, sending PING frames on all paths does not seem a good suggestion given that a connection may use more than two paths. We could have something like\r\n\r\n## Keep Alive\r\n\r\nThe QUIC specification defines an optional keep alive process, see {{Section 5.3 of RFC9000}}.\r\nImplementations of the multipath extension should map this keep alive process to a number of paths.\r\nSome applications may wish to ensure that one path remains active, while others could prefer to have two or more active paths during the connection lifetime. Different applications will likely require different strategies. \r\nOnce the implementation has decided which paths to keep alive, it can do so by sending Ping frames on each of these paths before the idle timeout expires. Implementations should jitter their timers to avoid sending Ping frames at the same time over different paths.\r\n",
          "createdAt": "2022-10-18T11:22:37Z",
          "updatedAt": "2022-10-18T11:22:37Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> ## Keep Alive\r\n> The QUIC specification defines an optional keep alive process, see {{Section 5.3 of RFC9000}}. Implementations of the multipath extension should map this keep alive process to a number of paths. Some applications may wish to ensure that one path remains active, while others could prefer to have two or more active paths during the connection lifetime. Different applications will likely require different strategies. Once the implementation has decided which paths to keep alive, it can do so by sending Ping frames on each of these paths before the idle timeout expires. Implementations should jitter their timers to avoid sending Ping frames at the same time over different paths.\r\n\r\nRight now, we have some texts like sending ack-eliciting packets such as PING frames to keep a path alive in Section 4.3.4. But I think we can merge the above text to better clarify this implementation guidance.\r\n\r\n\r\n\r\n",
          "createdAt": "2022-10-18T17:10:26Z",
          "updatedAt": "2022-10-18T17:10:26Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "So for keep alive purposes if you decide to send pings only over one or at least not all open paths, that would mean that you may not get a ping reply on those paths and close the connection even though another path, that you just decide for what every reason to not ping, is still working. That does seem quite right do me?\r\n\r\nAlso not sure about the recommendation to jitter pings. Ideally paths are distinct (to some extend at least) but even if not a ping frame is quite low load. I guess if you send too many ping frames at ones this could lead to a burst that overflows the short buffers but I guess that would need in most cases at least 10 or more pings. Not sure we need to give this recommendation...? ",
          "createdAt": "2022-10-21T10:33:06Z",
          "updatedAt": "2022-10-21T10:33:06Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I create a new PR (#148) with the proposed text as a new subsection in the implementation consideration part. However, not sure if this is ready to merge or needs further discussion...",
          "createdAt": "2022-10-21T10:38:52Z",
          "updatedAt": "2022-10-21T10:38:52Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> So for keep alive purposes if you decide to send pings only over one or at least not all open paths, that would mean that you may not get a ping reply on those paths and close the connection even though another path, that you just decide for what every reason to not ping, is still working. That does seem quite right do me?\r\n> \r\n> Also not sure about the recommendation to jitter pings. Ideally paths are distinct (to some extend at least) but even if not a ping frame is quite low load. I guess if you send too many ping frames at ones this could lead to a burst that overflows the short buffers but I guess that would need in most cases at least 10 or more pings. Not sure we need to give this recommendation...?\r\n\r\nI actually have similar questions. I think to keep it simple, if you want to keep paths alive, just send pings on every path. Sending pings at the same time over different paths should not be problematic as long as you have the frequency control.",
          "createdAt": "2022-10-22T04:40:53Z",
          "updatedAt": "2022-10-22T04:40:53Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We already have some text about how the PING frames influence the paths in Section [idle timeout](https://github.com/quicwg/multipath/blob/main/draft-ietf-quic-multipath.md#idle-timeout-idle-time-close). It mostly depends on implementations. We could simply add: \r\n> Different applications MAY require different keep alive strategies. Once the implementation has decided to keep a specific path alive, it can do so by sending Ping frames on that path before the idle timeout expires.",
          "createdAt": "2022-10-24T03:52:53Z",
          "updatedAt": "2022-10-24T03:52:53Z"
        }
      ]
    },
    {
      "number": 150,
      "id": "I_kwDOGNtpaM5UjVlj",
      "title": "Do we really need the PNS ID? And what happens when the connection ID changes on a single path?",
      "url": "https://github.com/quicwg/multipath/issues/150",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "If the connection ID is changed but the 5-tuple stays the same, the path ID changes as well but the packet number space ID sticks with the old/initial value and can be identified based on the 5 tuple. Is that correct? If so we should explain that somewhere.\r\n\r\nAlternatively, do we really need both a path ID and the PNS ID? Even for the single packet number space, you can simply use the normal ACK frame and therefore would not need the PNS ID.",
      "createdAt": "2022-10-21T15:55:48Z",
      "updatedAt": "2023-02-21T15:32:59Z",
      "closedAt": "2023-02-21T15:32:59Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Currently, from my understanding, if the CID changes over a path, then both the path ID and the packet number space (ID) change as well, given that you map the packet number space with the CID used. Also, if for some reason a passive migration (e.g. NAT rebinding) happens when changing the CID, the 5-tuple would change from the peer's viewpoint and I'm not sure how your mechanism's understanding would work there.\r\n\r\nRegarding the path ID and the PNS ID, IIRC we initially wanted to keep the door open to different path IDs and PNS IDs. Now, I'm not sure we want to use something else than the CID (sequence number) and if we simplify the draft to only describe the situation with non-zero length CIDs, we may get rid of these notions.",
          "createdAt": "2022-11-02T09:03:33Z",
          "updatedAt": "2022-11-02T09:03:33Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, we need to more clear in the draft what's updated when. Because that wasn't clear to me.\r\n\r\nIf we go for MPNS, we should consider removing the difference. If we keep both, we might need slightly more clarification of why both are needed.\r\n\r\nBut let's wait with this issue until we decided about PNS.",
          "createdAt": "2022-11-02T13:18:00Z",
          "updatedAt": "2023-02-21T13:04:03Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Opened #169 instead",
          "createdAt": "2023-02-21T15:32:58Z",
          "updatedAt": "2023-02-21T15:32:58Z"
        }
      ]
    },
    {
      "number": 151,
      "id": "I_kwDOGNtpaM5UjYPB",
      "title": "How to identify path initiation with zero-length connection ID?",
      "url": "https://github.com/quicwg/multipath/issues/151",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "If I received a packet on a new 5-tuple with a connection ID, I can associate it to an existing QUIC connection. However, if the packet does not have a connection ID, I can't. So I guess to make multipath work without use of connection IDs, whenever I receive a potential QUIC packet on any 5-tuple (that is not an initial packet or version negotiated packet), I would need to try to decrypt it with all possible keys of all open quic connections (or at least the one that don't use a connection ID). Do we really want to support that?\r\n\r\nI guess you can always just drop certain packets and only try to decrypt packets with the same destination address and port, or with a destination address and port that was somehow previously announced to the client. However, we should further discuss this in the draft or decide to require a connection ID (at least for the additional path; maybe the initial path could still have zero-length connection ID?).",
      "createdAt": "2022-10-21T16:05:24Z",
      "updatedAt": "2023-02-14T14:54:25Z",
      "closedAt": "2023-02-14T14:54:25Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "out-dated with merge of #149 ",
          "createdAt": "2023-02-14T14:54:25Z",
          "updatedAt": "2023-02-14T14:54:25Z"
        }
      ]
    },
    {
      "number": 152,
      "id": "I_kwDOGNtpaM5Ujbg0",
      "title": "Do we want to support zero-length connection ID and therefore single packet number space?",
      "url": "https://github.com/quicwg/multipath/issues/152",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "I created a PR that moves the single packet number space option into the appendix: #149 \r\n\r\nThis PR still support zero-length connection ID on the initial path and it also still supports reception of packets with zero-length connection ID (given path migration with zero-length ID is also not strictly forbidden). However, it requires the sender to use a non-zero connection ID when opening an additional path and recommends to send non ack-elicting packet only over one active path.\r\n\r\nThe intention is to leave the door open for experimentation but still make the spec shorter and more concise. However, I guess we could also decide to remove the single packet number space discussion entirely from this draft, or even allow zero-length connection ID packets only for migration but not for simultaneous use.",
      "createdAt": "2022-10-21T16:17:51Z",
      "updatedAt": "2023-02-14T14:57:21Z",
      "closedAt": "2023-02-14T14:57:21Z",
      "comments": [
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "I have had a similar thought in the past. It really might be worth the reduction in complexity to just say you have to use a CID if you do multipath. I think I would be ok with that restriction.",
          "createdAt": "2022-10-21T16:20:28Z",
          "updatedAt": "2022-10-21T16:20:28Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it might be useful to get inputs from the audience to know whether we want to keep support for zero-length CID for basic multipath. Given the adaptations that single packet number space requires, I wonder if this should be a separate draft that would extend the basic one (i.e., this one).",
          "createdAt": "2022-11-02T09:10:37Z",
          "updatedAt": "2022-11-02T09:10:37Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "This is more of a question, but is there a privacy concern by trying to establish a new path when zero-length CID is used?\r\n\r\n[RFC 9000 section 9.5](https://www.rfc-editor.org/rfc/rfc9000.html#section-9.5-7) states that:\r\n> An endpoint SHOULD NOT initiate migration with a peer that has requested a zero-length connection ID, because traffic over the new path might be trivially linkable to traffic over the old one. If the server is able to associate packets with a zero-length connection ID to the right connection, it means that the server is using other information to demultiplex packets. For example, a server might provide a unique address to every client -- for instance, using HTTP alternative services [[ALTSVC](https://www.rfc-editor.org/rfc/rfc9000.html#ALTSVC)]. Information that might allow correct routing of packets across multiple network paths will also allow activity on those paths to be linked by entities other than the peer.\r\n\r\nIIUC, when zero-length CID is being used on a multipath QUIC connection, paths shared by the connection would be trivially linkable, regardless of if a non-zero-length CID is used to establish a new path.\r\n\r\nAssuming that is the case, I think we have to discourage endpoints from using zero-length CIDs with multipath QUIC as well, even if we are to provide support for that.",
          "createdAt": "2022-11-07T12:59:52Z",
          "updatedAt": "2022-11-07T12:59:52Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we got sufficient consensus from IETF115 to remove support for single packet number space (waiting for confirmation from the ML). For zero-length CID, we may still keep this issue open, but as an individual, I agree with Kazuho's viewpoint.",
          "createdAt": "2022-11-07T14:09:57Z",
          "updatedAt": "2022-11-07T16:01:35Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> This is more of a question, but is there a privacy concern by trying to establish a new path when zero-length CID is used?\r\n> \r\n> [RFC 9000 section 9.5](https://www.rfc-editor.org/rfc/rfc9000.html#section-9.5-7) states that:\r\n> \r\n> > An endpoint SHOULD NOT initiate migration with a peer that has requested a zero-length connection ID, because traffic over the new path might be trivially linkable to traffic over the old one. If the server is able to associate packets with a zero-length connection ID to the right connection, it means that the server is using other information to demultiplex packets. For example, a server might provide a unique address to every client -- for instance, using HTTP alternative services [[ALTSVC](https://www.rfc-editor.org/rfc/rfc9000.html#ALTSVC)]. Information that might allow correct routing of packets across multiple network paths will also allow activity on those paths to be linked by entities other than the peer.\r\n> \r\n> IIUC, when zero-length CID is being used on a multipath QUIC connection, paths shared by the connection would be trivially linkable, regardless of if a non-zero-length CID is used to establish a new path.\r\n> \r\n> Assuming that is the case, I think we have to discourage endpoints from using zero-length CIDs with multipath QUIC as well, even if we are to provide support for that.\r\n\r\nWhy would the paths be \"trivially linkable\"? In the normal case, they would have different client IP addresses--how would the paths otherwise go different ways through the network?\r\n\r\nFWIW, I think it is quite straight forward to use multiple PN spaces and zero-length client CIDs.",
          "createdAt": "2022-11-09T14:15:38Z",
          "updatedAt": "2022-11-09T14:15:38Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue for now as PR #149 was merged. We can open a separate new issue on the question if we still want to enable server-to-client zero-CID with multiple packet number spaces.",
          "createdAt": "2023-02-14T14:57:21Z",
          "updatedAt": "2023-02-14T14:57:21Z"
        }
      ]
    },
    {
      "number": 153,
      "id": "I_kwDOGNtpaM5XrIoe",
      "title": "Any implementations of multipath quic?",
      "url": "https://github.com/quicwg/multipath/issues/153",
      "state": "CLOSED",
      "author": "nandsky",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Is there any multipath implementations besides xquic (\"https://github.com/alibaba/xquic/tree/beta/multipath-ietf-draft-01\") ?\r\n\r\nI would appreciate for any help.",
      "createdAt": "2022-12-01T08:57:21Z",
      "updatedAt": "2023-01-23T17:51:03Z",
      "closedAt": "2023-01-23T17:51:02Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To my knowledge, there are two other open-source implementations of Multipath QUIC: picoquic (https://github.com/private-octopus/picoquic) and \"work-in-progress\" Cloudflare's quiche (https://github.com/cloudflare/quiche/pull/1310). However, the specifications will again have breaking changes soon and I don't think we started interoperability tests yet (so beware for dragons). ",
          "createdAt": "2022-12-01T10:26:47Z",
          "updatedAt": "2022-12-01T10:26:47Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a question that is better suited for the mailing list. Feel free to shoot an email to quic@ietf.org ! But I will close this issue for now!",
          "createdAt": "2023-01-23T17:51:02Z",
          "updatedAt": "2023-01-23T17:51:02Z"
        }
      ]
    },
    {
      "number": 154,
      "id": "I_kwDOGNtpaM5cgyXW",
      "title": "Only use either Path ID or PNS ID",
      "url": "https://github.com/quicwg/multipath/issues/154",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "From PR #149 from @qdeconinck:\r\n\r\n> Maybe it can be addressed later, but given that the Path Identifier and the PNS ID are now always the same, we may simplify this section and only introduce one concept (i.e., the Path Identifier).",
      "createdAt": "2023-01-22T12:24:23Z",
      "updatedAt": "2023-02-22T07:57:18Z",
      "closedAt": "2023-02-22T07:57:18Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's do another editorial pass and evtl. some re-org first and then address this issue. I think we all already agreed that we only need one of the two. So we only need to decide with name we keep.",
          "createdAt": "2023-01-22T12:25:14Z",
          "updatedAt": "2023-02-14T14:58:37Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I prefer to use the name \"Path ID\", as it is more intuitive in the context of multipath.",
          "createdAt": "2023-02-01T08:58:37Z",
          "updatedAt": "2023-02-01T08:58:37Z"
        }
      ]
    },
    {
      "number": 155,
      "id": "I_kwDOGNtpaM5cgyhk",
      "title": "Get rid of the Identifier Type for the PATH_ABANDON and PATH_STATUS frames",
      "url": "https://github.com/quicwg/multipath/issues/155",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From PR #149 by @qdeconinck:\r\n\r\n> We can of course delegate this on a subsequent PR, but I think we should get rid of the Identifier Type for the PATH_ABANDON and PATH_STATUS frames. Also, I wonder it the value 1 should rather be the default (given https://github.com/quicwg/multipath/issues/137).",
      "createdAt": "2023-01-22T12:26:58Z",
      "updatedAt": "2023-01-31T03:16:54Z",
      "closedAt": "2023-01-31T03:16:54Z",
      "comments": []
    },
    {
      "number": 157,
      "id": "I_kwDOGNtpaM5ctG8D",
      "title": "Error code for missing CID during handshake",
      "url": "https://github.com/quicwg/multipath/issues/157",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "question",
        "design",
        "needs PR"
      ],
      "body": "Which the newly merged PR #149, the doc now says:\r\n\r\n\"If the parameter is set to 1, both endpoints MUST use non-zero connection IDs. If an enable_multipath parameter set to 1 is received and the carrying packet does not contain a non-zero length connection ID, the receiver MUST treat this as a connection error of type TRANSPORT_PARAMETER_ERROR (specified in {{Section 20.1 of QUIC-TRANSPORT}}) and close the connection.\"\r\n\r\nIs it okay to use the TRANSPORT_PARAMETER_ERROR code for this or do we need a different/new one?",
      "createdAt": "2023-01-24T16:54:22Z",
      "updatedAt": "2023-07-05T15:43:05Z",
      "closedAt": "2023-07-05T15:43:05Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it should be Okay. Basically, if a packet uses zero-length CID, the enable_multipath parameter should not be set to 1, and when it does, it is a TRANSPORT_PARAMETER_ERROR.",
          "createdAt": "2023-02-01T09:08:48Z",
          "updatedAt": "2023-02-01T09:08:48Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with the TRANSPORT_PARAMETER_ERROR solution (not sure it is valuable to define a new value here).",
          "createdAt": "2023-02-06T14:49:30Z",
          "updatedAt": "2023-02-06T14:49:30Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, I think we all agree. I'll leave the issue open until the next meeting to double-check with the group. No action needed so far.",
          "createdAt": "2023-02-14T14:51:44Z",
          "updatedAt": "2023-02-14T14:51:44Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "Discussion at IETF 116 indicated a strong preference for a new error code here.",
          "createdAt": "2023-03-30T00:54:19Z",
          "updatedAt": "2023-03-30T00:54:19Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "We already have the MP_PROTOCOL_VIOLATION. This is currently used a) if the wrong encryption level is used, however, we will change that (see issue #207) and b) if a cid seq number is used in a MP frame that was not assigned yet.\r\n\r\nI guess we want two different error codes for the case b above and the case where there is no CID in the handshake, right?\r\n\r\nI think the case b above should be a more specific error code like MP_INVALID_FRAME or even MP_INVALID_CID_SEQ_NUM. Do we want to use MP_PROTOCOL_VIOLATION for the handshake case or also give it a more specific name?",
          "createdAt": "2023-07-03T12:45:50Z",
          "updatedAt": "2023-07-03T12:45:50Z"
        }
      ]
    },
    {
      "number": 158,
      "id": "I_kwDOGNtpaM5ctIPi",
      "title": "Clarify use of RETIRE_CONNECTION_ID frame",
      "url": "https://github.com/quicwg/multipath/issues/158",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 9000 defines a way to request a peer to retire old CIDs, but only in-sequence (i.e., all CIDs with a sequence number less than n). This doesn't work when multiple CIDs are in use over different paths and you only want to retire one of them.\r\n\r\n(issue originally raised by @michael-eriksson)",
      "createdAt": "2023-01-24T16:58:02Z",
      "updatedAt": "2023-03-10T14:23:40Z",
      "closedAt": "2023-03-10T14:23:40Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think you actually mean the Retire Prior To field in the NEW_CONNECTION_ID frame? In the RETIRE_CONNECTION_ID frame, the sequence number field is the connection ID being retired, so it should be fine, but yes, in the context of multipath, we should apply Retire Prior To field in NEW_CONNECTION_ID with caution. I am wondering shall we say that when multipath is in use, an endpoint SHOULD NOT use Retire Prior To when issuing a new connection ID, but instead, retire CID one by one with the use of RETIRE_CONNECTION_ID frame?",
          "createdAt": "2023-02-18T04:31:41Z",
          "updatedAt": "2023-02-18T04:31:41Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "Yes, I mean that field. Note that the Retire Prior To field is a request to the peer to use RETIRE_CONNECTION_ID frames to retire CIDs issued by the first party. This means that you can not replace the Retire Prior To field with RETIRE_CONNECTION_ID frames as you suggest, since they work in \"different directions\".\r\n\r\nhttps://www.rfc-editor.org/rfc/rfc9000.html#section-5.1.2-5",
          "createdAt": "2023-02-20T10:48:16Z",
          "updatedAt": "2023-02-20T10:48:16Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, there is no direct relation between the ordering in which you receive the CIDs and the order of removing them in a multipath context. I'm also not sure that an endhost is required to use available DCIDs \"in-sequence\" (i.e., it may use the CID with seq 2 before using the CID with seq 1).\r\n\r\nBasically, let's consider the following example. Assume a two path scenario where the client uses DCID seq 0 on a path A and DCID seq 2 on a path B. At some point (e.g., the server might notice a NAT rebinding on path B), the server would like the client to retire the DCID with seq 2. The only way the server could force this behaviour is to send NEW_CONNECTION_ID frames with Retire Prior To set to 3, which would force the client to send RETIRE_CID frames. However, doing so would also force the client to retire DCID seq 0, which might not be required/needed/wanted.\r\n\r\nFWIW, [one of the previous multipath proposals](https://datatracker.ietf.org/doc/draft-deconinck-quic-multipath/07/) proposed to let the CID issuer split the CIDs into \"uniflow spaces\", i.e., pre-assign CIDs to specific paths. Such a design enables retiring a specific CID using the Retire Prior To without affecting the other paths, as the CID seq is path-specific. However, such a solution adds more complexity than the current draft, which is likely not desirable.\r\n\r\nIn the end, I'm not sure with the current proposal the aforementioned issue is a big one, but it would indeed deserve some documentation/discussion in the draft.",
          "createdAt": "2023-02-20T11:29:16Z",
          "updatedAt": "2023-02-20T11:29:16Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually if the other peer asks you to retire a CID that is currently in use, you can simply use a new CID on the path (this is true for both the uni- as well as multi-path case). As such this is also related to issue #160 and we should clarify these things.",
          "createdAt": "2023-02-21T12:59:34Z",
          "updatedAt": "2023-02-21T12:59:34Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created PR #171 to clarify what happens if no new CID is available. Maybe this helps here as well?",
          "createdAt": "2023-02-21T14:48:56Z",
          "updatedAt": "2023-02-21T14:48:56Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> Actually if the other peer asks you to retire a CID that is currently in use, you can simply use a new CID on the path (this is true for both the uni- as well as multi-path case). As such this is also related to issue #160 and we should clarify these things.\r\n\r\nDepending on the CID sequence numbers, it may be necessary for the peer to ask you to retire the CIDs also on *some or all other paths* (and thus also generate, install and signal a number of new CIDs) even if it just wants you to retire it on one of them. This is clearly suboptimal.",
          "createdAt": "2023-02-21T15:12:59Z",
          "updatedAt": "2023-02-21T15:12:59Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think that's problem. The question why would the CID issuer ask you to retire a CID. Usually this is probably some kind of clean up and in this cases it's actually the purpose that all old CID are replaces with newer ones. I believe this simply how it is intended. However, sure how this is actually implemented and used at the moment.",
          "createdAt": "2023-02-21T15:46:50Z",
          "updatedAt": "2023-02-21T15:46:50Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed by #171 that got merged.",
          "createdAt": "2023-03-10T14:23:40Z",
          "updatedAt": "2023-03-10T14:23:40Z"
        }
      ]
    },
    {
      "number": 159,
      "id": "I_kwDOGNtpaM5ctJba",
      "title": "Clarify that there are no limitations on the use of server IP address",
      "url": "https://github.com/quicwg/multipath/issues/159",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "This draft only enables clients to open a new path, so the most common scenario is that the client has another interface and opens a new path from a new IP address. However, if the client knows another IP that the server is listing on to accept new paths for an existing quic connection (e.g. provided on the higher layer or out of band), that can be used as well. It would be useful to discussion this case more in the draft to ensure that it is clear that this case is supported.",
      "createdAt": "2023-01-24T17:01:16Z",
      "updatedAt": "2023-02-22T05:02:31Z",
      "closedAt": "2023-02-22T05:02:31Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think as people who implement multipath will mostly refer to this draft, we may want to clarify all scenarios supported by this draft: (1) client has multiple IPs while server listens on single IP, (2) client uses single IP while server listens on multiple IP, and (3) client uses multiple IPs and the server also uses multiple IPs.",
          "createdAt": "2023-02-18T03:42:18Z",
          "updatedAt": "2023-02-18T03:42:18Z"
        }
      ]
    },
    {
      "number": 160,
      "id": "I_kwDOGNtpaM5ctL1R",
      "title": "Clarify support of migration",
      "url": "https://github.com/quicwg/multipath/issues/160",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "RFC9000 allows endpoints to change the CID any time on a path. So it's not automatically a new path if a new CID is seen. This should be noted explicitly in the draft.\r\n\r\nFurther, also migration can happened without endpoint control (NAT rebinding). In this case the server will see a new 4-tuple but no CID change. In line with RFC9000 the server should start path validation and then the client should use a new CID. In case of multipath support we need to clarify if and when this is treated as a new path. If seen as a new path, we would probably need to close the old one (which however is not functional anymore). However, if e.g. only the port number changes, RFC9000 also would also to not reset the congestion control. In this case it would make sense to not treat it as a new path.",
      "createdAt": "2023-01-24T17:07:23Z",
      "updatedAt": "2023-03-10T14:16:44Z",
      "closedAt": "2023-03-10T14:16:44Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree. I think we might add sth like:\r\n<pre>\r\n   New CID ---yes---> new 4-tuple ---yes---> new path\r\n       |                  |\r\n       |                  No\r\n       No                 |\r\n       |                  ---> use new CID on same path\r\n       |\r\n       ----->4-tuple change----yes----> only port number change ----yes----> NAT rebinding ( do not rest CC)\r\n                 |                                 |\r\n                 |                                 No\r\n                 No                                |\r\n                 |                                 -----> connection migration & reset CC\r\n                 |\r\n                  -------> no change\r\n</pre>",
          "createdAt": "2023-02-18T04:58:15Z",
          "updatedAt": "2023-02-18T05:12:20Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "@yfmascgy, I think your decision tree above is too brittle. In particular, if an implementation has a time-based CID change policy, it's very easy that both the CID and the NAT binding change at the same time after an idle period.\r\n\r\nAs I have indicated elsewhere, I think that there should be a PATH_SETUP (or maybe PATH_MANAGEMENT) frame, where path setup, CID change etc can be explicitly signaled. Implicit path setups and CID changes are just too vague and error prone...",
          "createdAt": "2023-02-21T15:04:41Z",
          "updatedAt": "2023-02-21T15:04:41Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created PR #172 that states that any path validation creates a new path (even if only the port changes). I believe this is more clear and avoids inconsistencies on both sides. However, we might discuss this case a bit more.",
          "createdAt": "2023-02-21T15:43:58Z",
          "updatedAt": "2023-02-21T15:43:58Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @yfmascgy, I think your decision tree above is too brittle. In particular, if an implementation has a time-based CID change policy, it's very easy that both the CID and the NAT binding change at the same time after an idle period.\r\n>  \r\nThe current draft manages the path idle issues with \"Sending periodic PING frames also helps prevent middlebox timeout.\" Sending periodic PINGs to keep a path alive should greatly reduce the chance of such a NAT rebinding. So I am wondering is it a corner case? and is it worth adding new frames to address it?\r\n\r\n",
          "createdAt": "2023-02-24T08:01:39Z",
          "updatedAt": "2023-02-24T08:01:39Z"
        }
      ]
    },
    {
      "number": 162,
      "id": "I_kwDOGNtpaM5dJcsq",
      "title": "Use of normative language for congestion control",
      "url": "https://github.com/quicwg/multipath/issues/162",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "Currently the draft say:\r\n\r\n> Senders MUST manage per-path congestion status, and MUST NOT send more data on a given path than congestion control on that path allows. This is already a requirement of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)].[\u00b6](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-5-1)\r\n\r\nHowever, we should not use normative language in this draft but just point to RFC9000 instead as things are defined normatively there already.\r\n\r\nBtw. this reference should point to section 13.3 (\"Upon detecting losses, a sender MUST take appropriate congestion control action.\") and 9.4 (\"Packets sent on the old path MUST NOT contribute to congestion control or RTT estimation for the new path.\") of RFC9000 specifically and maybe also to RFC9002 directly.",
      "createdAt": "2023-01-30T16:21:39Z",
      "updatedAt": "2023-02-22T03:07:51Z",
      "closedAt": "2023-02-22T03:07:51Z",
      "comments": []
    },
    {
      "number": 164,
      "id": "I_kwDOGNtpaM5eTtp2",
      "title": "Unclear (inconsistent?) mapping of Path ID in PATH_STATUS and PATH_ABANDON frames",
      "url": "https://github.com/quicwg/multipath/issues/164",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "Since #156, we now define the Path ID as (Section 1.1)\r\n```\r\nthe sequence number of the destination Connection ID\r\nused for sending packets on that particular path.\r\n```\r\n\r\nAnd the definition of the `Path ID` as the field of PATH_ABANDON and PATH_STATUS frames directly maps to that identifier path (i.e., the sequence number of the destination Connection ID used for sending packets on that particular path, Sections 8.1 and 8.2).\r\n\r\nBut in Section 6.2, the example states that \r\n```\r\n[the Path ID] identifies the path by the sequence number of the received packet's DCID over that path\r\n```\r\n\r\nI believe the current text is unclear and should be fixed. Yet, I see two possible ways of doing so. We should either state that\r\n\r\n- the `Path ID` field of these frames refer to the Path ID used by the receiver of the frame, or\r\n- add some information to indicate that it refers to the Path ID viewed from the sender's/receiver's viewpoint (that could be encoded as a bit in the frame's type)",
      "createdAt": "2023-02-13T12:05:04Z",
      "updatedAt": "2023-02-22T03:07:38Z",
      "closedAt": "2023-02-22T03:07:38Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Is there any use case for either using the sender's or receiver's ID? If not, I'd prefer we simply choose one and define it clearly.",
          "createdAt": "2023-02-14T14:30:34Z",
          "updatedAt": "2023-02-14T14:30:34Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "(P.S.: I think the text in the example is just wrong. I think I messed this up in #156.)",
          "createdAt": "2023-02-14T14:32:24Z",
          "updatedAt": "2023-02-14T14:32:24Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IMHO it makes more sense to me to use the sender's ID by default, especially if we consider only client-initiated paths.",
          "createdAt": "2023-02-15T08:29:59Z",
          "updatedAt": "2023-02-15T08:29:59Z"
        }
      ]
    },
    {
      "number": 169,
      "id": "I_kwDOGNtpaM5e-kdQ",
      "title": "Does the Path ID change if the CID changes or not?",
      "url": "https://github.com/quicwg/multipath/issues/169",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Currently it seems that the assumption is that the Path ID changes if the CID changes, however, this makes handling of MP frames that contain the path ID more complicated because you have to remember the old path ID to process these frames even when the CID is retired. Is there any good reason why we don't keep the Path ID constant over the life time of a path?",
      "createdAt": "2023-02-21T13:11:28Z",
      "updatedAt": "2023-03-10T02:58:57Z",
      "closedAt": "2023-03-10T02:58:57Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Also note if you retire an CID (e.g. because it's requested by the peer in the NEW_CONNECTION_ID Frame Retire Prior To field) and you don't have a new CID available anymore (yes, this should usually not happen), you cannot send a PATH_ABANDON frame anymore because you don't have valid Path ID (and we don't have the type field anymore).",
          "createdAt": "2023-02-21T13:36:47Z",
          "updatedAt": "2023-02-21T13:36:47Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The sequence number is tied to the CID, because of encryption. If we tie it to something else, we are just moving the problem, because then we have to worry about mapping the CID to a path ID.\r\n\r\nYes, this has a couple of constraints. If a CID is actually retired, there is not way to acknowledge the packets that were sent using that CID. Effectively, they are treated as lost. The obvious solution is to write \"don't do that\" guidelines. Basically, wait a couple RTO before retiring a CID, so the ACK have time to arrive.\r\n\r\nThe other constraint is that ACK-MP carry the ID used when sending the packets. This is not a huge constraint, but it is an exception to the proposed \"same path for ACK\" policy. But the main argument for that same path policy is about computing timers. That argument does not really apply when renewing the CID.\r\n\r\nSame issue for the path abandon. If packets are sent on the same four tuple with a new CID, just abandon that.\r\n\r\n",
          "createdAt": "2023-02-26T19:17:54Z",
          "updatedAt": "2023-02-26T19:17:54Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In addition to the encryption consideration as mentioned above. I remember there was another reason why the sequence number of CID was chosen to identify a path. It brings us back to the definition of what is a path and what is a path identifier.\r\n\r\nBy definition of the draft and RFC9000, a path is defined by a 4-tuple {source IP address, source port number, destination IP address, destination port number}, and a path ID is an identifier used to identify a path. That means we need to construct a mapping between a path ID and the associated 4-tuple.\r\n\r\nHowever, there are couple of issues. First, the client's view and the server's view of the 4-tuple are not the same due to NAT.  Second, the 4-tuple can change due to (1) network path migration (think about the case where our phone's wifi is connected to a wifi router that has two outbound networks to the internet, one wireline and one satellite, and the router can switch between the two), and (2) NAT rebinding. If we use a constant path ID, then the path ID does not uniquely identify a 4-tuple, but instead, there will be a one-to-many mappings from a path ID to 4-tuples. \r\n\r\nIn #179, Quentin proposed to use entry point IDs to identify a path, I think this identification is stable in the case of NAT rebinding, where the 4-tuple changes but the physical path is actually unchanged. However, the problem is that when the underlying path has changed (in the above case, a router may switch packet from the wireline to the satellite to perform failover) while the entry point IDs on the end-hosts remain unchanged, then we end up using the same path identifier to identify different paths.\r\n\r\nThese problems can be solved when using QUIC's CID sequence number to identify a path. First, it allows the client and server to identify a path separately as they see different 4-tuples. Second, when 4-tuple changes, we eventually use new CIDs to communicate and thus, the mapping between a path ID and the 4-tuple remains as a one-to-one mapping. Third, we are logically correct in the case when the physical path indeed has migrated while the endhost interfaces are not changed.\r\n\r\n",
          "createdAt": "2023-02-27T04:49:49Z",
          "updatedAt": "2023-02-27T06:57:17Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think that \"this makes handling of MP frames that contain the path ID more complicated\". You have a code object holding the list of packets to acknowledge (receiver side), or an object containing the list of packets not acknowledged yet (sender side). These objects are tied to the connection ID. Nothing particularly complicated there: the sender knows exactly which connection ID it uses for a given packet; the receiver knows exactly what connection ID was carried in the packets that it received.\r\n\r\nThe issue that you mention comes from the ambiguity of \"Abandon Path\", \"Retire connection ID\", and \"retire previous connection ID\". We have to be clear about what that means:\r\n\r\n* Abandon Path means \"please do not send any more packets on that path\". No ambiguity there. It also implies: \"you can free the resource of that path at your convenience\". We need to specify how and when, there is some leeway.\r\n* Retire Connection ID\" means \"I have deleted all resource tied to the connection ID on my side\", which implies \"I will not use this connection ID to send any new packet\" and also \"I will not accept any new MP-ACK sent using the sequence number of that CID\".\r\n* \"retire previous CID\" means \"please retire these CID quickly\". RFC 9000 says \"The endpoint SHOULD continue to accept the previously issued connection IDs until they are retired by the peer\", so there is some leeway.\r\n\r\nSo I guess we have the following actions:\r\n\r\n* A node decides to stop using a CID, i.e., not send any more packet using that CID. The node can do that at any time on its own will, and SHOULD do that immediately after receiving an Abandon_Path frame, or after receiving a \"retire before\" indication.\r\n* The node should wait 3*RTO after that decision, so pending acknowledgements have enough time to arrive.\r\n* After 3*RTO, the node deletes the local resource, including the list of packets not acknowledged yet. Those packets should be considered lost.\r\n* The node then sends a Retire Connection ID frame.\r\n* The node receiving the Retire Connection ID frame deletes the resource associated with the CID, i.e., the list of packets to acknowledge. If the peer did wait long enough before sending Retire Connection ID frame, that list should be empty. If it is not, too bad, it can still be deleted, these packets will never be acknowledged, but the sender of the CID does not care.\r\n* After that, a node can still received an MP-ACK or an Abandon_Path mentioning an old CID, because we do have race conditions. Such frames should be silently ignored.\r\n\r\nDoes that remove the ambiguities? ",
          "createdAt": "2023-02-27T06:13:40Z",
          "updatedAt": "2023-02-27T06:13:40Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the current specification (i.e., rely on sequence number of Destination CID to identify a path in PATH_STATUS/PATH_ABANDON) works fine as long as 1) the perceived 4-tuple of a network path remains stable, or 2) the DCID used on a network path remains stable. Also, if the peer has no timing restrictions about when retiring a CID, this is fine as well.\r\n\r\nHowever, when receiving a NEW_CONNECTION_ID frame with a \"Retire Prior To\" field forcing the receiver to remove DCIDs, RFC 9000 states that \"Upon receipt of an increased Retire Prior To field, the peer MUST stop using the corresponding connection IDs and retire them with RETIRE_CONNECTION_ID frames before adding the newly provided connection ID to the set of active connection IDs.\". Not sure the receiver of the NEW_CONNECTION_ID may delay the retirement of DCIDs for a long period. Once retired, the host cannot reference the paths identified by the retired CIDs in, i.e., PATH_ABANDON frames, which may be an issue if the peer does not provide enough new CIDs.\r\n\r\nBut the current path identification is fragile when one host (the client) changes the DCID used over a *same perceived* 4-tuple, but that the other (the server) *perceives a different* 4-tuple (typical case of NAT rebinding). The client will keep a single view of that path, but the server will have two different views having different 4-tuples and Path IDs for an actual same path, hence bringing path identification ambiguity here.\r\n\r\n@yfmascgy As long as the 4-tuple does not change, there is no \"path change\" from the QUIC viewpoint. Having \"backbone router path migration\" will be transparent to the endmost (although the path characteristic conditions such as the latency and bandwidth may change). The EntryPoint ID proposal is mainly to keep stable path identification in PATH_ABANDON/PATH_STATUS frames when 1) CIDs change and the sender's perceived 4-tuple is stable but the receiver's perceived 4-tuple is not, and 2) when there is no more usable CID over the (network) path to reference.",
          "createdAt": "2023-02-27T10:33:12Z",
          "updatedAt": "2023-02-27T10:33:12Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So the scenario that you worry about is \"what if the client sleeps for a while, then decides to switch the connection ID before sending new packets\". This is actually a recommended behavior, for privacy reasons, so we have better get it right.\r\n\r\nI think that the current proposal mostly works. After the migration, the new packets sent by the client will be tied to the new CID on both sides -- see previous points about tying number space to connection IDs. There is no ambiguity about packet number space, packets will be correctly acknowledged, etc. The Abandon_Path or MP_ACK frames will not be ambiguous: they refer to the number space, not to the abstract concept of Path.\r\n\r\nThe main problem is that the server will probably NOT treat the incoming packet with a new CID as a \"nat rebinding\". The algorithm pretty much defines NAT rebinding as \"same CID, different addresses or ports\". The conforming server will treat that as a new path, perform address validation, etc. If the server tries to use the old \"path\", the packets will be dropped by the NAT. The connection will recover eventually, but after some packet losses, and yes, that's not desirable.\r\n\r\nI think the simplest solution is for the client to somehow tell the server what it is doing. \"These packets carry CID sequence number 7. For me, this is the same path as when previously using CID sequence number 4.\" My gut feeling is that this can be achieved by sending an \"Abandon_Path(id=4, errorCode=CidRenewal)\" when starting sending with CID 7. Specify something like that in the spec, document the error code, etc. ",
          "createdAt": "2023-02-27T15:38:20Z",
          "updatedAt": "2023-02-27T15:38:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Please note that PR #172 is related here. In this PR I propose that a new 4-tuple is always treated as a new path and therefore always triggers path validation which then ensures to create a new path on both sides. I thought a while about this scenario when working on this PR and believe that's the easiest, non ambiguous solution which I think is inline with the multipath idea.\r\n\r\nFurther, I think that en-/decryption and the path ID do not need to be entangled. Of course we need to use the CID to decrypt the packet, however, I don't think that changing the CID (without changes of the 4-tuple) creates a new packet number space. This is not the case in RFC9000 and should not be the case here.",
          "createdAt": "2023-02-27T15:53:07Z",
          "updatedAt": "2023-02-27T15:53:07Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Please note that PR #172 is related here. In this PR I propose that a new 4-tuple is always treated as a new path and therefore always triggers path validation which then ensures to create a new path on both sides. I thought a while about this scenario when working on this PR and believe that's the easiest, non ambiguous solution which I think is inline with the multipath idea.\r\n> \r\nI actually agree with this idea. It is simple and non-ambiguous. Also note that NAT rebinding is a low possibility event. I think the cost for treating a new 4-tuple as a new path is negligible.\r\n\r\n",
          "createdAt": "2023-02-28T06:44:41Z",
          "updatedAt": "2023-02-28T06:44:41Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @yfmascgy As long as the 4-tuple does not change, there is no \"path change\" from the QUIC viewpoint. Having \"backbone router path migration\" will be transparent to the endmost (although the path characteristic conditions such as the latency and bandwidth may change). The EntryPoint ID proposal is mainly to keep stable path identification in PATH_ABANDON/PATH_STATUS frames when 1) CIDs change and the sender's perceived 4-tuple is stable but the receiver's perceived 4-tuple is not, and 2) when there is no more usable CID over the (network) path to reference.\r\n\r\nIt is not necessarily true that the router path migration is always transparent. In the case when a wifi router switches between a terrestrial ISP and a satellite backbone, the outbound packet may have different source IP addresses since the satellite network and the terrestrial network are operated by different ISPs. In this case, the path switching will cause 4-tuple to change.\r\n\r\n",
          "createdAt": "2023-02-28T06:52:45Z",
          "updatedAt": "2023-02-28T06:52:45Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The difference between \"new path\" and \"rebinding\" is probably less than it sounds. In the behavior suggested by RFC 9000, arrival of packets with the same CID and a new 4-tuple triggers both validation of the new path using Path Challenge, and verification that the old path is actually gone by a parallel Path Challenge on the old path. The verification is there to deal with a potential attack in which an on path attacker (e.g., somebody on the same Wi-Fi network) can capture a 1RTT packet sent by the client, and then resent it from a spoofed IP address.\r\n\r\nI am a bit concerned that \"treating NAT rebinding as a new path\" will keep the Path Challenge on the new path, but not the verification attempt of the old path, and thus expose us to the attack that the verification is meant to mitigate.",
          "createdAt": "2023-02-28T07:07:43Z",
          "updatedAt": "2023-02-28T07:07:43Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@yfmascgy when you say \"a wifi router switches between a terrestrial ISP and a satellite backbone\" is that you want the concept of path in QUIC to follow the topology changes in the network. But we should recognize that this will not always be possible. For example, routing changes can always cause a single 4-tuple to be suddenly routed in a very different way.",
          "createdAt": "2023-02-28T07:11:42Z",
          "updatedAt": "2023-02-28T07:11:42Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @yfmascgy when you say \"a wifi router switches between a terrestrial ISP and a satellite backbone\" is that you want the concept of path in QUIC to follow the topology changes in the network. But we should recognize that this will not always be possible. For example, routing changes can always cause a single 4-tuple to be suddenly routed in a very different way.\r\n\r\nI think if the 4-tuple does not change, we do not pursue the goal of following the topology change as it is basically not possible. However, my point is when there is a topology change and a 4-tuple change (now we have a detectable signal), we probably do not want to treat it as a NAT rebinding. As we are actually on a different path, retaining the congestion control state and round-trip estimate does not seem to be right. A more reasonable action is to treat it as a new path and reset the congestion controller, right?",
          "createdAt": "2023-02-28T07:28:45Z",
          "updatedAt": "2023-02-28T07:28:45Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> So the scenario that you worry about is \"what if the client sleeps for a while, then decides to switch the connection ID before sending new packets\". This is actually a recommended behavior, for privacy reasons, so we have better get it right.\r\n\r\nExactly.\r\n\r\n> I think the simplest solution is for the client to somehow tell the server what it is doing. \"These packets carry CID sequence number 7. For me, this is the same path as when previously using CID sequence number 4.\" My gut feeling is that this can be achieved by sending an \"Abandon_Path(id=4, errorCode=CidRenewal)\" when starting sending with CID 7. Specify something like that in the spec, document the error code, etc.\r\n\r\nI think the proposed approach here could keep changes minimal, although this is not yet perfect. If the client sends two packets with the new CID, but the first one containing such information is lost (but not the second one, which experiences NAT rebinding), then we still face the issue. Of course, we will eventually recover the situation, but there will be a transient state here.\r\n\r\n> Also note that NAT rebinding is a low possibility event.\r\n\r\nMaybe, but I'm not convinced we should take this assumption as granted.\r\n\r\nMore generally, I start thinking about possible security issues we may encounter with this, where the client may frequently rotate the DCID it uses over a path for legitimate purposes, but an on-path attacker may tweak the 4-tuple, hoping it will make it create a lot of (invalid) paths' states at server side. Not sure this will be a strong issue, but we will need to document that at some point.\r\n\r\n> I think if the 4-tuple does not change, we do not pursue the goal of following the topology change as it is basically not possible. However, my point is when there is a topology change and a 4-tuple change (now we have a detectable signal), we probably do not want to treat it as a NAT rebinding. As we are actually on a different path, retaining the congestion control state and round-trip estimate does not seem to be right. A more reasonable action is to treat it as a new path and reset the congestion controller, right?\r\n\r\nI think in case we notice a path \"migrated\" (same CID, different 4-tuple), we can apply the \"RFC9000 connection migration\" feature on a per-path level. In such case, we can follow Section 9.4 of RFC9000, stating that congestion control/RTT must be reset, unless it experiences a port-only change (reset is not mandatory in such cases).\r\n",
          "createdAt": "2023-02-28T10:13:37Z",
          "updatedAt": "2023-02-28T10:13:37Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's take a step back. Using the current path identifier mechanism, we are fine if (1) CID changes but tuple does not change  and (2) tuple changes but CID does not change. The only difficult case is when the client uses a new CID and the tuple changes (NAT rebinding) at the same time. Note that a NAT rebinding is improbable if packets were recently received on the old path (also see section [9.3.3 in RFC9000](https://rfc-editor.org/rfc/rfc9000#section-9.3.3)). A NAT rebinding mostly happens if a path is idle for some time, but that is already managed by the [4.3.4 in the current draft](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-idle-timeout):\r\n\r\n\"Hosts SHOULD stop sending traffic on a path if for at least the period of the idle timeout as specified in [Section 10.1.](https://rfc-editor.org/rfc/rfc9000#section-10.1.) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)] (a) no non-probing packet was received or (b) no non-probing packet sent over this path was acknowledged, but MAY ignore that rule if it would disqualify all available paths.\"\r\n\r\nIn other word, if a path is idle long enough such that the 4-tuple is changed by NAT, it should have already been closed except there is only one path left. Therefore, the chance that the server sees (1) >=2 active paths and (2) a packet that has a new CID and a new 4-tuple at the same time is low.\r\n\r\nWhen the server sees (1) >=2 active paths and (2)  a packet that has a new CID and a new 4-tuple, the issue is that we don't know which path the packet belongs to. Hence, we just treat it as an attempt for a new path as @mirjak suggested. However, in the current draft, when the client initiates a new path, the packet should contain a PATH_CHALLENGE frame (see [figure 2](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-path-establishment)). If the packet does not contain PATH_CHALLENGE, we should just ignore the packet, which eventually leads to path closure as specified by the current draft (see [figure 1](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#fig-path-states)). Note that in doing so, we are also resilient to the attacks mentioned by @qdeconinck that \"the client may frequently rotate the DCID it uses over a path for legitimate purposes, but an on-path attacker may tweak the 4-tuple, hoping it will make it create a lot of (invalid) paths' states at server side\". \r\n\r\nWhen the server sees (1) only 1 active path and (2) a packet of a new CID and a new 4-tuple but that packet does not have PATH_CHALLENGE, it knows which path the packet belongs to, and we just follow what single path QUIC does and the behavior of multipath quic and single path quic converge in this case.\r\n\r\nTherefore, I think the current draft can already address the issue, and we probably just want to stick to what we have with some minor modifications.",
          "createdAt": "2023-02-28T10:25:47Z",
          "updatedAt": "2023-02-28T11:00:22Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "If the server sees a packet with a new CID and new 4-tuple but without path challenges it should ignore it as it can't associate it with an existing path. If the client switches to a new path (new 4-tuple) it has to use a new CID and send a path challenges frame.\r\n\r\nThe problem I'm trying to address are cases where the CID (and path ID) changes for whatever reason and we received some valid frames with the old path ID that we can't associate to anything anymore and therefore (unnecessarily) need to drop. Yes, this should not happened that often, so dropping is not the worst option, however, I think having a stable path ID would also make the whole approach logically easier, but maybe that's something we need to discuss and agree on.\r\n\r\nNote that if we change the path ID, that automatically means that we have to silently ignore any unknown path ID as we never know for sure if it was an old path ID or really a completely invalid one. Otherwise we could create an error if we receive an invalid path ID. This could help to avoid that the end get out of sync. However, not sure if that is actual a problem that needs solving.\r\n\r\nIn both cases I think we definitely need to clarify some things in the draft and make sure the taken approach is crystal clear to the reader.",
          "createdAt": "2023-02-28T11:44:11Z",
          "updatedAt": "2023-02-28T11:44:11Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "When to reset the congestion controller? That's a very generic problem, and the IETF is creating a WG to study this kind of issues. I think we should not try to invent a multipath specific solution, and just stick with whatever RFC 9000 says now, or what new RFCs will say later.",
          "createdAt": "2023-02-28T15:52:54Z",
          "updatedAt": "2023-02-28T15:52:54Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The more I read this discussion, the more I think we should stick to the path handling specification in RFC 9000. Do a [search for NAT](https://github.com/quicwg/base-drafts/issues?page=2&q=is%3Aissue+NAT) in the archive of QUIC GitHub issues, and you find a big list of messages. Lots of history there, with discussion of congestion control, security issues, DOS attacks, etc. Of course, we could have these discussions again in the multipath context, but we would converge much faster if we did not!",
          "createdAt": "2023-02-28T16:18:38Z",
          "updatedAt": "2023-02-28T16:18:38Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "We should not change the guidance on congestion control in RFC9000. However, otherwise I don't really understand what you mean by \"stick to path handling in RFC9000\". RFC9000 only has one path at a time, however, this is exactly the part that this extension is changing, so I don't see it as a deviation from the migration handling in RFC9000. Again we have to make a decision and define it clear but wouldn't one or the other solution is more inline with RFC9000 or not. ",
          "createdAt": "2023-02-28T18:00:02Z",
          "updatedAt": "2023-02-28T18:00:02Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looking back at Mirja's original question, \"Currently it seems that the assumption is that the Path ID changes if the CID changes, however, this makes handling of MP frames that contain the path ID more complicated because you have to remember the old path ID to process these frames even when the CID is retired. Is there any good reason why we don't keep the Path ID constant over the life time of a path?\" \r\n\r\nI think we should just bite the bullet, and acknowledge that retiring a CID makes it unusable in the future -- MP frames mentioning the corresponding ID will just be silently ignored. Yes, this can cause for example some spurious packet loss detection, but that can be minimized with strict rules about when to retire a CID -- the various RTO guidelines that we discussed in other threads. Better expose the consequence clearly, so nodes that think of retiring a CID think twice.",
          "createdAt": "2023-02-28T20:00:34Z",
          "updatedAt": "2023-02-28T20:00:34Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As for \"same as RFC 9000\", yes we will of course have one difference, since we handle multiple parallel paths. I am really looking at the reactions to NAT rebinding, how we define what is a NAT rebinding and what is not, etc.",
          "createdAt": "2023-02-28T20:03:20Z",
          "updatedAt": "2023-02-28T20:03:20Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we can use path ID mechanism of the current draft with the addition of the following rules to address the issues discussed in this thread:\r\n\r\n(1) **Addressing the corner case when new CID and NAT rebinding happen at the same time.** When an endpoint receives a packet that has (new CID, new tuple), check if the packet is trying to initialize a new path (i.e., whether it contains a PATH_CHALLENGE). If it has PATH_CHALLENGE, try creating a new path. If it has no PATH_CHALLENGE and we don't know which path the packet is associated with (num. of paths>=2), discard the packet. If there is only one path, we perform path validation as single path QUIC does.\r\n\r\n(2) **Addressing the issue that you cannot send PATH_ABANDON when you don't have CIDs available to use on a path.**\r\n>Also note if you retire an CID (e.g. because it's requested by the peer in the NEW_CONNECTION_ID Frame Retire Prior To field) and you don't have a new CID available anymore (yes, this should usually not happen), you cannot send a PATH_ABANDON frame anymore because you don't have valid Path ID (and we don't have the type field anymore).\" \r\n\r\nWhen an endpoint receives a NEW_CONNECTION_ID frame that has retire_prior_field set **and** it finds that the retire_prior_to field will cause it to have no more CIDs to send packets on a particular path, before sending RETIRE_CONNECTION_ID frame, it first sends PATH_ABANDON frame to signal path closure to the peer.\r\n\r\n",
          "createdAt": "2023-03-01T06:35:38Z",
          "updatedAt": "2023-03-01T06:35:38Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@yfmascgy I think I can live with your proposed rules. Adding some text stating that a client SHOULD include a PATH_CHALLENGE frame when it changes the DCID it uses (even if it does not change the 4-tuple used) is reasonable to address the aforementioned corner cases.\r\n\r\nI wonder though if it would make sense to define a small informative frame to indicate to the client that the new DCID seen has been rejected as it cannot map to an existing path, to suggest the client it should retire the CID and retry with a new one while bundling PATH_CHALLENGE, but not a big concern though.",
          "createdAt": "2023-03-01T09:45:55Z",
          "updatedAt": "2023-03-01T09:45:55Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "So, yes we can make it work with changing the path ID. But I wonder if things would be simpler if we keep it stable. So asking my initial question again: what are the drawbacks when we try to keep it stable?",
          "createdAt": "2023-03-01T10:33:26Z",
          "updatedAt": "2023-03-01T10:33:26Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it would be nice to have stable Path IDs. However, all the challenge resides in how we could define such stable \"path identifiers\", as the sending/receiving paths may use different CIDs over their lifetime and may perceive different 4-tuples.",
          "createdAt": "2023-03-01T13:40:14Z",
          "updatedAt": "2023-03-01T13:40:14Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I think it would be nice to have stable Path IDs. However, all the challenge resides in how we could define such stable \"path identifiers\", as the sending/receiving paths may use different CIDs over their lifetime and may perceive different 4-tuples.\r\n\r\nThat is a good point. The fundamental issue is that in reality a path is only precisely defined by the sequence of every possible hops between two endpoints, but that can not be observed by the endpoint, so we have to use the 4-tuple definition of a path as a simplified and compromised notation that unfortunately does not capture the full picture. QUIC goes around this issue with the use of connection ID, so that we are not bothered by unstable path identifiers and can enable path migration. Therefore, I feel in multipath QUIC, we may want to inherit what QUICv1 does and reuse the CID mechanism to identify paths.",
          "createdAt": "2023-03-03T02:03:12Z",
          "updatedAt": "2023-03-03T02:03:12Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Created #188 to address the new CID and NAT rebinding case.",
          "createdAt": "2023-03-06T08:53:52Z",
          "updatedAt": "2023-03-06T08:53:52Z"
        }
      ]
    },
    {
      "number": 170,
      "id": "I_kwDOGNtpaM5e-ncu",
      "title": "Would it be beneficial to use the same Path ID on both sides?",
      "url": "https://github.com/quicwg/multipath/issues/170",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Currently the Path ID is selected based on the sequence number of the CID used to send. Alternatively we could also, add an explicit path ID in the path validation frame that is then used by both ends. This would be possible in the current spec as we assume all path to be bi-directional and only the client can open new paths, and thus could select a unique path ID. This might simplify the mental model for implementors. ",
      "createdAt": "2023-02-21T13:18:59Z",
      "updatedAt": "2023-07-03T10:24:28Z",
      "closedAt": "2023-07-03T10:24:28Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this would be a major change in the desig. We do not have either a consensus or a mandate for that. ",
          "createdAt": "2023-03-06T20:12:59Z",
          "updatedAt": "2023-03-06T20:12:59Z"
        }
      ]
    },
    {
      "number": 175,
      "id": "I_kwDOGNtpaM5e_WI0",
      "title": "Releasing which resources?",
      "url": "https://github.com/quicwg/multipath/issues/175",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "needs PR"
      ],
      "body": "Section 4.3.1 and 4.3.3 talk a lot about \"releasing resources\" however, it's not always clear with resources should be released. Can we be more clear here?",
      "createdAt": "2023-02-21T15:18:40Z",
      "updatedAt": "2023-07-03T12:47:41Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 176,
      "id": "I_kwDOGNtpaM5e_XDe",
      "title": "Figure 4.4. (path states) does not show RETIRE_CONNECTION_ID",
      "url": "https://github.com/quicwg/multipath/issues/176",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "yfmascgy"
      ],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "Should we add that?",
      "createdAt": "2023-02-21T15:20:49Z",
      "updatedAt": "2023-07-05T15:44:36Z",
      "closedAt": "2023-07-05T15:44:36Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-07-05T15:44:36Z",
          "updatedAt": "2023-07-05T15:44:36Z"
        }
      ]
    },
    {
      "number": 177,
      "id": "I_kwDOGNtpaM5e_Xhl",
      "title": "Name of closing/Closed state",
      "url": "https://github.com/quicwg/multipath/issues/177",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Should we maybe call these states rather abandoning/abandoned? (see figure in section 4.4.)?",
      "createdAt": "2023-02-21T15:22:09Z",
      "updatedAt": "2023-03-03T15:05:05Z",
      "closedAt": "2023-03-03T15:05:04Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I suggest keep the names unchanged. \"Closing / Closed\" is easier to understand.",
          "createdAt": "2023-03-03T14:49:54Z",
          "updatedAt": "2023-03-03T14:49:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing was preferred by author discussion",
          "createdAt": "2023-03-03T15:05:04Z",
          "updatedAt": "2023-03-03T15:05:04Z"
        }
      ]
    },
    {
      "number": 179,
      "id": "I_kwDOGNtpaM5fKl2a",
      "title": "Proposal: Explicit path identification",
      "url": "https://github.com/quicwg/multipath/issues/179",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "duplicate",
        "design"
      ],
      "body": "I think given the dynamic nature of the CID usage on paths that leads to some existing design issues(see #137, #158), it is worth having some stable path identification (to address, e.g., #169).\r\n\r\n# What does not change\r\n\r\nI think we now agree that a Multipath QUIC connection uses different Connection IDs on different paths, and each Connection ID has its own packet number space. Such a design enables end-hosts to easily receive packets and decrypt them without assuming anything about the network path (relying directly on the perceived 4-tuple makes the approach fragile). Note that we keep the ACK_MP as it (i.e., we acknowledge packet numbers that used a specific DCID).\r\n\r\n# Identifying network paths (until now)\r\n\r\nSo far, end hosts directly maps the (Destination) Connection ID sequence number as the path identifier of the network path. This path identifier is then used in the path-specific frames (PATH_ABANDON, PATH_STATUS,\u2026). Such an approach has the advantage that we do not have to define additional signalling to identify a network path, and it is relatively easy to track that. However, this means that if one endhost changes the DCID it uses over a given path, this means its identifier changes. Having such dynamic changing identifiers for a stable path causes design issues when using an identifier no more valid in the path-specific frames.\r\n\r\n# Proposal: explicit path identification advertisement during path validation\r\n\r\nThe path validation process establish the identification of a path through the advertisement of the \u201cEntry Point ID\u201d (EPID) used by the packet sender. Each path is identified by a tuple (local EPID, peer EPID). This identification is then used in the path-specific frames to identify the concerned path. Note that each endhost uses EPID 0 on the initial path.\r\n\r\nThis implies that we need an augmented version of the PATH_CHALLENGE/PATH_RESPONSE frames (let\u2019s say PATH_CHALLENGE_MP/PATH_REPSONSE_MP) that include the EPID that the sender used to send the frame.\r\n\r\n## Example\r\n\r\nLet\u2019s consider this initial situation.\r\n\r\n```\r\n  DCID 0 EPID 0                   DCID 0 EPID 0\r\n   +------------------------------------+\r\n   |                                    |\r\nClient                               Server\r\n```\r\n\r\nIn this initial state, each endhost has one path:\r\n\r\nClient\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n\r\nFrom the server perspective, we have\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n\r\nNow the client wants to create a new path on a new local address, but still on the same server address (same IP and port at server side). When the server just processed the PATH_CHALLENGE_MP(data, EPID=1) sent by the client with DCID seq 1, we have this state:\r\n\r\nClient\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 1, ???) using DCID seq 1\r\n\r\nServer\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 0, EPID 1) using SCID seq 1\r\n\r\nNote that the server can figure out at packet reception on which local address it saw, and thus map the corresponding local EPID to the new seen path. The server can then replies with a PATH_RESPONSE_MP(data, EPID=0) (and also initiates a PATH_CHALLENGE_MP as well). Assume here it uses the DCID with seq 2. Once the PATH_RESPONSE_MP is received by the client, we have this state.\r\n\r\nClient\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 1, EPID 0) using DCID seq 1 and SCID seq 2\r\n\r\nServer\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 0, EPID 1) using SCID seq 1 and DCID seq 2\r\n\r\nNow the client can refer to the lower path in PATH_STATUS/PATH_ABANDON frame using (1, 0), and the server could use (1, 0). Note that it makes also possible to extend these frames to the set of paths sharing a given EPID. This tuple is stable as long as end hosts do not change the EPID they use when performing further path validations.\r\n\r\n```\r\n  DCID 0 EPID 0                   DCID 0 EPID 0\r\n   +------------------------------------+\r\n   |                                    |\r\nClient                               Server\r\n   |                                    |\r\n   +------------------------------------+\r\n  DCID 1 EPID 1                   DCID 2 EPID 0\r\n```\r\n\r\nConsider now a specific edge case, that is also hard to handle with the current (CID identification) design: the client decides to change the DCID it uses (now seq 2) on its path (EPID 1, EPID 0), but the very first packet sent experiences a NAT rebinding, making the server see a new 4-tuple. The end hosts\u2019 states just after the server received that packet is\r\n\r\nClient:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 1, EPID 0) using SCID seq 2 and DCID seq 2\r\n\r\nServer:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 0, EPID 1) using SCID seq 1 and DCID seq 2\r\n- (EPID 0, EPID ???) using SCID seq 2\r\n\r\nTo address this new unknown path, the server will initiate path validation over that new path using a new DCID (let\u2019s say with seq 3), so it sends a MP_PATH_CHALLENGE(EPID=0) on the lower path. Once the packet reaches and after its processing, we have\r\n\r\nClient:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 1, EPID 0) using SCID seq 3 and DCID seq 2\r\n\r\nServer:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 0, EPID 1) using SCID seq 1 and DCID seq 2\r\n- (EPID 0, EPID ???) using SCID seq 2 and DCID seq 3\r\n\r\n\r\nFinally, the client replies with a MP_PATH_RESPONSE on its perceived EPID (hence EPID 1) and the response can reach the server, which can then figure out that the path is actually the same as the previous one (it experienced involuntary 4-tuple change, this is not a new path). The final state is hence\r\n\r\nClient:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 1, EPID 0) using SCID seq 3 and DCID seq 2\r\n\r\nServer:\r\n- (EPID 0, EPID 0) using SCID seq 0 and DCID seq 0\r\n- (EPID 0, EPID 1) using SCID seq 2 and DCID seq 3\r\n\r\n\r\n## Additional remarks\r\n\r\nIntroducing such additional identifiers may require additional care to cope with EPID that change over a same address or to avoid a same EPID over multiple 4-tuples. I think we can require that new EPID values cannot decrease (monotonically increasing) and observing a same EPID coming from different addresses probably indicates that something is wrong there.\r\n\r\nWe can also extend the required state of a path to be \"Active\", i.e., we need to have both local and peer EPID of a path before considering it as active.\r\n\r\nHaving two endpoint-specific values instead of a single shared one (as suggested by #170) may be desirable to support the edge case mentioned above.",
      "createdAt": "2023-02-23T10:40:22Z",
      "updatedAt": "2024-03-27T05:24:05Z",
      "closedAt": "2024-03-27T05:24:05Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for this intriguing proposal. But there will be a new issue if I understand correctly, and please correct me if I am wrong.\r\n\r\nFor example, what if a path has actually **migrated** because of changes in the  underlying hops while the client and server's entry points (interfaces) remain the same. Then after exchanging the EPID information, the client and server will draw the conclusion that the path is not changed, which is not true. ",
          "createdAt": "2023-02-26T10:40:41Z",
          "updatedAt": "2023-02-26T11:49:54Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this would be a big change from the existing draft and the existing consensus, which very explicitly says that we are using the path mechanisms of RFC 9000.\r\n\r\nThe number space is tied to the CID, because of encryption. That does mean that when we are sending ACKs, the \"path ID\" in the ACK is the ID used when the packets were sent. ",
          "createdAt": "2023-02-26T19:04:08Z",
          "updatedAt": "2023-02-26T19:04:08Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "This sounds like a design change proposal, so I suggest also creating thread on the WG list to increase visibiltiy",
          "createdAt": "2023-02-26T23:33:54Z",
          "updatedAt": "2023-02-26T23:33:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's continue discuss in issue #169.",
          "createdAt": "2023-03-03T12:36:47Z",
          "updatedAt": "2023-03-03T12:36:47Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given the changes it would involve (and the relatively low gain of the result), I think sticking to the DCID sequence number to identify paths is fine. I can keep this issue open for reference purpose.",
          "createdAt": "2023-03-08T14:00:59Z",
          "updatedAt": "2023-03-08T14:00:59Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think PR #292 could also solve this issue : )",
          "createdAt": "2023-11-21T12:34:41Z",
          "updatedAt": "2023-11-21T12:34:41Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed as PR #292 has been merged.",
          "createdAt": "2024-03-27T05:24:05Z",
          "updatedAt": "2024-03-27T05:24:05Z"
        }
      ]
    },
    {
      "number": 180,
      "id": "I_kwDOGNtpaM5fQ6vX",
      "title": "Proposal: PATH_SETUP frame",
      "url": "https://github.com/quicwg/multipath/issues/180",
      "state": "OPEN",
      "author": "michael-eriksson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "separate draft",
        "design"
      ],
      "body": "# Introduction\r\n\r\nThe setup of a new path should be explicit with a separate frame type.\r\n\r\n# Design\r\n\r\nA new frame type, `PATH_SETUP` is introduced and used to set up new paths. The frame is sent by the initiating endpoint and includes relevant information (see below). When received by the peer, the peer responds with a `PATH_SETUP` frame in the opposite direction with reciprocal information (an alternative is to have a separate frame type for the path setup response).\r\n\r\nIf there is a worry that the protocol specifications will run out of single-byte (6-bit) frame types, the new frame type could be given a type number in the two-byte (14-bit) range since it will be sent very infrequently.\r\n\r\n# Frame content\r\n\r\n## Path identifier\r\n\r\nThere are good reasons for a stable path identifier (see #179). Having the same path identifier in both directions simplify both the implementations and things like correlating traces taken at the two endpoints (#170).\r\n\r\nThe unique identifier for the new path is selected by the endpoint that initiates the new path. To simplify path initiation also from the server, clients use even path identifiers and servers use odd path identifiers when they initiate new paths. Path identifiers are never reused.\r\n\r\n## Path status\r\n\r\nThe `PATH_STATUS` frame is used to set the status of an existing path (`available` or `standby`). The status of a new path should be signaled directly at path setup, otherwise the peer might start to use a new path that is intended to be `standby` before it gets the `PATH_STATUS` frame.\r\n\r\n## Path parameters\r\n\r\nSome parameters of a new path can be different from what was negotiated for the original path at connection setup. They are signaled in the `PATH_SETUP` frame.\r\n\r\nExamples of per-path parameters: `max_udp_payload_size`, `max_idle_timeout`, `max_ack_delay`.\r\n",
      "createdAt": "2023-02-24T09:40:40Z",
      "updatedAt": "2023-04-03T08:30:31Z",
      "closedAt": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Discussed at IETF 116, proposal is to delegate such a frame to a separate extension.",
          "createdAt": "2023-04-03T08:30:25Z",
          "updatedAt": "2023-04-03T08:30:25Z"
        }
      ]
    },
    {
      "number": 181,
      "id": "I_kwDOGNtpaM5fRCUA",
      "title": "Regular ACK frames when multipath has been negotiated",
      "url": "https://github.com/quicwg/multipath/issues/181",
      "state": "CLOSED",
      "author": "michael-eriksson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "# Introduction\r\n\r\nIt should be allowed to send regular ACK frames also after multipath has been negotiated.\r\n\r\n# Reasoning\r\n\r\nSending acknowledgments over other paths than where the packet was received is complex, which is recognised in the Packet Scheduling section of the draft. A straight-forward implementation may therefore never send cross-path acknowledgments. Allowing it to use regular ACK frames would reduce the special-case code for multipath mode and also save at least one byte on every acknowledgment.\r\n\r\nThe specification should be updated to (explicitly) say that an endpoint MAY send regular ACK frames also after multipath has been negotiated.",
      "createdAt": "2023-02-24T09:59:18Z",
      "updatedAt": "2023-03-10T02:58:58Z",
      "closedAt": "2023-03-10T02:58:58Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sending regular ACK frames is still allowed after Multipath has been negotiated, but these refer to the Path ID 0.\r\n\r\nIf I understand well, the proposal is to allow considering the reception of an ACK frame over a given 4-tuple as the acknowledgment of packets sent over that 4-tuple. ACK/ACK_MP frames in multipath acknowledge packets using a specific DCID. The issue here is that there is a one-to-many relation between a 4-tuple and the Path ID (i.e., the sequence number of the DCID used). Relying on the 4-tuple to infer the DCID that may lead to acknowledgment ambiguities here.\r\n\r\nConsider for the example the case where a client decides to rotate the DCID it uses over a given path every 2 packets (we could also consider a timer-based change where the DCID change occurs in the middle of a sending burst). It then sends over that path DCID 1 PN 0, DCID 1 PN 1, DCID 2 PN 0 and DCID 2 PN 1. What should the server sends here? If it relies on the largest DCID sequence number seen, it may send ACK(0-1), but from the client perspective, such indication is unclear (especially if, e.g., one of the packets sent with DCID 1 has been lost).",
          "createdAt": "2023-02-28T10:31:15Z",
          "updatedAt": "2023-02-28T10:31:15Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> # Introduction\r\n> It should be allowed to send regular ACK frames also after multipath has been negotiated.\r\n> \r\n> # Reasoning\r\n> Sending acknowledgments over other paths than where the packet was received is complex, which is recognised in the Packet Scheduling section of the draft. A straight-forward implementation may therefore never send cross-path acknowledgments. Allowing it to use regular ACK frames would reduce the special-case code for multipath mode and also save at least one byte on every acknowledgment.\r\n> \r\n> The specification should be updated to (explicitly) say that an endpoint MAY send regular ACK frames also after multipath has been negotiated.\r\n\r\nThe ACK_MP's path ID is tied to packet number space. Removing it will introduce ambiguity. I also feel the benefit of saving one byte is not very significant.",
          "createdAt": "2023-02-28T11:07:38Z",
          "updatedAt": "2023-02-28T11:07:38Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "@qdeconinck, I don't think that the mechanism for path CID changes has been defined, has it? I, for one, would *really* like to have stable path identifiers (that are identical in both directions).\r\n\r\nI'm not sure I understand what you are suggesting above, please correct me if I'm wrong below.\r\n\r\nIt seems like you suggest that the packet numbers are reset for the path when the destination connection identifier changes, is that correct? That would imply that you would then need a new instance of the loss detection (which is packet number based) when the CID changes, including restarting RTT estimates etc. Maybe even worse, you would have double loss detection instances for the path until all packets sent with the previous CID are acknowledged or declared lost. Is this correct?",
          "createdAt": "2023-02-28T20:57:10Z",
          "updatedAt": "2023-02-28T20:57:10Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> The ACK_MP's path ID is tied to packet number space. Removing it will introduce ambiguity. I also feel the benefit of saving one byte is not very significant.\r\n\r\nThe implicit path id of the regular ACK frame would be the path id over which is was transmitted. A receiver must anyway always be able to understand on which path a packet arrives, so it can set the Path Identifier field of the ACK_MP frame to the correct value.\r\n\r\nThe main point with this issue is not to save one or a few bytes (but see below). What I am after is to reduce the special case code for multipath compared to regular unipath QUIC when multipath isn't enabled. That leads to simpler and cleaner code, which is easier to test and maintain.\r\n\r\nWhen it comes to saving bytes, that might seem silly in the times of terabit fibers. However, the world isn't that simple...\r\n- ACK-only packets are not congestion controlled, and keeping them small is good for the stability of the Internet.\r\n- Some paths are very asymmetric and can even be ACK limited; smaller ACKs is a good thing here as well.\r\n- My employer, Ericsson, produce cellular infrastructure. The uplink, from the mobile device to the base station, is often a limitation. For media streaming, which is like 70+% of the mobile broadband traffic, almost only ACKs go on the uplink. Saving a completely redundant byte here can actually be relevant, especially if most of the header (including the connection identifier) is compressed away.",
          "createdAt": "2023-02-28T21:26:21Z",
          "updatedAt": "2023-02-28T21:26:21Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @qdeconinck, I don't think that the mechanism for path CID changes has been defined, has it? I, for one, would really like to have stable path identifiers (that are identical in both directions).\r\n\r\nActually, this is somewhat implicitly discussed in [Section 4.3.3](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-4.3.3). Over a given path (4-tuple), an endpoint can change the DCID it uses to send packets. The sequence number of the DCID used by the client over a given path may be different from the server one, yes.\r\n\r\n> I'm not sure I understand what you are suggesting above, please correct me if I'm wrong below.\r\n\r\n> It seems like you suggest that the packet numbers are reset for the path when the destination connection identifier changes, is that correct?\r\n\r\nDuring some time, the sender will have two space numbers associated to that path, indeed (the one of the old DCID seq num and the new one). At most, you may need to maintain max_active_cid_limit sending application data spaces. The receiver can also track the 4-tuple on which it observes the CID to bind its ACK_MP there.\r\n\r\n> That would imply that you would then need a new instance of the loss detection (which is packet number based) when the CID changes, including restarting RTT estimates etc. Maybe even worse, you would have double loss detection instances for the path until all packets sent with the previous CID are acknowledged or declared lost. Is this correct?\r\n\r\nI'm not sure the recovery structure needs to be duplicated though. Given you are using the same 4-tuple (just rotating the CID), you can keep the same RTT. You can also update your recovery structure to keep track of the space identifier of the sent packets. Such complexity will be located at the sender-side.",
          "createdAt": "2023-03-01T09:10:40Z",
          "updatedAt": "2023-03-01T09:10:40Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@qdeconinck I wasn't assuming that you would reset the packet number when only the CID changes; this is not a new path. Why is that needed?\r\n\r\nI guess this is a separate issue we need to discuss and clarify.",
          "createdAt": "2023-03-01T10:37:35Z",
          "updatedAt": "2023-03-01T10:37:35Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @qdeconinck I wasn't assuming that you would reset the packet number when only the CID changes; this is not a new path. Why is that needed?\r\n\r\nBecause the 4-tuple perceived by the receiver may change while the one used by the sender might not. The CID sequence number provides an unambiguous matching to a packet number space for both the sender and the receiver without decrypting the packet.",
          "createdAt": "2023-03-01T13:52:00Z",
          "updatedAt": "2023-03-01T13:52:00Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes and because you use the CID as identifier and not the 4-tuple, there can be no ambiguity and therefore you can simply update your mapping without having to reset.",
          "createdAt": "2023-03-01T14:01:40Z",
          "updatedAt": "2023-03-01T14:01:40Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "At sender side, yes. But at receiver side, this is trickier, especially if the packet number encoding truncates the actual packet number (which packet number should you expect from a new CID to derive the actual one?).",
          "createdAt": "2023-03-01T14:07:17Z",
          "updatedAt": "2023-03-01T14:07:17Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To understand the relation between CID and number space, consider the case of a path on which 1 + 2^32 have been sent using CID number X. Now, the sender decides to refresh the CID to number Y. What should be the PN for the next packet? If you said \"2+2^32\", you are going to have a bug, because the packet header can use at most 32 bits to encode the packet. The packet will look like:\r\n\r\n| 1rtt (PN length=4) | CID (seq num=Y) | 32 bit PN=0x00000002 | payload... |\r\n|-------------|-------------------------|--------------|----------|\r\n\r\nThe receiver of the packet expands the PN number to 64 bits to get the IV used by AEAD. To do that, it looks at the CID, find the corresponding number space, and infer the upper 32 bits from past numbers. If the CID was X, the past number would be \"1+2^32\", and the PB would expand to \"0x0000000100000002\". But that it is a first use of CID Y, and the receiver has not seen any previous path ID. So it expands the number to \"\"0x0000000000000002\". Both sender and receiver have to use that value, otherwise decryption will fail.\r\n\r\nBottom line: number spaces are really tied to CID numbers.\r\n",
          "createdAt": "2023-03-01T18:56:46Z",
          "updatedAt": "2023-03-01T18:57:34Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> Bottom line: number spaces are really tied to CID [sequence] numbers.\r\n\r\nThat is not true.\r\n\r\nTo be able to decode an incoming packet, the receiving endpoint must be able to map the CID to the path, and in particular get two pieces of path-specific information:\r\n- The `largest_pn` state variable to be able to decode (i.e., expand) the truncated packet number\r\n- The path identifier to create the nonce for the AEAD decryption.\r\n\r\nThis information can be for instance be stored in a hash map that has the CID as key. The CID sequence number is not relevant, and in particular the path identifier can (and should) be different from the CID sequence number.",
          "createdAt": "2023-03-01T20:58:06Z",
          "updatedAt": "2023-03-01T20:58:06Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> A straight-forward implementation may therefore never send cross-path acknowledgments. Allowing it to use regular ACK frames would reduce the special-case code for multipath mode and also save at least one byte on every acknowledgment.\r\n\r\nCompletely disabling cross-path acknowledgement will introduce new issues and makes communication fragile. For example, consider the case a sender has just retired the CID of a path and has no available CIDs to use on that path anymore, but it later may still receive a couple of packets from the peer on that path. If we completely disable cross-path acknowledgement, then these later received packets cannot be acknowledged. Using ACK_MP, this is not a problem as it can be sent from other available paths, which makes the communication more robust.\r\n\r\n\r\n",
          "createdAt": "2023-03-02T02:42:05Z",
          "updatedAt": "2023-03-02T02:42:05Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think we need any further normative language in the draft. It's allowed to use v1 ACK frames. This is what the draft says:\r\n\r\n> As soon as the negotiation of multipath support is completed, endpoints SHOULD use ACK_MP frames instead of ACK frames to acknowledge application data packets, including 0-RTT packets, received on path ID 0 after the handshake concluded.\r\n\r\n> If for any reason ACK frames are received in 1-RTT packets while the state of multipath negotiation is ambiguous, they MUST be interpreted as acknowledging packets sent on path 0.\r\n\r\n",
          "createdAt": "2023-03-02T10:19:01Z",
          "updatedAt": "2023-03-02T10:19:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Resetting the packet number whenever a new CID is used it is deviation from RFC 9000. I opened issue #182 for this.",
          "createdAt": "2023-03-02T10:45:38Z",
          "updatedAt": "2023-03-02T10:45:38Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> > A straight-forward implementation may therefore never send cross-path acknowledgments. Allowing it to use regular ACK frames would reduce the special-case code for multipath mode and also save at least one byte on every acknowledgment.\r\n> \r\n> Completely disabling cross-path acknowledgement will introduce new issues and makes communication fragile. For example, consider the case a sender has just retired the CID of a path and has no available CIDs to use on that path anymore, but it later may still receive a couple of packets from the peer on that path. If we completely disable cross-path acknowledgement, then these later received packets cannot be acknowledged. Using ACK_MP, this is not a problem as it can be sent from other available paths, which makes the communication more robust.\r\n\r\nIn general, I think that there are cases when sending an `ACK_MP` frame is both elegant and useful. However, these events are likely very rare. They are probably also rather specific and therefore hard to detect in time with generic algorithms.\r\n\r\nA straight-forward implementation would just recognise the path-specific problems and quickly retransmit on some other path, possibly with some overhead because of redundant transmission. A simple implementation could also have *some* special-case code for path problems, the key point with this issue is that steady state transmission should be as similar to unipath QUIC as possible.\r\n\r\nWhen it comes to your case above, it looks a bit odd to be honest. Why would the \"sender\" retire the CID if there's a chance that it will receive more packets on that path? Isn't path closing supposed to happen in an ordered fashion with `PATH_ABANDON` frames and only after that is the CID retired?",
          "createdAt": "2023-03-06T15:55:32Z",
          "updatedAt": "2023-03-06T15:55:32Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> I don't think we need any further normative language in the draft. It's allowed to use v1 ACK frames. This is what the draft says:\r\n> \r\n> > As soon as the negotiation of multipath support is completed, endpoints SHOULD use ACK_MP frames instead of ACK frames to acknowledge application data packets, including 0-RTT packets, received on path ID 0 after the handshake concluded.\r\n> \r\n> > If for any reason ACK frames are received in 1-RTT packets while the state of multipath negotiation is ambiguous, they MUST be interpreted as acknowledging packets sent on path 0.\r\n\r\nThe point here is to develop and specify the best possible protocol which can also lead to nice, clean and efficient implementations with minimal special-case code for multipath.\r\n\r\nWith this issue, I wanted to slightly adjust the semantics of the `ACK` frame when multipath is enabled; the currently defined semantics are pretty (but not fully) useless. As indicated by the reasons stated above, there are more useful semantics. An implementation would still be allowed to send `ACK_MP` frames, so there is no reduction of existing functionality.",
          "createdAt": "2023-03-06T16:19:58Z",
          "updatedAt": "2023-03-06T16:19:58Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Anything that relies on 4-tuple identification leads to ambiguity, because of NATs. It is much more robust to always use ACK_MP and always specify the CID number, even if that costs 1 extra byte. Specifying that naked ACK always maps to CID 0 achieves that.",
          "createdAt": "2023-03-06T19:31:04Z",
          "updatedAt": "2023-03-06T19:31:04Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also, ambiguity in ACK processing will result in failures in case of NAT rebinding. The peer receives an ACK for \"this path\", but because of rebinding \"this path\" is in fact a new path, with a new number space starting at 0. The ACK for \"this path\" reference packet numbers that have not yet been sent, which is a protocol violation, causing the termination of the connection.",
          "createdAt": "2023-03-06T19:33:53Z",
          "updatedAt": "2023-03-06T19:33:53Z"
        }
      ]
    },
    {
      "number": 182,
      "id": "I_kwDOGNtpaM5fwg7P",
      "title": "Is the packet number reset if a new CID is used?",
      "url": "https://github.com/quicwg/multipath/issues/182",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "yfmascgy"
      ],
      "labels": [
        "design"
      ],
      "body": "Based on discuss in #181 we need to clarify if the packet number is reset if the CID changes.\r\n\r\nIf only the CID changes but not the 4-tuple, the 4-tuple can be used to map to a path and packet number space.\r\n\r\nIf both changes (the client reset the CID after an idle period and on the same packet a NAT rebinding happens), I guess you can/have to try the exiting packet numbers first... however, this is anyway a case that needs more discussion.",
      "createdAt": "2023-03-02T10:38:25Z",
      "updatedAt": "2023-03-10T14:17:43Z",
      "closedAt": "2023-03-10T14:17:43Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In the presence of NAT, we cannot use the 4 tuple to map to a path and packet number space. Not on the receive side.\r\n\r\nIf we want to not deviate from RFC 9000, then we ought to bring back the single number space design and make it work. I think I should write an experimental draft to do explain how. My implementation is pretty close to parity between single space and multiple space, but I never spent the time to completely explain the ACK sending logic and the loss detection logic, including how to properly estimate per path delays. And I would need to add an MP_ECN frame so we get proper ECN counts per path.\r\n\r\nI gave up on this in the interest of converging soon on an agreed solution. But instead, we are going in the weeds, revisiting past decisions. I guess I could just as well restart the single number design.",
          "createdAt": "2023-03-02T16:38:38Z",
          "updatedAt": "2023-03-02T16:38:38Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think we revisit past decision (or where was that decided?). This was so far underspecified in the spec and we need to clarify. I don't have a strong option on either approach but I honestly don't know what the best approach is.",
          "createdAt": "2023-03-02T16:52:49Z",
          "updatedAt": "2023-03-02T16:52:49Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This goes back to the decoding argument. When the CID changes, the sender cannot always predict that the packet will be received on the same 4 tuple as packets sent before the change -- a NAT in the way may have a different idea. That means the receiver cannot properly find the max PN used on the receiving path from the 4 tuple alone. Thus you must start a new numbering space, with the highest received PN at 0.",
          "createdAt": "2023-03-02T17:14:28Z",
          "updatedAt": "2023-03-02T17:14:28Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The weed part is because a lots of the comments I see try a different model than either unique number space or CID based number space. They assume what I would call a \"strong path ID\" model, in which the path has a unique ID defined in a protocol exchange, and then we get a number space per path. But that strong path ID model will not work unless we change the packet header to insert a path ID. It also does not support NAT very well. Yet, the proposals keep coming, and they have to be explained out each time. This is slowing consensus a lot.",
          "createdAt": "2023-03-02T17:18:13Z",
          "updatedAt": "2023-03-02T17:18:36Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> That means the receiver cannot properly find the max PN used on the receiving path from the 4 tuple alone. Thus you must start a new numbering space, with the highest received PN at 0.\r\n\r\nI agree that we should start packet number from 0 when we start a new number space. It is more robust and less error prone, and we probably want to clarify this in the draft.",
          "createdAt": "2023-03-03T01:04:44Z",
          "updatedAt": "2023-03-03T01:05:09Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yet, the proposals keep coming, and they have to be explained out each time. This is slowing consensus a lot.\r\n\r\nSorry to have raised this again but I actually didn't recognise that we discussed this in detail. I actually hope this is not slowing consensus but helps to make progress quickly.\r\n\r\nAgain even if we discussed is before, we need to clearly define and explain this in the draft and in order conclude this discussion and avoiding coming it up again. So let's do that! I optimistic we can reach agreement quickly!",
          "createdAt": "2023-03-03T11:44:43Z",
          "updatedAt": "2023-03-03T11:44:43Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "A few more thoughts, just for completeness, not trying to push in any direction.\r\n\r\nI don't think we necessarily need to couple the question of reseting the packet number and using a stable path id. Resetting the packet number with a new CID makes decryption easier, however, after you have decrypted the packet you may still be able to assign to an existing path.\r\n\r\nActually it is not a problem neither for decryption nor for path assignment, if only the 4-tuple or the CID changes. The problem is that if the client changes the CID, it never can be sure if not also the 4-tuple changes (which can even be likely after an idea period). Therefore the client need to reset the packet number for easy decryption when it uses a new CID (this is deviation from RFC9000 - just to note but that's probably fine). However, to my understanding just changeing the CID and reseting the packet number without a change in 4-tuple doesn't necessarily mean that this will create a new path, e.g. the server doesn't have to start validation and you don't have to close the old path as it is the same. So while you need to update your mapping from CID to path ID, I don't think the path ID has to change. This is the discussion we should have in #169.",
          "createdAt": "2023-03-03T11:58:04Z",
          "updatedAt": "2023-03-03T11:58:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "One addition: decoupling the CID/packet number space from the path ID however means that we need to also have a packet number space id for the MP_ACK frame, while using the path id for the other frames. Actually I think this is not too bad because ACK frames contain information that relate to packets and the other frames contain information that relate to the path.",
          "createdAt": "2023-03-03T12:19:20Z",
          "updatedAt": "2023-03-03T12:19:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion at author meeting: just add one sentence to clarify that packet number is changed/reset when a new CID is used (even on the same path)",
          "createdAt": "2023-03-03T15:47:54Z",
          "updatedAt": "2023-03-03T15:47:54Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Add PR #189.",
          "createdAt": "2023-03-08T06:44:11Z",
          "updatedAt": "2023-03-08T06:44:11Z"
        }
      ]
    },
    {
      "number": 183,
      "id": "I_kwDOGNtpaM5f5JQy",
      "title": "Provide more guidance on which path to use for control frames",
      "url": "https://github.com/quicwg/multipath/issues/183",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "obonaventure",
        "qdeconinck"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-03T15:16:01Z",
      "updatedAt": "2023-03-13T13:12:45Z",
      "closedAt": "2023-03-13T13:12:45Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We probably need to add some text in the scheduling considerations where control frames (PATH_STATUS, PATH_ABANDON, but also MAX_DATA,...) should be sent on a good working path, ideally with low latency.",
          "createdAt": "2023-03-03T16:21:03Z",
          "updatedAt": "2023-03-03T16:21:03Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would say the same applies to ACK_MP\r\n",
          "createdAt": "2023-03-06T20:10:48Z",
          "updatedAt": "2023-03-06T20:10:48Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "For ACK we recommend (SHOULD) to send it on the same path because of RTT calculations and I believe the scheduling text discusses at already.",
          "createdAt": "2023-03-06T21:06:27Z",
          "updatedAt": "2023-03-06T21:06:27Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thinking about this some more. I believe we should say *NOTHING*. The point of the standard is to specify expected behavior when a node receives protocol messages from its peer. The basic statement is that most frames, including control frames, can be sent on any path -- the only exception being PATH CHALLENGE frames and PATH_RESPONSE frames.\r\n\r\nSo my preference would be:\r\n\r\n1) say nothing, because the purpose of standards is to specify requirements for Interop, not provide guidance to implementors.\r\n\r\n2) if we do say something, just say that these frames can be sent on any valid path, based on preferences of the application and the implementation.",
          "createdAt": "2023-03-07T00:15:56Z",
          "updatedAt": "2023-03-07T00:15:56Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As for ACK_MP frames, the text says \"ACK_MP frame (defined in [Section 8.3](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#ack-mp-frame)) SHOULD be sent on the same path as identified by the Path Identifier. However, an ACK_MP frame can be returned via a different path, based on different strategies of sending ACK_MP frames.\" That's an OK compromise, leaving open the possibility for implementations to use any strategy they want. ",
          "createdAt": "2023-03-07T00:18:29Z",
          "updatedAt": "2023-03-07T00:18:29Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Alternatively, spell out the considerations to make when picking a path? Does it matter, if so, why? This would be useful to know when new frames come along in the future and need to think for themselves how multipath might affect them.",
          "createdAt": "2023-03-07T00:34:58Z",
          "updatedAt": "2023-03-07T00:34:58Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sure, but at this stage we have preciously little experience. For example, I have a user request to specify affinity between a stream and a path. I can certainly provide them an API to do that, but this is basically research. And then, affinity applies to stream frames, but whether it should be applied to control frames is debatable.\r\n\r\nI am concerned that the guidance that we provide will be so generic as not to be useful, while still requiring long debates and delaying the publication of the draft. I think guidance is best provided in research papers, and possibly in text books.",
          "createdAt": "2023-03-07T01:21:58Z",
          "updatedAt": "2023-03-07T01:21:58Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "I agree we shoukd avoid the potential time sink.\r\n\r\nI wasn't suggesting guidance but rather a fairly succinct statement like  \"The path that frames are sent on is a local choice, which could effect the behavior or performance of the QUIC transport or delivery of application data. There is no guidance provided by this document on strategies for path selection for frames beyond the control frames for the multipath extension itself.\"\r\n\r\nAnd perhaps gathering consensus on that now avoids people asking the question in later review rounds.",
          "createdAt": "2023-03-07T01:35:18Z",
          "updatedAt": "2023-03-07T01:35:18Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@LPardue I agree. Your proposal is basically equivalent to my suggestion that \"if we do say something, just say that these frames can be sent on any valid path, based on preferences of the application and the implementation.\" Your text is good.",
          "createdAt": "2023-03-07T01:55:49Z",
          "updatedAt": "2023-03-07T01:55:49Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Sorry, I did read your comment and immediately paged it out. Credit to you for proposing that option earlier",
          "createdAt": "2023-03-07T02:38:38Z",
          "updatedAt": "2023-03-07T02:38:38Z"
        }
      ]
    },
    {
      "number": 184,
      "id": "I_kwDOGNtpaM5f5XLt",
      "title": "Provide guidance on number space and path implementation",
      "url": "https://github.com/quicwg/multipath/issues/184",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "huitema"
      ],
      "labels": [
        "editorial"
      ],
      "body": "It seems that some implementers are confused about the relation between an abstract path, defined by a 4-tuple, and the number spaces. We need to provide guidance.",
      "createdAt": "2023-03-03T15:51:36Z",
      "updatedAt": "2023-03-10T09:25:47Z",
      "closedAt": "2023-03-10T09:25:47Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed by #187.",
          "createdAt": "2023-03-10T09:25:47Z",
          "updatedAt": "2023-03-10T09:25:47Z"
        }
      ]
    },
    {
      "number": 186,
      "id": "I_kwDOGNtpaM5f56Ji",
      "title": "Alternate status values in PATH_STATUS",
      "url": "https://github.com/quicwg/multipath/issues/186",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has PR",
        "design",
        "needs-discussion"
      ],
      "body": "The draft currently defines two possible values in the PATH_STATUS frame. However, it does not defines if other values are usable, neither does a receiver should behave with alternate values.\r\n\r\nProbably the right behaviour would be to state that alternate values might be application-dependent, and otherwise the status value might be ignored.",
      "createdAt": "2023-03-03T17:31:37Z",
      "updatedAt": "2023-10-20T09:46:07Z",
      "closedAt": "2023-10-20T09:46:07Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Discussed in IETF 116, strong sense in the room to use two different frame types instead",
          "createdAt": "2023-03-30T01:03:28Z",
          "updatedAt": "2023-03-30T01:03:28Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I started a PR for this issue. See #242. However this needs more discussion as there are multiple options which all my have some problems.\r\n\r\nOption 1) The current PR creates two new frames. The idea of this change was to make it easy to add potential new status value in future by simply adding a new frame. However, having separate frames means the frames may arrive in different orders. In PATH_STATUS we had a frame sequence number; but to guarantee order among frames, this would mean all \"path-status\" frames would need to share a seq number space. I don't think that would be a complicated solution to implement but it does not feel like a clean design to have these dependencies among frames.\r\n\r\nOption 2) We could have a one PATH_STANDBY frame which always contains a full list of all CID seq numbers that should have this state and as such any update would always replace the old state. That means we could signal multiple updates in one frame, which can beneficial e.g. if you change CIDs on all paths, and further we would not need the PATH_AVAILABLE frame at all. However, this only works with two path states and also not if we in future want to define another path status frame. However, are we sure we need different exclusive states? E.g. If you would later define a path priority, this information can be orthogonal to the standby information rather than replacing it.\r\n\r\nOption 3) Only allow sending of path status information on the same path that the updates applies to and use the packet number for ordering. However, this means you cannot \"assign\" status information to a CID before the CID is used which at least theoretically would be possible with the other solutions. However, maybe it's sufficient to ensure that if a new CID is used the respective path status frame is sent in the first packet with this new CID. Not sure how complicated that would be for some implementations. Also is using packet number for order a good choice? Might also be complicated for some implementations...?\r\n\r\nOr Option 4, I guess, is to keep the current PATH_STATUS frame (and find a different way to make it extensible or make any future extensive a full replacement).",
          "createdAt": "2023-07-03T13:32:38Z",
          "updatedAt": "2023-07-03T13:32:38Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak Thank you for working on this issue.\r\n\r\nBased on the previous consensus, I think my preference goes to option 1. I do not think that there is additional complexity with sharing the sequence number with multiple frames that update path status. In my view, we are merely merging the Path Status field that exists today into the frame type.\r\n\r\nAs to option 2, people who want to update states of all paths at once can do that with option 1, by sending multiple frames covering all paths at once in a single packet. Therefore, option 1 is a superset of option 2.\r\n\r\nRe option 3, yeah it would be complicated for some QUIC stacks. IIUC, there are two types of stacks; when a packet is lost, some QUIC stacks regenerate frames. Other QUIC stacks remember what has been sent in the encoded form and simply retransmit them. For the latter, it is hard to exclude frames carrying old information upon retransmission.",
          "createdAt": "2023-07-04T04:05:47Z",
          "updatedAt": "2023-07-04T04:05:47Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazuho what happen if the client sends PATH_STATUS_STANDBY and then PATH_STATUS_AVAILABLE, but for some reason the packets arrive out of order at the server?",
          "createdAt": "2023-07-04T04:23:51Z",
          "updatedAt": "2023-07-04T04:23:51Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@huitema IIUC, what @mirjak is stating in option 1 is that the two frame types share a single sequence number space. The receiver can use the sequence number to determine which of the two frames carry the latest information.",
          "createdAt": "2023-07-04T04:26:08Z",
          "updatedAt": "2023-07-04T04:26:08Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, but that's a bit ugly. Do we have any other example of different frame types relying on a single sequence number? Could we consider using something else, maybe a packet sequence number or a time since beginning of connection?",
          "createdAt": "2023-07-04T04:39:27Z",
          "updatedAt": "2023-07-04T04:39:27Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Maybe it helps to frame it as PATH_STATUS_STANDBY and PATH_STATUS_AVAILABLE being two variants of the same frame, that only differ by one bit in the frame type (e.g. like MAX_STREAMS frame in RFC 9000)?",
          "createdAt": "2023-07-04T04:43:07Z",
          "updatedAt": "2023-07-04T04:43:07Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@huitema We already have precedent. NEW_CONNECTION_ID and RETIRE_CONNECTION_ID share the same sequence number space. If you receive RETIRE_CONNECTION_ID(seq=x) then NEW_CONNECTION_ID(seq=x, ...), latter is ignored.\r\n\r\nThat said, I agree with @marten-seemann that we can ease the friction by editorial means. Like having a section for `PATH_STATUS_*` frames, talk about the sequence number, then describe the each variant of the frame that serves a specific purpose (e.g., available, standby).",
          "createdAt": "2023-07-04T04:51:37Z",
          "updatedAt": "2023-07-04T04:51:37Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Or we can keep the design that we have currently, a single \"PATH_STATUS\" frame with a set of enumerated values. The main drive for the proposal to move to separate types is to reuse the extension mechanism for creating new frames, but I am a bit skeptical. If I wanted to create a new path status such as \"only available if the temperature reaches 45 degrees Celsius\", I could do exactly the same thing as for creating a frame: pick a numeric value for the status, and describe in a draft the transport option used to negotiate use of that new numeric value. Or values. ",
          "createdAt": "2023-07-04T05:03:53Z",
          "updatedAt": "2023-07-04T05:03:53Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@marten-seemann if we envisage having more than 2 values, then we cannot guarantee that all the newly created values will have consecutive frame numbers. Quite the opposite. The new frame numbers will be defined as extensions, which in theory use frame numbers picked at random.",
          "createdAt": "2023-07-04T05:06:26Z",
          "updatedAt": "2023-07-04T05:06:26Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@huitema No strong opinion. If you want to allow extensions to define new statuses, would that mean we have to create a new IANA registry for status points? There'd need to be some mechanism to avoid collision between code points defined by different extensions.\r\n\r\nAnother option would be to reserve a slice of (consecutive) frame code points. For example, you could define that all `0xbaba06nn` (`nn` being the last byte) are PATH_STATUS frames, where this document would define the values 0 and 1 for `nn`. This would limit us to 256 path statuses before we'd have to give up on the property that these frames are all consecutive (new statuses could still be defined outside of that range).",
          "createdAt": "2023-07-04T18:53:27Z",
          "updatedAt": "2023-07-04T18:53:27Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Discussed in IETF 117, still a strong preference for using two frames",
          "createdAt": "2023-07-25T16:46:43Z",
          "updatedAt": "2023-07-25T16:46:43Z"
        }
      ]
    },
    {
      "number": 188,
      "id": "I_kwDOGNtpaM5gBPtN",
      "title": "Handling packets with both new Destination Connection ID and 4-tuple",
      "url": "https://github.com/quicwg/multipath/issues/188",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "design",
        "needs-discussion"
      ],
      "body": "Taking side-discussion of #169 in its own issue.\r\n\r\n> I think we can use path ID mechanism of the current draft with the addition of the following rules to address the issues discussed in this thread:\r\n\r\n> (1) Addressing the corner case when new CID and NAT rebinding happen at the same time. When an endpoint receives a packet that has (new CID, new tuple), check if the packet is trying to initialize a new path (i.e., whether it contains a PATH_CHALLENGE). If it has PATH_CHALLENGE, try creating a new path. If it has no PATH_CHALLENGE and we don't know which path the packet is associated with (num. of paths>=2), discard the packet. If there is only one path, we perform path validation as single path QUIC does.",
      "createdAt": "2023-03-06T08:52:45Z",
      "updatedAt": "2024-05-14T12:57:53Z",
      "closedAt": "2024-05-14T12:57:53Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think a new four tuple is kind of by definition a new path. I don't like trying to reason whether packets that do or don't carry a path challenge. The receiver of this packet should definitely send challenges, validate the path, etc.\r\n\r\nBeyond that, the concern is performance, and heuristics such as \"this new path looks a lot like a previous path that was seen before, with a different CID and almost the same 4-tuple (e.g., only port number changed), so maybe it could be initiated with the RTT and congestion control data of this previous path.\" I think the receiver of the path-creating packet MAY implement a logic like that, but it is not mandatory.\r\n\r\nConsider that the main usage is a not that was silent for a long time, and resumes transmission with anew CID for privacy reasons. Being silent for a long time implies that the RTT and congestion conditions may very well have changed...",
          "createdAt": "2023-03-06T16:00:05Z",
          "updatedAt": "2023-03-06T16:00:59Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we should require that a PATH_CHALLENGE to be included when creating a new path. Otherwise when a sender regularly rotates CID, an attacker can know this and tweak the 4-tuple each time. It might create a lot of path states as @qdeconinck mentioned in the #169 .",
          "createdAt": "2023-03-08T06:53:12Z",
          "updatedAt": "2023-03-08T06:53:12Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we should add extra frames when rotating CID, because:\r\n\r\n1) Attackers can already change 4-tuple even if the CID does not rotate. This is actually a powerful attack against QUIC. If executed well, it allows the on path attacker to redirect traffic through a path of its choosing. The root cause is that encrypting the UDP content does not protect the IP header. We would need to add the 4 tuple to the packet authentication, and doing that while also supporting NAT rebinding is really hard.\r\n\r\n2) This would change the semantics of the PATH CHALLENGE frame from \"verifying continuity\" to \"verifying continuity and asserting a new path\". Yet there are many legitimate usage of PATH CHALLENGE without any path change, \r\n\r\n3) In the CID rotation scenario, the sending node is not changing its congestion window, and will send a full CWIN of packets before getting any acknowledgement on the new path. Even if the first packet carried a PATH CHALLENGE, that packet could be lost, and the receiver will have to process the second packet, which will typically only carry stream frames.",
          "createdAt": "2023-03-08T16:13:53Z",
          "updatedAt": "2023-03-08T16:13:53Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "So the problem we initially discussed was that the two peers could end up with a different view on how many path we have. However, with the \"loose\" model we have right now, I don't think that's actually a problem.",
          "createdAt": "2023-03-08T16:42:58Z",
          "updatedAt": "2023-03-08T16:44:56Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@huitema Maybe the earlier question was not clear. My point is that, yes we do not include additional frames when rotating CID on path, which basically aligns with what you said. However, I think when a peer wants to create a new path(with a new 4-tuple and a new CID), it needs to include a PATH_CHALLENGE in the first packet and this is what we do in the \"Example of new path establishment\". And if the receiver does not see a PATH_CHALLENGE from a packet with a completely new CID and a completely new 4-tuple, it should simply discard this packet and not enter the path creation flow.",
          "createdAt": "2023-03-09T05:32:03Z",
          "updatedAt": "2023-03-09T05:32:03Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@yfmascgy if you \"do not include additional frames when rotating CID on path\" and the NAT rebinding happens just at this time, then \"receiver does not see a PATH_CHALLENGE from a packet with a completely new CID and a completely new 4-tuple\" and will discard it. That does not seem right, unless we are a lot more specific about what we consider \"completely new\" -- if it is only a port change, is that completely new? If both port and address change but the address is in the same /24, is that completely new?\r\n\r\nWe have a parallel work on clarifying the migration issues with PR #172, which rightly states that the main issue is what happens with the old path. If the CID renewal occurs without rebinding, everything works as expected. But if the 4-tuple changes and the server does not recognize this as a renewal, the server will keep sending some packets to the old path.  As @mirjak says, the problem will fix itself when that old path is somehow closed -- but it would be better if the server abandoned the old path sooner.",
          "createdAt": "2023-03-09T06:17:29Z",
          "updatedAt": "2023-03-09T06:17:29Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the only (performance) issue we have now with such event is the one where the server may still use the \"old\" path while the \"new\" one is actually the rebinding of the \"old\". We could address this by asking the client to be explicit by sending a PATH_ABANDON frame with a specific error code, but the draft would then need to define such a code.",
          "createdAt": "2023-03-09T10:23:59Z",
          "updatedAt": "2023-03-09T10:23:59Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Here is what I understand so far. There are four options, all with some drawbacks:\r\n\r\n* server notices that there is no \"PATH_CHALLENGE\" in the packet, which means the client probably did not intend to create a new path. That may be a fine heuristic, but it does not tell the server which path was the old path. The server will have to do some guesswork, e.g., look for three-tuple matching (destination-IP, destination-port, source-IP), or for two-and-a-half-tuple matching (destination-IP, destination-port, prefix of source-IP). It would then do as suggested in \"NAT Rebinding\", i.e., challenge both paths and pick the one that responds.\r\n\r\n* client bundles a RETIRE_CONNECTION_ID(old CID) with the first packet after the migration. This has a major drawback: it prevents the server from sending new acknowledgements for packets received on the old path.\r\n\r\n* client bundles a PATH_ABANDON(old CID, reason = CID RETIRED) with the first packet after the migration. This creates a possible confusion, because PATH_ABANDON normally means abandon the path, not abandon the CID. We could see implementation errors.\r\n\r\n* client bundles a newly defined ABANDON_CID(old CID) frame with the first packet after the migration. The server realize that the client was merely trying to rotate the CID but that a path rebinding happened, and avoids sending new packets on the old path. \r\n\r\nThe last option is the best: indicate clearly the client intent, avoid extra traffic, avoid potential side effects. But all bundling solution have the issue that this \"first packet\" may be lost, and that the net packet will be received without the bundled data. This is probably OK since we are trying to solve a performance issue: the old path will be abandoned eventually, after idle timeout or after receiving a RETIRE_CONNECTION_ID frame. Or, if the first packet with the new CID does not include the ABANDON_CID frame, the server may fall back to the first option: notice that there is no path challenge, etc.",
          "createdAt": "2023-03-09T15:45:31Z",
          "updatedAt": "2023-03-09T15:45:31Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "+1 to what @huitema said in [his latest comment](https://github.com/quicwg/multipath/issues/188#issuecomment-1462286671).\r\n\r\nIMO, regardless of changing the path or not, endpoints SHOULD send path statuses when it starts using a new Connection ID.\r\n\r\nIf we haven't already said that in the draft, then we should.\r\n\r\nThen, it does not matter if NAT rebinding happens at the same time.",
          "createdAt": "2023-07-25T18:31:48Z",
          "updatedAt": "2023-07-25T18:31:48Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "So I think one issue that is not clear enough in the document in relation to this is how to peer A that transmit packets that goes through a network and arrives a B with a different 5-tuple for this CID than previous. Based on RFC 9000 connection migration this will cause a path validation being sent by B to A. However, I think the multipath document needs to be clearer on how this is dealt with in A as it is not a connection migration like it would be in single path QUIC. So there is a clear difference here. \r\n\r\nAlso maybe I haven't read the text back and forth, but it is not clear to me if the above scenario A will change its CID, or if will continue to use the CID it was using?  This appears relevant for the reason in that A can't determine if this path change only results was the result of a basic NAT binding with a source port change from B's perspective. But, I think there are a couple of corner cases, like two layer NATs with some failover where the packet could actually exit through a different NAT closest to B than previous and more substantially be a different route. So there might be some question here if one should ensure a CID change and discard any path congestion state. ",
          "createdAt": "2023-07-25T23:06:21Z",
          "updatedAt": "2023-07-25T23:06:21Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue as addressed by PR #292 ",
          "createdAt": "2024-05-14T12:57:53Z",
          "updatedAt": "2024-05-14T12:57:53Z"
        }
      ]
    },
    {
      "number": 190,
      "id": "I_kwDOGNtpaM5gTwLu",
      "title": "ACK_MP can be received on any path",
      "url": "https://github.com/quicwg/multipath/issues/190",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "needs-discussion"
      ],
      "body": "The current text says that \"ACK_MP frame (defined in {{ack-mp-frame}}) SHOULD be sent on (the same) path.\"  (The exact wording will change as part of PR #185 but the meaning will be the same.) The next sentence says \"However, an ACK_MP frame can be returned via a\r\ndifferent path, based on different strategies of sending ACK_MP frames.\" \r\n\r\nThere are two issues with that. First, as stated, this text is just implementation guidance: the second sentence in fact says that ACK_MP can be sent on any path, and that nodes MUST not treat receiving an ACK_MP on a \"different\" path as an error. If this is implementation guidance, the text should move from the normative section to the implementation guidance section.\r\n\r\nSecond, I believe the guidance is wrong. I understand that the \"same path\" practice makes path RTT computation easier, but that's only one aspect of the issue, IMHO not the most dominant aspect. In QUIC, most packet losses are detected by noticing that packets sent later on the path are already acknowledged, not by waiting on timers. Sending ACK_MP on a short path will enable faster detection of packet losses by acked number holes, while sending only on the \"same\" path only improve the computation of RTT, which may or may not improve timer-based recovery. So, this is a trade-off: more precise path-RTT computation versus shorter control loop. Such tradeoff belong to implementation guidance, not the normative part.\r\n\r\nAt some point, I contributed the algorithm used in Picoquic to derive path estimates through multi-dimensional statistical analysis. OK, I get the criticism that we should not require every implementer to have a PhD in applied maths. There are of course much simpler ways to do this. Suppose a packet is sent on path X and the ACK received on path Y. The RTT will be approximately 1/2 the RTT of path X plus 1/2 the RTT of path Y. If we assume that delay variations are dominated by effects on the send path, we can apply a simple transform:\r\n\r\n1- let S be an RTT sample with data transmission on path X and ack on path Y.\r\n2- assume that S = 1/2 RTT(X) + 1/2 RTT(Y)\r\n3- derive S' = 2*S - RTT(Y)\r\n4- consider S' as an approximation of a measurement of RTT(X)\r\n5- use S' to update the smoothed RTT of path X, the RTT deviation, and the PTO.\r\n\r\nWe can discuss whether step 3 should use the smoothed RTT observed on path Y or the min RTT. Using the min RTT is probably more robust. The key here is that we can update the PTO of the path using very simple math.\r\n\r\nBut we can also wonder whether this is even needed. The PTO triggers when there is suspicion that the last packets sent to a path were lost. Effectively, the PTO triggers when \"at this time, an ACK_MP should have been received\". If ACK_MP are usually sent on the shortest path, it seems fine to just use the observed ACK delay (S in the example above) to update the PTO. The PTO will reflect both the delays and the ACK_MP sending strategy of the peer, and will fire exactly when the ACK_MP of the peer should most probably have been received.\r\n\r\nAnd of course the value could end up being wrong -- but that's not a new issue. The statistical model behind the PTO computation in RFC 9002 is an approximation (see \"no PhD\" comment), and that too is wrong some of the time. That's why RFC 9002 specifies doubling the PTO delay after each trial, and also not changing congestion parameter simply because of a first PTO expiration.\r\n\r\nBottom line: mandating ACK_MP on the same path is a tradeoff between ease of path RTT computation and efficiency of loss recovery. It should not be mandated. If we want to provide guidance, that should be in the implementation section.\r\n\r\n\r\n",
      "createdAt": "2023-03-08T19:18:02Z",
      "updatedAt": "2023-07-05T15:53:02Z",
      "closedAt": "2023-07-05T15:52:14Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Discussed in IETF 116: agreement that this is an issue but not whether it should be normative or not. Suggestion to start with adding more text to explain in more detail what happens when different choices are made and then later consider if this should have some normative mechanism.\r\n\r\nSince this is potentially a broader conversatio about RTT estimation, discussion on the list is recommended.",
          "createdAt": "2023-03-30T01:12:28Z",
          "updatedAt": "2023-03-30T01:13:25Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "NONE",
          "body": "The conversation in the room was about the importance of a consistent ACK strategy in order to provide a stable RTT for a given path.\r\n\r\nRTT is used by PTO and some congestion controllers.  Changes in path characteristics do happen, so both PTO and congestion controllers should be designed to adapt to changes in strategy, but when those occur there's an increased chance of spurious or delayed PTOs as well as over or under-sending data into the network.\r\n\r\nACKs do not need to be sent on the same path they were received upon to provide a stable RTT and representative RTTVar, but the strategy should be stable when possible.  For example, even alternating paths on every ACK produces RTT and RTTVar values that should not cause spurious PTOs, because the RTT will be the mean RTT and the farther apart the RTTs are, the larger the RTTVar will be.\r\n\r\nLooking at RFC9002, there are a number of normative statements about RTT calculation, and some of those were added to minimize the possibility of spurious PTOs, but there's nothing that parallels this I can find, so I could go either way on normative text.\r\n\r\nOne reason to send an ACK on the same path that data is received upon is to ensure network devices (ie: NATs, etc) keep the path open.  Sending in one direction on a path risks having the path get blackholed.",
          "createdAt": "2023-03-30T01:48:09Z",
          "updatedAt": "2023-03-30T01:48:09Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So the default strategy would be the \"naive\" strategy, in which every RTT sample contributes to smoothed RTT and RTT VAR, regardless of the path the ACK was sent on. The smoothed RTT and RTT VAR will incorporate both the variations in path delays and the ACK strategy of the receiver. In general, acking through the \"shortest\" path results in shorter RTT, and thus more efficient loss recovery and congestion control. Using a stable strategy will tend to minimize RTT VAR, which also contributes to better performance.",
          "createdAt": "2023-03-30T02:08:11Z",
          "updatedAt": "2023-03-30T02:09:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And yes, there may be a need to send keep-alive traffic on all paths. But this is not quite the same issue as chosing paths to send ACKs. ",
          "createdAt": "2023-03-30T02:09:50Z",
          "updatedAt": "2023-03-30T02:09:50Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is partly addressed by #217 but section 5.1 needs further editing",
          "createdAt": "2023-07-05T15:49:15Z",
          "updatedAt": "2023-07-05T15:49:15Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "No commit was merged without PR. Sorry but fixed now.",
          "createdAt": "2023-07-05T15:53:02Z",
          "updatedAt": "2023-07-05T15:53:02Z"
        }
      ]
    },
    {
      "number": 193,
      "id": "I_kwDOGNtpaM5gY40I",
      "title": "Clarify endpoints should ignore multipath frames referencing retired DCID sequence number",
      "url": "https://github.com/quicwg/multipath/issues/193",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "We may add a sentence to clarify that we should just ignore Multipath frames related to retired DCIDs, but I would suggest to add such a sentence at the beginning of the section introducing these frames, as this applies to all of them.",
      "createdAt": "2023-03-09T12:29:18Z",
      "updatedAt": "2023-03-13T10:03:20Z",
      "closedAt": "2023-03-13T10:03:20Z",
      "comments": []
    },
    {
      "number": 194,
      "id": "I_kwDOGNtpaM5gY601",
      "title": "Remove duplicate mention of sending PATH_ABANDON on any path is valid",
      "url": "https://github.com/quicwg/multipath/issues/194",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In 4.3.1 (Use PATH_ABANDON Frame to Close a Path), we state that\r\n\r\n> The PATH_ABANDON frame contains the Destination Connection ID Sequence Number and therefore can be sent on any path.\r\n\r\nThis is actually already said later in Section 8.2. We could remove this duplicate mention.",
      "createdAt": "2023-03-09T12:34:03Z",
      "updatedAt": "2023-03-13T09:02:10Z",
      "closedAt": "2023-03-13T09:02:10Z",
      "comments": []
    },
    {
      "number": 196,
      "id": "I_kwDOGNtpaM5gelsg",
      "title": "Make an editorial pass in the \"New Frames\" section",
      "url": "https://github.com/quicwg/multipath/issues/196",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Just to not forget this, but this is mostly editorial.\r\n\r\n- Probably present first the ACK_MP frame, and then PATH_ABANDON and PATH_STATUS\r\n- Drop reference to I-D.liu-multipath-quic as the PATH_STATUS frame is now integrated in the draft.\r\n- Based on #183 and #190, and If we agree on #192, we could also drop the text in PATh_ABANDON stating that\r\n\r\n> PATH_ABANDON frames MAY be sent\r\non any path, not only the path on which the referenced Destination\r\nConnection ID is used.",
      "createdAt": "2023-03-10T09:21:45Z",
      "updatedAt": "2023-03-13T15:06:59Z",
      "closedAt": "2023-03-13T15:06:59Z",
      "comments": []
    },
    {
      "number": 197,
      "id": "I_kwDOGNtpaM5gemzM",
      "title": "Does the reception of purely invalid Destination Connection ID sequence number in PATH_ABANDON/PATH_STATUS also lead to connection error?",
      "url": "https://github.com/quicwg/multipath/issues/197",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Somewhat related to #193 (that moved text that was ACK_MP specific to all the multi path-specific frames), we currently state in the ACK_MP section that\r\n\r\n> If an endpoint receives an ACK_MP frame with a Connection ID sequence\r\nnumber which was never issued (i.e., with a sequence number\r\nlarger than the largest one advertised), it MUST treat this as a connection\r\nerror of type MP_PROTOCOL_VIOLATION and close the connection.\r\n\r\nShould we also react the same way with PATH_ABANDON and PATH_STATUS frames? I would say yes, but would be great to agree on this.",
      "createdAt": "2023-03-10T09:25:07Z",
      "updatedAt": "2023-03-13T10:03:22Z",
      "closedAt": "2023-03-13T10:03:22Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think so. It should lead to connection error.",
          "createdAt": "2023-03-12T06:14:34Z",
          "updatedAt": "2023-03-12T06:14:34Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "At least we should react the same to all three frames. Not sure if there is a point in ignoring instead but I also think a connection error is right.",
          "createdAt": "2023-03-13T08:13:51Z",
          "updatedAt": "2023-03-13T08:13:51Z"
        }
      ]
    },
    {
      "number": 200,
      "id": "I_kwDOGNtpaM5gqSbn",
      "title": "Discuss what to do if path_status is detected as lost or needs to be resend otherwise",
      "url": "https://github.com/quicwg/multipath/issues/200",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "We might also discuss somewhere that you probably need to send an update if the peer changes the CID on that path. But maybe that a bit more discussion we need to have here. Maybe in this case it's better if the path_status frame could hold information for multiple CID or even provide somehow an assignment to a certain path status for future CID, so if then endpoint want to change it's CID on a path it can use a CID that is already assigned to the same property...?",
      "createdAt": "2023-03-13T15:11:10Z",
      "updatedAt": "2023-10-22T09:47:15Z",
      "closedAt": "2023-10-22T09:47:15Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Discussed at IETF 116: more discussion is required",
          "createdAt": "2023-03-30T01:14:45Z",
          "updatedAt": "2023-03-30T01:14:45Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Thinking for about this further and following the loose path ID model, we can actually not really restrict the signalling to only CIDs that are already in use because we don't have a good understanding for which CIDs at any point in time are \"in active use\". So that means an indicated path status could relate to any issued CID and we would leave it actually to the implementation if they want to \"assign\" a certain set of CIDs to a certain kind of path status in advance or only after a CID is observed on a path.\r\n\r\nEffectively this, however, also means that an endpoint could provide only one CID for active use and all others for stand-by only, basically telling the other side to always only use one active path at a time. But not sure if that's overly great to have that as an implicit limitation. Or maybe it's a useful feature?\r\n\r\nOne more thought is that we could potentially also provide the path status at the time of issuing the CID (e.g. replacing the NEW_CONNECTION_ID frame with a new frame). However, you might still want a way to change the path state later... or not and you \"just\" change the CID instead...?",
          "createdAt": "2023-03-30T05:30:35Z",
          "updatedAt": "2023-03-30T05:30:35Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue is on hold until we decide what to do with the PATH_STATUS frame, see issue #186 ",
          "createdAt": "2023-07-03T13:38:59Z",
          "updatedAt": "2023-07-03T13:38:59Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This can be closed if PR #277 gets merged.",
          "createdAt": "2023-10-21T14:16:18Z",
          "updatedAt": "2023-10-21T14:16:18Z"
        }
      ]
    },
    {
      "number": 201,
      "id": "I_kwDOGNtpaM5iJzRt",
      "title": "Use authors actual names",
      "url": "https://github.com/quicwg/multipath/issues/201",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [
        "Yanmei-Liu",
        "yfmascgy"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Now, I might be making an assumption, but I believe that some of the authors/editors on the draft are currently using latin transliterations of their names.  We have the ability to use real names, can we do that?\r\n\r\n(Note: we need to ask; I have had some people express a desire to only use the latin version of their name.  The most important thing is to respect individual wishes.)",
      "createdAt": "2023-03-30T00:46:57Z",
      "updatedAt": "2023-07-05T15:35:31Z",
      "closedAt": "2023-07-05T15:35:31Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@Yanmei-Liu @yfmascgy how do you prefer to have you names listed? Please create a PR if you want to change or close this issue! Thanks!",
          "createdAt": "2023-06-30T10:29:50Z",
          "updatedAt": "2023-06-30T10:29:50Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Many thanks! I think it's a good idea to also use our actual name. I was trying to input my Chinese name in Unicode as &#x9A6C;&#x4E91;&#x98DE; but when I tried make I got the following error saying that it did not find alphanumeric character \r\n\r\n\"/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/psych.rb:456:in `parse': (<unknown>): did not find expected alphabetic or numeric character while scanning an anchor at line 25 column 10 (Psych::SyntaxError)\". I am wondering if there is a simple fix for this issue?\r\n",
          "createdAt": "2023-07-02T07:21:08Z",
          "updatedAt": "2023-07-02T07:22:21Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "The syntax is a little weird.  Try this (repeat all but the first line for other authors):\r\n\r\n```yaml\r\nauthor:\r\n  -\r\n    fullname:\r\n      :: \"\u9a6c\u4e91\u98de\"\r\n      ascii: \"Yanmei Liu\"\r\n    org: ...\r\n    email: ...\r\n```",
          "createdAt": "2023-07-04T01:25:26Z",
          "updatedAt": "2023-07-04T01:25:26Z"
        }
      ]
    },
    {
      "number": 202,
      "id": "I_kwDOGNtpaM5iJ15y",
      "title": "0xbaba is not random",
      "url": "https://github.com/quicwg/multipath/issues/202",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [
        "huitema"
      ],
      "labels": [
        "question"
      ],
      "body": "QUIC registration rules strongly recommend that new codepoints be selected at random.  Though this value *might* have been randomly selected, it stretches credulity somewhat to reach that conclusion.\r\n\r\nNote that using a contiguous range is fine, but please start that range from a random point.",
      "createdAt": "2023-03-30T01:03:28Z",
      "updatedAt": "2023-07-07T04:50:28Z",
      "closedAt": "2023-07-07T03:28:30Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The transport parameter uses a random value now. Should we also change the frame types to random values?\r\n\r\nIf we merger PR #227 we will change the transport parameter value anyway for the next revisions. So this might be a good point to also change the frames codepoints. or does it not really matter anymore given those non-random values are already implemented/used?",
          "createdAt": "2023-06-30T10:28:08Z",
          "updatedAt": "2023-06-30T10:28:08Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's my understanding that frame types don't need to use random values, since they're only valid if the use of the extension was negotiated.",
          "createdAt": "2023-06-30T16:02:34Z",
          "updatedAt": "2023-06-30T16:02:34Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "So can we close this issue now or is there anything else?",
          "createdAt": "2023-07-04T15:37:31Z",
          "updatedAt": "2023-07-04T15:37:31Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@marten-seemann \r\n> It's my understanding that frame types don't need to use random values, since they're only valid if the use of the extension was negotiated.\r\n\r\nI am not sure if there is such an exception for frame types or if it can be justified.\r\n\r\nQUIC extensions are not expected to have overlapping frame types; otherwise, you might not be possible to use two extensions at once.\r\n\r\nTherefore, we need the same rule of collision avoidance for frame types as transport parameters.\r\n\r\nBesides, Multipath draft also defines an error code starting with 0xba...",
          "createdAt": "2023-07-05T01:03:59Z",
          "updatedAt": "2023-07-05T01:03:59Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That is correct, however, the cases are a bit different.\r\n\r\nYou can never \"take back\" a transport parameter code point that has been used (even if it was just for an experiment), since there might still be nodes around using that transport parameter. That doesn't apply to frame types and error codes. You don't need to care about some experimental extension having used code point X, as you'll never risk running into a collision, unless you yourself support that experimental extension.\r\n\r\nOf course, once it comes to the publication of the final RFC, code points need to be chosen to be unique, so extensions can be mixed and matched. I think this is guaranteed by having the frame type code space managed by IANA.",
          "createdAt": "2023-07-05T01:10:08Z",
          "updatedAt": "2023-07-05T01:10:08Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@marten-seemann \r\n> You can never \"take back\" a transport parameter code point that has been used (even if it was just for an experiment), since there might still be nodes around using that transport parameter. That doesn't apply to frame types and error codes.\r\n\r\nThat's true for frames types, but I'm not sure if there is a consensus that use of the error codes are negotiated.\r\n\r\nIn fact, I think it is the contrary. We agreed that we should send a Multipath-specific error code prior to the completion of negotiation (see https://github.com/quicwg/multipath/issues/157#issuecomment-1489532046), and have adopted #252.",
          "createdAt": "2023-07-07T03:49:02Z",
          "updatedAt": "2023-07-07T03:49:02Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That\u2019s ok since error codes are governed by an IANA registry. However, that registry is only filled once the RFC is published, so that doesn\u2019t really apply to draft versions.",
          "createdAt": "2023-07-07T04:37:34Z",
          "updatedAt": "2023-07-07T04:37:34Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@marten-seemann we could argue that point in multiple ways. In any case, the frame-id and error code must not change if the transport parameter ID does not change. We know that the next draft will propose a new parameter ID for multipath negotiation. It is thus a good time for picking non-controversial values, and avoid another change of the transport parameter later, maybe during WGLC.",
          "createdAt": "2023-07-07T04:50:28Z",
          "updatedAt": "2023-07-07T04:50:28Z"
        }
      ]
    },
    {
      "number": 204,
      "id": "I_kwDOGNtpaM5iKlVz",
      "title": "Change enable_multipath TP to take a zero-length value",
      "url": "https://github.com/quicwg/multipath/issues/204",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "At the moment, `enable_multipath` is defined to take a value of either 0 or 1, with a text explaining what the endpoints should do when it receives values other than 1.\r\n\r\nThat sounds needlessly complex to me.\r\n\r\nWe can use a value-less Transport Parameter to communicate the use of the feature. The existence of the CP means that the stack is multipath-aware; the absence means not.\r\n\r\nThis value-less approach follows the precedence that we have in  QUIC v1: disable_active_migration.",
      "createdAt": "2023-03-30T05:26:44Z",
      "updatedAt": "2023-07-05T15:20:13Z",
      "closedAt": "2023-07-05T15:20:13Z",
      "comments": []
    },
    {
      "number": 205,
      "id": "I_kwDOGNtpaM5iK0Tu",
      "title": "MUST for checking if peer has spare Connection IDs",
      "url": "https://github.com/quicwg/multipath/issues/205",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "Section 4.1 of the Multipath draft states: _Following [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)], each endpoint uses NEW_CONNECTION_ID frames to issue usable connections IDs to reach it. Before an endpoint adds a new path by initiating path validation, it MUST check whether at least one unused Connection ID is available for each side._\r\n\r\nI do not think it is possible to perform such checks reliably, as RFC 9000 allows the peer to start using spare Connection IDs at any moment.\r\n\r\nIn [RFC 9000 section 5.1.1](https://quicwg.org/base-drafts/rfc9000.html#name-issuing-connection-ids), we state that _an endpoint that initiates migration and requires non-zero-length connection IDs SHOULD ensure that the pool of connection IDs available to its peer allows the peer to use a new connection ID on migration, as the peer will be unable to respond if the pool is exhausted._ \r\n\r\nConsidering that Multipath is as extension of v1, I think it might just be sufficient to use what we already have (probably adding a pointer to the above text in RFC 9000) and calling it a day.",
      "createdAt": "2023-03-30T06:35:15Z",
      "updatedAt": "2023-07-05T15:29:18Z",
      "closedAt": "2023-07-05T15:29:18Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that checking the other side maybe not fully reliable to do but maybe we still need a MUST for the sender side, like \"MUST use a new DCID when initiation path validation\". Or is that also already covered in RFC9000? I couldn't quickly find it right now.\r\n\r\nAlso maybe we want to say more on the fact that active_connection_id_limit limits the number of active paths. So I guess you should check that parameter at least against the number of already open paths.\r\n\r\nAnd finally an endpoint might also check the number of active paths again the number of active CID it provided to the peer. If all CIDs appear to be used by active paths and that number of provided values is be below active_connection_id_limit, it should sent a NEW_CONNECTION_ID frame before initiating validation.",
          "createdAt": "2023-06-30T12:00:55Z",
          "updatedAt": "2023-06-30T12:00:55Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak \r\n> I agree that checking the other side maybe not fully reliable to do but maybe we still need a MUST for the sender side, like \"MUST use a new DCID when initiation path validation\". Or is that also already covered in RFC9000? I couldn't quickly find it right now.\r\n\r\nYes, it is my understanding that we already state that in RFC 9000. Quoting from [section 9.5](https://www.rfc-editor.org/rfc/rfc9000#name-privacy-implications-of-con), _an endpoint MUST NOT reuse a connection ID when sending from more than one local address_, and _an endpoint MUST NOT reuse a connection ID when sending to more than one destination address_. To paraphrase, when sending to a new 4-tuple, a previously unused Connection ID has to be available.\r\n\r\n> Also maybe we want to say more on the fact that active_connection_id_limit limits the number of active paths. So I guess you should check that parameter at least against the number of already open paths.\r\n\r\nYeah, availability of spare Connection IDs limits the number of paths that can be opened, while `active_connection_id_limit` gives endpoints the expectation. I think the discussion of the expectation is covered by #221?\r\n\r\n> And finally an endpoint might also check the number of active paths again the number of active CID it provided to the peer. If all CIDs appear to be used by active paths and that number of provided values is be below active_connection_id_limit, it should sent a NEW_CONNECTION_ID frame before initiating validation.\r\n\r\nThat is already covered by [RFC 9000 section 8.2](https://www.rfc-editor.org/rfc/rfc9000#section-8.2-7), I think. Of course, I would not be opposed to adding a reference from the Multipath document, but considering that we are reusing the path establishment process of RFC 9000 maybe we do not need to repeat the point.",
          "createdAt": "2023-06-30T12:19:28Z",
          "updatedAt": "2023-06-30T12:20:09Z"
        }
      ]
    },
    {
      "number": 206,
      "id": "I_kwDOGNtpaM5iQyJU",
      "title": "consider allowing sending on a new path optimistically",
      "url": "https://github.com/quicwg/multipath/issues/206",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "duplicate",
        "has PR"
      ],
      "body": "The draft currently forbids sending non-probing frames before path validation has completed:\r\n> If validation succeed, the client can send non-probing, 1-RTT packets on the new paths.\r\n\r\nWhile this is a sane thing to do in many cases, there might be good reasons to optimistically send non-probing frames right away. This is forbidden in RFC 9000 because sending non-probing frames abandons the original path, but this problem doesn't exist when doing multipath.\r\n\r\nOf course, if the path doesn't work, this means that those packets will be lost and data might need to be retransmitted, but that's a risk the client might be willing to take under certain circumstances.",
      "createdAt": "2023-03-31T02:25:51Z",
      "updatedAt": "2023-10-22T10:56:54Z",
      "closedAt": "2023-10-22T10:56:54Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is the same text as RFC 9000, and its validation requirement.\r\n\r\nIn theory, nothing \"really bad\" will happen if a node starts sending packets on a path without waiting for the validation. The main risk is that the packets will be lost, which is a bummer for the sender but also a risk that the sender can calculate. There is however a security consideration: if the node could be tricked towards sending packet to an unsuspecting target, enabling use in DDOS.\r\n\r\nThis could happen for example:\r\n\r\n* if a malicious server sends the DOS target addresses in the \"preferred address\" parameter. \r\n* if a client sends a probe and fakes the source address of the DOS target.\r\n\r\nIn the first case, the client should definitely not use the path learned from the server before validation.\r\nIn the second case, the server should definitely not use the path learned from the client before validation.",
          "createdAt": "2023-04-03T04:31:23Z",
          "updatedAt": "2023-04-03T04:31:23Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "These DoS concerns could be mitigated by limiting the amount of data sent on an unverified path, as RFC 9000 already does with the amplification limit. Packets containing a PATH_CHALLENGE frame need to be padded to at 1200 bytes anyway, so this is already quite similar to the situation during the handshake.\r\n\r\nI can think of many situations where sending 3 MTUs worth of application data is a lot better than not sending anything.",
          "createdAt": "2023-04-03T05:05:59Z",
          "updatedAt": "2023-04-03T05:05:59Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, all that is already addressed in RFC 9000 [9.3. ](https://www.rfc-editor.org/rfc/rfc9000.html#section-9.3)[Responding to Connection Migration](https://www.rfc-editor.org/rfc/rfc9000.html#name-responding-to-connection-mi): \"An endpoint MAY send data to an unvalidated peer address, but it MUST protect against potential attacks as described in Sections [9.3.1](https://www.rfc-editor.org/rfc/rfc9000.html#address-spoofing) and [9.3.2](https://www.rfc-editor.org/rfc/rfc9000.html#on-path-spoofing). An endpoint MAY skip validation of a peer address if that address has been seen recently. In particular, if an endpoint returns to a previously validated path after detecting some form of spurious migration, skipping address validation and restoring loss detection and congestion state can reduce the performance impact of the attack.\"\r\n\r\nIt would make a lot of sense to just insert an explanation that for multipath, an endpoint may send data before on a path before full validation, with a pointer to the text in RFC 9000.",
          "createdAt": "2023-04-03T05:17:05Z",
          "updatedAt": "2023-04-03T05:17:05Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the draft does actually not explicitly forbid this. The sentences cited above just says that you can send non-probing packets after validation but it doesn't restrict what you can do before validation. If that is covered in RFC9000 we should probably just add a pointer somewhere.\r\n\r\nAlso note that this is basically a duplicate of issue #50 which has some additional discussion.",
          "createdAt": "2023-06-30T12:06:10Z",
          "updatedAt": "2023-06-30T12:06:10Z"
        }
      ]
    },
    {
      "number": 207,
      "id": "I_kwDOGNtpaM5iREa7",
      "title": "use a FRAME_ENCODING_ERROR, not MP_PROTOCOL_VIOLATION for frame parsing errors",
      "url": "https://github.com/quicwg/multipath/issues/207",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "RFC 9000 defines a FRAME_ENCODING_ERROR, which occurs when a frame can\u2019t be parsed or is received at the wrong encryption level. It even contains a field to indicate the frame type.\r\n\r\nThis error would be more specific than the general MP_PROTOCOL_VIOLATION defined in this document.",
      "createdAt": "2023-03-31T04:17:38Z",
      "updatedAt": "2023-07-05T15:25:52Z",
      "closedAt": "2023-07-05T15:25:52Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #236 replaces the error code for the case wrong encryption level case. \r\n\r\nThe second case where MP_PROTOCOL_VIOLATION is used is when a too high CID seq num in the frame. Do we want to change that also to FRAME_ENCODING_ERROR?",
          "createdAt": "2023-06-30T12:40:39Z",
          "updatedAt": "2023-06-30T12:40:39Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The principle we used regarding error codes in RFC 9000 is the following: If you can (statelessly) detect the error when parsing the frame, it's a FRAME_ENCODING_ERROR. If you need to access state, it's a PROTOCOL_VIOLATION (or more specific other error).",
          "createdAt": "2023-06-30T16:04:25Z",
          "updatedAt": "2023-06-30T16:04:25Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "As you need state about the used CID seq number, I guess this is the later case. Should we keep using MP_PROTOCOL_VIOLATION or define a more specific error type?",
          "createdAt": "2023-07-04T15:39:37Z",
          "updatedAt": "2023-07-04T15:39:37Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No strong preference either way, but it might make sense to define an error for referencing an invalid path. Precedent for that would be the STREAM_STATE_ERROR in RFC 9000. Defining a consistent set of error codes for multipath is probably a larger design issue though that requires some more thought. Should we open a new issue for that?",
          "createdAt": "2023-07-04T16:06:31Z",
          "updatedAt": "2023-07-04T16:06:31Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "There is also issue #157 for the handshake error question. Not sure if we need new issue or can handle these few cases separately... ",
          "createdAt": "2023-07-04T16:42:33Z",
          "updatedAt": "2023-07-04T16:42:33Z"
        }
      ]
    },
    {
      "number": 208,
      "id": "I_kwDOGNtpaM5iRFOF",
      "title": "contradicting statement about usage of ACK vs ACK_MP frames",
      "url": "https://github.com/quicwg/multipath/issues/208",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "no-action-needed"
      ],
      "body": "> As soon as the negotiation of multipath support is completed, endpoints SHOULD use ACK_MP frames instead of ACK frames to acknowledge application data packets, including 0-RTT packets, using the initial Connection ID with sequence number 0 after the handshake concluded\r\n\r\nThe extension is negotiated when the EncryptedExtensions has been sent / received, which is during the handshake, so it sounds like this would allow ACK_MP frames in Handshake packets.\r\n\r\nHowever:\r\n> Acknowledgements of Initial and Handshake packets MUST be carried using ACK frames, as specified in [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)].",
      "createdAt": "2023-03-31T04:22:49Z",
      "updatedAt": "2023-07-05T15:58:06Z",
      "closedAt": "2023-07-05T15:58:05Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "So maybe the solution would be to state that ACK_MP can be send in 1-RTT packets only, and that handshake must complete in one path?",
          "createdAt": "2023-04-03T23:53:07Z",
          "updatedAt": "2023-04-03T23:53:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The spirit was that the extension only takes effect after the handshake is done, or at least complete. Maybe fix the text...",
          "createdAt": "2023-04-04T01:19:28Z",
          "updatedAt": "2023-04-04T01:19:28Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it will have to be handshake complete, actually, because of the \"preferred address\" option. Otherwise there would be ambiguity as to whether the \"preferred address\" path is treated as one of many paths or as a replacement for the original path.",
          "createdAt": "2023-04-04T01:21:27Z",
          "updatedAt": "2023-04-04T01:21:27Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On the other hand, no harm is done if the server sends ACK_MP(Cid-number = 0, ...). On 1RTT packets, of course. Doing that with Handshake packets seems like an invitation for failures. Plus, not all handshake packets are sent after the negotiation completes.",
          "createdAt": "2023-04-04T01:23:02Z",
          "updatedAt": "2023-04-04T04:23:39Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Right, regarding @marten-seemann's original concern regarding if ACK_MP frames can be sent in Initial and Handshake packets, the Multipath draft already prohibits the use of ACK_MP frames in Initial and Handshake packets.\r\n\r\n[Section 8](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-new-frames) states that _all the new frames MUST only be sent in 1-RTT packet, and MUST NOT use other encryption levels_. This includes ACK_MP.\r\n\r\nThough we can always be more clear about it being prohibited.\r\n\r\nI have opened a separate issue (#220) regarding the use of standard ACK frames in 1-RTT packets when multipath is negotiated.",
          "createdAt": "2023-06-16T02:43:45Z",
          "updatedAt": "2023-06-16T02:44:06Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "To come back to the original text that Martin cited. This is not a contradiction because the text says: \"SHOULD use ACK_MP frames instead of ACK frames to acknowledge application data packets.\"\r\n\r\n\r\nI guess the term \"application data packets\" is not very clear though.\r\n\r\nAs such I think this issue is just editorial to clarify this term. Or can we close this issue and just ensure we clarify issue #220?",
          "createdAt": "2023-06-30T12:47:25Z",
          "updatedAt": "2023-06-30T12:47:25Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "No action needed - issue #220 covers the discussion about use of RFC9000 ACK frames",
          "createdAt": "2023-07-05T15:58:05Z",
          "updatedAt": "2023-07-05T15:58:05Z"
        }
      ]
    },
    {
      "number": 209,
      "id": "I_kwDOGNtpaM5iRHLD",
      "title": "don\u2019t require sending packets on all paths on key updates",
      "url": "https://github.com/quicwg/multipath/issues/209",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "needs PR"
      ],
      "body": "> To address such a synchronization issue, if key update is initialized on one path, the sender SHOULD send at least one packet with the new key on all active paths. Further, an endpoint MUST NOT initiate a subsequent key update until a packet with the current key has been acknowledged on each path\r\n\r\nThis has a multitude of problems:\r\n1. Depending on the number of paths, this is wasteful.\r\n1. In my implementation, the object managing the keys is purely reactive: It only reacts on input received from the QUIC stack (received packets, requests to encrypt a packet). With this proposal, it would need to take a more active role, triggering the sending of new packets on certain paths.\r\n1. A path might have died when this \u201ekey update probe packet\u201c is sent. This certainly can be solved by adding some additional logic what to do for paths that are abandoned during a key update, but this could potentially become complicated. Furthermore, this is fragile, because this logic will be rarely exercised and could lead to a situation where a node thinks that it\u2019s not allowed to initiate a key update and will there not be able to send any further packets.\r\n\r\n",
      "createdAt": "2023-03-31T04:33:57Z",
      "updatedAt": "2023-07-10T07:41:21Z",
      "closedAt": "2023-07-10T07:41:21Z",
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Here\u2019s a sketch of an easier solution:\r\n* Keep the logic of RFC 9000: a new key update is only allowed after receiving an ACK for a packet sent using the new keys, on any path.\r\n* RECOMMEND delaying the next key update for at least 3 maxPTO, where maxPTO is the maximum of the PTOs of all paths.\r\n\r\nThis is safe as a recommendation (and not a requirement), since the worst thing that can happen is that an (absurdly long) reordered packet is received at key phase N-2, can\u2019t be decrypted using the key phase N key, and is dropped. This is a situation that can easily be recovered from.",
          "createdAt": "2023-03-31T04:38:36Z",
          "updatedAt": "2023-03-31T04:38:36Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like Marten's proposed solution. Clearly, there is some risk involved. For some time after the key update, packets may arrive with the \"old\" key phase, and should be processed with the old key. If the next rotation is attempted too soon and packets are still in transit with the old key, these packets will be lost. But that's a temporary issue.",
          "createdAt": "2023-04-03T04:38:55Z",
          "updatedAt": "2023-04-03T04:38:55Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "What @marten-seemann says.\r\n\r\n> Clearly, there is some risk involved. For some time after the key update, packets may arrive with the \"old\" key phase, and should be processed with the old key. If the next rotation is attempted too soon and packets are still in transit with the old key, these packets will be lost. But that's a temporary issue.\r\n\r\nI would point out that during the development of QUIC v1 we did discuss this issue and decided that use of a timer would be fine. I would prefer building on top of that consensus as @marten-seemann proposes, rather than trying to do something else.\r\n\r\nTo be precise, as stated in [the latter half of RFC 9001 Section 6.5](https://www.rfc-editor.org/rfc/rfc9001#section-6.5-4), we already state that it would be fine for endpoints to retain keys for only two epochs at a time; that is why we already have the 3PTO requirement that @marten-seemann's proposal to relies on.",
          "createdAt": "2023-06-14T23:58:38Z",
          "updatedAt": "2023-06-14T23:59:32Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "As somebody argued for using timers for Key Update in v1, I will be happy to see it being reused here. Pushed PR #257 that addresses the text.",
          "createdAt": "2023-07-06T05:11:27Z",
          "updatedAt": "2023-07-06T05:11:27Z"
        }
      ]
    },
    {
      "number": 210,
      "id": "I_kwDOGNtpaM5iRyag",
      "title": "path-specific idle timeout logic",
      "url": "https://github.com/quicwg/multipath/issues/210",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "question",
        "has PR",
        "design"
      ],
      "body": "We introduced the idle timeout in RFC 9000 to enable endpoints to close idle connections without sending any packets (and potentially powering up the radio for that). Idle timeouts are inherently racy: the start time will vary slightly between both endpoints (by about half an RTT), and a packet sent just before expiration of the idle timeout period might be received just after the expiration.\r\nThis is ok because running into the idle timeout will completely free up all resources associated with that connection, and stray packets will elicit stateless resets, allowing the other node to do the same.\r\n\r\nI\u2019m not sure I fully understand how this applies to paths. It seems like there needs to be a clear signal that a path has been abandoned due to idleness. Sending this signal will be very cheap if it\u2019s bundled with frames that would be sent anyway on a different path.\r\n\r\nThat said, I\u2019m wondering if the idle timeout is really the right concept for paths to begin with. Peers usually apply some kind of keep-alive logic to keep a path alive, and that keep-alive period is based on the (presumed) characteristics of the path, such as the (presumed) timeouts applied by NATs, as well as the cost of sending a packet on that particular path. Would it make sense to introduce the concept of a path timeout, which could be attached to the PATH_ frames?",
      "createdAt": "2023-03-31T07:30:20Z",
      "updatedAt": "2023-11-14T07:11:24Z",
      "closedAt": "2023-11-14T07:11:24Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think there are two issues here:\r\n\r\nOne (based on the title oof the issue) is about having path-specific time-outs. This was discussed and agreed in issue #95. Or do you think there is anything additional that we need to discuss?\r\n\r\nThe second issue/proposal is to send a path_abandon frame after an idle time on another active path. I think that is a very good idea and inline with the idea to also use path_abandon after a migration event to enable the other end to remove state about the old CID. In general I think if you still have a path that is actively used it always better to be explicit. The only were you can't be explicit is if you have no actively used path, but in this case you will anyway close the whole connection about an idea-time.",
          "createdAt": "2023-06-30T14:58:43Z",
          "updatedAt": "2023-06-30T14:58:43Z"
        }
      ]
    },
    {
      "number": 211,
      "id": "I_kwDOGNtpaM5iRzea",
      "title": "editorial: section 4.3.1 talks about retransmittable frames",
      "url": "https://github.com/quicwg/multipath/issues/211",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "This was an old term used in early QUIC draft versions, and was removed since frames are not really retransmitted. Information is retransmitted.\r\n\r\nIt should be sufficient to say that packets are declared lost. This implies that some information contained in those packets might need to be retransmitted, should the sender still wish to do so.",
      "createdAt": "2023-03-31T07:33:48Z",
      "updatedAt": "2023-07-04T09:41:03Z",
      "closedAt": "2023-07-04T09:41:03Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "#237 proposed to actually remove the whole sentence. I don't think it's needed.",
          "createdAt": "2023-06-30T15:03:20Z",
          "updatedAt": "2023-06-30T15:03:20Z"
        }
      ]
    },
    {
      "number": 212,
      "id": "I_kwDOGNtpaM5iR2Of",
      "title": "ignoring PATH_STATUS frames doesn\u2019t seem wise",
      "url": "https://github.com/quicwg/multipath/issues/212",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "> An Endpoint MAY ignore the PATH_STATUS frame if it would make all the paths unavailable in a single connection.\r\n\r\nIgnoring frames makes me feel very uncomfortable. This can easily lead to very hard-to-debug situations.\r\n\r\nIdeally, abandoning all active paths would be a connection error. However, there\u2019s the corner case where the packet containing the path probing packets for a new path is reordered. I can see two solutions:\r\n1. Actually make it a connection error, and forbid abandoning all paths until a new path has been verified.\r\n2. Start a 3 PTO timer when this situation occurs, to allow for the arrival of the PATH_CHALLENGE frame. If it doesn\u2019t arrive, kill the connection. Problem: The 3 PTO assumes that the latency of the new path is not too different from the existing paths, which might not be a valid assumption.",
      "createdAt": "2023-03-31T07:41:18Z",
      "updatedAt": "2023-07-05T15:29:37Z",
      "closedAt": "2023-07-05T15:29:37Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I do agree that \"ignore\" sounds scary, but I'm not sure I agree with the solutions being proposed.\r\n\r\nIMO, PATH_STATUS are \"preferences\" expressed by endpoints indicating the peers how they should choose paths when sending packets.\r\n\r\nIf we think that way, I do not think there is a persuading reason to have MUSTs requiring endpoints retain the indication of at least one \"active\" path across the lifetime of a connection.\r\n\r\nAll we need to do is change the text to acknowledge the fact that all paths can become standby, rather than suggesting to \"ignore\" a frame indicating such change.",
          "createdAt": "2023-04-04T01:22:10Z",
          "updatedAt": "2023-04-04T01:22:10Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In fact, the plain language definition of \"standby\" is \"ready when you need it\". It should be perfectly OK for a node to start using a standby path if no other path is available.",
          "createdAt": "2023-04-04T01:49:30Z",
          "updatedAt": "2023-04-04T01:49:30Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed - path status is just guidance but doesn't close the path. So a sender can just decide to use any of the stand-by paths in that situation but really shouldn't ignore that frame/info entirely.\r\n\r\nI created PR #238 to remove this sentence. I also added the following sentence:\r\n\r\n\"If all available path are marked as \"standby\", no guidance is provided about\r\nwhich path should be used preferably, however, the sender might consider\r\nto minimize the number of concurrently used paths.\"\r\n\r\nIs that what we want to say? Or remove the second part? Or just don't have this sentence at all?\r\n",
          "createdAt": "2023-06-30T15:11:56Z",
          "updatedAt": "2023-07-04T11:51:27Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would probably drop the second part of the sentence, otherwise the added text sounds fine.",
          "createdAt": "2023-07-04T10:09:02Z",
          "updatedAt": "2023-07-04T10:09:02Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@qdeconinck \r\n> I would probably drop the second part of the sentence\r\n\r\nSGTM.\r\n\r\nIt might be confusing to suggest minimizing the number of paths without having guidance on how to choose one. But I do not think we can (or need to try to) give good advice.",
          "createdAt": "2023-07-04T12:07:47Z",
          "updatedAt": "2023-07-04T12:07:47Z"
        }
      ]
    },
    {
      "number": 213,
      "id": "I_kwDOGNtpaM5iR30X",
      "title": "editorial: key update requirement is hard to understand",
      "url": "https://github.com/quicwg/multipath/issues/213",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "> [Section 19](https://rfc-editor.org/rfc/rfc9000#section-19) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)] encodes the Connection ID Sequence Number as a variable-length integer, allowing values up to 2^62-1; in this specification, a range of less than 2^32-1 values MUST be used before updating the packet protection key.\r\n\r\nI think I know what this is supposed to say, but I\u2019m having trouble parsing this sentence. It would probably benefit from being reworded as a  \u201eMUST NOT use more than 2\u02c632-1 connection IDs without a key update\u201c, or similar.",
      "createdAt": "2023-03-31T07:45:08Z",
      "updatedAt": "2023-07-05T15:32:52Z",
      "closedAt": "2023-07-05T15:32:52Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Yeah I think the entire section failed to reflect that we allow CID sequence numbers above 2^32. It goes like\r\n> To calculate the nonce, a 96 bit path-and-packet-number is composed of the 32 bit Connection ID Sequence Number in byte order,\r\n\r\nbut what is exactly 32-bit CID sequence number?",
          "createdAt": "2023-07-04T03:17:31Z",
          "updatedAt": "2023-07-04T03:17:31Z"
        }
      ]
    },
    {
      "number": 214,
      "id": "I_kwDOGNtpaM5iZ7pN",
      "title": "separate Path IDs from Connection IDs",
      "url": "https://github.com/quicwg/multipath/issues/214",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "duplicate",
        "design",
        "needs-discussion"
      ],
      "body": "The current version of the draft introduces a very tight coupling between paths and connection IDs. This feels unnatural, since QUIC was designed such that CIDs can be rotated (potentially very) frequently, even in the absence of any path migration / probing.\r\n\r\nThe tight coupling in this draft leads to a whole range of problems:\r\n1. It complicates path state management. The CID used to establish a path might be retired, and a different CID may be used on that path. I'm struggling to figure out which sequence number to send in PATH_STATUS frames in this case. There's the risk that PATH_* frames can't be associated with a (still existing!) path because the CID was retired.\r\n2. When initiating a new path, there's a requirement to check that 1. the endpoint itself has a CID available for that path and 2. the peer also has a CID available. Note that this inherently racy: The peer might just have started using that CID on a different path.\r\n3. Loss recovery: As the packet number is reset to 0 when switching to a new CID. On the wire, this means that packets received on the same path now need to be acknowledged in separate ACK_MP frames. Implementations would now put a lot of effort into running loss recovery across the multiple packet number spaces belonging to the same path.\r\n\r\nI believe the design would become significantly easier if CIDs were scoped to the path to begin with:\r\n* This would mean adding a Path ID varint to the existing NEW_CONNECTION_ID frame (or alternatively, deprecating NEW_CONNECTION_ID in favor of a new MP_NEW_CONNECTION_ID frame). Same for the RETIRE_CONNECTION_ID frame. Sequence numbers for CIDs would now be incremented per path (i.e. any path would start with CID number 0).\r\n* The `active_connection_id_limit` transport parameter could be reinterpreted to mean the maximum number of active connection IDs _per path_. It could be accompanied by a `active_path_limit` transport parameter to allow the client to limit the number of paths.\r\n\r\nI believe this would resolve the problems described above. In addition, this has a few nice properties:\r\n1. The server would explicitly limit how many paths it is willing to accept. Credit for additional paths could be granted over the lifetime of the connection by sending NEW_CONNECTION_ID with new path IDs.\r\n2. The utility of the \"Retire Prior To\" field of the RETIRE_CONNECTION_ID frame would be restored: \"Retire Prior To\" would only apply to CIDs issued on that particular path.\r\n3. A neat implementation strategy on the client side would be to bundle a NEW_CONNECTION_ID frame for the new path in the packet containing the PATH_CHALLENGE frame. Maybe we could even introduce a protocol requirement that a client MUST NOT issue connection IDs for unused paths?\r\n4. It would simplify CID management when paths are retired: Just remove all CIDs associated with a path when (or shortly after) it's retired.\r\n\r\nIt has not escaped my attention that this proposal suggests another strategy for key management, which - among others - would simplify the key update problem. I'll follow up in a separate issue.",
      "createdAt": "2023-04-02T14:16:53Z",
      "updatedAt": "2024-03-25T05:43:12Z",
      "closedAt": "2024-03-25T05:43:12Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Marteen,\r\n\r\nThe current version of the draft actually does away with the concept of path identifier, and only uses the connection ID. This is the result of about two years of discussions, during which several different concepts were tried. The basic problem is that identification of paths by four tuples does not work well, because of NAT. You never know when a NAT rebinding takes places, and that introduces lots of complexity when trying to use a \"hard\" notion of path identifiers.\r\n\r\nOn path management: yes, there is a tie between life of a CID and life of the associated number space. This is explained in some detail in [7.1. ](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-7.1)[Number Spaces](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-number-spaces). That section explains the \"loose\" definition of path identifiers that we converged on.\r\n\r\nThe requirement to check that the peer has connection ID available is already there in RFC 9000. See for example the text in [section 8.2](https://www.rfc-editor.org/rfc/rfc9000.html#name-path-validation): _\"Sending NEW_CONNECTION_ID and PATH_CHALLENGE frames in the same packet, if the peer's active_connection_id_limit permits, ensures that an unused connection ID will be available to the peer when sending a response.\"_\r\n\r\nYou do not actually need to tie multiple number spaces together for loss recovery: you can merely rely on timers after closing a number space. But you may want to optimize:  I have in fact added optimization code in Picoquic, so that receiving ACKs of packets sent later on the same path triggers packet-number based loss detection. This is not very hard.\r\n",
          "createdAt": "2023-04-03T02:41:02Z",
          "updatedAt": "2023-04-03T02:41:02Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The current version of the draft actually does away with the concept of path identifier, and only uses the connection ID. \r\n\r\nOnly using CIDs is what I'm objecting to. I believe this makes the design more complicated than it needs to be.\r\n\r\n> The basic problem is that identification of paths by four tuples does not work well, because of NAT. You never know when a NAT rebinding takes places, and that introduces lots of complexity when trying to use a \"hard\" notion of path identifiers.\r\n\r\nI'm not proposing to bind the Path ID to a 4-tuple. In my mental model, a NAT rebinding doesn't open a new path (although it might require re-verification of the path as described in RFC 9000, Section 9). The client has no way of know when a NAT rebinding will happen / has happened, so it won't be able to anything about it: It will just continue sending with the old CID. That old CID would still be bound to the old Path ID.\r\n\r\nIn my proposal, the _only_ thing that would open a new path is the client consciously making the decision to do so: by using a CID associated with a fresh Path ID (in the common case, on a new 4-tuple).\r\n\r\nActually, I'd consider it a nice property that the server can now distinguish between a NAT rebinding (path ID stays constant) and initiation of a new path (new path ID is used).\r\n\r\n> You do not actually need to tie multiple number spaces together for loss recovery: you can merely rely on timers after closing a number space. But you may want to optimize: I have in fact added optimization code in Picoquic, so that receiving ACKs of packets sent later on the same path triggers packet-number based loss detection. This is not very hard.\r\n\r\nIt definitely breaks packet-number space loss recovery. I'm not sure how I'd retrofit this in my implementation without introducing a lot of complexity. I think we should strive for a design where no changes to the loss recovery logic are needed (other than initializing a new loss recovery context per path).",
          "createdAt": "2023-04-03T02:58:43Z",
          "updatedAt": "2023-04-03T02:58:43Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The use of the CID derives from a desire to not change the packet format, and to keep the path validation the same as RFC 9000. One of the key properties is that there is only one encryption key at a given time. Yes, this requires some coordination between paths, and the current proposal might not be optimal.\r\n\r\nYour proposal amounts to an explicit setup of path, after extending the definition of connection identifiers. You are making implementation arguments, but that cuts both ways:  what might simplify your implementation, will create additional complexities in implementations that have already implemented the current scheme. I would much rather leave the spec as is, and focus on the \"key update\" issue.\r\n\r\nThe current spec is safe but heavy: do not rotate the key \"again\" unless rotation has been observed on all paths. I am pretty sure that we can find a less onerous way to do that. Let's resolve that as its own issue.",
          "createdAt": "2023-04-03T04:22:15Z",
          "updatedAt": "2023-04-03T04:22:15Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The use of the CID derives from a desire to not change the packet format, and to keep the path validation the same as RFC 9000.\r\n\r\nNeither of those would be changed by the introduction of explicit path IDs.\r\n\r\n> One of the key properties is that there is only one encryption key at a given time.\r\n\r\nI understand that this is the current proposal. This issue doesn't propose to change that, #215 does. We could decouple path IDs from CIDs without changing that property, and I've been arguing that this would be an improvement in itself. That's why I split it into two issues. That said, I don't see why having a single encryption key would an advantage. Initializing a new encryption context per path seems pretty clean to me (just like we initialize a new loss detection context per path), but let's keep that discussion on #215.\r\n\r\n> You are making implementation arguments, but that cuts both ways: what might simplify your implementation, will create additional complexities in implementations that have already implemented the current scheme. \r\n\r\nI couldn't disagree more. Many production-level stacks haven't even started working on their MPQUIC implementation, so optimizing the design to minimize the diff for the stacks that already implemented the draft current seems premature. I'd prefer to find the cleanest design, starting from RFC 9000.\r\n\r\nI also disagree that my argument is just an implementation argument. Saying that it shouldn't be possible (or making it super hard) to rotate CIDs on existing paths, making \"Retire Prior To\" practically useless, etc. are significant departure from RFC 9000. Arguably much larger than adding a Path ID varint to the NEW_CONNECTION_ID frame.",
          "createdAt": "2023-04-03T04:44:44Z",
          "updatedAt": "2023-04-03T04:44:44Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As for loss recovery: the default solution will be to use timers, and only consider the packets of an old number space lost if no MP-ACK arrives before the timer expires. This worse than using PN-based loss detection, but it is not a bad default. In situations such as CID rotation or NAT rebinding, there are no packet losses and the MP-ACK does arrive in time. In abnormal situations such as abandoning a path because it does not work, losses are probably happening already and there should not be a lot of packets in transit. I am ready to bet that the performance impact will be minimal.",
          "createdAt": "2023-04-03T04:45:21Z",
          "updatedAt": "2023-04-03T04:45:21Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Frankly, I don't think that this designs make it \"super hard\" to rotate CID on existing paths. Can you quantify the hardness?",
          "createdAt": "2023-04-03T04:48:01Z",
          "updatedAt": "2023-04-03T04:48:01Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Marten, FWIW your proposal has actually the same basis as an [old proposal](https://datatracker.ietf.org/doc/html/draft-deconinck-quic-multipath-07) that proposes to associate CIDs to an (internal) path identifier when proposing them to your peer.\r\n\r\nI think such a proposal is sensible, and I agree on the properties listed in the initial message. However, it won't be \"as minimal as possible with regards to RFC9000\" and might introduce additional complexity relative to the Path ID changes/rotations (i.e., closing some  \"paths\" and opening new ones after)... This would thus require some consensus. In the meantime, I am open to review any proposal in order to evaluate \"how hard\" such a change would be.",
          "createdAt": "2023-04-03T08:26:11Z",
          "updatedAt": "2023-04-03T08:26:11Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Pure question, but can Multipath be used on top of [QUIC-aware UDP proxy](https://datatracker.ietf.org/doc/draft-pauly-masque-quic-proxy/) without having the notion explicit path ID that is communicated over the wire?\r\n\r\nQUIC-aware UDP proxy allows the proxy to coalesce multiple connections onto one address-port.\r\n\r\nLet's say that a client speaking Multipath QUIC establishes a connection to a target (i.e., server) through a QUIC-aware UDP proxy. Then, the client opens a new path to the target through the same proxy.\r\n\r\nNow, from the client's point of view, there are two paths. But from the target's point of view, there will be only one path if the proxy chose to use the same local address / port for sending packets to the target.\r\n\r\nSpeaking broadly, to me it seems that there's an assumption in the Multipath draft that if an endpoint opens a new path (i.e., by selecting a different 2-tuple locally), then that would be visible to the peer. Is it a good idea to have such an assumption and built a protocol that relies on that?\r\n\r\ncc @tfpauly.",
          "createdAt": "2023-04-04T07:38:58Z",
          "updatedAt": "2023-04-04T07:38:58Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "NONE",
          "body": "I think the proxy can open multiple sockets to the target in this case, and put the different paths over those different sockets. Those sockets can be reused for other mpquic connections as long as they always use different CIDs. However, having explicit CID mappings does make things simpler. ",
          "createdAt": "2023-04-04T13:14:05Z",
          "updatedAt": "2023-04-04T13:14:05Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazuho Yes, asking the proxy to \"please send these packets from a new address\" would require a new socket. But then, this feels like an extension to Masque, because Masque UDP proxies would typically have only one IP address. I think that if the client wants a real multipath scenario, it will have to route packets through several proxies.\r\n\r\nThat, or writing an extension to Masque in which the proxy announces availability of several outgoing paths, and let the clients select which one they want for a particular UDP socket.",
          "createdAt": "2023-04-04T15:59:00Z",
          "updatedAt": "2023-04-04T15:59:00Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@tfpauly @huitema Thank you for your comments.\r\n\r\nI think we are in agreement that the issue can be fixed on the Masque-side rather than communicating path IDs in the wire-protocol of Multipath QUIC.\r\n\r\nAt the same time, I agree with @tfpauly that for clients that implement both Multipath QUIC and QUIC-aware UDP proxy draft, having the concept of path ID would simplify things.\r\n\r\nI think this is a good input to this discussion.",
          "createdAt": "2023-04-05T02:11:22Z",
          "updatedAt": "2023-04-05T02:11:22Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazuho it is good that we start thinking about Masque and multipath now. I think that when it addresses multipath, the Masque WG will have to consider at least three scenarios:\r\n\r\n1) A Masque server is multi-homed, and provides Masque client with the choice of using UDP sockets connected to a number of different networks. This results in multihoming between the Masque proxy and the target server, and possibly also between the Masque client and the Masque proxy. Despite multihoming, the proxy remains a single point of failure.\r\n\r\n2) A client can establish UDP sockets through several different Masque proxies, and use these sockets to setup several paths to a target server. The QUIC connections running over these sockets survive failures of all but one path, including failures of all but one proxy.\r\n\r\n3) A Masque client establish QUIC connection with a server through a Masque Proxy or maybe two (one near client, one near server), then uses something like ICE to establish a direct path between client and server.",
          "createdAt": "2023-04-05T05:11:56Z",
          "updatedAt": "2023-04-05T05:11:56Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "@marten-seemann, this is a very good proposal! It is well argued and solves explicit problems as well as reduces complexity in a clean and simple way.",
          "createdAt": "2023-04-24T09:46:50Z",
          "updatedAt": "2023-04-24T09:46:50Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I worked on a proof-of-concept integration of the above idea in my implementation, so I have a better idea of the overall proposal now. In the current state, I looked at a notion of symmetric Path ID, given that paths must be bidirectional per RFC9000. Overall, I agree with all the properties in the initial message, and note some additional properties.\r\n\r\nA nice part of this proposal is that it decouples the notion of \"network paths\" (i.e., the 4-tuple, having some validation state,...) from \"logical QUIC paths\" and \"application packet number spaces\" (i.e., acknowledgments, number of concurrent active paths, recovery states, active/standby status,...). Advertising in advance using MP_CONNECTION_ID frames to which \"Path ID\" the provided CID simplifies the \"path handling\" when the CID used over a same 4-tuple changes (as they belong to the same packet number space, unlike the current state of the draft).\r\n\r\nAnother nice property relates to the \"connection migration\". The current draft \"overrides\" the handling defined by RFC9000 to let the server use any available network path. This means that if a client probes an network path just to check possible connectivity, it opens the door to that network path usage by the server, which may not always be wanted (the client can still advertise a Standby status over that path with PATH_STATUS/PATH_STANDBY, but this is only a scheduling suggestion, the client has no way to enforce this at server-side). With the Path ID proposal, the connection migration mechanism remains on a per-Path ID basis, enabling clients to probe a network path (using probing packets) without having the server moving the traffic towards that probed network path.\r\n\r\nFurthermore, basing the \u201cpath abandon\u201d mechanism on such Path ID sounds more robust than identifying paths through CIDs. A \u201cPATH_CLOSE\u201d frame could be defined and would force retiring all the CIDs associated to that Path ID and hence control the number of simultaneous network paths in use for non-probing packets. For the advertisement of status of the paths, they would also remain explicit, even if the CID used over a path changes.\r\n\r\nFinally, using Path IDs would enable per-path keys, though as a first step we could stay with the current nonce adaptation and includes the Path ID in the nonce instead of the CID sequence number.\r\n\r\nOf course, this introduces some additional wiring (MP_NEW_CONNECTION_ID and MP_RETIRE_CONNECTION_ID frames, the active_path_limit TP that must be advertised by both peers) and the multipath extension would be \"less minimal\". But this approach surely has its advantages.",
          "createdAt": "2023-06-29T09:34:31Z",
          "updatedAt": "2023-06-29T09:34:31Z"
        },
        {
          "author": "zverevm",
          "authorAssociation": "NONE",
          "body": "Regarding rewiring some of the frames, I think we can avoid this.\r\n \r\nNEW_CONNECTION_ID frames carry information specific to a path. If we want to issue new CIDs for a path, we would surely do it on that same path. If for some reason we want to send them on another connection, we could tell the endpoint that the next frames refer to another path. And we would tell that with a new frame, which could be called INTENDED_PATH.\r\n \r\nFor instance, we want to send CIDs 1234 and 5678 for path B on the path A, along with some data. The frames packed in the next packet on the path A would look as follows:\r\n \r\nINTENDED_PATH {Path ID: B}\r\nNEW_CONNECTION_ID {..., Connection ID: 1234, ...}\r\nNEW_CONNECTION_ID {..., Connection ID: 5678, ...}\r\nINTENDED_PATH {Path ID: A}\r\nAny other control frame intended for path A {...}\r\nSTREAM_FRAME {Stream ID: x, offset: y, Stream Data:[...]}\r\n \r\nIf we want to combine multiple extensions with MP, we might need to rewire all of their frames. Using INTENDED_PATH frame, we won\u2019t.\r\n",
          "createdAt": "2023-06-30T13:41:33Z",
          "updatedAt": "2023-06-30T13:41:33Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't really understand why defining a new frame type is such a big deal. Frame types are cheap, we have 2^62 of them.\r\n\r\n> INTENDED_PATH {Path ID: B}\r\n> NEW_CONNECTION_ID {..., Connection ID: 1234, ...}\r\n> NEW_CONNECTION_ID {..., Connection ID: 5678, ...}\r\n> INTENDED_PATH {Path ID: A}\r\n> Any other control frame intended for path A {...}\r\n> STREAM_FRAME {Stream ID: x, offset: y, Stream Data:[...]}\r\n\r\nThis proposal on the other hand would be a major inconsistency with RFC 9000's frame semantics. RFC 9000 is very careful to  1. not assign any meaning to the order that frames occur in a packet and 2. is explicitly designed such that every frame can be interpreted on its own. \r\nPlease don't break with these principles. That's a way bigger difference from RFC 9000 than introducing a new frame type or two.\r\n",
          "createdAt": "2023-06-30T15:59:02Z",
          "updatedAt": "2023-06-30T15:59:02Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Having almost implemented Multipath draft as-is, I think I share the view with what @huitema says in https://github.com/quicwg/multipath/issues/214#issuecomment-1493655066. To me it path IDs seem to be an complexity that might not be necessary.\r\n\r\nThe complexities that I'm concerned include:\r\n* The need to change the definitions of various frames (e.g., NEW_CONNECTION_ID) in QUIC v1 to include Path ID. This point is mentioned above.\r\n* The need to prepare for having state of max(active_paths) * max(1 + backups_for_each_path), rather than just max(active_connection_id_limit). IIUC, the proposal is to introduce the concept of Path IDs with each of the path having spare Connection IDs that the peer might use.\r\n\r\nCompared to these, I do not think there is a lot of benefit in introducing Path IDs. Sure, we might no longer need to iterate (or do a hash lookup of) certain structures, but we have to iterate others anyways. As we have multiple packet number spaces, we have to do a lookup of ack queue (when receiving packets) and also a lookup of loss recovery state (when receiving acks). Considering that these N:1 mapping is going to exist anyways, I'm not sure if getting rid of only some is worth having more diversion from QUIC v1.\r\n\r\nAs stated in https://github.com/quicwg/multipath/issues/50#issuecomment-1617086967, I tend to think that QUIC v1 already is a multipath protocol with the exception that only one path can be used for sending data at a time; my preference seems to go to just fixing that problem rather than introducing a new concept of having multiple path-groups with each group having only one active path.",
          "createdAt": "2023-07-03T04:46:13Z",
          "updatedAt": "2023-07-03T04:55:42Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Compared to these, I do not think there is a lot of benefit in introducing Path IDs. Sure, we might no longer need to iterate (or do a hash lookup of) certain structures, but we have to iterate others anyways. As we have multiple packet number spaces, we have to do a lookup of ack queue (when receiving packets) and also a lookup of loss recovery state (when receiving acks).\r\n\r\n@kazuho, I'm not concerned about hash table lookup latencies.\r\nWhat I'm concerned about are the 3 problems I described in my first post (and key updates, see #215). When talking about diversion from RFC 9000, I'm surprised adding a new frame type is considered a big diff. It's really easy to build a frame parser, and we're not going to run out of frame types any time soon. Deviating from the design principles of RFC 9000 on the other hand can create an enormous amount of complexity.\r\n\r\nI agree that (1) and (3) would go away _iff_ you never rotate CIDs on an existing path. While rotating CIDs can be seen as an anti-ossification measure, I think I remember that @nibanks is using Retire Prior To field in the NEW_CONNECTION_ID frame with his RSS implementation in MsQuic.\r\n\r\nIt seems like this feature of RFC 9000 is effectively rendered useless, unless one wants to risk running into the corner cases described in section 4.3.3 around having established paths that don't have an associated CID (and therefore can't be addressed by PATH_* frames). I haven't implemented it yet in quic-go, but I imagine that this corner case would be rather annoying to deal with.\r\n\r\n(3) introduces a very big diff to RFC 9000: Loss recovery for the two packet number spaces created by rotating the CID on a path seems pretty complicated: You'd now either have to declare the packet sent with the old CID lost if it's not acknowledged, or implement loss recovery that spans the two packet number spaces. It's probably doable, but it's not trivial. It's also fundamentally different from QUIC v1, where rotating a CID on an existing path doesn't create a new packet number space.\r\n\r\n> * The need to prepare for having state of max(active_paths) * max(1 + backups_for_each_path), rather than just max(active_connection_id_limit). IIUC, the proposal is to introduce the concept of Path IDs with each of the path having spare Connection IDs that the peer might use.\r\n\r\nYou're right, you'd need to allocate a tiny bit more space for CIDs. I don't expect that there are many situations where you'd have more than 5 paths (that already seems quite a lot), and you don't need more than 2 or 3 CIDs per path, even if you want to allow for frequent rotation of CIDs. That's not a lot of state.",
          "createdAt": "2023-07-03T06:27:28Z",
          "updatedAt": "2023-07-03T06:27:28Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@marten-seemann Thank you for sharing your thoughts.\r\n\r\n> I agree that (1) and (3) would go away iff you never rotate CIDs on an existing path. While rotating CIDs can be seen as an anti-ossification measure, I think I remember that @nibanks is using Retire Prior To field in the NEW_CONNECTION_ID frame with his RSS implementation in MsQuic.\r\n\r\nSo I think i disagree with this view.\r\n\r\nFWIW, we also rotate CID encryption keys, I assume every server that support clustering (load balancing) does. But that does not happen frequently, I believe that is the same for others as well. Therefore, problem (1) is IMO not an issue in practice.\r\n\r\nNote that, in order to handle packets arriving late, an endpoint has to be capable for receiving packets with CIDs that it has issued in the past for at least 3 PTO. Therefore, even in the case of an endpoint rotating CIDs at full speed, there will be high chance of PATH_STATUS getting through.\r\n\r\nRe (3), when changing the CID of an existing path, all an endpoint needs to do is remember the delta (base offset) between the packet number sent on the wire and that being remembered by the loss recovery logic / congestion controller. To give an example, if an endpoint has sent using CID=X packets up to PN=1000, and wants to switch CID to Y, all it needs to remember is an offset of 1001. The first packet sent with CID=Y will carry PN=0, but internally, it would be handled as PN=1001 by adding the offset.\r\n\r\nThe remaining one is (2), but I do not consider that as an issue. In practice, a new CID is used when either of the following happens: i) a client tries to use a new path, ii) a server sends a packet to a new client address. To support these two cases, all that have to be done by the endpoints are provide as many as active_connection_id_limit CIDs, and by the clients to always keep one spare CID or two (see #221).\r\n\r\nNote that while QUIC v1 does not prohibit endpoints rotating CIDs for no reason, endpoints behaving as such risk themselves of losing CIDs, as [the peer might run out of CIDs and stop providing more](https://quicwg.org/base-drafts/rfc9000.html#section-5.1.1-6).\r\n\r\nPS.\r\n> You're right, you'd need to allocate a tiny bit more space for CIDs.\r\n\r\nThe amount of state that you need to retain depends on what you want to do e.g., in response to an apparent rebinding. As discussed in https://github.com/quicwg/multipath/issues/50#issuecomment-1617086967, for a server, it makes sense to bundle data in a probe sent in response to an apparent rebinding. In a request-response protocol, doing so saves an RTT. But to do so, you need more state per CID not to mention the complexity of reusing CCs across multiple paths; things are much easier with current design that allows a server to start using a new new packet number space for a new path that _the server_ observes (rather than letting the proposed \"path ID\" approach that lets only the client designate packet spaces).",
          "createdAt": "2023-07-03T07:27:28Z",
          "updatedAt": "2023-07-03T09:55:45Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The problem with the explicit path ID approach is that you can't  guarantee in all cases that the client and server have the same view of the open paths. The complicated case is when the client changes the CID and at the same time a NAT rebinding happens. This seems like a corner case but it's completely not unlikely because NAT rebinding usually happen after some idle time and that might also be the reason for the client to re-start sending with a fresh CID. This was also discussed at length in issue #169 \r\n\r\nWe need to address this case and that makes the explicit path ID approach complicated. Having an explicit path ID seems logical easier and for sure it make sense for the mental model, however, encoding it in the protocol design means actually additional complexity.\r\n\r\nRegarding your issue list @marten-seemann:\r\n\r\nNote that we need to resign PATH_STATUS anyway (see issue #186). However, first, PATH_STATUS is only a recommendation. If you don't have PATH_STATUS information about a used CID, that doesn't automatically mean that you should use it. So If you see a CID change on a path, I don't think this should automatically change your scheduling. The other option is in the loose path model that you could even send PATH_STATUS information for issued but not yet-used CIDs in advance and thereby per-set that information. Or if you could also send the PATH_STATUS frame in the packet with a new CID or even repeat it multiple times if you really want to be sure. Again, we need to redesign PATH_STATUS and we need to consider the issue you describe; this is a known issue that wasn't fully resolved with the last revision.\r\n\r\nYou second point is discussed in issue #205 and it is incorrect to have a MUST requirement for the availability of CIDs on the other end. This is something you can't guarantee but this is already the case in RFC9000. So I think it's rather an editorial issue to remove this requirement from the current draft.\r\n\r\nRegarding loss recovery, I think @huitema answer this point already. The expectation is that you do not do loss recovery between to packet number spaces. If the CID and therefore the packet number changes and a loss might happen in that RTT, then recovery might be slower as you have to wait for a time-out. However, that's such a rare case that I wouldn't recommend to optimise it because of the complexity you describe above.\r\n\r\n  ",
          "createdAt": "2023-07-03T10:43:52Z",
          "updatedAt": "2023-07-03T10:43:52Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "issue #169 as some discussion but was closed as that aspect was replaces by issue #188. Please have a look for more background.",
          "createdAt": "2023-07-03T13:35:05Z",
          "updatedAt": "2023-07-03T13:35:05Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The problem with the explicit path ID approach is that you can't guarantee in all cases that the client and server have the same view of the open paths. The complicated case is when the client changes the CID and at the same time a NAT rebinding happens. This seems like a corner case but it's completely not unlikely because NAT rebinding usually happen after some idle time and that might also be the reason for the client to re-start sending with a fresh CID.\r\n\r\nI don\u2019t see any problem here, if you say that a NAT rebinding doesn\u2019t change the path ID. This is consistent with RFC 9000 Section 9.5, which states that when a server receives a packet with the same CID from a different source address (which would be the effect of a NAT rebinding), it MAY continue using the same CID for responses. \r\n\r\nThere\u2019s also no problem when the client rotated CIDs at the same time the NAT rebinding happens. Since in my proposal, CIDs are scoped to the path, there\u2019s no ambiguity. It\u2019s actually advantageous for the server to being able to distinguish between intentional migrations and NAT rebindings (which is only possible with my proposal), since it allows the server to retain congestion control state (Section 9.4 of RFC 9000) if the NAT only changed the port number.",
          "createdAt": "2023-07-04T16:36:14Z",
          "updatedAt": "2023-07-04T16:36:14Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, if you issue your CIDs per path that would address the problem. We didn't considering this option in the previous discussion, as we didn't want to change the CID management of RFC9000. Changing that will add some complexity (probably not that much but anyway), so the question is: is that complexity worth any potential benefits? As explained above, I don't think the three issues you mention are that big of a problem.",
          "createdAt": "2023-07-04T16:50:08Z",
          "updatedAt": "2023-07-04T16:50:08Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that adding a field to the CID management frames of RFC 9000 adds a little bit of complexity (but then again, modifying the frame parsing code is trivial and super easy to write tests for). We do however gain some simplifications, some of them significant.\r\n\r\nAfter the discussion we've had so far, I believe the following list summarizes the advantages we'd gain from adopting path IDs.\r\n\r\n1. By having one key per path (#215), the complexity around key updates described in section 5.3 (e.g. sending a packet _on every path_ after initiating a key update) would go away entirely. Key updates would instead be something that happens independently on each path, and there wouldn't be any need for special logic when using QUIC multipath.\r\n1. By deriving a separate key per path (#215) we could avoid changing the nonce construction specified in RFC 9001. Arguably, this alone is a simplification. While hypothetical at the moment (in my understanding), with #245, this extension now introduces new constraints on the cipher suites that can be used with QUIC Multipath. It would certainly be nice if any cipher suite that can be used with RFC 9001 could also be used with QUIC Multipath.\r\n1. It allows explicitly limiting the number of paths. There's a significant amount of state that peers need to keep track of per path, and being able to limit the number of paths is a nice DoS defense. By using path IDs, this limit can be stricter than just limiting the number of CIDs, as currently CIDs can be used on an established path (cheap in terms of state) and to establish a new path (expensive). This comes at the cost of having to issue a few more CIDs, as @kazuho pointed out above, but the memory commitment should be negligible.\r\n1. Packet numbers are now per path, not per CID. This makes rotating CIDs on a given path easier, as you can reuse the same loss detection / recovery context. There's some tricks (as pointed out by @kazuho and @huitema in this thread) to achieve the same effect with the current proposal, and one can disagree about the amount of complexity these would introduce. It would be nice though to not have to play any tricks at all.\r\n1. We would restore the utility of \"Retire Prior To\" in NEW_CONNECTION_ID frames. Retire Prior To is most commonly used when the (load balancing) key is rotated. With the current proposal, it retires the CIDs used on (potentially) multiple paths, leaving paths without CIDs until a new CID is issued _and used_ on the path. Retiring all CIDs for an existing path leads to the awkward corner case described in section 4.3.3 (note that this can also happen when using RETIRE_CONNECTION_ID frames). While path IDs won't prevent peers from retiring all CIDs for an existing path (and thereby making it impossible to send new packets on that path), you'd at least still be able to address that path (in frames sent on other paths), since you're referring to the path by its path ID.\r\n1. Abandoning a path currently means sending a PATH_ABANDON frame, _and_ waiting for the retirement of the CID used on that path. Using path IDs would allow us to clean up all CIDs associated with that path.\r\n",
          "createdAt": "2023-07-04T18:16:05Z",
          "updatedAt": "2023-07-04T19:00:56Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "From my implementation experience, I very much agree with @marten-seemann and @qdeconinck. Ericsson's in-house MP-QUIC implementation, called Rask, is designed from start for multipath. One of the most important things when structuring the stack is to clearly define what is per-path and what is at the common connection level, and I think that Marten has hit it more or less spot on! The path \"concept\" also needs to be well defined, and the path \"identity\" (with a single identifier) should be stable and easy to reason about also through NAT rebindings and CID updates--just like in Marten's design.\r\n\r\nAlso, I think that it's trivial to add new frame types and it is *much* better to be explicit in signalling than to add new, different semantics to existing frames with the misdirected argumentation that it would \"reduce the difference with RFC 9000\".\r\n\r\nI have had plans to add support for Marten's design to Rask, but didn't come around to do it partially due to the lack of another implementation to interop test with. Now that Quentin has an experimental implementation, it would be interesting to do the (rather limited) work to add support also to Rask. Unfortunately, it will not happen before the IETF meeting.",
          "createdAt": "2023-07-04T20:31:47Z",
          "updatedAt": "2023-07-04T20:31:47Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@marten-seemann \r\n> 1. By having one key per path (\r\nhttps://github.com/quicwg/multipath/issues/215), the complexity around key updates described in section 5.3 (e.g. sending a packet on every path after initiating a key update) would go away entirely. Key updates would instead be something that happens independently on each path, and there wouldn't be any need for special logic when using QUIC multipath.\r\n> 2. By deriving a separate key per path (\r\nhttps://github.com/quicwg/multipath/issues/215) we could avoid changing the nonce construction specified in RFC 9001. Arguably, this alone is a simplification. While hypothetical at the moment (in my understanding), with https://github.com/quicwg/multipath/pull/245, this extension now introduces new constraints on the cipher suites that can be used with QUIC Multipath. It would certainly be nice if any cipher suite that can be used with RFC 9001 could also be used with QUIC Multipath.\r\n\r\nI think point 1 (key update) and 2 (key derivation) are orthogonal to having Path IDs. We can change the current draft to derive keys per-CID and update keys per each path, if we think that\u2019s beneficial. But as @huitema points out, probably they are just cost that we want to avoid.\r\n\r\nI would also note that the key update problem has been fixed in #257 by changing the minimum update interval from 3PTO to 3maxPTO; I think that\u2019s simple enough as a fix.\r\n\r\n> 3. It allows explicitly limiting the number of paths. There's a significant amount of state that peers need to keep track of per path, and being able to limit the number of paths is a nice DoS defense. By using path IDs, this limit can be stricter than just limiting the number of CIDs, as currently CIDs can be used on an established path (cheap in terms of state) and to establish a new path (expensive). This comes at the cost of having to issue a few more CIDs, as @kazuho pointed out above, but the memory commitment should be negligible.\r\n\r\nI\u2019m not sure if I agree with what is being stated. With the current design, it is true that endpoints have to retain CIDs (and hence loss recovery and congestion control state) for some paths that act as standby. However, I do not think it mean that endpoints have to retain meaningfully more state than with the proposed design. It is my understanding that the amount of state an endpoint needs to track relates much more to the amount of data inflight (i.e., number of packets that needs to be tracked) rather than the number of paths being maintained.\r\n\r\n> 4. Packet numbers are now per path, not per CID. This makes rotating CIDs on a given path easier, as you can reuse the same loss detection / recovery context. There's some tricks (as pointed out by @kazuho and @huitema in this thread) to achieve the same effect with the current proposal, and one can disagree about the amount of complexity these would introduce. It would be nice though to not have to play any tricks at all.\r\n\r\nThis is true.\r\n\r\n> 5. We would restore the utility of \"Retire Prior To\" in NEW_CONNECTION_ID frames. Retire Prior To is most commonly used when the (load balancing) key is rotated. With the current proposal, it retires the CIDs used on (potentially) multiple paths, leaving paths without CIDs until a new CID is issued and used on the path. Retiring all CIDs for an existing path leads to the awkward corner case described in section 4.3.3 (note that this can also happen when using RETIRE_CONNECTION_ID frames). While path IDs won't prevent peers from retiring all CIDs for an existing path (and thereby making it impossible to send new packets on that path), you'd at least still be able to address that path (in frames sent on other paths), since you're referring to the path by its path ID.\r\n\r\nWhen an endpoint retires a set of CIDs, it is expected to issue a set of new CIDs that replace the old ones. That is the behavior expected by QUIC version 1, I do not think we have new information here to switch to a new design, considering the fact that QUIC version 1 has the capability of opening multiple paths and hence using multiple Connection IDs at once.\r\n\r\nThe difference (and the practical benefit of this \u201cPath ID\u201d proposal) are, IMO:\r\n* when Connection IDs are rotated, path status does not have to be communicated, and\r\n* when Connection IDs are rotated, you do not need the \u201ctrick\u201d (of transplanting loss recovery / congestion control state of the old CID to the new CID).\r\n\r\nThese are indeed benefits, but my impression is that it comes with the cost of changing the data structure from what QUIC version 1 expected for the stacks to have.\r\n\r\nIn QUIC version 1, an endpoint retains `active_connection_id_limit` paths, but all the state required for transmitting data (i.e., packet number space, ack queue, loss recovery, congestion control) are shared. The fact that these properties are shared across entire connection limits us to having only one active path at a time.\r\n\r\nCurrent state of Multipath draft makes these properties as per-path attributes, which is probably the minimal change that we have to make.\r\n\r\nWith the proposed change, however, path management is split into two layers.\r\n\r\nEach connection will have N \u201cpath\u201ds, each of them identified by their Path IDs. Within each \u201cpath,\u201d there will be actual paths as identified by the 4-tuple. When NAT rebind happens, it would be a migration within the \u201cpath\u201d as identified by the \u201cpath ID.\u201d\r\n\r\nTo paraphrase, essentially each \u201cpath ID\u201d space has its own path migration scheme, and a Multipath connection will consolidate these \u201cpaths\u201d (or sub-connections) so that data can be sent on more than one path concurrently.\r\n\r\nI can totally see that for some endpoints such design is easier to implement. I appreciate @michael-eriksson for bringing such experience to the table.\r\n\r\nBut for me, it would be a pain to support different types of data structures for QUIC version 1 (that directly maps paths as identified by 4-tuple to each connection) and Multipath (that will have connections mapped to \u201cpath IDs\u201d then each \u201cpath\u201d managing a set of 4-tuples).\r\n\r\n> 6. Abandoning a path currently means sending a PATH_ABANDON frame, and waiting for the retirement of the CID used on that path. Using path IDs would allow us to clean up all CIDs associated with that path.\r\n\r\nI think this problem statement is true.\r\n\r\n\u2028OTOH, for the sake of the Path ID proposal, I do not think we need the capability to issue / retire Path IDs? All we need to say is that if an endpoint declares that it is capable of handing N paths, path IDs between 0 to N - 1 are to be used.\r\n\r\nFor QUIC streams we do have such mechanism for issuing / retiring IDs, but that\u2019s because they are communicated above the packetization layer. Path IDs are concept at the packetization layer, reusing the same path ID on a different 4-tuple is no worse than a NAT rebinding.\r\n\r\nIf we are to adopt the Path ID proposal, I would prefer not having the complexity of issuing / retiring Path IDs.",
          "createdAt": "2023-07-23T17:52:07Z",
          "updatedAt": "2023-07-23T17:52:07Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "NONE",
          "body": "To add my 2 cents (ran out of time at IETF), while I do understand the potential benefit in separating the concepts of paths from connection IDs, I think that it adds unnecessary complexity. Also, one of the most interesting advantages of having path IDs would be a key per path and in theory that could be done today with the existing mechanism as it was pointed out. The goal of having active_connection_id_limit per path is not convincing and seems like the wrong approach. ",
          "createdAt": "2023-07-25T17:18:00Z",
          "updatedAt": "2023-07-25T17:18:00Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The challenge with introducing a separate Path ID is that it requires a fundamentally stable path definition to begin with. Given the inherently unstable nature of the current 4-tuple path definition, it remains unclear how suddenly we can now achieve a stable path identification. The latest draft, which moves away from the concept of a path ID, seems to align better with reality by accepting the unstable nature of path definitions. When there\u2019s a change in the 4-tuple, we simply rotate the Connection IDs (CIDs) and shift the packet number space. As outlined in RFC 9002, loss recovery can be done on a per-packet-number-space basis. It\u2019s also important to recognize that events like NAT rebindings and CID rotations are infrequent events in real-world scenarios. Even in vehicular communications that use multi-path, frequent NAT rebindings are not typically observed. From a performance perspective, I would argue our primary concerns should be with scheduling and redundancy rather than the infrequent changes in path characteristics.",
          "createdAt": "2023-11-07T09:45:17Z",
          "updatedAt": "2023-11-07T09:45:17Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "We definitely need a stable path definition! In the end, a path is a physical entity where packets flow. Paths have different properties, and the endpoints must be able to understand and reason about which physical path they are using.\r\n\r\nThe path properties include latency and packet loss, but also things like demands for energy or momentary power and economic cost. In a system setting, like a cellular network, also the competing devices' possibility to move load to other paths can be relevant.",
          "createdAt": "2023-11-07T10:13:58Z",
          "updatedAt": "2023-11-07T10:13:58Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I came into an idea about how to fix the issue people have discussed a lot here in this issue.\r\n\r\nActually there\u2019re 3 part the CID/Path_ID design affects:\r\n\r\n1. The encryption / decryption nonce\r\n2. How endpoints address a path in PATH_AVAILABLE / STANDBY / ABANDON frames\r\n3. The packet number space which are per CID, and loss detection algorithms\r\n\r\nIn these parts:\r\n\r\n1. Encryption and decryption is actually not a problem, we gain profit here, it\u2019s quite easy to get the seq of CIDs and change the nonce;\r\n2. CID seq number and Path ID has the same cost to identify a path\r\n3. The packet number space, we actually want it not to be changed when CID rotation happens.\r\n\r\nAnd I totally understand there is cost when we introduce a Path ID definition.\r\nSo how about we just keep the CID seq for Path identifier, but we also allow that endpoints use the same packet number space when CID rotation happens? I think it will keep the advantage we get from 1 and 2, but remove the cost of 3 in implementation.\r\nI think the \u201cpacket number space per CID\u201d mechanism was draw from the information when we talk about each packet number space share the same nonce for encryption / decryption, but we can still have more than one nonce for the same packet number space. \r\n\r\nMy key point is: \u201cPacket number space per Path\u201d, is better than \u201cper CID\u201d.\r\nAnd the mechanism is quite the same in RFC9000. It\u2019s easy to understand and deploy.",
          "createdAt": "2023-11-07T21:30:01Z",
          "updatedAt": "2023-11-07T21:30:01Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "I very much agree with what is suggested above.\r\n\r\nThe single packet number space per path is in practice a path identity. It is then very easy to attach a path _identifier_ to that path. This path identifier will be unique and stable during the full lifetime of the path. It is looked up and used for signalling. A previous version of the multipath draft used the sequence number of the CID that was used to set up the path as path identifier, and that still looks like a good idea to me.\r\n\r\nFor nonce generation, the CID sequence number can be used if that is seen as simpler than the path identifier (for our Rask implementation it doesn't matter).\r\n\r\nMy key point is: One packet number space per path, as suggested above, is fundamental. Luckily, it very easily leads to a stable path identifier that can be used for signalling without the race conditions and misunderstandings that a changing signalling identifier implies.",
          "createdAt": "2023-11-07T23:41:15Z",
          "updatedAt": "2023-11-07T23:41:15Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@Yanmei-Liu \r\n> So how about we just keep the CID seq for Path identifier, but we also allow that endpoints use the same packet number space when CID rotation happens?\r\n\r\nCould you elaborate how we would do that?\r\n\r\nIn current form of QUIC v1 and Multipath, CIDs are issued by an endpoint and the receiver chooses which CID to use.\r\n\r\nTherefore, when the receiver switches to a new CID but continue using the same packet number space, the receiver has to send a signal indicating to which packet number space the new CID is associated.\r\n\r\nMy vague recollection is that this additional signalling was considered bad and that led to what we have now.",
          "createdAt": "2023-11-08T04:28:50Z",
          "updatedAt": "2023-11-08T04:31:11Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The crypto requirement is that all packets have a unique nonce. That is met by incorporating the CID sequence number in the nonce, and ensuring that the sequence number be unique for all packets with the same CID.\r\n\r\nYou might want to use the same sequence number space for all CID in the same \"logical space\". You might even implement that as a single sequence number space for the entire set of path. That will work just fine, as long as you do not send more that 2^32 packets. But you have a problem if you have sent packet number 0x5FFFFFFFF on one path, and then rotate the CID and send packet 0x60000000 with the new CID. The sequence number will be set in the packet to at most 4 digits -- 0x00000000. This has to be expanded to the \"correct\" 64 bit value. Since this is a new CID, the receiver has no choice but to expand it to 64 bits of zeroes. And decryption will fail.",
          "createdAt": "2023-11-08T04:48:51Z",
          "updatedAt": "2023-11-08T04:48:51Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you want a path identifier independent of the CID and a number space \"per path\", then the packets can only be decrypted if the receiver knows the mapping from CID to number space identifier. That implies either changing the packet format to include an explicit number space identifier in the header, or having a protocol to negotiate that mapping before using the CID.\r\n\r\nWe don't really want to add change the packet format. Adding a path identifier would increase overhead, and break format compatibility with RFC 9000. The path identifier would have to be encrypted, to prevent external observers to tie two successive identifiers to the same underlying connection. So, significant overhead, significant complexity.\r\n\r\nWe could conceive a protocol in which parties negotiate in advance that CID number N is used for number space number P, but that too would be significant additional complexity.\r\n\r\n",
          "createdAt": "2023-11-08T04:59:52Z",
          "updatedAt": "2023-11-08T04:59:52Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> We definitely need a stable path definition! In the end, a path is a physical entity where packets flow. Paths have different properties, and the endpoints must be able to understand and reason about which physical path they are using.\r\n> \r\n> The path properties include latency and packet loss, but also things like demands for energy or momentary power and economic cost. In a system setting, like a cellular network, also the competing devices' possibility to move load to other paths can be relevant.\r\n\r\nConsidering a more rigorous mathematical framework, crafting a stable path ID is quite complex. A formal definition necessitates four components: (1) path attributes, denoted by **A**, (2) an identifier within a specific domain  **D**, and (3) a mapping function **F** that assigns **A** to **ID**, such that ID = F(**A**). (4) a mapping function **G** that maps an **ID** to all the stateful information of a path.\r\n\r\nWith the \"loose path ID\" model, the current draft adheres to RFC9000's method of defining a path via a 4-tuple. In this schema, the formal definition is straightforward: (1) the attribute **A** is the 4-tuple, (2) the **ID** corresponds to a value within the CID sequence number domain, (3) a mapping between the 4-tuple and the **ID**, and (4) a mapping between the **ID** and all the stateful information of a path are established.\r\n\r\nHowever, in cases requiring a stable path ID, we must reconsider what constitutes the attributes **A**. The 4-tuple alone is inadequate, necessitating additional context that encapsulates the notion of path continuity. Rigorously define the concept of continuity it is not straightforward. Furthermore, incorporating continuity into the definition of a path extends beyond the original scope set by RFC9000.",
          "createdAt": "2023-11-08T06:21:42Z",
          "updatedAt": "2023-11-08T06:21:42Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "Hmm, maybe we are talking past each other here, @yfmascgy. Your mapping analysis above, where the CID sequence number maps to \"the stateful information of a path\", looks good. The only thing that I suggest is that a stable unique identifier is added to this \"stateful information of a path\". This identifier would _not_ be the \"**ID**\" but just added per-path metadata.\r\n\r\nWhen the path is referenced to in signalling, this path identifier is fetched from \"the stateful information of a path\" and used in the signalling frames.",
          "createdAt": "2023-11-08T08:02:03Z",
          "updatedAt": "2023-11-08T08:02:03Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> If you want a path identifier independent of the CID and a number space \"per path\", then the packets can only be decrypted if the receiver knows the mapping from CID to number space identifier. That implies either changing the packet format to include an explicit number space identifier in the header, or having a protocol to negotiate that mapping before using the CID.\r\n> \r\n> We don't really want to add change the packet format. Adding a path identifier would increase overhead, and break format compatibility with RFC 9000. The path identifier would have to be encrypted, to prevent external observers to tie two successive identifiers to the same underlying connection. So, significant overhead, significant complexity.\r\n> \r\n> We could conceive a protocol in which parties negotiate in advance that CID number N is used for number space number P, but that too would be significant additional complexity.\r\n\r\nAssigning CIDs to paths before they are used is a simple and nice way for the peer to understand the (physical) path identity at a CID update. It also happens to be pretty much exactly how regular unipath QUIC handles CID updates, the endpoints have agreed on the semantics of the CIDs before they are used. RFC 9000 allows for multiple concurrent connections to use the same IP address and port and then the pre-agreed connection IDs are used to map the packet to a connection. \r\n\r\nThis very issues where we are discussing is actually a suggestion from @marten-seemann for just such a design which I think is an excellent idea.",
          "createdAt": "2023-11-08T08:21:14Z",
          "updatedAt": "2023-11-08T08:21:14Z"
        },
        {
          "author": "BillGageIETF",
          "authorAssociation": "NONE",
          "body": "To add another monkey wrench into the discussion ... Changing the packet number space semantics of RFC 9000 may make it difficult to use MPQUIC in combination with a QUIC-aware UDP proxy.\r\n\r\nIf the proxy is operating in forwarding mode, an uplink QUIC short header packet received over a (virtual) CID on the network segment between the proxy and a client is mapped to a destination CID on the network segment between the proxy and a server. Nothing else in the QUIC packet is changed and parts of the QUIC packet header - including the packet number - are protected by a header protection key known only to the client and server.\r\n\r\nIf MPQUIC is used between the proxy and client, and uni-path QUIC (RFC 9000) is used between the proxy and server, then a change in the path between proxy and client cannot affect the packet numbering. In other words, I think MPQUIC would need to preserve the packet numbering spaces defined by RFC 9000 and not introduce a new set of packet number spaces that would prevent interop with RFC 9000 compliant servers - i.e. both number space per CID and number space per path seem like non-starters to me.",
          "createdAt": "2023-11-09T22:42:52Z",
          "updatedAt": "2023-11-09T22:42:52Z"
        },
        {
          "author": "BillGageIETF",
          "authorAssociation": "NONE",
          "body": "Let me give another example, one where MPQUIC might be used in a DETNET deployment. A client maintains multiple paths towards a packet elimination function (PEF) that has MPQUIC functionality and eliminates duplicate copies of received packets. The client may replicate a QUIC packet and send a different copy of the packet over each of the different paths. If the same packet numbering space is used across all paths, it is trivial for the PEF to identify and discard duplicate packets (and to perform reordering if necessary). In fact, I don't think anything other than basic RFC 9000/9002 functionality is required to do this.\r\n\r\nAgain, I caution against changing the packet number space semantics of RFC 9000 by introducing either number space per CID or number space per path.",
          "createdAt": "2023-11-09T23:07:34Z",
          "updatedAt": "2023-11-09T23:07:34Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@BillGageIETF In QUIC packets, the packet number field is encrypted. UDP proxies and NAT cannot decrypt it, and cannot do any kind of treatment based on packet numbers. I would not worry about that. Not only that, but the use of nonce in encryption guarantees that all packets are different. The PEF can only \"eliminate duplicate copies\" if there are actual duplicates, maybe caused by a malfunction by an on path agent. I would not worry about that either. And then, since the packet numbers are encrypted, the middleboxes have no basis to perform any reordering. So, no worry about that either.\r\n\r\nQUIC is specifically design to limit interference by middle-boxes, including PEF, because middleboxes like PEF cause ossification and prevent innovation. Because of the protections built in QUIC, we can freely innovate and develop multipath functions.",
          "createdAt": "2023-11-09T23:39:55Z",
          "updatedAt": "2023-11-09T23:39:55Z"
        },
        {
          "author": "BillGageIETF",
          "authorAssociation": "NONE",
          "body": "> In QUIC packets, the packet number field is encrypted. UDP proxies and NAT cannot decrypt it, and cannot do any kind of treatment based on packet numbers. I would not worry about that. Not only that, but the use of nonce in encryption guarantees that all packets are different. The PEF can only \"eliminate duplicate copies\" if there are actual duplicates, maybe caused by a malfunction by an on path agent. I would not worry about that either. And then, since the packet numbers are encrypted, the middleboxes have no basis to perform any reordering. So, no worry about that either.\r\n> \r\n> QUIC is specifically design to limit interference by middle-boxes, including PEF, because middleboxes like PEF cause ossification and prevent innovation. Because of the protections built in QUIC, we can freely innovate and develop multipath functions.\r\n\r\nI was describing a DETNET scenario where the PEF is a QUIC endpoint, not an intermediate node or middlebox. Packet replication over diverse paths is a common technique for applications requiring high(er) reliability and low(er) latency. In this case, replication of the QUIC packet occurs after encryption so they are, in fact, exact copies. The different copies would be encapsulated in different IP/UDP datagrams associated with different sockets, corresponding to the different paths established (using MPQUIC) between the client and the PEF.\r\n\r\nA single packet number space would greatly simplify implementation.",
          "createdAt": "2023-11-10T01:08:58Z",
          "updatedAt": "2023-11-10T01:08:58Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@BillGageIETF in any case, what you are discussing here is not related to the issue #214 discussed above, which is about path identification. You should open a specific issue with your suggestion.",
          "createdAt": "2023-11-10T03:30:43Z",
          "updatedAt": "2023-11-10T03:30:43Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Hmm, maybe we are talking past each other here, @yfmascgy. Your mapping analysis above, where the CID sequence number maps to \"the stateful information of a path\", looks good. The only thing that I suggest is that a stable unique identifier is added to this \"stateful information of a path\". This identifier would _not_ be the \"**ID**\" but just added per-path metadata.\r\n> \r\n> When the path is referenced to in signalling, this path identifier is fetched from \"the stateful information of a path\" and used in the signalling frames.\r\n\r\nThe question here is how do you formally define \"stableness\"? What is the path attributes **A**? Given two path attributes **A1** and **A2**, how do you decide if they are the same path or not?",
          "createdAt": "2023-11-10T04:29:40Z",
          "updatedAt": "2023-11-10T04:29:40Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We must also remember one fundamental reason for using multipath: it's for seamless failover. The current draft is a minimally scoped extension, allowing for initial single-path communication akin to how QUICv1 operates. Should your path begin to falter, you can swiftly establish a new one with any available spare Connection ID (CID). Yet, if you assign CIDs to specific paths, this creates an extra dependency, necessitating extra information exchange on the initial path before a new one can be launched. If the original path is deteriorating, causing such information exchange to fail, this can impede the failover process. Experience has taught us that in a production environment, it's wiser to minimize dependencies to avoid complications and failures.",
          "createdAt": "2023-11-10T04:48:21Z",
          "updatedAt": "2023-11-10T05:39:35Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "During the meeting in Prague, the WG decided to study what it would take to change the draft in line with the \"path-id\" suggestion. I tried to write a draft describing a \"path-id extension\" that would allow use of a unique path id. I think I did a fair spec based on the ideas floating around, but hey, I could be wrong. The draft is:\r\n\r\n* URL:      https://www.ietf.org/archive/id/draft-huitema-quic-mpath-explicit-00.txt\r\n* Status:   https://datatracker.ietf.org/doc/draft-huitema-quic-mpath-explicit/\r\n* HTMLized: https://datatracker.ietf.org/doc/html/draft-huitema-quic-mpath-explicit\r\n\r\nMy next step is to implement that in picoquic, to assess the implementation issues, perf, etc., and do a comparison with what we have.",
          "createdAt": "2023-11-10T05:04:54Z",
          "updatedAt": "2023-11-10T05:15:15Z"
        },
        {
          "author": "BillGageIETF",
          "authorAssociation": "NONE",
          "body": "> in any case, what you are discussing here is not related to the issue #214 discussed above, which is about path identification. You should open a specific issue with your suggestion.\r\n\r\n@huitema: I'm not sure it's so easy to separate the issues.\r\n\r\nArchitecturally, there are two models for multi-path operations: model (A) is a collection of uni-path QUIC constructs while model (B) is a uni-path QUIC construct operating over a collection of paths.\r\n\r\nModel (A) is like MPTCP and appears to be the model of the current MPQUIC design. Model (B) is like a TCP connection operating over a layer 2 link aggregation group. In (B), a TCP segment can be transmitted in an IP datagram over any of the links in the LAG.\r\n\r\nIf we apply (B) principles to MPQUIC, then path management is distinct from connection management. Conceptually the MPQUIC stack is an RFC 9000 entity sitting on top of a path management entity with a shim entity between them to direct a QUIC packet over one of the available paths.\r\n\r\nIn (B), a QUIC packet can be sent over any of the available (and unrestricted) paths. Since connection identifiers are independent of path, a QUIC packet received over any path is processed in the same way as a packet received over the single path construct of RFC 9000 - i.e. there is a single application data packet number space and an ACK received over any path is unambiguous (no need for MP-ACK).\r\n\r\nThese are basically the principles used for connection migration in RFC 9000. The difference is that MPQUIC provides multiple paths that can be simultaneously active and path usage is explicitly managed. Clearly congestion control must be path-specific but connection management and packet loss recovery are not path-specific.\r\n\r\nIn this model, it is hard to imagine a solution that does not include an explicit path identifier that is independent of connection identifiers.",
          "createdAt": "2023-11-10T14:32:06Z",
          "updatedAt": "2023-11-10T14:32:06Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@BillGageIETF  we already had the debate between single number space per connection versus number space per path. There are good arguments for each design, they were considered and debated at length -- see issue #96 for the debate; also see previous versions of the draft. If you  want to reopen that debate, you need to do it in a separate issue because the arguments are unrelated to what we are discussing here.",
          "createdAt": "2023-11-10T15:36:25Z",
          "updatedAt": "2023-11-10T15:36:25Z"
        },
        {
          "author": "BillGageIETF",
          "authorAssociation": "NONE",
          "body": "The discussion in this thread is whether there is value in separating path IDs from connection IDs. I am supporting Marteen's suggestion to introduce an explicit path identifier.\r\n\r\nI guess I am also suggesting benefits of this separation. With explicit path identifiers, you can manage paths without referencing connection identifiers. You can also manage paths separately from connections. With the latter, there is no need to split the application data packet number space.",
          "createdAt": "2023-11-10T17:56:48Z",
          "updatedAt": "2023-11-10T17:56:48Z"
        },
        {
          "author": "BillGageIETF",
          "authorAssociation": "NONE",
          "body": "This document is in response to discussions of issue 214 in the QUIC \nmultipath GitHub: https://github.com/quicwg/multipath/issues/214\n\nThe current MPQUIC draft (-06) binds a connection identifier to a path \nby using the sequence number of a connection identifier as an implicit \npath identifier. To simplify implementation, the current MPQUIC draft \nintroduces the concept of multiple application data packet number spaces \nwith a different number space for each connection (path). This is in \ncontrast to RFC9000 where there is a single application data packet \nnumber space.\n\nIssue 214 proposed separating path IDs from connection IDs. This \ndocument uses that separation of identifiers to propose a different path \nmodel for Multipath QUIC using explicit path identifiers, enabling a \nmultipath management framework that retains the principles and \noperations of RFC9000.\n\nThe multipath operations described in this document do not change the \nbasic operations described in RFC9000. In particular, none of the \nfollowing procedures described in RFC9000 are affected by the use of \nmultiple paths:\n\n+ connection management (e.g. the use of NEW_CONNECTION_ID frames and \nsubsequent rotation of connection identifiers);\n\n+ key management (e.g. use of key phase bit) and derivation of AEAD \nparameters;\n\n+ packet loss detection and loss recovery (e.g. using type 0x02 ACK \nframes without ECN counts).\n\nHowever, changes to RFC9002 procedures are required to deal with \npath-dependent characteristics such as path MTU size, RTT and congestion.\n\nCheers ...\n\n/bill\n\n\nOn 2023-11-11 5:49 p.m., ***@***.*** wrote:\n > A new version of Internet-Draft draft-gage-quicmp-pathmodel-00.txt \nhas been\n > successfully submitted by Bill Gage and posted to the\n > IETF repository.\n >\n > Name:     draft-gage-quicmp-pathmodel\n > Revision: 00\n > Title:    An Alternate Path Model for Multipath QUIC\n > Date:     2023-11-11\n > Group:    Individual Submission\n > Pages:    14\n > URL: \nhttps://www.ietf.org/archive/id/draft-gage-quicmp-pathmodel-00.txt\n > Status:   https://datatracker.ietf.org/doc/draft-gage-quicmp-pathmodel/\n > HTML: \nhttps://www.ietf.org/archive/id/draft-gage-quicmp-pathmodel-00.html\n > HTMLized: \nhttps://datatracker.ietf.org/doc/html/draft-gage-quicmp-pathmodel\n >\n >\n > Abstract:\n >\n >     The path model used in the current MPQUIC draft binds a connection\n >     identifier to a path.  In fact, the sequence number of a connection\n >     identifier is used as an implicit path identifier.  This has a number\n >     of consequences that may cause MPQUIC to diverge from the principles\n >     of RFC9000.  One of these consequences, for example, is to associate\n >     each connection with a different application data packet number space\n >     rather than maintaining a single application data packet number space\n >     across all connections as defined in RFC9000.\n >\n >     This document proposes a different path model for Multipath QUIC\n >     using explicit path identifiers, enabling a multipath management\n >     framework that retains the principles and operations of RFC9000.\n >\n >\n >\n > The IETF Secretariat\n >\n >\n",
          "createdAt": "2023-11-11T22:56:09Z",
          "updatedAt": "2023-11-11T22:56:09Z"
        }
      ]
    },
    {
      "number": 215,
      "id": "I_kwDOGNtpaM5iZ7y7",
      "title": "alternative solution for the key update problem",
      "url": "https://github.com/quicwg/multipath/issues/215",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "no-action-needed"
      ],
      "body": "Building on top of my proposal to get more explicit about Path IDs (#214), I believe there's an easier solution to the key derivation mechanism.\r\n\r\nWe could derive a new key per path using a HKDF (putting the path ID into the context or label). Each path would then have its own key. This means that:\r\n1. The path ID wouldn't need to be attached to the nonce.\r\n2. Key updates would then happen separately for every path. This removes the need to do anything special (as compared to RFC 9001) for key updates. Especially it wouldn't be necessary to synchronize key updates across paths (see #209 for problems associated with that logic).\r\n\r\nThis requires #214, since CIDs would now tightly bound to a path. The receiver of a packet would first determine the path ID of a packet from the connection ID used.",
      "createdAt": "2023-04-02T14:18:56Z",
      "updatedAt": "2023-11-03T14:39:22Z",
      "closedAt": "2023-11-03T14:39:22Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is independent from #214. It would certainly be possible to derive a key per number space, regardless of how we identify the number space.\r\n\r\nWe did not do that because it felt more complicated than just sticking 32 bits in the nonce. We would need to keep one set of AEAD context per direction per number space. Managing a \"key per number space\" also implies independent key rotation for each number space.\r\n\r\nI think we agreed to not anymore require that some data of each epoch be sent on every path.",
          "createdAt": "2023-07-04T18:12:41Z",
          "updatedAt": "2023-07-04T18:12:41Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that deriving a separate key per CID would work as well. One might consider this is a bigger change from RFC 9001 than deriving a new a new key per path, since the concept of paths naturally needs to more nuanced when specifying multipath than when merely doing connection migration.\r\n\r\n> I think we agreed to not anymore require that some data of each epoch be sent on every path.\r\n\r\nWhere was that? The text is still present in the current editor copy, and I can't find a PR that would change that text.",
          "createdAt": "2023-07-04T18:33:28Z",
          "updatedAt": "2023-07-04T18:33:28Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I guess @huitema is referring to issue #209. Looks like we have agreement there but this still need a PR.",
          "createdAt": "2023-07-05T10:47:44Z",
          "updatedAt": "2023-07-05T10:47:44Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Deriving one key per path requires significantly more memory per path than just changing the nonce -- you need buffers for the keys, the state, possibly some computations. I am aware of at least one scenario in which that matters a lot: messaging servers that handle a lot of long duration connections, with not much traffic. The server scaling is dominated by memory issues. Yet these long term connections would benefit a lot from the additional reliability of multipath. ",
          "createdAt": "2023-07-06T06:07:54Z",
          "updatedAt": "2023-07-06T06:07:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this issue with the merge of #257?",
          "createdAt": "2023-10-21T12:39:33Z",
          "updatedAt": "2023-10-21T12:39:33Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as #257 was merged",
          "createdAt": "2023-11-03T14:39:22Z",
          "updatedAt": "2023-11-03T14:39:22Z"
        }
      ]
    },
    {
      "number": 216,
      "id": "I_kwDOGNtpaM5icPMF",
      "title": "Is ECN per path or per connection?",
      "url": "https://github.com/quicwg/multipath/issues/216",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I'm confused by this sentence:\r\n> If the frame type is TBD-01, ACK_MP frames also contain the sum of QUIC packets with associated ECN marks received on the connection up to this point.\r\n\r\nShould this be the number of packets with ECN marks received on the path, not on the connection?\r\n\r\nIf it is the number ECN marks received on the connection, how does the receiver know which path they were received on?\r\n\r\nExample: Let's say I've received 10 new packets on path 1 and 10 new packets on path 2. Now I create an ACK_MP frame for the packets received on path 1. It doesn't make sense to me to include the ECN marks for the 10 unacknowledged packets received on path 2 in this ACK_MP frame, but that's what the text implies.",
      "createdAt": "2023-04-03T08:14:03Z",
      "updatedAt": "2023-06-30T08:59:37Z",
      "closedAt": "2023-06-30T08:59:37Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's indeed a typo, the ECN count should be per-path.",
          "createdAt": "2023-04-03T08:27:57Z",
          "updatedAt": "2023-04-03T08:27:57Z"
        }
      ]
    },
    {
      "number": 218,
      "id": "I_kwDOGNtpaM5ntiKc",
      "title": "Path Status is ill defined",
      "url": "https://github.com/quicwg/multipath/issues/218",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "huitema"
      ],
      "labels": [
        "question",
        "has PR",
        "editorial"
      ],
      "body": "The definition of the path status frame is somewhat ambiguous. When trying to implement that, I have many questions:\r\n\r\n1) If paths have a status, what is the default status of a path just after validation, and before receiving any Status frame?\r\n\r\n2) Who send this? From the draft, I think \"either endpoint\". But then, what does that mean if one endpoint says \"available\" and the other says \"standby\"?\r\n\r\n3) If a path is standby state and the endpoint receives validating frames on that path, does the status change?\r\n\r\n4) If a path is in standby state and no other path is in available state, does the standby path automatically become available?\r\n\r\n5) Do we really need to maintain a sequence counter for status frames per path and per direction?",
      "createdAt": "2023-06-03T23:34:14Z",
      "updatedAt": "2023-10-22T00:55:18Z",
      "closedAt": "2023-10-22T00:55:17Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From the IETF 116 minutes (https://github.com/quicwg/wg-materials/blob/main/ietf116/minutes.md#multipath), there were support in splitting the current PATH_STATUS frame into smaller ones to avoid handling invalid/unknown values (e.g., PATH_AVAILABLE and a PATH_STANDBY frames).\r\n\r\nStill, the points raised above would also apply on such splitter frames. From my current understanding,\r\n\r\n> If paths have a status, what is the default status of a path just after validation, and before receiving any Status frame?\r\n\r\nAs long as no status information is received, I would consider a path as being \"available\" for use.\r\n\r\n> Who send this? From the draft, I think \"either endpoint\". But then, what does that mean if one endpoint says \"available\" and the other says \"standby\"?\r\n\r\nThat's a good point. I see use cases from a client-sending perspective, but I don't see why a server could not send statuses as well. The PATH_STATUS frame gives an indication about what should be its peer's path scheduling strategy, but it has no way of forcing the other to do so...\r\n\r\n> If a path is standby state and the endpoint receives validating frames on that path, does the status change?\r\n\r\nI would decouple the validation state of a network path from its status usage. In other words, I would not use implicit signals to change the (usage) status requested by the peer over a path.\r\n\r\n> If a path is in standby state and no other path is in available state, does the standby path automatically become available?\r\n\r\nI would say that if your peer advertises the path as being standby, you SHOULD not use it for non-probing packets, unless there is no working available paths. The concrete implementation of such a behaviour is implementation-specific, as this is a scheduling issue (starting from when do you consider that a path is not working anymore? if it experiences RTOs or being abandoned/closed?). Furthermore, in the case you have several standby paths (and no available ones), it is up to the endpoint to decide which path(s) to use (until receiving explicit signals).\r\n\r\n> Do we really need to maintain a sequence counter for status frames per path and per direction?\r\n\r\nFor sending, I think you could use a single counter for all paths and directions, if wanted. But at receiving side, each path needs to track the highest sequence number that updated its status, to cope with reordered receive patterns. For instance, if you have p1 being standby by the seq being 19, and p2 being available, updated by seq 18, and the receive frames in the following order:\r\n\r\n- Status (p1, seq=22, available) : highest seq on p1, update p1 to available\r\n- Status (p2, seq=21, standby): highest seq on p2, update p2 to standby\r\n- Status (p1, seq=20, standby): not the highest seq on p1, ignore old information",
          "createdAt": "2023-06-27T08:57:54Z",
          "updatedAt": "2023-06-27T08:57:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "> > If paths have a status, what is the default status of a path just after validation, and before receiving any Status frame?\r\n> \r\n> As long as no status information is received, I would consider a path as being \"available\" for use.\r\n\r\nI think you should consider it as available for use but I don't think you necessarily should set the status. The status is simply that you didn't receive any status information.\r\n\r\n> \r\n> > Who send this? From the draft, I think \"either endpoint\". But then, what does that mean if one endpoint says \"available\" and the other says \"standby\"?\r\n> \r\n> That's a good point. I see use cases from a client-sending perspective, but I don't see why a server could not send statuses as well. The PATH_STATUS frame gives an indication about what should be its peer's path scheduling strategy, but it has no way of forcing the other to do so...\r\n\r\nActually we say \"An endpoint uses PATH_STATUS frames to inform that the peer should send packets in the preference expressed by these frames.\"\r\n\r\nThat means it always the receiver that informs the sender. Note that as we don't have a path identified anymore the PATH_STATUS information in unidirectional and therefore it is possible that one peer says it okay to send on a certain path, while the other end does not what to receive anything on that same path.\r\n\r\n> \r\n> > If a path is standby state and the endpoint receives validating frames on that path, does the status change?\r\n\r\nNo. The path status is only a recommendation but it doesn't forbid sending: \"PATH_STATUS frame to express a preference in path usage\". However, I guess that not fully clear in the frame definition section as we use normative SHOULDs there. Seem like an editorial clarification could make sense.\r\n\r\n> \r\n> I would decouple the validation state of a network path from its status usage. In other words, I would not use implicit signals to change the (usage) status requested by the peer over a path.\r\n> \r\n> > If a path is in standby state and no other path is in available state, does the standby path automatically become available?\r\n\r\nNo. But it can be used as it is just a recommendation. See also discussion in issue #238.\r\n\r\n> \r\n> I would say that if your peer advertises the path as being standby, you SHOULD not use it for non-probing packets, unless there is no working available paths. The concrete implementation of such a behaviour is implementation-specific, as this is a scheduling issue (starting from when do you consider that a path is not working anymore? if it experiences RTOs or being abandoned/closed?). Furthermore, in the case you have several standby paths (and no available ones), it is up to the endpoint to decide which path(s) to use (until receiving explicit signals).\r\n> \r\n> > Do we really need to maintain a sequence counter for status frames per path and per direction?\r\n\r\nThe sequence number is per connection but you have to hold state per path anyway as Quentin described below.\r\n\r\n> \r\n> For sending, I think you could use a single counter for all paths and directions, if wanted. But at receiving side, each path needs to track the highest sequence number that updated its status, to cope with reordered receive patterns. For instance, if you have p1 being standby by the seq being 19, and p2 being available, updated by seq 18, and the receive frames in the following order:\r\n> \r\n> * Status (p1, seq=22, available) : highest seq on p1, update p1 to available\r\n> * Status (p2, seq=21, standby): highest seq on p2, update p2 to standby\r\n> * Status (p1, seq=20, standby): not the highest seq on p1, ignore old information\r\n\r\nDo we now need any text updates @huitema ?",
          "createdAt": "2023-06-30T17:09:55Z",
          "updatedAt": "2023-06-30T17:09:55Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak \r\n> The sequence number is per connection but you have to hold state per path anyway as Quentin described below.\r\n\r\nI think I would prefer changing this sequence number to be a per-DCID counter rather than a per-connection counter.\r\n\r\nThe rationale is that the path status is a per-DCID variable therefore it is natural to have a per-DCID sequence number; it is counterintuive to use a per-connection sequence number for communicating a per-DCID state.\r\n\r\nMoreover, using a per-connection counter requires more state than using per-DCID sequence number.\r\n\r\nRegardless of the sequence number being per-connection or per-DCID, the sender and receiver has to remember the up-to-date sequence number for each DCID. Without such information, the sender cannot determine if it should retransmit when a packet is deemed lost; the receiver cannot determine if the received frame contains the newest information.\r\n\r\nIn addition, by defining the sequence number as per-connection, the specification is requiring the sender to retain another state which is the per-connection sequence number. If we change the sequence number to be per-DCID, we do not need such state.\r\n\r\nTo summarize, using a per-DCID sequence number is more natural (because each state being sent will have it's own sequence number) and requires less state.",
          "createdAt": "2023-09-19T06:54:09Z",
          "updatedAt": "2023-09-19T06:54:09Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with Kazuho here in the sense that we should not enforce the \"path status sequence number\" to be monotonically increasing over the connection. It just needs to be monotonically increasing over each DCID to let the receiver reorder the path statuses properly. Then, it is up to the implementation whether to keep a global monotonically increasing sequence number at sending side or a local one per DCID -- but the specification should not enforce the first solution.",
          "createdAt": "2023-10-19T12:46:17Z",
          "updatedAt": "2023-10-19T12:46:17Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema I think we can close this issue with the merge of PR #242 ? ",
          "createdAt": "2023-10-21T12:36:27Z",
          "updatedAt": "2023-10-21T12:36:27Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, we can close this issue.",
          "createdAt": "2023-10-22T00:55:17Z",
          "updatedAt": "2023-10-22T00:55:17Z"
        }
      ]
    },
    {
      "number": 219,
      "id": "I_kwDOGNtpaM5o45oy",
      "title": "Is enable_multipath TP remembered?",
      "url": "https://github.com/quicwg/multipath/issues/219",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "question",
        "has PR",
        "design"
      ],
      "body": "[RFC 9000 section 7.4.1](https://quicwg.org/base-drafts/rfc9000.html#section-7.4.1-3) states that _the definition of a new transport parameter MUST specify whether storing the transport parameter for 0-RTT is mandatory, optional, or prohibited,_ however it seems to me that is not specified for `enable_multipath`.\r\n\r\nRegarding what we should specify, I do not have a strong preference. To my knowledge all the changes introduced by Multipath QUIC affects 1-RTT packet number space. So I think it would be possible to say that the transport parameter is _not_ remembered. Though I'm not sure if that's the behavior we want.",
      "createdAt": "2023-06-16T01:09:47Z",
      "updatedAt": "2023-07-05T15:32:14Z",
      "closedAt": "2023-07-05T15:32:14Z",
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "When we wrote RFC 9000, the only justification for remembering a TP was that this TP would make any difference when sending 0-RTT packets, i.e. up until completion of the handshake. Unless we want to make it possible to send 0-RTT packets on multiple paths (which would require some more involved changes, especially regarding the CIDs to use), we should prohibit remembering this TP.",
          "createdAt": "2023-06-28T03:53:32Z",
          "updatedAt": "2023-06-28T03:53:32Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@marten-seemann I think we are in agreement that the answer to the question depends on if what's sent in 0-RTT is going to be different.\r\n\r\nThe problem here is that applications might want to send different 0-RTT data depending on if MP can be used. Multipath is different from other transport parameters in sense that it expects applications (rather than just QUIC stacks) to be written specifically for it.\r\n\r\nSo that can be the justification for defining the TP as remembered. Though, the other solution here would be to delegate the detection to ALPN; i.e., applications that require use of multipath MUST use ALPN in way that the handshake will fail unless MP is available.",
          "createdAt": "2023-06-28T04:58:29Z",
          "updatedAt": "2023-06-28T07:17:47Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I also thought that you don't have to remember it because you can anyway only open and use new path after the handshake.\r\n\r\n@kazuho I'm not sure if there would be really a dependency on the selection of other transport parameters. Or actually I hope not. Do you have an example?",
          "createdAt": "2023-06-30T15:40:40Z",
          "updatedAt": "2023-06-30T15:40:40Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak I think we don't necessarily have to define `enable_multipath` as remembered, but the following is what an application developer might do, assuming that it is remembered.\r\n\r\nAn application developer creates a protocol that requires the use of two paths, one being Wifi and cellular. Different information are sent on each path, as their cost model is different.\r\n\r\nOnce the 1-RTT handshake is complete, this application sets up two paths, exchanging their characteristics using signal defined in the application protocol.\r\n\r\nNow, what can this application do when doing 0-RTT resumption?\r\n\r\nAs `active_connection_id_limit` TP is remembered, this application can send those signals that assume support for multipath in 0-RTT packets, if `enable_multipath` is a remembered TP.\r\n\r\nIf not, they would not be able to.\r\n\r\nAs said, my point isn't that we have to define `enable_multipath` as remembered.\r\n\r\nRather, my point is that, assuming that we will define the transport parameter as _not_ remembered, we should note that application cannot send 0-RTT data under the assumption that multipath support will be available in the resumed connection.",
          "createdAt": "2023-07-01T00:19:05Z",
          "updatedAt": "2023-07-01T00:19:05Z"
        }
      ]
    },
    {
      "number": 220,
      "id": "I_kwDOGNtpaM5o48RB",
      "title": "\"SHOULD\" use ACK_MP frames?",
      "url": "https://github.com/quicwg/multipath/issues/220",
      "state": "OPEN",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "no-action-needed"
      ],
      "body": "At the moment, [section 5.1](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-5.1-3) states:\r\n> As soon as the negotiation of multipath support is completed, endpoints SHOULD use ACK_MP frames instead of ACK frames to acknowledge application data packets, including 0-RTT packets, using the initial Connection ID with sequence number 0 after the handshake concluded.\r\n\r\nAs @qdeconinck states in https://github.com/quicwg/multipath/issues/181#issuecomment-1447937924, my understanding is that ACK frames are equivalent to ACK_MP frames carrying DCID value of zero. Omission of value zero saves one byte per ACK frame.\r\n\r\nIs the optimization worth the cost of supporting such omission?\r\n\r\nIf we think it might be valuable, I think we'd better change the text to state as such rather than discouraging the use of ACK frames (by saying \"SHOULD use ACK_MP\").\r\n\r\nIf we agree that it is not valuable, I would propose to change the specification to state that only ACK_MP frames can be used in the application data space when use of the multipath extension is negotiated.",
      "createdAt": "2023-06-16T01:22:09Z",
      "updatedAt": "2023-11-03T15:28:15Z",
      "closedAt": null,
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that saving one byte for the very first CID is not very valuable, and I agree that it would be a really nice property to only use ACK_MP frames for the application data space.",
          "createdAt": "2023-06-28T03:48:45Z",
          "updatedAt": "2023-06-28T03:48:45Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The only \"valuable\" case I can see is that if you negotiate multipath support but then don't use any additional path, your behaviour would not need to different from single path QUIC. Not sure how valuable that is. Therefore I think we want to encourage use of the ACK_MP.\r\n\r\nHowever, I also don't really see the value of enforcing the use of ACK_MP...? You have to handle normal ACK frames anyway in the handshake. Why would a MUST make any real difference here?",
          "createdAt": "2023-06-30T15:46:47Z",
          "updatedAt": "2023-06-30T15:46:47Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I think there are two reasons to forbid ACK being used in the application packet number space.\r\n\r\nThe first reason is that having less variation is better. In my view, having less variation on wire reduces the amount of tests that we have to write, helps us improve software quality. In QUIC v1, I recall we tried to tighten what can be sent on the wire, calling out numerous unnecessary cases as protocol violation.\r\n\r\nThe second reason is that we might want to change how acks behave (e.g., if ack is a probing frame; see #226). We can define the properties of ACK_MP, but there would be a lot more friction to change that of ACKs. So the trade off here is if we want to have two types of ACKs that behave differently, or just one.",
          "createdAt": "2023-07-03T01:14:41Z",
          "updatedAt": "2023-07-03T01:14:41Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not convinced. I'm not sure we have a good solution for #226 yet and I think we should minimise the difference to ACK as much as we can. I guess we need more input from the working group!",
          "createdAt": "2023-07-03T13:45:01Z",
          "updatedAt": "2023-07-03T13:45:01Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The original intention was that in case when multipath was negotiated but only one path was employed, the multipath could smoothly fall back to single path and behave just like the single path QUIC. This is designed for situations like when your client's SDK and server support multipath quic but your cellphone only has one interface to use (Wifi is not connected or cellular data is turned off). If we force the use of ACK_MP, then the their behaviors diverge before a second path is added.\r\n\r\nRegarding the issue #226 , I think maybe we still want to keep ACK_MP as non probing, and try to ack the probing frame from a path that has already been validated. ",
          "createdAt": "2023-07-03T21:06:44Z",
          "updatedAt": "2023-07-03T21:06:44Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In your idea, @yfmascgy, how does this client react after rotating the CID, or after the peer rotates a CID, or after a NAT rebinding is detected? Do they still go on using ACK?",
          "createdAt": "2023-07-04T04:20:57Z",
          "updatedAt": "2023-07-04T04:20:57Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Did we reach any agreement here? Can we close this issue without action?",
          "createdAt": "2023-11-03T14:42:11Z",
          "updatedAt": "2023-11-03T14:42:11Z"
        }
      ]
    },
    {
      "number": 221,
      "id": "I_kwDOGNtpaM5o5BiK",
      "title": "maximum number of paths an endpoint should open",
      "url": "https://github.com/quicwg/multipath/issues/221",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "At the moment, we state in [section 1](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-1-3.7) that\r\n> If the 4-tuple changes without the use of a new connection ID (e.g. due to a NAT rebinding), this is considered as a migration event.\r\n\r\nand in [section 3](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-3-10) that\r\n> The transport parameter \"active_connection_id_limit\" [QUIC-TRANSPORT] limits the number of usable Connection IDs, and also limits the number of concurrent paths.\r\n\r\nWhile each statement is true, they are misleading in conjunction.\r\n\r\nThe problem here is that when an endpoint opens paths as many as \"active_connection_id_limit\", all CIDs will be use. That means that when an unintentional migration (e.g., NAT rebinding) occurs, the peer cannot respond to the migration event. This is because [RFC 9000 section 9.5](https://quicwg.org/base-drafts/rfc9000.html#name-privacy-implications-of-con) states that endpoints _MUST NOT reuse a connection ID when sending from more than one local address_ and _MUST NOT reuse a connection ID when sending to more than one destination address_.\r\n\r\nAs a path forward, I think we should at least warn developers not to try to use paths as many as \"active_connection_id_limit.\"",
      "createdAt": "2023-06-16T01:38:26Z",
      "updatedAt": "2023-07-05T15:20:51Z",
      "closedAt": "2023-07-05T15:20:51Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Filed PR #231 that fixes the issue without adding new mechanism.",
          "createdAt": "2023-06-29T06:47:14Z",
          "updatedAt": "2023-06-29T06:47:36Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I commented in the PR. What's happens in RFC9000 if a NAT binding occurs and there is no new available CID? You have to close the path? Maybe that's also something to discuss.",
          "createdAt": "2023-06-30T09:18:52Z",
          "updatedAt": "2023-06-30T09:18:52Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak Thank you for your comments. That topic is covered correctly by RFC 9000 already (please see my comments on the PR).",
          "createdAt": "2023-06-30T13:04:26Z",
          "updatedAt": "2023-06-30T13:04:26Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the update!\r\n\r\nI guess the other question here is if we want to further discuss, what to do if a migration events happens and no CID is available. I think with multipath if you still have an active path, you should probably send a PATH_ABANDON frame for the old CID. This also related to PR #198 and issue #188, however, this might need further discussion.",
          "createdAt": "2023-06-30T15:51:45Z",
          "updatedAt": "2023-06-30T15:51:45Z"
        }
      ]
    },
    {
      "number": 222,
      "id": "I_kwDOGNtpaM5o5DGd",
      "title": "ACK_MP frames for acknowledging 0-RTT packets",
      "url": "https://github.com/quicwg/multipath/issues/222",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "At the moment, [section 8.1](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-8.1-5.2.1) sounds as ACK_MP frames cannot be used for acknowledging 0-RTT packets, even though 0-RTT packets and 1-RTT packets belong to the same packet number space ([RFC 9000 section 12.3](https://quicwg.org/base-drafts/rfc9000.html#section-12.3-5.6.1)).\r\n\r\n> Destination Connection ID Sequence Number:      The sequence number of the Connection ID identifying the packet number space of the 1-RTT packets which are acknowledged by the ACK_MP frame.\r\n",
      "createdAt": "2023-06-16T01:43:01Z",
      "updatedAt": "2023-06-30T08:53:45Z",
      "closedAt": "2023-06-30T08:53:45Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's a good catch and I agree with what you have changed in the text.",
          "createdAt": "2023-06-22T07:03:29Z",
          "updatedAt": "2023-06-22T07:03:29Z"
        }
      ]
    },
    {
      "number": 224,
      "id": "I_kwDOGNtpaM5o5FhB",
      "title": "probably stale statement regarding \"no connection ID exposed in the QUIC header\"",
      "url": "https://github.com/quicwg/multipath/issues/224",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "In section 3, we state that\r\n> If the parameter is set to 1, both endpoints MUST use non-zero connection IDs. \r\n\r\nbut also state that\r\n> For the QUIC multipath extension this limit even applies when no connection ID is exposed in the QUIC header.\r\n\r\nI believe the latter is a leftover from when we allowed zero-length connection IDs to be used?",
      "createdAt": "2023-06-16T01:52:16Z",
      "updatedAt": "2023-06-30T08:55:14Z",
      "closedAt": "2023-06-30T08:55:14Z",
      "comments": []
    },
    {
      "number": 226,
      "id": "I_kwDOGNtpaM5pbz03",
      "title": "sending ACK_MP for packets arriving on a path yet to be validated",
      "url": "https://github.com/quicwg/multipath/issues/226",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has PR",
        "design"
      ],
      "body": "How is an endpoint supposed to send ACKs in response to packets arriving on paths that have not been validated yet?\r\n\r\nWhen receiving a packet on a new path, the receiver cannot send an ACK_MP frame on the new path. This is because ACK_MP frame is not defined as a probing frame.\r\n\r\nThe receiver has to either:\r\n* a) send ACK_MP on a different path that has been validated already, or\r\n* b) withhold sending ACK_MP frames until the receiver completes validation the new path\r\n\r\nEither approach has its own downsides. Option A is going to have negative impact on RTT estimates (see #190), option B will be a diversion from QUIC v1 and we need to write it down if such behavior is permissible. The other option (C) could be to state that ACK_MP frames are probing frames.\r\n\r\nDo we have a preference on the strategy?",
      "createdAt": "2023-06-22T04:16:38Z",
      "updatedAt": "2023-10-22T11:03:52Z",
      "closedAt": "2023-10-22T11:03:52Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it is better to acknowledge sooner rather than hold on. The discussion on #190 suggest to \"just send the ACK on the available path\". The only caveat is the need to keep all paths alive, but challenges and responses do that.",
          "createdAt": "2023-06-22T04:46:38Z",
          "updatedAt": "2023-06-22T04:46:38Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My opinion is to go with option A. Suppose that a not-yet-validated path will soon be validated. The negative impact on RTT is going to be limited and smoothed out when new RTT samples arrive.",
          "createdAt": "2023-06-22T04:49:29Z",
          "updatedAt": "2023-06-22T04:49:29Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why not just include the ACK_MP frame with the PATH_CHALLENGE frame?\r\n\r\nRFC 9000 Section 8.2 allows including other frames:\r\n> An endpoint MAY include other frames with the PATH_CHALLENGE and PATH_RESPONSE frames used for path validation. In particular, an endpoint can include PADDING frames with a PATH_CHALLENGE frame for Path Maximum Transmission Unit Discovery (PMTUD)\r\n\r\nMaybe we should make it explicit (and encourage) that this also includes ACK_MP frames here?",
          "createdAt": "2023-06-28T03:43:12Z",
          "updatedAt": "2023-06-28T03:43:12Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@marten-seemann I think the answer depends on what people want to do.\r\n\r\nIf some endpoints prefer sending acknowledgements on the path the packets were received, then yes, it would make sense for such endpoints to bundle PATH_RESPONSE and ACK_MP. That would be easy to implement and give good RTT estimate throughout the lifetime of the path.\r\n\r\nOTOH, I'm not sure if we want to encourage all endpoints to bundle PATH_RESPONSE and ACK_MP. There are cases where it makes sense to send acknowledgements on a path other than on which you receive packets. For example, when receiving a packet via a cellular network, it could make sense to send ACK_MP frames through Wifi, as the latter has lower latency in general. In such case, it would make sense to send all ACK_MP frames through Wifi rather than sending some through cellular as a bundle.",
          "createdAt": "2023-06-28T05:38:33Z",
          "updatedAt": "2023-06-28T05:38:33Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sending them on a different path seems fine too. I didn't mean to suggest to always send ACK_MP frames on the same path, I was just arguing that there's no situation where (b) would be the preferred option.",
          "createdAt": "2023-06-28T05:47:01Z",
          "updatedAt": "2023-06-28T05:47:01Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazuho @marten-seemann @huitema It seems that we need to modify Fig. 2 in the current draft, right? Right now in fig2, in response to PATH_CHALLENGE frame, we bundle ACK_MP with PATH_RESPONSE in the returning packet and transmit that packet on the new path. But in the draft we also say \"An endhost should not send non-probing frames on a path in \"Validating\" state, as it has no guarantee that packets will actually reach the peer.\"",
          "createdAt": "2023-06-29T21:17:17Z",
          "updatedAt": "2023-06-29T21:17:17Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Picoquic does bundle ACK_MP (or ACK) with path response, but it treats that as an \"opportunistic ACK\" which may or may no make it through. The packet ranges will be acknowledged again next time the ACK_MP can be sent on a validated path.",
          "createdAt": "2023-06-29T22:05:41Z",
          "updatedAt": "2023-06-29T22:05:41Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "My +1 goes to allow including ACK_MP frames in probing packets. But we cannot have the same rule for ACK frames, because QUIC v1 states that ACK is a non-probing frame and hence cannot be included in probing packets.\r\n\r\nTherefore, my preference goes to:\r\n* state that ACK_MP frames are probing frames (and hence can be included in probing packets), and\r\n* to avoid confusion, forbid use of ACK frames in 1-RTT packets of multipath QUIC (see https://github.com/quicwg/multipath/issues/220).",
          "createdAt": "2023-06-29T23:22:46Z",
          "updatedAt": "2023-06-30T06:25:40Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Given everybody likes and implemented the bundling, I created PR #239 with the following text:\r\n\r\n```\r\nAn endhost SHOULD NOT send\r\nnon-probing frames on a path in \"Validating\" state, as it has no\r\nguarantee that packets will actually reach the peer, with an exception\r\nof the ACK_MP frame. An endhost MAY bundle the ACK_MP frame with the \r\nPATH_RESPONSE frame; in this case it is RECOMMANDED to consider\r\nthe acknowledgement information as opportunistic and repeat\r\nthe acknowledged pacjet ranges in the next ACK_MP frame.\r\nAlternatively ACK_MP frames can be sent any other active path.\r\n```\r\n\r\nRather than saying ACK_MP frames are probing frames which I'm not sure generally makes sense, I think it is better to be explicitly about this case. Do people think use of normative language makes sense here?",
          "createdAt": "2023-06-30T16:49:59Z",
          "updatedAt": "2023-06-30T16:49:59Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "> Rather than saying ACK_MP frames are probing frames which I'm not sure generally makes sense, I think it is better to be explicitly about this case.\r\n\r\nI am not sure if I appreciate that approach - having rules based on types of packets, then having exceptions is hard to maintain.\r\n\r\nIn case of quicly, we use [a table that defines the properties of each frame](https://github.com/h2o/quicly/blob/c046b6029de9ad6be57b5b7a846c1d7bd26eadd2/lib/quicly.c#L6293-L6328) and refer to them before / after calling the frame handlers. I would not be surprised if other stacks take the same approach. It is hard to handle exceptions when stacks are written that way, not to mention the difficulty of analyzing the prototol.",
          "createdAt": "2023-07-03T01:31:27Z",
          "updatedAt": "2023-07-03T01:31:27Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My question is why not we send ACK_MP from a path that has already been validated. Is there any issue for doing that?",
          "createdAt": "2023-07-03T21:09:18Z",
          "updatedAt": "2023-07-03T21:09:18Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@yfmascgy That's a fair point, though the sense of room in #190 seems to be that we think its up to the receiver to select the path to send acks, the only recommendation is that the selection is stable.\r\n\r\nUnder the premise that that is the consensus and that some endpoints might want to send ACKs on the path they received data, it would make sense to allow sending ACK_MP frames on an unverified path even though sending an ordinary ACK is prohibited due to it being a non-probing packet (though as stated in [#50](https://github.com/quicwg/multipath/issues/50#issuecomment-1617086967), I do not know if there is a reason to forbid use of most (read \"non-probing\") packets on an unvalidated path when we have per-path loss recovery and CC).",
          "createdAt": "2023-07-05T00:00:46Z",
          "updatedAt": "2023-07-05T00:01:24Z"
        }
      ]
    },
    {
      "number": 229,
      "id": "I_kwDOGNtpaM5qG60_",
      "title": "\"SHOULD be acknowledged\"",
      "url": "https://github.com/quicwg/multipath/issues/229",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Current Multipath draft is unclear regarding if the newly added frames are ack-eliciting.\r\n\r\nFor background, QUIC v1 define ack-eliciting frames and non-ack-eliciting frames. Ack-eliciting frames are required to be acknowledged at least once within max-ack-delay. All frames, regardless of them being ack-eliciting or non-ack-eliciting, are recommended to be acknowledged at least once. ([RFC 9000 section 13.2.1](https://quicwg.org/base-drafts/rfc9000.html#name-sending-ack-frames)).\r\n\r\nLooking at the multipath draft, for the ACK_MP frame, we state that it is \"an extension of the ACK frame,\" ([section 8.1](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-ack_mp-frame)), so probably it implies that ACK_MP is non-ack-eliciting. Fine.\r\n\r\nFor PATH_ABANDON and PATH_STATUS, we state that the \"SHOULD be acknowledged.\"\r\n> PATH_ABANDON frames SHOULD be acknowledged. If a packet containing a PATH_ABANDON frame is considered lost, the peer SHOULD repeat it. ([section 8.2](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-path_abandon-frame))\r\n\r\n> PATH_STATUS frames SHOULD be acknowledged. If a packet containing a PATH_STATUS frame is considered lost, the peer should only repeat it if it was the last status sent for that path -- as indicated by the sequence number. ([section 8.3](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-path_status-frame))\r\n\r\nWhat does these statements mean? Considering that they are SHOULD without maximum delay, do they imply that PATH_ABANDON and PATH_STATUS are non-ack-eliciting frames? Or do they mean that these frames fall into a new category other than ack-eliciting or non-ack-eliciting frames?",
      "createdAt": "2023-06-29T06:12:58Z",
      "updatedAt": "2023-06-30T09:09:28Z",
      "closedAt": "2023-06-30T09:09:28Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "My take would be that these frames are meant to be ack-eliciting.\r\n\r\nIMO they have to be, because they transmit information, and when the information are deemed lost, they have to be retransmit (unless the sender has other ways to learn that the peer no longer needs the information; see [RFC 900 section 13.3](https://quicwg.org/base-drafts/rfc9000.html#name-retransmission-of-informati)).",
          "createdAt": "2023-06-29T06:13:36Z",
          "updatedAt": "2023-06-29T06:13:36Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazuho They should be treated much like for example the MAX_DATA or MAX_STREAM_DATA frames: they should be acknowledged, but if the packet carrying them is lost, they should only be repeated if they were the last such frame sent on the path. ",
          "createdAt": "2023-06-29T17:45:15Z",
          "updatedAt": "2023-06-29T17:45:15Z"
        }
      ]
    },
    {
      "number": 232,
      "id": "I_kwDOGNtpaM5qHOVG",
      "title": "PATH_ABANDON and the sender releasing resources",
      "url": "https://github.com/quicwg/multipath/issues/232",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "[Section 4.3](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-use-path_abandon-frame-to-c) states:\r\n> The sender and receiver of a PATH_ABANDON frame should not release its resources immediately, but SHOULD wait for at least three times the current Probe Timeout (PTO) interval as defined in [Section 6.2.](https://rfc-editor.org/rfc/rfc9002#section-6.2.) of [[QUIC-RECOVERY](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-RECOVERY)] after the last sent packet before sending the RETIRE_CONNECTION_ID frame for the corresponding CID. This is inline with the requirement of [Section 10.2](https://rfc-editor.org/rfc/rfc9000#section-10.2) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)] to ensure that paths close cleanly and that delayed or reordered packets are properly discarded. The effect of receiving a RETIRE_CONNECTION_ID frame is specified in the next section.\r\n\r\nFor the sender of the PATH_ABANDON frame, the only information that it can discard is the ACK queue, because PATH_ABANDON asks _the peer_ to stop sending data on that path. However, the peer is still allowed to send probing packets on the path and therefore we need to retain the ack queue so that we can ACK the probing packets. To summarize, there is nothing that the sender of the PATH_ABANDON frame can discard until it receives RETIRE_CONNECTION_ID.\r\n\r\nFWIW, for the receiver of the PATH_ABANDON frame which is the sender of information, it does makes sense to retain loss recovery state as some packets may arrive as late as 3 PTO (that's the rational for 3 PTO in RFC 9000).",
      "createdAt": "2023-06-29T07:22:31Z",
      "updatedAt": "2023-07-05T15:24:44Z",
      "closedAt": "2023-07-05T15:24:44Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Trying to internalize what the paragraph tries to state, I think my questions are:\r\n* At which point MAY an endpoint stop recognizing late-acks for packets sent on the path being abandoned?\r\n* At which point MAY an endpoint stop decrypting and acking packets arriving on the abandoned path?\r\n\r\nThese are questions to the transport state machinery that have to be clarified, as they have effect on what the peer can expect.\r\n\r\nI think it would be better to have these questions directly answered in the specification rather than talking about \"resources\" and expecting readers to imply what it means.",
          "createdAt": "2023-06-30T02:05:52Z",
          "updatedAt": "2023-06-30T02:09:25Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Filed #234 to clarify the questions above, based on my understanding that:\r\n\r\n> * At which point MAY an endpoint stop recognizing late-acks for packets sent on the path being abandoned?\r\n\r\nThis moment is PATH_ABANDON + 3PTO.\r\n\r\n> * At which point MAY an endpoint stop decrypting and acking packets arriving on the abandoned path?\r\n\r\nThis moment is _not_ PATH_ABANDON + 3PTO but is the receipt of RETIRE_CONNECTION_ID, we talk about that in [section 4.3.3](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-effect-of-retire_connection).",
          "createdAt": "2023-06-30T02:23:35Z",
          "updatedAt": "2023-06-30T02:24:00Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Please see my comment in the PR about your first question.",
          "createdAt": "2023-06-30T10:14:35Z",
          "updatedAt": "2023-06-30T10:14:35Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that there is also issue #175 which requests clarification for this sentence and another sentence talking about resources in section 4.3.3",
          "createdAt": "2023-06-30T15:56:44Z",
          "updatedAt": "2023-06-30T15:56:44Z"
        }
      ]
    },
    {
      "number": 233,
      "id": "I_kwDOGNtpaM5qMBbA",
      "title": "Implementing multipath on QUIC-aware proxies",
      "url": "https://github.com/quicwg/multipath/issues/233",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "no-action-needed"
      ],
      "body": "It seems that there has been a lot of interests in implementing multi-path on QUIC-aware proxies and there are certain implications  this brings to the multipath base protocol (also see discussions on #214), we can put our thoughts under this issue so it can be better tracked. @kazuho @tfpauly @huitema ",
      "createdAt": "2023-06-29T21:24:58Z",
      "updatedAt": "2023-07-04T23:52:01Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "NONE",
          "body": "I'm not convinced that quic-aware proxying necessarily needs any changes from the base multipath spec--I view the proxy as doing transformations that are transparent to the server. But happy to discuss!",
          "createdAt": "2023-06-30T01:54:45Z",
          "updatedAt": "2023-06-30T01:54:45Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I could very well be wrong, but I think there are things to consider.\r\n\r\nIf I understand correctly, paths as defined by the multipath draft are identified by the 4-tuple. Each endpoints retain their mapping of DCIDs and paths. Loss recovery and congestion control are also handled by the 4-tuple.\r\n\r\nThat means that a QUIC-aware proxy cannot coalesce packets arriving on different paths to a single source port. But how is a QUIC-aware proxy expected to recognize the path being intended by the sender? Using Connection ID for recognizing the path might not be a good idea, because Connection IDs can change on the same path. If the QUIC-aware proxy considers all the changes to Connection ID as migrations (and assigns new local ports), that might have negative impact on throughput, as migration requires the peer to validate the path before sending packets.",
          "createdAt": "2023-06-30T02:36:12Z",
          "updatedAt": "2023-06-30T02:37:43Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "To follow up, at the moment my preference goes to stating something like below in the QUIC-aware proxying draft:\r\n* When the proxy receives packet with a new 4-tuple, it SHOULD allocate a different local tuple than that have been previously used for the same connection, and use that local tuple for forwarding packets arriving with the same 4-tuple.\r\n\r\nIn other words, require QUIC-aware proxies to preserve the view of paths as identified by 4-tuple.",
          "createdAt": "2023-06-30T02:58:06Z",
          "updatedAt": "2023-06-30T02:58:06Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually congestion control and loss recovery is per packet space which is identified by the CID. Thus if the CID changes you have to reset cc and recovery (therefore you should not do that unnecessarily often). I think this means you could use multiple CIDs on the same 4-tuple without any design changes, however, it is also true that this case was not considered by this extension as it states in the intro: \r\n`A path is determined by the 4-tuple of source and destination IP address as well as source and destination port. Therefore, there can be at most one active paths/connection ID per 4-tuple`\r\n\r\nAlso, the QUIc-aware proxy approach does use multiple CIDs on the same 4-tuple, however, these packets that are forwarded e2e without decapsulation actually don't have cc and recovery state in the proxy.\r\n\r\n",
          "createdAt": "2023-06-30T16:02:23Z",
          "updatedAt": "2023-06-30T16:02:23Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "NONE",
          "body": "Yes, I do think that the proxy that is quic aware needs to make each MPQUIC path be a separate path as viewed by the server, but I don't think that requires any changes to the spec of MPQUIC.",
          "createdAt": "2023-06-30T20:04:39Z",
          "updatedAt": "2023-06-30T20:04:39Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "It's good to see emerging concensus (which is  non-action-needed on the side of Multipath draft).\r\n\r\nKind of off-topic, but @mirjak \r\n> Actually congestion control and loss recovery is per packet space which is identified by the CID. \r\n\r\nIs that so?\r\n\r\nI have been under the impression that while loss recovery is indeed per-packet-number-space, RTT measurement and congestion control is per-4-tuple. That is the model that we have in RFC 9002, which states that _loss detection is separate per packet number space, unlike RTT measurement and congestion control_ ([section 6.3](https://www.rfc-editor.org/rfc/rfc9002#section-6-3)).\r\n\r\nIs there an reason to change CC behavior?",
          "createdAt": "2023-07-01T00:29:18Z",
          "updatedAt": "2023-07-01T00:29:18Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@kazuho you are right. I wasn't considering migration and therefore over-generalising. However, I guess RFC9000 doesn't explicitly prohibit you to have multiple CCs per path ;-)",
          "createdAt": "2023-07-04T15:30:49Z",
          "updatedAt": "2023-07-04T15:30:49Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "> > Actually congestion control and loss recovery is per packet space which is identified by the CID.\r\n> \r\n> Is that so?\r\n> \r\n> I have been under the impression that while loss recovery is indeed per-packet-number-space, RTT measurement and congestion control is per-4-tuple. That is the model that we have in RFC 9002, which states that _loss detection is separate per packet number space, unlike RTT measurement and congestion control_ ([section 6.3](https://www.rfc-editor.org/rfc/rfc9002#section-6-3)).\r\n> \r\n> Is there an reason to change CC behavior?\r\n\r\nI think that there is a bit of confusion here... The packet number spaces that RFC 9002 talks about are the *encryption* number spaces: Initial, Handshake and Application data. Without multipath, packets from all these number spaces go over the same single path and thus need to have common CC. Multipath number spaces are only defined for Application data (aka 1-RTT) packets and are a different thing.",
          "createdAt": "2023-07-04T20:46:52Z",
          "updatedAt": "2023-07-04T20:46:52Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@michael-eriksson In both QUIC v1 and Multipath, endpoints might be forced to change the CID of an existing path (without changing the path) though NEW_CONNECTION_ID.retire_prior_to.\r\n\r\nWhen that happens, with Multipath the packet number space is changed as well.\r\n\r\nMy point has been that endpoints do not need to reset CC in such event and that RFC 9002 is already designed with having multiple packet number space on the same path.",
          "createdAt": "2023-07-04T23:32:44Z",
          "updatedAt": "2023-07-04T23:52:01Z"
        }
      ]
    },
    {
      "number": 235,
      "id": "I_kwDOGNtpaM5qNvI_",
      "title": "Can client open new path by sending packet without PATH_CHALLENGE frame on new local address?",
      "url": "https://github.com/quicwg/multipath/issues/235",
      "state": "CLOSED",
      "author": "nandsky",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "As described in [Quic multipath Section-6.1](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-6.1)\r\n\r\n> Before the client opens a new path by sending a packet on that path with a PATH_CHALLENGE frame, it has to check whether there is an unused Connection IDs available for each side. \r\n\r\nWhat I confusing about is whether the PATH_CHALLENGE frame is necessary? Can client use a new path without validating the peer's address  like [RFC900 9.2. Initiating Connection Migration](https://www.rfc-editor.org/rfc/rfc9000#name-initiating-connection-migra),  because peer's address has been validated during connection establishment.\r\n\r\n\r\n",
      "createdAt": "2023-06-30T06:40:57Z",
      "updatedAt": "2023-11-14T07:11:58Z",
      "closedAt": "2023-11-14T07:11:58Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I agree that this is an error in the current draft.\r\n\r\nThe requirement in RFC 9000 is that paths MUST be validated [unless it has previously validated that address](https://www.rfc-editor.org/rfc/rfc9000#section-9-4). There is no reason to deviate from v1 here.",
          "createdAt": "2023-06-30T07:23:40Z",
          "updatedAt": "2023-06-30T07:23:40Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Including the PATH_CHALLENGE frame basically says that both endpoints need to ensure path reachability before using this path to send data. It also prevents address spoofing attacks. Over the public internet, the client's source port is usually unknown due to the NAT so it is necessary to have a PATH_CHALLENGE. But I think if you are using multi-path in a private network where your address has been validated and are stable, you can start using the path without probing it.",
          "createdAt": "2023-06-30T07:52:29Z",
          "updatedAt": "2023-06-30T07:52:29Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I think the discussion here is not about private networks, it applies to traffic on public networks as well.\r\n\r\nWhen a client migrates to a new address, it continues sending packets to an address that has been validated already. Therefore, a client does not have to validate the path _prior to_ sending non-probing packets.\r\n\r\nPer my understanding, that is why we state in [RFC 9000 section 9.4](https://www.rfc-editor.org/rfc/rfc9000#section-9-4) that path validation is not mandatory if an endpoint has previously validated that address.\r\n\r\nThe client still has to validate the path to test reachability, but it can do that while or after sending non-probing packets from a new local address. Quoting from [section 9.2](https://www.rfc-editor.org/rfc/rfc9000#section-9.2-3), _an endpoint MAY defer path validation until after a peer sends the next non-probing frame to its new address._",
          "createdAt": "2023-06-30T13:33:49Z",
          "updatedAt": "2023-06-30T13:34:47Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the next two paragraph are more relevant for this discussion:\r\n\r\n```\r\nWhen the multipath option is negotiated, clients that want to use an additional path MUST first initiate the Address Validation procedure with PATH_CHALLENGE and PATH_RESPONSE frames described in [Section 8.2](https://rfc-editor.org/rfc/rfc9000#section-8.2) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)]. After receiving packets from the client on a new path, if the server decides to use the new path, the server MUST perform path validation ([Section 8.2](https://rfc-editor.org/rfc/rfc9000#section-8.2) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)]) unless it has previously validated that address.[\u00b6](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-4.1-3)\r\n\r\nIf validation succeed, the client can send non-probing, 1-RTT packets on the new paths. In contrast with the specification in [Section 9](https://rfc-editor.org/rfc/rfc9000#section-9) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)], the server MUST NOT assume that receiving non-probing packets on a new path indicates an attempt to migrate to that path. Instead, servers SHOULD consider new paths over which non-probing packets have been received as available for transmission.\r\n```\r\n\r\nCurrently, we require the client to send PATH_CHALLANGE (\"MUST first initiate the Address Validation\") because it's always better to be explicit when you want to open a new path and you already have another exiting path to send data which means it probably not that urgent to send data on the new path. However, if you have a concrete use case why you need to send application/non-probably data on a new path before address validation is concluded, please describe that use case in more details. This is also discussed in issue #50.\r\n\r\nAlso note, migration as described in RFC9000 is still possible any may lead to non-probing data packets on a non-validated path as describe din section 7.8.\r\n\r\n \r\n",
          "createdAt": "2023-06-30T16:33:49Z",
          "updatedAt": "2023-06-30T16:33:49Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak Thank you for referring to the normative paragraph.\r\n\r\n> Currently, we require the client to send PATH_CHALLANGE (\"MUST first initiate the Address Validation\") because it's always better to be explicit when you want to open a new path and you already have another exiting path to send data which means it probably not that urgent to send data on the new path. However, if you have a concrete use case why you need to send application/non-probably data on a new path before address validation is concluded, please describe that use case in more details.\r\n\r\nI think I would scope it differently.\r\n\r\nQUIC multipath is based on QUIC v1, and we should not divert from what is defined in v1 unless there is a necessity. I do not think there is anything in multipath that requires us to tighten when clients have to validate.",
          "createdAt": "2023-07-01T00:22:25Z",
          "updatedAt": "2023-07-01T00:22:25Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the case where the path was previously validated is still valid from RFC900 and we didn't meant to change that. We only talked about \"new\" paths. But I also that this phrase \"unless it has previously validated that address\" in PR #288 now to make that more explicit. Does this close this issue?",
          "createdAt": "2023-11-03T14:52:16Z",
          "updatedAt": "2023-11-03T14:52:16Z"
        }
      ]
    },
    {
      "number": 241,
      "id": "I_kwDOGNtpaM5qVWBj",
      "title": "Congestion Control must be per-path (following [QUIC-TRANSPORT])\uff1f",
      "url": "https://github.com/quicwg/multipath/issues/241",
      "state": "CLOSED",
      "author": "nandsky",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "As described in [Section 1. Introduction](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-introduction):\r\n\r\n> * Congestion Control must be per-path **(following [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)])** which usually also requires per-path RTT measurements\r\n\r\nBut what [RFC 9000 9.4. Loss Detection and Congestion Control](https://www.rfc-editor.org/rfc/rfc9000#name-loss-detection-and-congesti) says:\r\n\r\n> While multiple paths might be used during connection migration, a single congestion control context and a single loss recovery context (as described in [[QUIC-RECOVERY](https://www.rfc-editor.org/rfc/rfc9000#QUIC-RECOVERY)]) could be adequate. For instance, an endpoint might delay switching to a new congestion control context until it is confirmed that an old path is no longer needed (such as the case described in [Section 9.3.3](https://www.rfc-editor.org/rfc/rfc9000#off-path-forward)).\r\n\r\nIn my option,  it is necessary to maintain a CC state machine per path, but rfc 9000 does not require that?\r\n",
      "createdAt": "2023-07-01T14:40:49Z",
      "updatedAt": "2023-07-05T16:05:53Z",
      "closedAt": "2023-07-05T16:05:52Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is often necessary to have separate CCs when you want to use multiple paths for concurrent transmission. If the paths' bottlenecks are not shared, it is very likely that one path is congested while the other is not. In the case of a share bottleneck , coupled CC may be used, but you still need CC state per path. For our experience, coupled CC did not perform well so we generally use non-coupled CC per path.",
          "createdAt": "2023-07-02T07:27:36Z",
          "updatedAt": "2023-07-02T07:27:36Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "RFC9000 allows to not reset the cc on migration if you are rather certain that the path actually didn't change. This is also still allowed in the multipath extension because in this case it's a migration event and not a new path. I don't see a conflict.",
          "createdAt": "2023-07-03T10:19:12Z",
          "updatedAt": "2023-07-03T10:19:12Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "It seems like no action is needed here.",
          "createdAt": "2023-07-05T16:05:52Z",
          "updatedAt": "2023-07-05T16:05:52Z"
        }
      ]
    },
    {
      "number": 244,
      "id": "I_kwDOGNtpaM5qhGDm",
      "title": "forbid use of cipher suites with nonce shorter than 12 bytes?",
      "url": "https://github.com/quicwg/multipath/issues/244",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "In multipath QUIC, we encode CID sequence and packet number as a 12-byte nonce.\r\n\r\nThat works well in practice; to my knowledge, AEAD cipher-suites tend to have [N_MIN](https://datatracker.ietf.org/doc/html/rfc5116#section-4) of at least 12 bytes.\r\n\r\nHowever, I'm concerned that that is not a requirement in RFC 8446 or RFC 9002.\r\n\r\nTo me it seems that [Section 5.3 of RFC 8446](https://datatracker.ietf.org/doc/html/rfc8446#section-5.3) that AEAD with N_MIN below 8 bytes MUST NOT be used with TLS/1.3, which is also sufficient for QUIC v1.\r\n\r\nAs Multipath QUIC requires N_MIN of at least 12-bytes, I think we should explicitly ban use of AEAD cipher suites with N_MIN less than 12 bytes.",
      "createdAt": "2023-07-04T03:02:29Z",
      "updatedAt": "2023-07-05T15:32:52Z",
      "closedAt": "2023-07-05T15:32:52Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's a good point. I checked that:\r\n\r\nTLS_AES_128_GCM_SHA256 uses a 12-byte nonce.\r\nTLS_AES_256_GCM_SHA384 also uses a 12-byte nonce.\r\nTLS_CHACHA20_POLY1305_SHA256 uses a 12-byte nonce.\r\nTLS_AES_128_CCM_SHA256 uses an 8-byte nonce.\r\nTLS_AES_128_CCM_8_SHA256 uses an 8-byte nonce.\r\n\r\nSo I think we should require the use of an AEAD cipher suite with nonce greater or equal to 12-bytes when enable_multipath is negotiated. Otherwise, we have a TRANSPORT_PARAMETER_ERROR.",
          "createdAt": "2023-07-05T04:01:50Z",
          "updatedAt": "2023-07-05T04:01:50Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@yfmascgy I think TLS_AES_128_CCM_SHA256 is defined by RFC 5116 with [N_MIN and N_MAX of 12 bytes](https://datatracker.ietf.org/doc/html/rfc5116#section-5.3), so it would be fine to use it in multipath QUIC.\r\n\r\nTLS_AES_128_CCM_8_SHA256 is forbidden in QUIC (because an 8-byte AEAD tag is insufficient for header protection ([RFC 9002 section 5.3](https://www.rfc-editor.org/rfc/rfc9001.html#section-5.3-2)). But its N_MIN and N_MAX are also 12 bytes.\r\n\r\nThis issue is addressing the theoretical possibility of QUIC v1 adding a cipher suite with a shorter nonce.",
          "createdAt": "2023-07-05T04:20:34Z",
          "updatedAt": "2023-07-05T04:20:34Z"
        }
      ]
    },
    {
      "number": 246,
      "id": "I_kwDOGNtpaM5qi9mj",
      "title": "Editorial: refer to packet types instead of encryption level",
      "url": "https://github.com/quicwg/multipath/issues/246",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "qdeconinck"
      ],
      "labels": [
        "editorial"
      ],
      "body": "As raised by @kazuho in #236:\r\n\r\n> Maybe we should change \"packets of other encryption levels\" to \"types of packets.\"\r\n>\r\n> In RFC 9000, we talk about \"type of packets\" when clarifying when the frames can be used; see [section 12.4](https://www.rfc-editor.org/rfc/rfc9000#name-frames-and-frame-types).\r\n>\r\n> With the understanding that this is not the problem that the PR is trying to address, it might make sense to adjust the phrasing.\r\n>\r\n> This applies to the paragraph right above as well. It would suffice to drop the MUST NOT there, just state \"All the new frames MUST only be sent in 1-RTT.\"",
      "createdAt": "2023-07-04T09:35:15Z",
      "updatedAt": "2023-07-05T15:29:53Z",
      "closedAt": "2023-07-05T15:29:53Z",
      "comments": []
    },
    {
      "number": 248,
      "id": "I_kwDOGNtpaM5qlQ9_",
      "title": "Should NEW_TOKEN frames be scoped per path?",
      "url": "https://github.com/quicwg/multipath/issues/248",
      "state": "OPEN",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "yfmascgy"
      ],
      "labels": [
        "editorial"
      ],
      "body": "RFC 9000 Section 9.3 says that the server should send new address validation token (in NEW_TOKEN frames) after a successful migration event. When resuming a connection, this allows the client to pick the token associated with the correct path.\r\n\r\nThis doesn\u2019t work any more in multipath, as it\u2019s not clear which path a token is associated with. While we could define that NEW_TOKEN frames are associated with the path they\u2019re sent on, the general design principle of this document suggests to be explicit about it - i.e. add the path information to the frame itself.\r\n\r\nEither way, the document should probably provide some guidance regarding address validation tokens.",
      "createdAt": "2023-07-04T15:40:04Z",
      "updatedAt": "2023-07-08T07:36:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "RFC9000 specifies that \"Tokens sent in NEW_TOKEN frames MUST include information that allows the server to verify that the client IP address has not changed from when the token was issued.\" Thus, my understanding is that the token should be associated with the interface (or a client's IP address) rather than the path (or 4-tuple).",
          "createdAt": "2023-07-05T03:38:24Z",
          "updatedAt": "2023-07-05T03:38:24Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Regarding the issue, during the development of QUIC v1 I recall we discussed that endpoints can include in one token the information to validate multiple addresses (e.g., one cellular and one Wifi).\r\n\r\nWhat is stored in a token is up to each implementation, maybe all we need to do is state that endpoints may want to do so and call it a day.",
          "createdAt": "2023-07-05T03:52:21Z",
          "updatedAt": "2023-07-05T03:52:59Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That\u2019s neat, I like this approach. We should definitely add some text, but we don\u2019t need any protocol changes.",
          "createdAt": "2023-07-05T06:01:39Z",
          "updatedAt": "2023-07-05T06:01:39Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We can indeed leave it to the application, but there is still an issue of signalling. The token is tied to a source IP address. The server will verify that the source IP address of the incoming client-hello matches the source address programmed in the token. But the NEW_TOKEN frame does not convey that IP address. The client implementations have to guess which of their IP address that is. In RFC9000 implementations, the client will typically assume that the token is linked to the IP address used during the handshake. \r\n\r\nThe tempting solution is to defined a \"better\" new token frame that carries the IP address verified by the server, but I would rather not try to define that as part of the multipath extension. The issue also arise in basic RFC9000 after NAT rebinding or after path migration, which indicates we would be better of with a focused \"better new token\" extension, independent of multipath.\r\n\r\nI am also concerned that doing this \"better new token\" correctly assumes that the client knows which IP address it is using. For clients behind NAT, that's not obvious. Adding ways to learn that smells a lot like dipping into peer-to-peer support, which definitely seems out of scope for the multipath draft.\r\n\r\nFor now, we might simply note the issue and that the token is tied to the client IP address used during the handshake. That's a limitation, but that's the same limitation as RFC9000.",
          "createdAt": "2023-07-05T14:33:37Z",
          "updatedAt": "2023-07-05T14:33:37Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's explain and add a ref to RFC9000",
          "createdAt": "2023-07-05T16:07:08Z",
          "updatedAt": "2023-07-05T16:07:08Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@huitema \r\n> In RFC9000 implementations, the client will typically assume that the token is linked to the IP address used during the handshake.\r\n\r\nI'm not sure if that is the case. As @marten-seemann[ pointed out](https://github.com/quicwg/multipath/issues/248#issue-1788153727), [Section 9.3 of RFC 9000](https://quicwg.org/base-drafts/rfc9000.html#section-9.3-7) states quote: _After verifying a new client address, the server SHOULD send new address validation tokens (Section 8) to the client_.\r\n\r\nTherefore, the expectation that v1 clients have is that the token being issued is for the last active path that it used.\r\n\r\nBut in Multipath, we have more than one active path, there becomes an ambiguity regarding for to which one of the active paths is the token bound.\r\n\r\nFortunately, as [stated in my last comment](https://github.com/quicwg/multipath/issues/248#issuecomment-1620980862), there is nothing that prevents servers from issuing tokens carrying validation information for multiple paths.\r\n\r\nHence the proposal to document this as an implementation advice and proceed.",
          "createdAt": "2023-07-06T01:14:51Z",
          "updatedAt": "2023-07-06T01:15:42Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazuho Yes, you are right about the handling of migration in RFC 9000. Picoquic does not do that, because I like to keep things simple.\r\n\r\nI like your suggestion that if servers want to handle that, they can handle multi-address tokens. But that is still ambiguous for the client. The client maintains a store of tokens indexed by source address. If a token validates multiple addresses, how does the client know which ones? How does the client chose the token to use for the next connection?\r\n",
          "createdAt": "2023-07-06T01:56:07Z",
          "updatedAt": "2023-07-06T01:56:07Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@huitema I think that clients typically do not remember their source address. That's something that cannot be done easily in presence of NATs.\r\n\r\nI think the assumption we have is that clients retain tokens by their server names. FWIW, it's not even the server address; quoting from [RFC 9000 section 21.5.2](https://quicwg.org/base-drafts/rfc9000.html#section-21.5.2-5), _clients **could** avoid using NEW_TOKEN if the server address changes_ (emphasis mine).",
          "createdAt": "2023-07-06T02:31:44Z",
          "updatedAt": "2023-07-06T02:31:44Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's one of the reasons why I would rather keep it simple, just acknowledge the problem, and defer the solution to another extension...",
          "createdAt": "2023-07-06T04:03:03Z",
          "updatedAt": "2023-07-06T04:03:03Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Try to fix the issue in PR #260.",
          "createdAt": "2023-07-08T07:36:21Z",
          "updatedAt": "2023-07-08T07:36:21Z"
        }
      ]
    },
    {
      "number": 251,
      "id": "I_kwDOGNtpaM5qq7V7",
      "title": "Warning: Unused reference(s)",
      "url": "https://github.com/quicwg/multipath/issues/251",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [
        "Yanmei-Liu"
      ],
      "labels": [],
      "body": "Minor issue probably caused by other edits but consider removing these or insert text that refers to them\r\n\r\n```\r\n/multipath/draft-ietf-quic-multipath.xml(1306): Warning: Unused reference: There seems to be no reference to [I-D.bonaventure-iccrg-schedulers] in the document\r\n/multipath/draft-ietf-quic-multipath.xml(1337): Warning: Unused reference: There seems to be no reference to [QUIC-Invariants] in the document\r\n```",
      "createdAt": "2023-07-05T14:03:31Z",
      "updatedAt": "2023-07-07T07:02:13Z",
      "closedAt": "2023-07-07T07:02:13Z",
      "comments": []
    },
    {
      "number": 253,
      "id": "I_kwDOGNtpaM5qr4Oj",
      "title": "Review error codes",
      "url": "https://github.com/quicwg/multipath/issues/253",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "no-action-needed"
      ],
      "body": "Currently, MP_PROTOCOL_VIOLATION is used is for a too high CID seq num in the frame as well as the handshake error case if multipath is negotiated but no CID is present.\r\n\r\nHowever, we could also decided to define more specific error codes for one or both cases. ",
      "createdAt": "2023-07-05T16:19:15Z",
      "updatedAt": "2024-05-27T21:33:21Z",
      "closedAt": null,
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "> handshake error case if multipath is negotiated but no CID is present\r\n\r\nI think we use TRANSPORT_PARAMATER error? See https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-3-6. FWIW, my understanding is that use of such TRANSPORT_PARAMETER error is in line with us using TRANSPORT_PARAMETER error to indicate that zero CID was used in conjunction with the preferred_address Transport Parameter.\r\n\r\nRegarding if we need more errors, I do not think there is a need at the moment. All the use of MP_PROTOCOL_VIOLATION is related to semantic errors in the newly added frames, we have Frame Type and Reason Phrase in the CONNECTION_CLOSE frame to communicate the problem in detail.\r\n\r\nHonestly, I would not mind getting rid of MP_PROTOCOL_VIOLATION altogether considering that i) we have the Frame Type field to communicate which frame had a problem, and ii) for errors in the Connection ID sequence numbers being communicated inside RETIRE_CONNECTION_ID frame we use PROTOCOL_VIOLATION.",
          "createdAt": "2023-07-06T01:07:04Z",
          "updatedAt": "2023-07-06T01:07:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "We changed the handshake error to MP_PROTOCOL_VIOLATION in the editors copy yesterday based on the discussion at 116 as recorded in issue #157.\r\n\r\nHowever, I think we need a more high-level discussion about all error codes, there I opened this issue for more discussion at 117.",
          "createdAt": "2023-07-06T09:57:16Z",
          "updatedAt": "2023-07-06T09:57:16Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak Oh I missed that, thank you.\r\n\r\nRegarding if we should have more error codes, my two cents goes to not, as we can use the Frame Type field of the CONNECTION_CLOSE frame to figure out the cause.",
          "createdAt": "2023-07-06T10:27:02Z",
          "updatedAt": "2023-07-06T10:27:02Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Discussed in IETF 117, single MP-specific error code seems sufficient",
          "createdAt": "2023-07-25T16:52:07Z",
          "updatedAt": "2023-07-25T16:52:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@LPardue Actually, there was s slightly different conclusion. The current error happens during the handshake, possibly before the MP option was negotiated. Implementation that are not multipath capable will just send \"PROTOCOL_VIOLATION\" and document the frame type. That might be good enough for us too, and we may be able to get rid of the multipath specific error code.",
          "createdAt": "2023-07-25T17:42:48Z",
          "updatedAt": "2023-07-25T17:42:48Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "There are currently 4 case where we send an error code:\r\n\r\n1. multipath is negotiated but there is no CID(s) -> MP_PROTOCOL_VIOLATION\r\n2. Cipher suites with too short nonce -> TRANSPORT_PARAMETER \r\n3. multipath frame within wrong packet type -> FRAME_ENCODING_ERROR\r\n4. seq number of CID (used in a frame) was is not valid -> MP_PROTOCOL_VIOLATION\r\n\r\n@Lucas which error are you talking about?",
          "createdAt": "2023-07-25T18:28:07Z",
          "updatedAt": "2023-07-25T18:28:07Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@LPardue @huitema not sure what we need to do here. Any more input?",
          "createdAt": "2023-10-21T12:35:01Z",
          "updatedAt": "2023-10-21T12:35:01Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we need to change the spec now.",
          "createdAt": "2023-10-22T00:42:52Z",
          "updatedAt": "2023-10-22T00:42:52Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this issue? Are we happy with the current use of error codes?",
          "createdAt": "2023-11-03T14:57:21Z",
          "updatedAt": "2023-11-03T14:57:21Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What's the justification for having a dedicated MP_PROTOCOL_VIOLATION error? All other QUIC extensions so far have been using the standard PROTOCOL_VIOLATION error, instead of defining their own bespoke version.",
          "createdAt": "2023-11-03T15:51:47Z",
          "updatedAt": "2023-11-03T15:51:47Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "My take on the design philosophy of error codes in QUIC was a) an enpoint can always pick the most generic error code b) picking a more-specific error code is a kindness/affordance to the peer. An error code might help the receiver determine more quickly where a problem lies - but quite often these bugs are rare and easy to determine a root cause as long as awareness of _any_ issue is raised (e.g. I got a CONNECTION_CLOSE when hitting a server, and here is the repro URL)\r\n\r\nThis stuff is a bit subjective. \r\n\r\nI see 2 cases in the draft where MP_PROTOCOL_VIOLATION is used\r\n\r\n1) If an enable_multipath transport parameter is received and the carrying packet contains a zero length connection ID, the receiver MUST treat this as a connection error of type MP_PROTOCOL_VIOLATION and close the connection.\r\n\r\nThis is super easy to spot - its a critical error exceedingly early in a connection and its clear why the sender triggered it\r\n\r\n2) All multipath-specific frames relate to a Destination Connection ID sequence number. If an endpoint receives a Destination Connection ID sequence number greater than any previously sent to the peer, it MUST treat this as a connection error of type MP_PROTOCOL_VIOLATION.\r\n\r\nThis one doesn't seem as easy as the first. However, the endpoint that receives the bogus frame can just indicate the frame type in the CONNECTION_CLOSE. It might also say something in the reason phrase.\r\n\r\n\r\nOn balance, it feels to me that dropping MP_PROTOCOL_VIOLATION would not make anyone's lives too hard, while saving the overhead of defining and implementing the error code.",
          "createdAt": "2023-11-03T16:04:54Z",
          "updatedAt": "2023-11-03T16:05:49Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Having reviewed the document now again, I also think we should drop MP_PROTOCOL_VIOLATION and use PROTOCOL_VIOLATION instead.\r\n\r\nIf we really want a more specific error code for the zero-cid case, I think we should define an error code for that specifically. Additionally, we could also define a path_id_limit error (now with the explicit path id) if people think that would be useful...?",
          "createdAt": "2024-05-27T21:33:20Z",
          "updatedAt": "2024-05-27T21:33:20Z"
        }
      ]
    },
    {
      "number": 255,
      "id": "I_kwDOGNtpaM5qupOV",
      "title": "preferred_address and use of multipath frames",
      "url": "https://github.com/quicwg/multipath/issues/255",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "At the moment, we have following statements regarding preferred_address:\r\n* Inline with the definition in [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)] disable_active_migration also disables multipath support, except \"after a client has acted on a preferred_address transport parameter\" ([Section 18.2.](https://rfc-editor.org/rfc/rfc9000#section-18.2.) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)]). ([section 3](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-3-7))\r\n* If the server uses the preferred_address transport parameter, clients SHOULD NOT assume that the initial server address and the addresses contained in this parameter can be simultaneously used for multipath. ([section 4](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-4-1))\r\n\r\nWhat do they exactly mean?\r\n\r\nRegarding the first one, it sounds as if use of multipath frames incl. ACK_MP is prohibited on the original path if preferred_address TP is provided? But I do not think that in the intention.\r\n\r\n~~Second statement is hard to digest as well. Does it imply that a server might stop responding to packets sent to the original address once both the client and the server validates the preferred path?~~ EDIT: the second statement reflects [RFC 9000 Section 9.6.2](https://quicwg.org/base-drafts/rfc9000.html#section-9.6.2-4) stating that servers SHOULD drop newer packets received on the old IP address.",
      "createdAt": "2023-07-06T01:24:33Z",
      "updatedAt": "2023-07-10T02:36:44Z",
      "closedAt": "2023-07-10T02:36:44Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "In my view, we should state something like following:\r\n\r\n1. Allow use of multipath against the original address even in the presence of preferred_address TP. Server Preferred Address is an optional feature of QUIC. I do not think we need to make it a mandatory in Multipath.\r\n\r\n2. Once the client validates the path to the preferred address, it SHOULD retire all the paths established to the original address and MUST NOT open new paths to the original address.\r\n\r\nEDIT. We also need the following:\r\n\r\n3. When `disable_active_migration` TP exists, endpoints MUST NOT attempt to create new paths to the original server address (but otherwise use of multipath features (e.g., new frames) are allowed).",
          "createdAt": "2023-07-06T01:44:25Z",
          "updatedAt": "2023-07-06T01:53:34Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Another question is if we want to call it a handshake failure if the server sends `enable_multipath` and `disable_active_migration` but not `preferred_address`.\r\n\r\nBased on the fact that we send TRANSPORT_PARAMETER error when a zero-length CID is used, we might want to detect this case and call it an error as well.\r\n\r\nOTOH, considering that we will have a case where use multipath-specific frames will be allowed but establishment of new paths are prohibited (this happens when the server sends `enable_multipath`, `disable_active_migration`, `preferred_address` but the client fails to establish a path to the preferred address), maybe we should just conclude the handshake as success and continue.",
          "createdAt": "2023-07-06T02:00:14Z",
          "updatedAt": "2023-07-06T02:00:14Z"
        }
      ]
    },
    {
      "number": 261,
      "id": "I_kwDOGNtpaM5q-x_t",
      "title": "PATH_CHALLENGE as an explicit signal in path initialization.",
      "url": "https://github.com/quicwg/multipath/issues/261",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "no-action-needed"
      ],
      "body": "I think this issue repeats some of discussions we had earlier regarding using path_challenge as an explicit signal during a path creation. The inclusion of a client initiated path_challenge frame helps differentiate a path creation from a simultaneous NAT rebinding and CID rotation.\r\n\r\nMy question is do we want to state such a role of path_challenge more explicitly in this draft? I find people may still be confused about that, and such a sentence could clarify things a lot. Currently, in our implementation, yes, we use PATH_CHALLENGE as an explicit signal when creating a new path. The logic on the server is to first process a path_challenge_frame and if the server does not find a path associated with the in-coming packet's dcid, then try to create a new path and validate the client's address.",
      "createdAt": "2023-07-08T08:25:51Z",
      "updatedAt": "2023-11-03T14:58:58Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we should change the meaning of \"path challenge\" -- it has other use than path initialization. But I also think that we have an issue about the default state of paths. It would be nice to add a recommendation to bundle a \"path status\" with the \"path challenge\" when the client is probing a new path, so the peer knows whether the intended status is \"standby\" or \"available\".",
          "createdAt": "2023-07-09T15:31:11Z",
          "updatedAt": "2023-07-09T15:31:11Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We also have the related issue #188: packets that arrive on a new path and do not contain a PATH CHALLENGE frame.",
          "createdAt": "2023-07-09T15:34:07Z",
          "updatedAt": "2023-07-09T15:34:07Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "> I don't think we should change the meaning of \"path challenge\" -- it has other use than path initialization. But I also think that we have an issue about the default state of paths. It would be nice to add a recommendation to bundle a \"path status\" with the \"path challenge\" when the client is probing a new path, so the peer knows whether the intended status is \"standby\" or \"available\".\r\n\r\n@huitema this part is addresses now with PR #277\r\n\r\n@yfmascgy is there anything else we want to do here or can we close this issue?",
          "createdAt": "2023-10-21T12:22:30Z",
          "updatedAt": "2023-10-21T12:22:30Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "As proposed in #180, path setup should be really explicit and not just some overloaded semantics of the `PATH_CHALLENGE` frame. A `PATH_SETUP` frame can't be misunderstood and would include all necessary information, including the initial path status.",
          "createdAt": "2023-10-23T13:12:39Z",
          "updatedAt": "2023-10-23T13:12:39Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this issue?",
          "createdAt": "2023-11-03T14:58:52Z",
          "updatedAt": "2023-11-03T14:58:52Z"
        }
      ]
    },
    {
      "number": 262,
      "id": "I_kwDOGNtpaM5rFwVo",
      "title": "Do we need more guidance for clients on use of tokens?",
      "url": "https://github.com/quicwg/multipath/issues/262",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial"
      ],
      "body": "We recently added the following text:\r\n\r\n```\r\nAs specified in {{Section 9.3 of QUIC-TRANSPORT}}, the server is expected send a new\r\naddress validation token to a client following the successful validation of a\r\nnew client address. In situations where multiple paths are activated, the\r\nclient may be recipient of several tokens, each tied to a different address.\r\nWhen considering using a token for subsequent connections, the client ought to\r\ncarefully select the token to use, due to the inherent ambiguity associated\r\nwith determining the exact address to which a token is bound. To alleviate such a\r\ntoken ambiguity issue, a server may issue a token that is capable of validating\r\nany of the previously validated addresses.\r\n```\r\n\r\nHowever, maybe we need more guidance for client on usage. E.g. always use the last one...? Or maybe we need any normative text here?",
      "createdAt": "2023-07-10T12:27:15Z",
      "updatedAt": "2023-11-14T07:12:30Z",
      "closedAt": "2023-11-14T07:12:30Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "That's a good point. Yes, it might be a good idea to give more advice here.\r\n\r\nRegarding if we need normative text, [RFC 9000 section 8.1.3](https://quicwg.org/base-drafts/rfc9000.html#section-8.1.3-9) has the following statement:\r\n> Clients might receive multiple tokens on a single connection. Aside from preventing linkability, any token can be used in any connection attempt. Servers can send additional tokens to either enable address validation for multiple connection attempts or replace older tokens that might become invalid. For a client, this ambiguity means that sending the most recent unused token is most likely to be effective. Though saving and using older tokens have no negative consequences, clients can regard older tokens as being less likely to be useful to the server for address validation.\r\n\r\nIt is handwavy indeed, but maybe just having a link to this section is sufficient, as nothing has changed from QUIC v1 in terms of having multiple paths on any of which a connection can be resumed.",
          "createdAt": "2023-07-22T19:01:11Z",
          "updatedAt": "2023-07-22T19:01:11Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I added a ref in PR #289. I think we can close this issue after merge.",
          "createdAt": "2023-11-03T15:02:56Z",
          "updatedAt": "2023-11-03T15:02:56Z"
        }
      ]
    },
    {
      "number": 266,
      "id": "I_kwDOGNtpaM5sSw-U",
      "title": "Path state machine needs per direction clarification for closing",
      "url": "https://github.com/quicwg/multipath/issues/266",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question",
        "editorial"
      ],
      "body": "The state machine figure for paths in Path States should have closing paths depending if the endpoint is initiating it or receiving a path_abandon. That would make the discussion much clearer. ",
      "createdAt": "2023-07-22T18:37:52Z",
      "updatedAt": "2023-11-03T15:03:30Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Are you suggestion we split the transition from \"Active\" to \"Closing\" into two branches in the figure?",
          "createdAt": "2023-08-07T01:04:40Z",
          "updatedAt": "2023-08-07T01:04:40Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@gloinul ping!",
          "createdAt": "2023-11-03T15:03:30Z",
          "updatedAt": "2023-11-03T15:03:30Z"
        }
      ]
    },
    {
      "number": 267,
      "id": "I_kwDOGNtpaM5shrzz",
      "title": "Key life time tracking",
      "url": "https://github.com/quicwg/multipath/issues/267",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "editorial",
        "needs PR"
      ],
      "body": "So the different cipher algorithms have different life time in how many invocations or total amount of encryption blocks that can be safely processed. For example AES GCM TLS states in RFC 8446:\r\n\r\nFor AES-GCM, up to 2^24.5 full-size records (about 24 million) may be\r\n   encrypted on a given connection while keeping a safety margin of\r\n   approximately 2^-57 for Authenticated Encryption (AE) security.  For\r\n   ChaCha20/Poly1305, the record sequence number would wrap before the\r\n   safety limit is reached.\r\n\r\nWhen using multipath this limit is across all paths as they use the same key, only ensure unique NONCE input to avoid any two-time pads. Thus, I think the document needs to note that the implementation will have to track their key-usage based on the cipher across all the paths. ",
      "createdAt": "2023-07-25T17:10:39Z",
      "updatedAt": "2023-11-03T15:04:17Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@gloinul Why do you think we need to state anything in addition to what the base QUIC spec is doing?",
          "createdAt": "2023-10-21T12:24:05Z",
          "updatedAt": "2023-10-21T12:24:05Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "Because your key-limit tracking implementation may not have been implemented to support the usage of multiple Nonces and could therefore easily fail. Therefore an informational statement in the security consideration would be good to help ensure that implementors verify that their implementation count invocations independent of nonce for a key.  ",
          "createdAt": "2023-10-23T08:55:30Z",
          "updatedAt": "2023-10-23T08:55:30Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@gloinul Makes sense. I think our advice should be based on the numbers written in [RFC 9001 B.1.1.](https://datatracker.ietf.org/doc/html/rfc9001#name-confidentiality-limit) but otherwise I concur.",
          "createdAt": "2023-10-23T13:56:21Z",
          "updatedAt": "2023-10-23T13:56:21Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "Sure, pointing to that the limits in RFC 9001 B.1.1 applies to all the paths is likely all that is needed. And it is not really a conflict, just clarification that with \"connection\" we mean the sum of all transmitted on all paths. ",
          "createdAt": "2023-10-23T14:00:07Z",
          "updatedAt": "2023-10-23T14:00:07Z"
        }
      ]
    },
    {
      "number": 268,
      "id": "I_kwDOGNtpaM5sjMRF",
      "title": "Should PATH_STATUS be an extension?",
      "url": "https://github.com/quicwg/multipath/issues/268",
      "state": "CLOSED",
      "author": "ehaydenr",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "While PATH_STATUS with active/standby may satisfy a particular use case, does it make sense to include in the core MPQUIC draft? My concerns are:\r\n- Given PATH_STATUS's limited expressibility, will applications instead almost always reach for some future extension?\r\n- Will new extensions need to consider how they interact with PATH_STATUS? Do they complement PATH_STATUS? Override it? This seems avoidable if PATH_STATUS is broken out.",
      "createdAt": "2023-07-25T21:14:10Z",
      "updatedAt": "2023-07-26T18:33:54Z",
      "closedAt": "2023-07-26T17:54:05Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The PATH_STATUS as currently defined solves a very real issue. Take the classic Wi-Fi + cellular scenario. Both work, but the cellular traffic is expensive, so the client wants to tell the server to keep it ready, but not use it unless it is the only remaining solution. RFC 9000 solves that with the \"validating traffic\" trick: the client sends data on the path that it wants to use, and the server deduces that it should sending on that path too. But this is a brittle solution. Having explicit signals like \"this path is available\" or \"keep this path on standby\" solves that in a much more robust way.\r\n\r\nAnd yes, we will probably see extensions. For example, we heard a talk making the case for \"use this path but only for priority traffic\", which is a different way of making a path available.",
          "createdAt": "2023-07-25T21:45:05Z",
          "updatedAt": "2023-07-25T21:45:05Z"
        },
        {
          "author": "ehaydenr",
          "authorAssociation": "NONE",
          "body": "Thanks for the additional context - particularly your point about how things are implicit in RFC 9000 (something that no longer really works in a multipath world).\r\n\r\nThinking further about my second point, I imagine extensions could maintain compatibility with PATH_STATUS by simply excluding \"standby\" paths from the set of paths to make scheduling decisions over. ",
          "createdAt": "2023-07-26T17:54:05Z",
          "updatedAt": "2023-07-26T17:54:05Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The multipath specification already says that: only schedule data traffic on the paths that are deemed available, not on the standby paths, unless there are no available paths.",
          "createdAt": "2023-07-26T18:33:54Z",
          "updatedAt": "2023-07-26T18:33:54Z"
        }
      ]
    },
    {
      "number": 269,
      "id": "I_kwDOGNtpaM5tNAo0",
      "title": "Do we allow the server to actively stop sending?",
      "url": "https://github.com/quicwg/multipath/issues/269",
      "state": "CLOSED",
      "author": "nandsky",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "no-action-needed"
      ],
      "body": "As described in [4.3.1. ](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-4.3.1)[Use PATH_ABANDON Frame to Close a Path](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-use-path_abandon-frame-to-c)\r\n\r\n> Both endpoints, namely the client and the server, can initiate path closure, by sending a PATH_ABANDON frame (see [Section 8.2](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#path-abandon-frame)) which requests the peer to stop sending packets with the corresponding Destination Connection ID.\r\n\r\n> Usually, it is expected that the PATH_ABANDON frame is used by the client to indicate to the server that path conditions have changed such that the path is or will be not usable anymore, e.g. in case of a mobility event. The PATH_ABANDON frame therefore recommends to the receiver that no packets should be sent on that path anymore.\r\n\r\nThis means that PATH_ABANDON frame like **abort_reading** for the sender side, just like the RESET_STREAM frame does on the quic stream layer.\r\n\r\nAnd described in [6.2. ](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-6.2)[Path Closure](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-path-closure)\r\n\r\n> In this example, the client detects the network environment change (client's 4G/Wi-Fi is turned off, Wi-Fi signal is fading to a threshold, or the quality of RTT or loss rate is becoming worse) and wants to close the initial path.\r\n\r\nFor a specific 4-tuple, the sending and receiving paths of packets are not alway the same.  \r\nIn the scenario of HTTP file download, **the server can better understand the quality of  RTT or loss rate.**  So do we allow the server to **actively** stop sending and notify the peer?  \r\n\r\nMaybe a special frame similar to the STOP_SENDING frame is needed in multi-path quic?\r\n",
      "createdAt": "2023-08-01T22:41:04Z",
      "updatedAt": "2023-11-03T16:02:56Z",
      "closedAt": "2023-11-03T16:02:30Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The current draft already gives you the mechanism to do so. A server can use path_status frame to set the path to standby and also use path_abandon to close the path when necessary.",
          "createdAt": "2023-08-07T00:58:47Z",
          "updatedAt": "2023-08-07T00:58:47Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this is issue as PATH_STATUS (or new PATH_STANDBY) can be used or do we need to add some editorial explanation?",
          "createdAt": "2023-10-20T09:22:27Z",
          "updatedAt": "2023-10-20T09:22:27Z"
        },
        {
          "author": "nandsky",
          "authorAssociation": "NONE",
          "body": "> Can we close this is issue as PATH_STATUS (or new PATH_STANDBY) can be used or do we need to add some editorial explanation?\r\n\r\nAs you mentioned in https://github.com/quicwg/multipath/issues/218#issuecomment-1614940172, \r\n> That means it always the receiver that informs the sender. Note that as we don't have a path identified anymore the PATH_STATUS information in unidirectional and therefore it is possible that one peer says it okay to send on a certain path, while the other end does not what to receive anything on that same path.\r\n\r\nSo, \r\n1. If the receiver does not want to receive packets on a path, he can use PATH_STANDBY to notify the sender to stop sending on that path identified by the Destination Connection ID Sequence Number. The Destination Connection ID Sequence Number is generated by the receiver and passed to the sender via NEW_CONNECTION_ID or initial packet.\r\n2. The draft does not specify whether the sender can send PATH_STANDBY frame. The sender decides which path to send packets on according to the scheduling algorithm, and even if the sender wants to abandon a certain outbound path, it does not need to notify the receiver.\r\n3. Assuming the sender actually sent the PATH_STANDBY frame to the receiver, does this mean that the sender does not want to receive packets identified by the Destination Connection ID Sequence Number of PATH_STANDBY from receiver?\r\n\r\nplease correct me if I am wrong",
          "createdAt": "2023-10-26T08:38:13Z",
          "updatedAt": "2023-10-26T08:38:13Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, it always the receiver that sends the PATH_STANDBY frame to inform the sender that it doesn't want to receive anything on a path. The sender does not need to tell the receiver that it decided to not send anything, it can just do it.\r\n\r\nCan we close this issue?",
          "createdAt": "2023-11-03T15:07:35Z",
          "updatedAt": "2023-11-03T15:07:35Z"
        },
        {
          "author": "nandsky",
          "authorAssociation": "NONE",
          "body": "ok, we can close this issue, thanks\r\n",
          "createdAt": "2023-11-03T16:02:56Z",
          "updatedAt": "2023-11-03T16:02:56Z"
        }
      ]
    },
    {
      "number": 270,
      "id": "I_kwDOGNtpaM5tkU55",
      "title": "The definition of path",
      "url": "https://github.com/quicwg/multipath/issues/270",
      "state": "CLOSED",
      "author": "nandsky",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "no-action-needed"
      ],
      "body": "As described in [1. ](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-1)[Introduction](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-introduction)\r\n\r\n> A path is determined by the 4-tuple of source and destination IP address as well as source and destination port. Therefore, there can be at most one active paths/connection ID per 4-tuple.\r\n\r\nAnd @kazuho also discussed about this definition in  https://github.com/quicwg/multipath/issues/233#issuecomment-1614032733\r\n\r\n> If I understand correctly, paths as defined by the multipath draft are identified by the 4-tuple. Each endpoints retain their mapping of DCIDs and paths. Loss recovery and congestion control are also handled by the 4-tuple.\r\n\r\n**My question is whether it is possible to define path only with destination IP and port?**\r\n\r\n1. multipath is a sender strategy to improve sending efficiency like congestion control. When I implement multipath, I just send the frame datas to different destination address (ip and port) and don't care about the source address.\r\n\r\n2. In nginx implmentation, the object receving quic packets is called [ngx_quic_socket_t](https://github.com/nginx/nginx/blob/1c6183725247024f1bca73ac9a833098af7558af/src/event/quic/ngx_event_quic_connection.h#L108C15-L108C15) which associated with the server cid, the object sending the message is called [ngx_quic_path_t](https://github.com/nginx/nginx/blob/1c6183725247024f1bca73ac9a833098af7558af/src/event/quic/ngx_event_quic_connection.h#L86C1-L86C25) which is associated with the client cid. From a server perspective, a path object can be identified by the cid generated by the client, and the path object don't care about the source address.\r\n\r\n",
      "createdAt": "2023-08-06T14:57:20Z",
      "updatedAt": "2023-11-03T16:12:09Z",
      "closedAt": "2023-11-03T16:12:08Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Look at what happens when a mobile devices establishes two paths to a server, one for Wi-Fi and one for Cellular. In both cases, the packets are sent to a single destination address, that of the server. But there are two paths. Devices solve that either by using several UDP sockets bound to different local addresses, or by setting the source address option in calls to `sendmsg()`.",
          "createdAt": "2023-08-07T00:07:23Z",
          "updatedAt": "2023-08-07T00:07:23Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> As described in [1. ](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-1)[Introduction](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-introduction)\r\n> \r\n> > A path is determined by the 4-tuple of source and destination IP address as well as source and destination port. Therefore, there can be at most one active paths/connection ID per 4-tuple.\r\n> \r\n> And @kazuho also discussed about this definition in [#233 (comment)](https://github.com/quicwg/multipath/issues/233#issuecomment-1614032733)\r\n> \r\n> > If I understand correctly, paths as defined by the multipath draft are identified by the 4-tuple. Each endpoints retain their mapping of DCIDs and paths. Loss recovery and congestion control are also handled by the 4-tuple.\r\n> \r\n> **My question is whether it is possible to define path only with destination IP and port?**\r\n> \r\n> 1. multipath is a sender strategy to improve sending efficiency like congestion control. When I implement multipath, I just send the frame datas to different destination address (ip and port) and don't care about the source address.\r\n> 2. In nginx implmentation, the object receving quic packets is called [ngx_quic_socket_t](https://github.com/nginx/nginx/blob/1c6183725247024f1bca73ac9a833098af7558af/src/event/quic/ngx_event_quic_connection.h#L108C15-L108C15) which associated with the server cid, the object sending the message is called [ngx_quic_path_t](https://github.com/nginx/nginx/blob/1c6183725247024f1bca73ac9a833098af7558af/src/event/quic/ngx_event_quic_connection.h#L86C1-L86C25) which is associated with the client cid. From a server perspective, a path object can be identified by the cid generated by the client, and the path object don't care about the source address.\r\n\r\nYour problem there was a confusion of path definition with path identification. For path definition, you need 4-tuple. Otherwise, there is going to be the ambiguity issue as Christian just mentioned.  When you have path established, you can surely identify a path using cid, which is also specified in the draft.",
          "createdAt": "2023-08-07T00:52:12Z",
          "updatedAt": "2023-08-07T00:52:12Z"
        },
        {
          "author": "nandsky",
          "authorAssociation": "NONE",
          "body": "> Look at what happens when a mobile devices establishes two paths to a server, one for Wi-Fi and one for Cellular. In both cases, the packets are sent to a single destination address, that of the server. But there are two paths. Devices solve that either by using several UDP sockets bound to different local addresses, or by setting the source address option in calls to `sendmsg()`.\r\n\r\n@huitema Thank you for reply, I should also think about this from the client(the path of initiator)'s perspective.",
          "createdAt": "2023-08-07T01:18:21Z",
          "updatedAt": "2023-08-07T01:24:01Z"
        },
        {
          "author": "nandsky",
          "authorAssociation": "NONE",
          "body": "@huitema @yfmascgy Actually I'm always confused about these descriptions of 4-tuple, connection id used by server but provide by client, or vice versa and the direction of path_abandon.\r\n\r\n1. In contrast with client (path of initiator) needs bind to different source IP and port in UDP layer, server only needs destination IP and port, so if 4-tuple consists of client ip and port as well as server ip and port, it seems only client ip and port will be used in multipath?\r\n\r\n2. As describe in [1. ](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-1)[Introduction](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-introduction)\r\n>If the 4-tuple changes without the use of a new connection ID (e.g. due to a NAT rebinding), this is considered as a migration event.\r\n\r\nIn the NAT-rebinding scenario, only the source ip and port of client changed instead of 4-tuple in server perspective.\r\n\r\n3. The direction of PATH_ABANDON\r\nWill sending PATH_ABANDON from server to client with cid provided by server triggers the path (4-tuple?) to close? If this action is proposed by multipath, it seems we need to keep the mapping relationship between cid provided by server and cid provide by client, but RFC9000 does not require this. I asked a similar question in #269 .\r\n",
          "createdAt": "2023-08-07T17:02:54Z",
          "updatedAt": "2023-08-07T17:06:40Z"
        },
        {
          "author": "nandsky",
          "authorAssociation": "NONE",
          "body": "I am trying to implement multipath based on NGINX QUIC, and the model is as follows:\r\n \r\n![mpquic](https://github.com/quicwg/multipath/assets/10154791/41088be1-38e1-4904-a58e-9a4712297382)\r\n\r\nannotations:\r\n1. This model is based on NGINX QUIC implementation, with the following mapping relationship:\r\n  a. QUIC SM: ngx_quic_connection_t\r\n  b. socket: ngx_quic_socket_t\r\n  c. path: ngx_quic_path_t\r\n  d. send_ctx: ngx_quic_send_ctx_t\r\n  e. recv_ctx: splits from ngx_quic_send_ctx\r\n2. This model splits 4-tuple into serverCID-bound RX and clientCID-bound TX, which generally differ in number.\r\n\r\n**\"A path is determined by the 4-tuple of source and destination IP address\"**, this sentence implies that a path object needs to contain 4-tuple, but in fact, as shown in the above model, splitting the 4-tuple object into TX and RX is more flexible. So, can the draft weaken the relationship between path and 4-tuple?\r\n",
          "createdAt": "2023-10-25T09:41:57Z",
          "updatedAt": "2023-10-25T09:41:57Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "> \"A path is determined by the 4-tuple of source and destination IP address\", this sentence implies that a path object needs to contain 4-tuple, but in fact, as shown in the above model, splitting the 4-tuple object into TX and RX is more flexible. So, can the draft weaken the relationship between path and 4-tuple?\r\n\r\nFrom the protocol perspective the path has two ends and is bidirectional. From the server perspective, its an endpoint and can discard some of the dual endpoint considerations. It is natural for implementations to split Reception and Transmission, that's a common design pattern. \r\n\r\nI don't see any issue with the current definition of path; implementations are free to model that how they see fit.",
          "createdAt": "2023-11-03T15:24:28Z",
          "updatedAt": "2023-11-03T15:24:28Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this issue?",
          "createdAt": "2023-11-03T15:26:39Z",
          "updatedAt": "2023-11-03T15:26:39Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "I'm not seeing any action to take.",
          "createdAt": "2023-11-03T15:28:03Z",
          "updatedAt": "2023-11-03T15:28:03Z"
        },
        {
          "author": "nandsky",
          "authorAssociation": "NONE",
          "body": "Thanks to everyone for explaining this to me. yes, we can close this issue.",
          "createdAt": "2023-11-03T16:12:08Z",
          "updatedAt": "2023-11-03T16:12:08Z"
        }
      ]
    },
    {
      "number": 271,
      "id": "I_kwDOGNtpaM5wKgSX",
      "title": "Discussion: Remove ACK_MP frame from draft-ietf-quic-multipath \uff1f",
      "url": "https://github.com/quicwg/multipath/issues/271",
      "state": "OPEN",
      "author": "iyangsj",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "duplicate",
        "no-action-needed"
      ],
      "body": "Briefly, the argument is as follows\uff1a\r\n- The ACP_MP frame is not essential for multipath transport.\r\n- Adding ACK_MP raises several design and implementation issues that need to be more thoroughly investigated.\r\n\r\nPerhaps a better approach would be to follow the KISS principle\uff1a\r\n- Use the ACK frame to acknowledge the received packets, which should be sent on the same path\uff08Similar to the MPTCP).\r\n- However, we do not prevent future extensions from defining ACK_MP, and using it requires negotiation.\r\n",
      "createdAt": "2023-09-05T11:41:46Z",
      "updatedAt": "2023-11-07T03:17:55Z",
      "closedAt": null,
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Seems like a dupe of https://github.com/quicwg/multipath/issues/181, which was closed. Have you got any additional points that were not already addressed there?",
          "createdAt": "2023-09-05T14:19:23Z",
          "updatedAt": "2023-09-05T14:19:23Z"
        },
        {
          "author": "iyangsj",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@LPardue Thank you for such helpful information. \r\nIt is challenging to achieve a simpler and more elegant solution without making some trade-offs on requirements and suitable changes to conceptual models.\r\nI would like to provide a detailed description later.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2023-09-06T12:05:32Z",
          "updatedAt": "2023-09-06T12:05:32Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Got it. To be clear, since #181 is now resolved it reflects the established consensus of the group. Therefore, the bar to reconsidering that consensus and making any changes is going to be higher. We'd be looking for convincing new arguments in a timely manner in order to revisit this matter.",
          "createdAt": "2023-09-06T12:32:20Z",
          "updatedAt": "2023-09-06T12:32:20Z"
        },
        {
          "author": "iyangsj",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The conceptual models of both QUIC and MPQUIC connections are similar because NAT rebinding occurs in both cases (as illustrated in the figure below). However, a QUIC connection is a simplified version of an MPQUIC connection, as it consists of only one master path, whereas an MPQUIC connection can include one or more master paths.\r\n\r\n![MPQUIC-conceptual-model](https://github.com/quicwg/multipath/assets/780807/467625c6-3312-4485-bcf1-548aabc584c0)\r\n\r\n(Note: The Initial/Handshake packet number spaces, which are discarded after the handshake is complete, have been omitted for clarity.)\r\n\r\nThe multipath mechanism is mostly consistent with the [draft-ietf-quic-multipath](https://datatracker.ietf.org/doc/html/draft-ietf-quic-multipath), but some differences are emphasized as follows:\r\n* The master path and its slave paths in a QUIC/MPQUIC connection are collectively referred to as XPATH.  In other words, an XPATH consists of multiple paths, but only one of them is used for transmitting non-probing packets. The simultaneous transmission of non-probing frames on multiple **XPATH**s is allowed in an MPQUIC connection.\r\n* Require the use of non-zero Connection IDs in both directions. An endpoint MUST use different Connection IDs on different **XPATH**s. If the 4-tuple changes without the use of a new connection ID (e.g. due to a NAT rebinding), this is considered as a migration event.\r\n* Use the ACK frame to acknowledge the received packets, which should be sent on the same **XPATH**. However, we do not prevent future extensions from defining ACK_MP, and using it requires negotiation.\r\n\r\n\r\nAdvantages of the proposed approach:\r\n- It is easy to understand and implement.\r\n- It avoids introducing unnecessary problems, such as ACK ambiguity, RTT estimation, large deviation with QUIC, etc.\r\n- It does not prevent future extensions from defining ACK_MP for further improvement. \r\n  - The usage of ACK_MP may not be necessary in all scenarios where the ACK frame is used, such as packet acknowledgment, loss detection, reception history updating, RTT estimation, and various algorithms that rely on ACK.\r\n\r\n",
          "createdAt": "2023-09-07T10:15:01Z",
          "updatedAt": "2023-09-07T10:15:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "In issue #181 it was already decided that it is better to be explicit and use ACK_MP. This also enables sending ACK over different paths which is seem as a feature, e.g. always using the lowest latency path. I don't see any new issue or concern raised here. Therefore I propose to close this issue with no action.",
          "createdAt": "2023-11-03T15:12:49Z",
          "updatedAt": "2023-11-03T15:12:49Z"
        },
        {
          "author": "iyangsj",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">In issue https://github.com/quicwg/multipath/issues/181 it was already decided that it is better to be explicit and use ACK_MP. This also enables sending ACK over different paths which is seem as a feature, e.g. always using the lowest latency path.\r\n\r\nThe existing design choice for ACK_MP is rooted in the per-path-per-pns model. Under this model, it seems there's no better design than what we currently have.\r\n\r\n\r\n>  I don't see any new issue or concern raised here.\r\n\r\nThe present solution introduces unnecessary issues, such as ACK ambiguity, RTT estimation, large deviation from QUIC. Even worse, some algorithms that rely on ACK from the same path might not perform well. \r\n\r\nIf we properly design the conceptual model, we can find a simpler and more feasible design that avoids these extra problems.  \r\n",
          "createdAt": "2023-11-03T16:33:06Z",
          "updatedAt": "2023-11-03T16:33:06Z"
        },
        {
          "author": "iyangsj",
          "authorAssociation": "CONTRIBUTOR",
          "body": "**CASE A**:\r\n\r\n![CASE-A](https://github.com/quicwg/multipath/assets/780807/e555b809-4588-4d41-a9db-814a8fc3a21f)\r\n\r\n- The `Sender` uses the BBR algorithm for both path A and path B.\r\n- The `Receiver` replies ACK frames  **only** on path A.\r\n\r\n\r\n> The simplest implementation is to compute smoothedRTT and RTTvar per [Section 5.3](https://rfc-editor.org/rfc/rfc9002#section-5.3) of [[QUIC-RECOVERY](https://www.rfc-editor.org/rfc/rfc9002)] regardless of the path through which MP_ACKs are received. This algorithm will provide good results, except if the set of paths changes and the ACK_MP sender revisits its sending preferences.\r\n\r\n\r\n- If the `BBR B` computes smoothedRTT regardless of the path through which MP_ACKs are received, it will underestimate the RTT and send data at a lower rate.\r\n\r\n\r\n",
          "createdAt": "2023-11-06T07:30:03Z",
          "updatedAt": "2023-11-06T07:55:28Z"
        },
        {
          "author": "iyangsj",
          "authorAssociation": "CONTRIBUTOR",
          "body": "**CASE B:**\r\n\r\n![CASE B](https://github.com/quicwg/multipath/assets/780807/dad0b805-e44f-4848-8046-fd9c54836736)\r\n\r\n- The Sender uses the COPA algorithm for both path A and path B.\r\n- The Receiver replies ACK frames **only** on path A.\r\n\r\n> The simplest implementation is to compute smoothedRTT and RTTvar per [Section 5.3](https://rfc-editor.org/rfc/rfc9002#section-5.3) of [[QUIC-RECOVERY](https://www.rfc-editor.org/rfc/rfc9002)] regardless of the path through which MP_ACKs are received. This algorithm will provide good results, except if the set of paths changes and the ACK_MP sender revisits its sending preferences.\r\n\r\n- When path A is congested, `COPA B` may inaccurately estimate the queueing delay for path B and improperly decrease the sending rate.\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2023-11-06T07:44:49Z",
          "updatedAt": "2023-11-07T03:17:55Z"
        }
      ]
    },
    {
      "number": 272,
      "id": "I_kwDOGNtpaM5xY0mf",
      "title": "When to send PATH_STATUS",
      "url": "https://github.com/quicwg/multipath/issues/272",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has PR"
      ],
      "body": "Is an endpoint allowed to send PATH_STATUS frames for DCID=X before it observes X being used?\r\n\r\nI think it would be natural especially for servers to bundle a NEW_CONNECTION_ID frame of DCID=X and a PATH_STATUS frame of DCID=X. That's the easiest way of declaring that all paths can be used for sending data.\r\n\r\nHowever, the draft is vague if such behavior is allowed, or if it is forbidden to send PATH_STATUS frames before receiving a packet that uses that DCID value.\r\n\r\nHence opening the issue.",
      "createdAt": "2023-09-19T06:57:31Z",
      "updatedAt": "2023-10-22T09:47:15Z",
      "closedAt": "2023-10-22T09:47:14Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we briefly discussed this at the last meeting and yes, I think we should allow this and yes, I think we should be more explicit in the text.",
          "createdAt": "2023-10-17T17:29:01Z",
          "updatedAt": "2023-10-17T17:29:01Z"
        }
      ]
    },
    {
      "number": 273,
      "id": "I_kwDOGNtpaM50UBxs",
      "title": "Should we disable CID rotation on opened paths when multipath is negotiated?",
      "url": "https://github.com/quicwg/multipath/issues/273",
      "state": "CLOSED",
      "author": "yangfurong",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The current draft (05) allows endpoints to change the CIDs of paths at any time. However, as each CID has its own PNS, this makes implementing MPQUIC more complicated and leads to sub-optimal performance in some cases.\r\n\r\nIn the following examples (Figure-1 & Figure-2), when NAT-rebinding happens on path-1, we have to create new PNSs that are associated with new CIDs,  associate the new PNSs with path-1, and simultaneously maintain both the old and new PNSs for some time (the old PNSs should not be released immediately for performance consideration as there could be unacked/inflight pkts). \r\n\r\nEven worse, if the client rotates the CID of path-1 after an idle period and NAT rebinding happens simultaneously, path-1 will experience a long timeout and be closed (Figure-3). If the client wants to resume the transmission on path-1, it has to reopen it.\r\n\r\nThe above issues are solved if we disable CID rotation on opened paths (Figure-4, Figure-5, and Figure-6): 1. No need to do the complicated management of multiple PNSs for each path; 2. CID rotation and NAT rebinding will never happen at the same time. \r\n\r\nThis actually simplifies the implementation of MPQUIC in practice. But, I am not sure if it will introduce other problems. \r\n\r\n**Figure-1**\r\n![Figure-1](https://github.com/quicwg/multipath/assets/10102895/f68395c8-cfa5-48cb-b63a-b8df55ce84df)\r\n\r\n**Figure-2**\r\n![Figure-2](https://github.com/quicwg/multipath/assets/10102895/c69e5e6a-ded3-469f-bbc3-b9eb950f282f)\r\n\r\n**Figure-3**\r\n![Figure-3](https://github.com/quicwg/multipath/assets/10102895/42feaff1-8e58-4ac8-812c-b6a41496a8bc)\r\n\r\n**Figure-4**\r\n![Figure-4](https://github.com/quicwg/multipath/assets/10102895/30774837-23d8-4197-90f3-e2fa5700f140)\r\n\r\n**Figure-5**\r\n![Figure-5](https://github.com/quicwg/multipath/assets/10102895/b1e03a7f-01a8-4802-aa0e-e24e3e218431)\r\n\r\n**Figure-6**\r\n![Figure-6](https://github.com/quicwg/multipath/assets/10102895/3183e272-b62b-4031-b71f-c78e3248db90)\r\n\r\n",
      "createdAt": "2023-10-19T06:40:23Z",
      "updatedAt": "2023-11-03T15:14:38Z",
      "closedAt": "2023-11-03T15:14:37Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The ability to change CID is a privacy feature. I think we want to retain that characteristic from QUIC. Unfortunately it makes things complicated but I don't think disability it is an option.",
          "createdAt": "2023-10-19T12:20:52Z",
          "updatedAt": "2023-10-19T12:20:52Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 to Mirja.",
          "createdAt": "2023-10-19T12:39:03Z",
          "updatedAt": "2023-10-19T12:39:03Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@yangfurong Thanks for pointing this out. Performance wise, the CID & port change at the same time could be a bummer. But I think the privacy concern and thus the ability to change CID should come first. Can we think about how can we fast detect the simultaneous CID & port change so we can quickly close the path in your figure 3?",
          "createdAt": "2023-10-19T15:50:38Z",
          "updatedAt": "2023-10-19T15:50:38Z"
        },
        {
          "author": "yangfurong",
          "authorAssociation": "NONE",
          "body": "> @yangfurong Thanks for pointing this out. Performance wise, the CID & port change at the same time could be a bummer. But I think the privacy concern and thus the ability to change CID should come first. Can we think about how can we fast detect the simultaneous CID & port change so we can quickly close the path in your figure 3?\r\n\r\nPerhaps, the client could send a PC as the first packet after rotating the CID of an existing path. If the client's address does not change, challenging the server's address has no side effect. But, if the client's address does change, the server will take this PC as a signal to open a new path. ",
          "createdAt": "2023-10-20T03:00:07Z",
          "updatedAt": "2023-10-20T03:00:07Z"
        },
        {
          "author": "yangfurong",
          "authorAssociation": "NONE",
          "body": "> > @yangfurong Thanks for pointing this out. Performance wise, the CID & port change at the same time could be a bummer. But I think the privacy concern and thus the ability to change CID should come first. Can we think about how can we fast detect the simultaneous CID & port change so we can quickly close the path in your figure 3?\r\n> \r\n> Perhaps, the client could send a PC as the first packet after rotating the CID of an existing path. If the client's address does not change, challenging the server's address has no side effect. But, if the client's address does change, the server will take this PC as a signal to open a new path.\r\n\r\nIn this way, the client and server can communicate over path-1 immediately after NAT-rebinding. But, they have different views on path-1. ",
          "createdAt": "2023-10-20T03:02:51Z",
          "updatedAt": "2023-10-20T03:02:51Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The performance issues can be easily alleviated if the implementation is a little smart. The main issue regards loss recovery. A naive implementation will suffer because once a number space is \"closed\", it cannot anymore use the packet number logic of RACK to discover packet losses, cannot send a new frame on PTO, and will have to fall back to the less efficient \"timeout\". But it is not hard to tie the new path to the old one, and trigger the number logic based on acknowledgement of packets on the new path. It is also not hard to tie the new path to the old one, and use the old path congestion data to seed the values on the new path. If the implementation does that, there is no practical impact of rotating the CID.",
          "createdAt": "2023-10-20T05:57:59Z",
          "updatedAt": "2023-10-20T05:57:59Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "What @huitema says.\r\n\r\nIt would be rare for endpoints to rotate a CID without changing the egress path, as that is required only when the key used to encrypted the CID is renewed. And if an endpoint needs to rotate frequently, there can be tricks like as @huitema points out.\r\n\r\nIIRC, multipath QUIC has inherited not only the security properties of QUIC v1 but also how the protocol deals with those security requirements; e.g., when to use new DCIDs, or when to send path probes. I think we should stick to what we already have and is known to work.",
          "createdAt": "2023-10-20T06:26:33Z",
          "updatedAt": "2023-10-20T06:26:33Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this issue or is there anything we can do editorially to better explain how to \"transfer\" the old state to the new path? ",
          "createdAt": "2023-10-21T12:31:23Z",
          "updatedAt": "2023-10-21T12:31:23Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "I think that #214 is a good solution to this problem. The current specification is unclear, complex and (as described in the initial message above) implies:\r\n1. multiple packet number spaces over the same path with complicated, suboptimal special-case loss detection\r\n2. difficulty to detect/understand simultaneous NAT rebinding and CID update, which is likely after an idle period\r\n\r\nThe specification should be updated with a simple and clear path model (one single stable logical path per physical path) and explicit signalling (not even more semantic overloading of the `PATH_CHALLENGE` frame!) to enable clean, reliable and efficient implementations.",
          "createdAt": "2023-10-23T13:04:38Z",
          "updatedAt": "2023-10-23T13:04:38Z"
        },
        {
          "author": "yangfurong",
          "authorAssociation": "NONE",
          "body": "> I think that #214 is a good solution to this problem. The current specification is unclear, complex and (as described in the initial message above) implies:\r\n> \r\n> 1. multiple packet number spaces over the same path with complicated, suboptimal special-case loss detection\r\n> 2. difficulty to detect/understand simultaneous NAT rebinding and CID update, which is likely after an idle period\r\n> \r\n> The specification should be updated with a simple and clear path model (one single stable logical path per physical path) and explicit signalling (not even more semantic overloading of the `PATH_CHALLENGE` frame!) to enable clean, reliable and efficient implementations.\r\n\r\n+1",
          "createdAt": "2023-10-24T02:53:01Z",
          "updatedAt": "2023-10-24T02:53:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Please continue discuss in issue #214. Closing this issue now.",
          "createdAt": "2023-11-03T15:14:37Z",
          "updatedAt": "2023-11-03T15:14:37Z"
        }
      ]
    },
    {
      "number": 280,
      "id": "I_kwDOGNtpaM50kdOp",
      "title": "Should path status sequence be global, or per frame?",
      "url": "https://github.com/quicwg/multipath/issues/280",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think we can use the definition that we have, but here is a corner case:\r\n\r\n1) Peer sends PATH_STANDBY, path 1, sequence number 1\r\n2) The packet containing that is delayed\r\n3) Peer sends PATH_AVAILABLE, path 2, sequence number 2\r\n4) The packet carrying PATH_AVAILABLE, path 2, sequence number 2 is received.\r\n5) The delayed packet carrying PATH_STANDBY, path 1, sequence number 1 is finally received.\r\n\r\nWith the current spec, the peer is supposed to ignore the PATH_STANDBY frame, because it has received another status frame with a higher sequence number.\r\n\r\nThe global status number is fine, but I would prefer to test it by path, rather than globally.",
      "createdAt": "2023-10-22T00:51:15Z",
      "updatedAt": "2023-10-22T00:54:01Z",
      "closedAt": "2023-10-22T00:54:01Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oops. This is fixed already, text is fine.",
          "createdAt": "2023-10-22T00:54:01Z",
          "updatedAt": "2023-10-22T00:54:01Z"
        }
      ]
    },
    {
      "number": 281,
      "id": "I_kwDOGNtpaM51BkB_",
      "title": "Multipath Model Based on Nginx QUIC",
      "url": "https://github.com/quicwg/multipath/issues/281",
      "state": "CLOSED",
      "author": "nandsky",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I have tried to implement the 05 version of the multipath draft based on nginx quic. The model diagram is as follows, and if there are any errors, please let me know.\r\n\r\n![mpquic](https://github.com/quicwg/multipath/assets/10154791/41088be1-38e1-4904-a58e-9a4712297382)\r\n\r\nannotations:\r\n1. This model is based on NGINX QUIC implementation, with the following mapping relationship:\r\n  a. QUIC SM: ngx_quic_connection_t\r\n  b. socket: ngx_quic_socket_t\r\n  c. path: ngx_quic_path_t\r\n  d. send_ctx: ngx_quic_send_ctx_t\r\n  e. recv_ctx: splits from ngx_quic_send_ctx\r\n2. This model splits 4-tuple into serverCID-bound RX and clientCID-bound TX, which generally differ in number.\r\n\r\nActually  i have already described this model in https://github.com/quicwg/multipath/issues/270.  I am opening a new issue because the draft's definition of \"path\" is not clear. Additionally, I hope to use this model to discuss interoperability with other implementations.\r\n\r\n",
      "createdAt": "2023-10-26T11:41:35Z",
      "updatedAt": "2023-11-03T15:15:28Z",
      "closedAt": "2023-11-03T15:15:28Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "closing as this is a duplicate of #270",
          "createdAt": "2023-11-03T15:15:28Z",
          "updatedAt": "2023-11-03T15:15:28Z"
        }
      ]
    },
    {
      "number": 282,
      "id": "I_kwDOGNtpaM51Hqzy",
      "title": "Does the new draft (06) allow servers to create new paths by receiving pkts without PATH_CHALLENGE?",
      "url": "https://github.com/quicwg/multipath/issues/282",
      "state": "CLOSED",
      "author": "yangfurong",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question",
        "editorial",
        "no-action-needed"
      ],
      "body": "According to 4.1 of the new draft, a \"non-probing\" packet's reception on a new path should be treated as a path initiation attempt. \r\n\r\n> If validation succeeds, the client can continue to use the path. If validation fails, the client MUST NOT use the path and can remove any status associated to the path initation attempt. [Section 9.1](https://rfc-editor.org/rfc/rfc9000#section-9.1) of [[QUIC-TRANSPORT](https://www.rfc-editor.org/rfc/rfc9000)] introduces the concept of \"probing\" and \"non-probing\" frames. When the multipath extension is negotiated, the reception of \"non-probing\" packet on a new path needs to be considered as a path initiation attempt that does not impact the path status of any existing path. Therefore, any frame can be sent on a new path at any time as long as the anti-amplification limits ([Section 21.1.1.1](https://rfc-editor.org/rfc/rfc9000#section-21.1.1.1) of [[QUIC-TRANSPORT](https://www.rfc-editor.org/rfc/rfc9000)]) and the congestion control limits for this path are respected.\r\n\r\nWhat does it actually mean? \r\n\r\nPreviously, servers only create new paths if they receive packets with PATH_CHALLENGE on a new 4-tuple. Does this mean that servers should now create new paths as long as they receive \"non-probing\" packets on new 4-tuples?\r\n\r\n",
      "createdAt": "2023-10-27T07:36:47Z",
      "updatedAt": "2023-11-07T12:14:08Z",
      "closedAt": "2023-11-07T12:14:08Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "When a server receives a non-probing frame it needs to imitate path validation, similar as it has to validate the path if a probing frame is received. Does this clarify your question?",
          "createdAt": "2023-11-03T15:18:48Z",
          "updatedAt": "2023-11-03T15:18:48Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This issue is related to #261 and #188. If I understand the situation correctly, the consensus is that utilizing PATH_CHALLENGE as a definitive indicator is usually a valid approach. However, we must also address cases where a packet arrives with both a new connection identifier (CID) and a new 4-tuple, but is devoid of a PATH_CHALLENGE. Disregarding such a packet is inappropriate; instead, we should regard it as initiating a new path. In circumstances where both NAT re-binding and CID rotation occur simultaneously, the server is advised to perform path validation for both the original and new paths. This dual validation process may also provide a solution for the issue described in figure 3 of #273 .",
          "createdAt": "2023-11-05T04:57:31Z",
          "updatedAt": "2023-11-05T04:57:31Z"
        },
        {
          "author": "yangfurong",
          "authorAssociation": "NONE",
          "body": "OK. I get it. ",
          "createdAt": "2023-11-07T07:13:58Z",
          "updatedAt": "2023-11-07T07:13:58Z"
        }
      ]
    },
    {
      "number": 283,
      "id": "I_kwDOGNtpaM51JTTC",
      "title": "Sending PATH_STANDBY before the connection ID is used is pointless",
      "url": "https://github.com/quicwg/multipath/issues/283",
      "state": "OPEN",
      "author": "michael-eriksson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question",
        "no-action-needed"
      ],
      "body": "The -06 draft allows a peer to send a `PATH_STANDBY` frame for a particular connection ID (CID) before it is used:\r\n\r\n```\r\nA PATH_STANDBY frame MAY be bundled with a NEW_CONNECTION_ID frame\r\n[...] in order to indicate the preferred path usage\r\nbefore [...] path initiation.\r\n```\r\n\r\nFrom the definition of `PATH_STANDBY`:\r\n\r\n```\r\nDestination Connection ID Sequence Number:  The sequence number of\r\n   the Destination Connection ID used by the receiver of this frame\r\n   to send packets over the path the status update corresponds to.\r\n```\r\n\r\nWhen the path is set up, each endpoint freely choses a destination CID between the CIDs that the peer has issued. This means that resulting preferred path usage depends on which CID the peer happens to chose.\r\n\r\nI think that the current path identification model is very confusing, and this observation is another indication in that direction.",
      "createdAt": "2023-10-27T11:58:33Z",
      "updatedAt": "2023-11-06T12:20:37Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "First, just because you can send a path status for a CID that is not used yet, it doesn't mean that you have to do it. Second, yes if a path status was sent and a sender start using the CID, it also selects that path status, however, the receiver can update the path status anytime.\r\n\r\nI do see a problem here to fix. However, the current approach provides more flexibility in usage of path status information in future.\r\n\r\nCan you please explain which problem you thinks needs solving? Other I would propose to close this issue and continue discussion in issue #214. Thanks!",
          "createdAt": "2023-11-03T15:22:36Z",
          "updatedAt": "2023-11-03T15:22:36Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The only issue that I find in practice is a potential race condition -- but this is very mild. Take the somewhat common case in which a client has a connection working over Wi-Fi and wants to create a standby path over Cellular to enable fail-over. The client will create a path using path challenge, etc., and will then send the Path_Standby frame as soon as the path is created -- as @michael-eriksson points out, sending that sooner is a crap shot, because the client does not know which CID the server will pick. But the Path Standby frame or Path Available can be delayed for some time, for example in case of loss recovery. In that interval, the server will follow its default sending policy, which may not be what the client wants.\r\n\r\nI think this is solved nicely if we keep the old validation process of RFC 9000 as the default. If the server has not yet received a Path Standby or Path Available frame, it follows RFC 9000 -- which is \"standby until data is received from the client\".",
          "createdAt": "2023-11-03T21:56:20Z",
          "updatedAt": "2023-11-03T21:56:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually I think you can address that case with the current approach. E.g. if you want only one active path, you can simply set all issued but not used yet CIDs to standby.",
          "createdAt": "2023-11-04T10:44:18Z",
          "updatedAt": "2023-11-04T10:44:18Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak \r\n> Actually I think you can address that case with the current approach. E.g. if you want only one active path, you can simply set all issued but not used yet CIDs to standby.\r\n\r\nThis is true, though I think my preference goes to stating that a path starts with either active or standby, rather than a third state.\r\n\r\nConsidering that endpoints can only signal active or standby, I do not think there is a reason to have the third state.\r\n\r\nWe can just state that the state starts with standby (or active). Then, only endpoints that want to change the state would be required to send a frame.",
          "createdAt": "2023-11-04T11:00:55Z",
          "updatedAt": "2023-11-04T11:00:55Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the path just starts with no state. The state is really just the guidance or rather recommendation the _other_ end gives you. In the absence of any explicitly signal, you have to solely rely on your local knowledge to make a sending decision. However, it can be your local policy to not use any path initially (until you receive a path status or e.g. data packets). But again, it's solely a local policy and I don't think it can be enforced or should be standardised.\r\n\r\nBtw. we just changed that you effectively don't have to wait until path validation concluded before you are allowed to send non-probing packets. That would be the other option to require to wait until path validation concluded with gives the other end the chance to send you a path status if needed. however, I think that has more drawbacks. ",
          "createdAt": "2023-11-04T11:08:45Z",
          "updatedAt": "2023-11-04T11:08:45Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak \r\n> I think the path just starts with no state. The state is really just the guidance or rather recommendation the other end gives you. In the absence of any explicitly signal, you have to solely rely on your local knowledge to make a sending decision. However, it can be your local policy to not use any path initially (until you receive a path status or e.g. data packets). But again, it's solely a local policy and I don't think it can be enforced or should be standardised.\r\n\r\nI think the question is if having that kind of design helps some endpoints.\r\n\r\nIn case of having peers that do not send PATH_ACTIVE / PATH_STANDBY frames, it does not matter if the initial state is \"default\" or \"standby.\" This is because if all paths are standby, an endpoint is going to choose whichever path for sending data.\r\n\r\nIn case of having peers that send PATH_ACTIVE / PATH_STANDBY frames, it would be helpful to state that a path initially starts with either active or standby, because that reduces frames to be sent and increases predictability.\r\n\r\nIs there something that I'm missing?\r\n\r\n> Btw. we just changed that you effectively don't have to wait until path validation concluded before you are allowed to send non-probing packets. That would be the other option to require to wait until path validation concluded with gives the other end the chance to send you a path status if needed. however, I think that has more drawbacks.\r\n\r\nYeah, until path is validated, an endpoint can only send as much as 3x that it has received. I do not think we need to make things complicated to reduce that 3x to something smaller.",
          "createdAt": "2023-11-04T11:32:47Z",
          "updatedAt": "2023-11-04T11:32:47Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we have to state explicitly what we mean by standby. We broadly agree, but I am concerned that some other developers with treat receiving packets on standby path is a protocol violation. That could cause interop issues.\r\n\r\nOn the other hand, we also don't want the peers to ignore standby requests completely. That would cause operational issues.",
          "createdAt": "2023-11-05T00:27:22Z",
          "updatedAt": "2023-11-05T00:27:22Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@huitema \r\n> I think we have to state explicitly what we mean by standby. We broadly agree, but I am concerned that some other developers with treat receiving packets on standby path is a protocol violation. That could cause interop issues.\r\n\r\n+1. I might argue that both \"available\" and \"standby\" are confusing as terms.\r\n\r\nThat is because the peer is allowed to send packets on paths that are in \"standby.\" In fact, they would be forced to, if all of the available paths are declared as \"standby.\"\r\n\r\nThis boolean state is merely indications of preference, it would make sense to rename them to better reflect that.\r\n\r\nMaybe something like \"preferred\" / \"backup\" might eliminate the confusion.",
          "createdAt": "2023-11-05T04:37:23Z",
          "updatedAt": "2023-11-05T04:37:23Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazuho +1. I agree, I think we need a better terminology.",
          "createdAt": "2023-11-05T05:02:16Z",
          "updatedAt": "2023-11-05T05:02:16Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually in my opinion \"prefered\" is a choice made by the sender's scheduler algorithm, \r\nbut I agree with that \"backup\" is a more proper name instead of \"standby\".",
          "createdAt": "2023-11-06T12:20:37Z",
          "updatedAt": "2023-11-06T12:20:37Z"
        }
      ]
    },
    {
      "number": 284,
      "id": "I_kwDOGNtpaM51TRPM",
      "title": "Please ignore.",
      "url": "https://github.com/quicwg/multipath/issues/284",
      "state": "CLOSED",
      "author": "tzaeschke",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-30T10:14:03Z",
      "updatedAt": "2023-10-30T10:15:22Z",
      "closedAt": "2023-10-30T10:14:11Z",
      "comments": []
    },
    {
      "number": 285,
      "id": "I_kwDOGNtpaM51UGBM",
      "title": "Terminology clarification of \"path\"",
      "url": "https://github.com/quicwg/multipath/issues/285",
      "state": "CLOSED",
      "author": "tzaeschke",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "no-action-needed"
      ],
      "body": "Section 1 states:\r\n> * A path is determined by the 4-tuple of source and destination IP address as well as source and destination port. Therefore, there can be at most one active paths/connection ID per 4-tuple.\r\n\r\nAs I understand it, this would preclude the possibility of having different or evolving paths (i.e. routes) for a single 4-tuple.\r\nFor example, paths may additionally be determined by\r\n- Flow labels in IPv6, for example when using ECMP, which allows multiple paths between 4-tuples, see [RFC 6437](https://www.rfc-editor.org/rfc/rfc6437)\r\n- Multipath routing approaches such as SCION which also allows multiple paths per 4-tuple, see https://datatracker.ietf.org/doc/draft-dekater-panrg-scion-overview/\r\n\r\nWould it make sense to soften this requirement by allowing multiple paths (i.e. routes) for identical 4-tuples?\r\nOr, if \"path\" is synonymous with \"4-tuple\", could it make sense to add a clarification of terminology to that effect? I.e. clarifying that *\"there can be at most one active paths/connection ID per 4-tuple\"* is not saying anything about the actual (and possibly diverging or evolving) paths that packets on this \"path\" actually take?\r\n\r\nSuch a change should not affect the packet format or any part of the protocol. It would be merely a clarification on the meaning of \"path\".\r\n\r\n(Disclaimer: I work on the SCION protocol).",
      "createdAt": "2023-10-30T12:10:55Z",
      "updatedAt": "2023-11-13T14:22:12Z",
      "closedAt": "2023-11-13T14:22:12Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am not sure that we should address the complexities of using IPv6 flow labels or maybe diffserv marks to establish multiple paths. Yes, in theory we could use such marks to qualify a path, but we would also need to worry about handling of these fields in multiple networks, detecting behavior such as \"blanching\" or resetting the IPv6 flow ID, or simply not using the flow ID for routing at all. We would also have to worry about potential misuse, such as splitting a 4 tuple into a large number of paths and then running independent congestion control for each path, which could have a dramatic effect on other users of the 4-tuple.\r\n\r\nAll this sounds a lot like active research. One plausible solution would be for the SCION project to define a QUIC extension to handle path as 6 tuples of addresses, ports and IPv6 flow-id. Parties could negotiate that extension using a dedicated transport parameter. The extension definition would provide solutions for the problems mentioned above...",
          "createdAt": "2023-10-31T05:52:20Z",
          "updatedAt": "2023-10-31T05:52:20Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "_speaking as an individual_\r\n\r\nThe definition of path is the same as when we adopted the draft to the WG. So asking for a change in definition is effectively a request to expand the scope of the document. That risks delaying the standardization of multipath for the deployments that are happy with the current scope.\r\n\r\nI agree with Christian that extensions can expand the scope on their own terms, and spend their own time and effort to figure out what works and what doesn't. ",
          "createdAt": "2023-10-31T16:53:31Z",
          "updatedAt": "2023-10-31T16:53:31Z"
        },
        {
          "author": "tzaeschke",
          "authorAssociation": "NONE",
          "body": "Dear @huitema & @LPardue, thank you for your feedback.\r\nThis RFC is obviously more progressed than I had realized.\r\nIt seems we'll have to find another way, maybe by way of an extension (as you suggested).",
          "createdAt": "2023-11-13T14:22:12Z",
          "updatedAt": "2023-11-13T14:22:12Z"
        }
      ]
    },
    {
      "number": 286,
      "id": "I_kwDOGNtpaM51oMgz",
      "title": "PATH_AVAILABLE/STANDBY vs. local API preference",
      "url": "https://github.com/quicwg/multipath/issues/286",
      "state": "OPEN",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "Yanmei-Liu"
      ],
      "labels": [
        "editorial",
        "no-action-needed"
      ],
      "body": "When implementing -06 draft, we need to find out what to do when the signal from the peer(representing by the PATH_AVAILABLE/STANDBY frames) does not match the local API preference. There are several possibilities(mentioned by @Huitema):\r\n\r\n1. Local always win. Simple, but it allows the server to bypass the client preferences.\r\n2. Remote always win.\r\n3. Client always win.\r\n4. Server always win.\r\n5. Most restrictive wins: if local says available and remote say standby, keep it as standby.\r\n\r\nAlthough the strategy is depending on the implementation, making the strategy clear about how to use PATH_AVAILABLE/STANDBY Frames is quite important in the draft. \r\n\r\nSo we track the issue here and hope to hear more voice from different people.",
      "createdAt": "2023-11-02T04:13:40Z",
      "updatedAt": "2023-11-06T12:29:35Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "We tried to clarify in the draft that these frames are only a recommendation and there is no requirement to follow this recommendation (there is also no way to enforce that, except closing/not opening the path). Therefore the final sending decision is left to the implementation. I don't think this is something we even could or should standardise as it will depend on the application and other local knowledge.",
          "createdAt": "2023-11-02T10:35:05Z",
          "updatedAt": "2023-11-02T10:35:05Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I agree with @mirjak that the current design is correct.\r\n\r\nAs stated in https://github.com/quicwg/multipath/issues/283#issuecomment-1793634282, I think what we have is a terminology issue and that is confusing us.",
          "createdAt": "2023-11-05T04:40:35Z",
          "updatedAt": "2023-11-05T04:40:35Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Although these Frames are preference(recommendation) not requirements, I still think we need more editorial guidance on this issue. When people write implementations, they would like to get deterministic results instead of vague response.",
          "createdAt": "2023-11-06T12:29:35Z",
          "updatedAt": "2023-11-06T12:29:35Z"
        }
      ]
    },
    {
      "number": 290,
      "id": "I_kwDOGNtpaM513UqJ",
      "title": "Key Update and time to next possible update",
      "url": "https://github.com/quicwg/multipath/issues/290",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "So Section 5.3 in -06 says: \r\n\r\n`When this specification is used, endpoints SHOULD wait for at least three times the largest PTO among all the paths before initiating a new key update after receiving an acknowledgement that confirms receipt of the previous key update. This interval is different from that of QUIC version 1 which used three times the PTO of the only one active path.`\r\n\r\nAfter having done some testing with key update in our implementations with different length paths some conclusions have been drawn.\r\n\r\nFirst is that it difficult for an endpoint to know when an old key can safely be dropped. With multiple path being possible to send on, and not necessarily used as well as to send ACKs on. Thus the fact that one get key phase back as a responder indicate that beyond on-path reordering things should be settled. But for multipath one can conclude for paths being used that key-phase changes have happened. But for path currently not receiving any packet one don't know if they are just being significantly delayed or may never have been sent. Also the path RTT samples one have might not be relevant for the current path delay. Thus, beyond observing that one get some key-phase change back, and starting a really long timer it is not obvious that you can generate an algorithm that enables one to know that no outstanding old keys are there. \r\n\r\nThe fact that this time needs to be longer than worst case RTT changes on each path do result that using 3*PTO is likely to short to re-enable key-update. At least unless one want to require trial decryption of the packets. This as keeping the old key while using the current key, so when one see a key-phase different one can try if it is the old key, if that fails and the next key works, then one drop the old key, and from that point assume this key-phase will be the new key. And thus initiating a key_update. \r\n\r\n",
      "createdAt": "2023-11-04T17:22:50Z",
      "updatedAt": "2023-11-05T04:32:49Z",
      "closedAt": null,
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I think I agree that the problem exists, though I am not sure how much it would matter in practice.\r\n\r\nSeparately, I might point out that this is an existing issue of RFC 9001.\r\n\r\nIn both QUIC v1 and multipath, endpoints can have idle paths, which might have very different actual RTT than the previous estimate. Also, when the endpoint initiates a Key Update while the peer is trying to open a new path, RTT of the new path cannot be taken into consideration.\r\n\r\nWhen recommending the Key Update interval, QUIC v1 only took the RTT estimate of its one and active path into consideration. We adopted that model to Multipath and said that all paths that exist have to be taken into consideration.\r\n\r\nI think that is an improvement from QUIC v1 in sense that idle paths are taken into consideration at least (even though their RTT estimates are old).\r\n\r\nThe question is if we want to do more.\r\n\r\nHonestly, I do not care much considering how infrequent key updates are. My anticipation is that this problem would be a minor source of loss events unrelated to congestion, if any.\r\n\r\nConsidering that, it might be sufficient to just note that such a problem exists. We can address the issue in the future version of QUIC.\r\n\r\nThe other idea would be to state that the minimum recommended interval is `3*max(maxPTO, initialPTO)`; by changing as such, we can take paths that are being created into consideration. But that is not a perfect solution.",
          "createdAt": "2023-11-05T04:32:49Z",
          "updatedAt": "2023-11-05T04:32:49Z"
        }
      ]
    },
    {
      "number": 291,
      "id": "I_kwDOGNtpaM52kdgA",
      "title": "Do we actually have an established consensus on path definition?",
      "url": "https://github.com/quicwg/multipath/issues/291",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The debate over whether to use a stable path ID #214  may have deeper logical underpinnings than initially perceived and hinge on whether there\u2019s an agreed-upon definition of a path. \r\n\r\nThe current draft considers defining a path as a 4-tuple between two endpoints. This definition currently shapes the draft design, where different 4-tuples are assigned unique IDs and linked to distinct packet number spaces, maintaining logical consistency as this definition alone does not incorporate the concept of path \"**continuity**\".\r\n\r\nThose with differing views (i.e., stable path ID) essentially contest this definition of a path, perhaps even unknowingly. To adopt a stable path ID, we must redefine what constitutes a path, incorporating the idea of \u201c**continuity**.\u201d \r\n\r\nBut defining continuity is challenging. It suggests creating a transition graph where paths sharing an ID can trace back to a common origin, illustrated by transitions like`A1 -----> A2 ------> A3\r\n`, where `A` is some observable attributes of a path.\r\n\r\nAn _imperfect_ example of such transition graph is based on the combination of CID and 4-tuple:\r\n`(CID0, tuple0) ----> (CID0, tuple1) -----> (CID1, tuple1)\r\n`. However, the first complexity arises when both CID and tuple change simultaneously, as in`(CID0, tuple0) ----????-----> (CID1, tuple1)\r\n`. Here, it\u2019s unclear if these represent the same or different paths, making it impossible to construct a definitive transition graph. The second issue is that forcefully linking two such nodes with a path ID could lead to anomalies. For instance when we tie CID to path ID #214, you might start on an LTE path (PathID1) and have a standby path on Wi-Fi (PathID2) in a restaurant. Moving to a shopping mall and connecting to its Wi-Fi, you initially use a CID associated with PathID2. Yet, even after a CID rotation post path validation, you remain linked to PathID2 because you would rotate to another CID assigned for that PathID, despite the Wi-Fi path, its ISP, and the MTU potentially being different. There is another proposal of sticking to the loose path ID model but allowing the use of the same packet number space, again the logic hinges on whether we have a well-defined **continuity** to build a definitive transition so that we can link two paths to the same packet number space with no ambiguity.\r\n\r\nGiven the years of back-and-forth on this issue, it seems helpful to first reach a consensus on the path definition. The design should logically follow from this agreed definition, similar to how different assumptions about parallel lines underpin Euclidean and non-Euclidean geometries. Without a clear definition, when we say \"This is the same path because it has the same identifier\", we are potentially entering a circular reasoning zone and we should avoid logical fallacy like that.\r\n\r\nI could be wrong, but I think if we want to have a test of time design, we need to address the path definition unequivocally. Therefore, I would suggest to call for a consensus on a formal path definition. Two questions: (1) Do we like to incorporate \"**continuity**\" in the definition or stick to the current 4-tuple definition? (2) How to come up with a formal definition to incorporate the idea of **continuity** in path definition?",
      "createdAt": "2023-11-12T07:08:44Z",
      "updatedAt": "2024-03-21T13:53:25Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Some clarity would be good. \r\n\r\nThe mechanism that I do understand is the numbering space. It is a tool that we use to number packets sent over one of the possible 4 tuples between two endpoints. This is important for several reasons:\r\n\r\n* numbering space is tied to loss recovery. Loss recovery becomes less effective in presence of out of order delivery. Loss recovery works well if all packets numbered from the same space arrive in order. Sender try to ensure that by sending packets from a given number space on the same four tuple. This is imperfect, because of NAT, but it is also the best that senders can do.\r\n* numbering space is tied to encryption, which require a unique nonce. This works well if we combine the packet number and the identifier of the numbering space in the nonce.\r\n* when receiving a packet, the receiver must use the same nonce as the sender. The receiver needs to identify the number space and the packet number from the packet header. The receiver cannot solely rely on the four tuple, because of NAT. The only element that the receiver can use is the connection ID.\r\n\r\nSo far, this means selecting a number space and one or several packet IDs to send on a given four tuple. Two designs can work: 1-1 mapping between connection ID and number space, or 1-N mapping, in which several connection ID point to the same number space.\r\n\r\nUp to this point, we do not require any tie between the two directions of communications. The tying happens because if the client starts sending using a 4 tuple, the server may decide to send using the symmetric 4 tuple. The server discovers a possible \"sending path\" by receiving packets from the client. Thus, a bit of complexity:\r\n\r\n* the client may want to control how the server uses this path. This is the role of the Path Available, Path Standby and Path Abandon frames. \r\n* the mapping between number space and 4-tuple will occasionally change, because of NAT. If the server derived a 4 tuple from packets received from the client, it needs to change that 4 tuple if it detects a NAT rebinding. There will necessarily be a period of uncertainty during which client and server don't have quite the same notion of 4-tuples.\r\n* the endpoints must be able to change the connection ID associated with a four tuple for privacy reasons, and also because connection IDs may have a limited lifetime.\r\n* the endpoints need to somehow agree to free the resource linked to a number space when it is not in use.\r\n\r\nThe \"1-1 mapping between CID and number space ID\" solves these requirements, but does induce a discontinuity in packet number when a connection ID is rotated. \r\n\r\nThe \"1-N mapping between number space and CID\" can also solve these issues. It does make CID rotation easy to handle, including when CID rotation is combined with NAT rebinding. The mapping does require some additional code for handling the 1-N mapping, such as for example a new \"new CID\" frame that links a CID to a path identifier. \r\n\r\nThe 1-N mapping also requires extra care when abandoning a path and freeing the resource, because just retiring a CID does not retire the number space. For example, does abandoning a number space automatically induce retiring the CID tied to that number space? How to handle arrival of packets for a CID that is not retired yet, but is tied to a retired number space?\r\n\r\nBack to @yfmascgy question: I think we get much clarity if we focus on number spaces instead of focusing on the actual definition of a path. I also think that we should be very explcit with our handling of Path directions. For the MP ACK, this is simple: the number space identifier is that used by the sender of the packets being acknowledged. For the Path Abandon, this is less clear. Is the statement \"I will not send anything more using that number space\" (i.e., local sender space ID), or \"Please don't send anything anymore with that number space\" (i.e., remote sender space ID)?\r\n",
          "createdAt": "2023-11-12T08:23:49Z",
          "updatedAt": "2023-11-12T08:23:49Z"
        },
        {
          "author": "BillGageIETF",
          "authorAssociation": "NONE",
          "body": "@yfmascgy : I think you make a very good point. With the existence of middleboxes between QUIC endpoints, the thing that defines a \"path\" may be different from the perspective of the different endpoints - e.g. the source IP address and UDP port that is inserted into an IP datagram by a sender may not be that same as the source IP address and UDP port seen in the the IP datagram by the receiver. And, as RFC9000 took pains to describe, the source IP address and UDP port seen in the the IP datagram by the receiver may change over time without the knowledge of the sender, resulting in (passive) connection migration.\r\n\r\nWithout the use of a path identifier that is independent of the 4-tuple, it is hard to see how the endpoints can have any meaningful dialogue regarding \"paths\". Some would argue that this independent path identifier should be a connection identifier, others would argue that it should be an explicit path identifier selected by an endpoint.\r\n\r\nIt might be worthwhile to look at the events that might result in the declaration of a new path. I don't think a receiver can unilaterally declare a new path based only on the detection of a passive connection migration (i.e. a change in the source IP address and/or UDP port seen in the a IP datagram).\r\n\r\nA sender may determine that it is using a new path based on:\r\n\r\na) a change in the source IP address used by the sender, and/or\r\n\r\nb) a change in the network access point used by the sender.\r\n\r\nNote that (b) often results in (a) but there are some access networks where the same source IP address can be used across different access points.\r\n\r\nThere are some deployments where (a) and/or (b) are hidden from the peer endpoint by the intervening network. Therefore, the declaration of a new path can only be made by a sender.\r\n\r\n@huitema : As you might guess, I am not in favour of solutions that require multiple packet number spaces ;-)",
          "createdAt": "2023-11-13T18:08:58Z",
          "updatedAt": "2023-11-13T18:08:58Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Regarding the meaning of a \"path\", I agree that this is something conceptually difficult to concretise without ambiguity.\r\n\r\nOver a \"path\", you actually have two (unidirectional) flows: one on which the endpoint sends packets, and one on which it receives them. While the endpoint has some control on its sending flow (at least, at the beginning), it does not on receiving packets (for instance, passive migration or changes of the 4-tuple due to the network).\r\n\r\nRegarding the notion of \"explicit Path ID\", I think it is useful as the receiving endpoint could figure out what its peer is doing, i.e., it can map 1-1 a sending flow of its peer to one of its receiving flows, even if 4-tuple or CID change. This enables \"flow continuity\" from the endpoint point of view.\r\n\r\n@BillGageIETF, regarding the multiple packet number spaces, this is something we actually studied and presented results at the [IETF 115](https://github.com/quicwg/wg-materials/blob/main/ietf115/multipath.pdf). You can see the [Alibaba's technical report](https://github.com/quicwg/multipath/blob/main/reports/Alibaba_SPNS_implementation.pdf) or [SIGCOMM CCR publication](https://dl.acm.org/doi/abs/10.1145/3561954.3561956). In particular, using a single packet number space for the whole connection can cause issues when handling with different paths having very different characteristics.",
          "createdAt": "2023-11-13T18:53:54Z",
          "updatedAt": "2023-11-13T18:53:54Z"
        },
        {
          "author": "BillGageIETF",
          "authorAssociation": "NONE",
          "body": "@qdeconinck : I don't want to repeat the discussion of issue #214 here. I will just note that since those earlier single-versus-multiple space discussions, the multiple space solution (in draft -06) has resulted in divergence from RFC9000 in some pretty fundamental ways. I will also note (as I did in #214) that those earlier discussions were not aware of the incompatibility that has come to light between draft -06 and the masque QUIC-aware UDP proxy draft. \r\n\r\nHandling diverse path characteristics within a single packet number space is a solvable problem even if it makes the implementation more complex.",
          "createdAt": "2023-11-13T20:41:35Z",
          "updatedAt": "2023-11-13T20:41:35Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@yfmascgy \r\n> The debate over whether to use a stable path ID https://github.com/quicwg/multipath/issues/214 may have deeper logical underpinnings than initially perceived and hinge on whether there\u2019s an agreed-upon definition of a path.\r\n> \r\n> The current draft considers defining a path as a 4-tuple between two endpoints. This definition currently shapes the draft design, where different 4-tuples are assigned unique IDs and linked to distinct packet number spaces, maintaining logical consistency as this definition alone does not incorporate the concept of path \"continuity\".\r\n> \r\n> Those with differing views (i.e., stable path ID) essentially contest this definition of a path, perhaps even unknowingly. To adopt a stable path ID, we must redefine what constitutes a path, incorporating the idea of \u201ccontinuity.\u201d\r\n\r\nI think we have consensus that path is something that is identified by the 4-tuple (or 5-, if we consider the address family).\r\n\r\nIn case of \"stable path ID,\" I think it is just the name that might be confusing; it is actually referring to a particular \"send slot\" belonging to a QUIC connection. If we are to adopt such a design, I think the way to proceed would be to rename \"stable path ID\" to something else, rather than going back to the definition of \"path.\"",
          "createdAt": "2023-11-21T06:50:21Z",
          "updatedAt": "2023-11-21T06:50:21Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Comments record here:\r\n\r\n[marten-seemann](https://github.com/marten-seemann) [on Nov 20, 2023]> (https://github.com/quicwg/multipath/pull/292#discussion_r1398667929)\r\n> This should include a precise definition of what we mean by \"path\". Crucially, a \"path\" is not defined by the 5-tuple, since NAT rebindings change the 5-tuple without one of the peers knowing about it.\r\n> \r\n> Instead, a new path is opened when a peer intentionally starts sending packets from a new address.\r\n\r\n\r\n[huitema](https://github.com/huitema) [3 weeks ago](https://github.com/quicwg/multipath/pull/292#discussion_r1502133251)\r\n> I am implementing this right now. The good thing about the \"unique path ID\" is that the header now carries a clear intention. If the destination CID correspond to path X, then the intention was clearly to send the packet on path X -- even in cases when the CID is not exactly the same that was used for that path previously. This closes the ambiguity of \"CID renewal and NAT Rebinding at the same time\".",
          "createdAt": "2024-03-21T13:53:24Z",
          "updatedAt": "2024-03-21T13:53:24Z"
        }
      ]
    },
    {
      "number": 293,
      "id": "I_kwDOGNtpaM6B8auw",
      "title": "Switch to standby path more tricky than expected",
      "url": "https://github.com/quicwg/multipath/issues/293",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "I did a big batch of debugging the \"unique path-id\" code in picoquic, porting all the tests that were designed for the previous multipath version, and I found an interesting issue in the \"standup\" test. The test starts by setting a client to server connection with two paths, one available and on in standby. It runs for a while, then simulates cutting the \"available\" path off. Expectation is that the connection will continue with the \"standby\" path. The test was initially failing.\r\n\r\nThe simulated traffic is from server to client. The server quickly detects that the available path is down, and starts sending data packets on the \"standby\" path. But the client only sends ACK, and does not react quickly if ACK packets are not acknowledged. So the client keeps sending ACKs on the \"available path\". Of course, since the path is cut, they are dropped. The server does not see ACKs for the packets sent on the \"standby\" path, so it quickly concludes that this path is down. Pretty soon, the connection breaks.\r\n\r\nThere are two potential fixes. One would be to somehow force ACKs on the standby path, if packets are received on that path. The other, which I feel is more robust, is for the server to send mark the standby path as \"available\" if the available path is \"broken\". I did that, \"promote\" the standby path to available, and the \"standup\" test now succeeds.\r\n\r\nThis issue might deserve some discussion in the multipath draft.",
      "createdAt": "2024-03-11T19:56:44Z",
      "updatedAt": "2024-03-18T06:42:10Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A lot of this is a tradeoff between simplicity and performance. For performance reasons, we want the traffic to start using the standby path if the available path is \"dubious\". In my implementation, that's on first PTO. Of course, the PTO may or may not be due to a link failure, but hopefully is is infrequent enough that using the standby path briefly in case of PTO does not break the \"spirit\" of putting a path in standby.\r\n\r\nSending an \"abandon path\" immediately would also force traffic onto the standby path, but is is more drastic. If the packet loss situation was temporary, it causes the system to stop using the \"available\" path forever. In contrast, promoting the standby path to \"available\" is easily reversible. if after a PTO or a couple RTO the \"available\" path is restored, the client can decide to put the standby path back in standby mode.",
          "createdAt": "2024-03-11T20:06:08Z",
          "updatedAt": "2024-03-11T20:06:08Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I actually think it is more clear to explicit close a path if you detect it's broken. if the path comes back (whatever that means), you can simply try to open it again or actually a new path in this case. However, we can enforce this behaviour in ether way, therefore I think we should discuss the issue and maybe explain different solution but don't make any strict recommendation. ",
          "createdAt": "2024-03-12T14:52:02Z",
          "updatedAt": "2024-03-12T14:52:02Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You don't know when the path comes back. If you urgently need it, then you need to send probes regularly. If the path context is still up, you can do that by sending a ping, or repeating a path challenge at short intervals. If the path is gone, you need to create a new path, send a challenge, etc. If the challenge fails, you should also send an abandon -- because the peer maybe received the challenge but the response did not make it. So you consume the \"number of paths\" resource, and also the \"number of CID\".",
          "createdAt": "2024-03-12T15:28:32Z",
          "updatedAt": "2024-03-12T15:28:32Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "If you send pings you are supposed to close the path after a timeout.\r\n\r\nAlso if the path comes \"back\", you really don't know if that is still the same path. I think it would be much safer to send a path challenge.\r\n\r\nThis is what we currently say about recent addresses:\r\n\r\n```\r\n   Section 9.3 of [QUIC-TRANSPORT] allows an endpoint to skip validation\r\n   of a peer address if that address has been seen recently.  However,\r\n   when the multipath extension is used and an endpoint has multiple\r\n   addresses that could lead to switching between different paths, it\r\n   should rather maintain multiple open paths instead.\r\n```",
          "createdAt": "2024-03-12T15:34:21Z",
          "updatedAt": "2024-03-12T15:34:21Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This issue reminds me the experience I had when trying to optimise the latency of applications on smartphone devices with MPTCP and older non-standard MPQUIC implementations where the WiFi is considered as cheap and the cellular expensive. When smartphone users are initially connected to WiFi and moving away from their access point, they may eventually be out of WiFi reachability, leading to packet losses. There is often some delay between applications experiencing packet losses and the system declaring the WiFi as lost. During that timeline, the WiFi path acts as a blackhole.\r\n\r\nThe path priority (available/standby) is a scheduling concern, and each endpoint runs its own algorithm. It is up to each endpoint to determine when to start using \"standby\" paths. The \"path health status\" is also a local information, and depending on your traffic (fully upload or fully download), only one endpoint may be aware of a lossy path. Scheduling decisions at both sides impact the performance of the multipath transfer.\r\n\r\nI see two ways of handling this:\r\n- Either we define some informative frame about the \"path health status\". I had such a concept in my research experiments at that time, where a \"path health status\" frame advertises to the other endpoint that the related path suffers from connectivity issues. It is unlikely that we are going to define such a frame in the core multipath draft.\r\n- Or we could suggest to implementers (implementation considerations) to make a \"pure receiver\" (i.e., only receiving data, not sending any) to generate ack-eliciting frames (such as PING) from time to time to proactively detect that there is connectivity issue on that path. Probably the way to go for this draft.",
          "createdAt": "2024-03-12T15:53:14Z",
          "updatedAt": "2024-03-12T15:53:14Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@qdeconinck \"from time to time\" is the issue. There is bound to be a delay between the time the sender notices packets are not getting acked and the time a pure receiver notices that the occasional PING is not acked. The pure receiver will also tend to use longer estimates for the RTO. So we get the sequence:\r\n\r\n1. \"Available\" path breaks\r\n2. Sender notices a PTO, may start sending traffic to \"standby\" path\r\n3. Receiver notices a PTO, may start sending ACKs through \"standby\" path\r\n4. Sender notices too many RTO, decides to abandon path\r\n5. Receiver also abandons path.\r\n\r\nThe issue that I find is that if the gap between (2) and (3) is too long, the sender will also notice a PTO on the \"standby\" path, because the ACKs are sent by the receiver through the \"available\" path, and lost. My \"solution\" is:\r\n\r\n1. \"Available\" path breaks\r\n2. Sender notices a PTO, start sending traffic to \"standby\" path, sends \"PATH_AVAILABLE\" to promote the standby path.\r\n3. Receiver gets the  \"PATH_AVAILABLE\", starts sending ACKs on the standby path -- and typically only on that path after noticing a PTO on the old path.\r\n4. Sender notices too many RTO, decides to abandon path\r\n5. Receiver also abandons path.\r\n\r\n\r\n@mirjak proposes to just rely on \"ABANDON_PATH\". That's doable, but it results in:\r\n\r\n1. \"Available\" path breaks\r\n2. Sender notices a PTO, but does not change the scheduling of packets\r\n3. Receiver notices a PTO, but does not change the scheduling of packets\r\n4. Sender notices too many RTO, decides to abandon path, sends traffic through standby path\r\n5. Receiver also abandons path, sends traffic through standby path.\r\n\r\nThat will work, but that means the traffic resumes after \"too many RTOs\", which is a pain for several applications.\r\n",
          "createdAt": "2024-03-13T15:35:46Z",
          "updatedAt": "2024-03-13T15:35:46Z"
        }
      ]
    },
    {
      "number": 294,
      "id": "I_kwDOGNtpaM6CCDCO",
      "title": "\"Path ID\" needs to be clarified. Do both endpoints use the same path ID, or independently choose which path ID to use?",
      "url": "https://github.com/quicwg/multipath/issues/294",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR",
        "design",
        "explicit path ID"
      ],
      "body": "Based on discussion in PR #292:\r\n\r\n\r\n**[yangfurong](https://github.com/yangfurong) [on Nov 22, 2023] (https://github.com/quicwg/multipath/issues/new#r1401920170)**\r\n```\r\nFirst, I think the semantics of \"Path ID\" need to be clarified. For a specific bidirectional path, do both endpoints use the same path ID, or independently choose which path ID to use?\r\n```\r\n\r\n**@[qdeconinck](https://github.com/qdeconinck) qdeconinck [on Nov 22, 2023](https://github.com/quicwg/multipath/issues/new#r1402413785)**\r\n```\r\nI would keep the same logic as we did until now, i.e., each endpoint independently choose the Path ID it should use over a path. However, this \"Path ID\" (Flow ID may be more appropriate) would remain stable over a given path, even if the CID change.\r\n\r\nI have two concerns about forcing such synchronisation of Path ID:\r\n\r\n- Clients may try to create paths with Path IDs that are never seen by the server. For instance, Path ID 0 works, and it wants to try two additional paths, respectively with Path ID 1 and Path ID 2. However, the network path tried with Path ID 1 does not work and the server only sees Path ID 2 packets. If the client finally retires its Path ID 1, should the server also drop all related resources about its Path ID 1?\r\n- This would create issues if, for some use cases (like P2P), we would like the server to create paths to the client. What would happen if for some reason, both the client and the server try to open at the same time a path over the same network, but with different Path IDs?\r\n```\r\n\r\n**@[yangfurong](https://github.com/yangfurong) yangfurong [on Nov 23, 2023](https://github.com/quicwg/multipath/issues/new#r1402866322)**\r\n```\r\nIndeed, if both endpoints are allowed to initiate paths, it is better to not sync path IDs.\r\n```\r\n\r\n **@[michael-eriksson](https://github.com/michael-eriksson) michael-eriksson [on Nov 23, 2023](https://github.com/quicwg/multipath/issues/new#r1403326051)**\r\n```\r\nI would much prefer if paths had the same identifier in both directions, just like streams do. If also servers will be able to open paths, client-initiated path could use even path IDs and server-initiated path odd path IDs -- a direct reuse of the stream design.\r\n ```\r\n\r\n**@[yangfurong](https://github.com/yangfurong) yangfurong [on Nov 23, 2023](https://github.com/quicwg/multipath/issues/new#r1403613813)**\r\n```\r\n> I would much prefer if paths had the same identifier in both directions, just like streams do. If also servers will be able to open paths, client-initiated path could use even path IDs and server-initiated path odd path IDs -- a direct reuse of the stream design.\r\n\r\nIt's actually another way to somehow ''split'' the path ID spaces of endpoints. It solves the second problem as @qdeconinck pointed out. The only thing is how we define the TPs which limit the number of concurrent paths. There might be some options here. For examples:\r\n\r\n- We use one TP to indicate the number of concurrent paths that the sender is willing to accept. For instance, if both endpoints send ''2'', there will be four concurrent paths at maximum (each endpoint can initiate two paths).\r\n- We use two TPs where one indicates the max number of paths to be accepted by the sender and another one represents the max number of paths the sender wishes to initiate. This design allows endpoints to negotiate the total number of concurrent paths while the former one just informs the local decision to a peer.\r\n```\r\n\r\n**@[huitema](https://github.com/huitema) huitema [on Nov 26, 2023](https://github.com/quicwg/multipath/issues/new#r1405475249)**\r\n```\r\nI think we need to get a consensus on the management of path identifiers. I also think that we would get much better clarity if the client and server ended up using the same path ID values. Something like:\r\n\r\n1. The client proposes an initial number of paths, which limits how many path ID the server can \"pre allocate\" (to use @Yanmei-Liu terms)\r\n2. Both the server and the client pre-allocate connection identifiers, with path ID lower than the proposed limits.\r\n3. Client that starts a new path picks one of the server allocated CID, selecting the path ID.\r\n4. Server receiving a packet referencing a not yet use path ID must reply with client-allocated connection ID mentioning the same path ID.\r\n  - If the client has not yet allocated any such path ID, the server cannot send data on that new path.\r\n  - the client can always provide a new CID in messages containing a path challenge.\r\n  - the server can control how many paths will be open by simply limiting how many path ID it mentions.\r\n5. \"Abandon path(N)\" is handled pretty much like connection close, but just for the path. Any peer can send it, but the path is only closed if both do, or if RTO pass.\r\n  - if a path is abandoned, we should say what happens if the peer keeps using it. Drop the packets? Repeat the Abandon Path message?\r\n6. Path ID cannot be reused. If a path_id is abandoned, all CID allocated for that path should be retired.\r\n7. The client can use a MAX_PATH_ID frame to increase the number of supported paths.\r\n```",
      "createdAt": "2024-03-12T13:05:07Z",
      "updatedAt": "2024-05-24T17:31:28Z",
      "closedAt": "2024-05-24T17:31:28Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we actually have consensus that the same path ID is used in both directions? If so, can people review PR #315 please! Thanks!",
          "createdAt": "2024-05-08T15:45:43Z",
          "updatedAt": "2024-05-08T15:45:43Z"
        }
      ]
    },
    {
      "number": 295,
      "id": "I_kwDOGNtpaM6CCPC4",
      "title": "Is RETIRE_PATH_ID needed?",
      "url": "https://github.com/quicwg/multipath/issues/295",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "explicit path ID"
      ],
      "body": "This is from the discussion on PR #292:\r\n\r\n\r\n**[yfmascgy](https://github.com/yfmascgy) [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#r1400142192)**\r\n```\r\nWhat happens if the one endpoint doesn't how many path is needed? In the case of a deteriorating wifi, the endpoint wants to switch to 5G, but finds itself with no Path ID to use? What is the pre-allocating strategy?\r\n```\r\n\r\n**@[Yanmei-Liu](https://github.com/Yanmei-Liu) Yanmei-Liu [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#r1400147984)\r\n```\r\nEndpoints just need to decide the max concurrent path and pre-allocate at lease one unused CID for each path Identifier. Endpoints don't need to decide which Path Identifier to use until client start a new path and choose one available CID with the unused Path Identifers.\r\n```\r\n\r\n**@[yfmascgy](https://github.com/yfmascgy) yfmascgy [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#r1400179527)**\r\n```\r\nI am thinking a situation where you want max of three paths. You have your first path established. Try to establish another two paths on the 2nd sim and 3rd sim but failed. Then you don't have a path ID to build a path on the 4th sim even though it is available to use and can give you in total 2 paths (< max_num_path)\r\n```\r\n\r\n**@[kazuho](https://github.com/kazuho) kazuho [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#r1400194859)**\r\n```\r\nMaybe using the scheme that we have for Connection IDs in QUIC v1 would drive the discussion.\r\n\r\nIf we do that, then\r\n\r\n- the user of path IDs will send a TP indicating the number of paths from which it can send packets concurrently,\r\n- the peer sends MAX_PATH_IDS frame signaling the maximum path ID the user can use (consider MAX_DATA or MAX_STREAMS as precedents),\r\n- the user uses the path ids, and when it is done, sends a RETIRE_PATH_ID carrying the path id to be retired. We cannot use PATH_ABANDON here because it serves a different purpose and sent in the opposite direction,\r\n- when receiving a RETIRE_PATH_ID frame, the peer may raise the limit advertised by MAX_PATH_IDS.\r\n```\r\n\r\n**@[Yanmei-Liu](https://github.com/Yanmei-Liu) Yanmei-Liu [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#r1400306454)**\r\n```\r\n@kazuho 's idea is quite useful, I added these mechanism:\r\n\r\n- TP initial_max_paths for the initial max Path ID limitation.\r\n- MP_MAX_PATHS frames could solve this issue by raise the limit of Path Identifier.\r\n\r\nWe don't need a RETIRE_PATH_ID here because Path Abandon has already been a clear signal for Path ID retirement.\r\n```\r\n\r\n**@[kazuho](https://github.com/kazuho) kazuho [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#discussion_r1400406713)**\r\n```\r\nThanks. I\u2019m afraid PATH_ABANDON cannot be used, as it is sent in the different direction. We need a new frame.\r\n\r\nIIUC, PATH_ABANDON is a frame sent by the issuer of CIDs (who will also the issuer of path IDs in the new design). It is a frame that \u201crequests the peer\u201d to abandon the path.\r\n\r\nWhat we are looking for now is a frame that is sent by the receiver (i.e., the user) of the CIDs / path IDs, that carries the fact that the path has been abandoned.\r\n```\r\n\r\n**@[Yanmei-Liu](https://github.com/Yanmei-Liu) Yanmei-Liu [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#discussion_r1400415916)**\r\n```\r\nI think it's fine for the issuer of Path IDs to take responsibility of retiring them.\r\nBesides, the receiver of the Path IDs could also use the Path Abandon to trigger the retirement of Path Identifier for both sides.\r\n```\r\n\r\n**@[kazuho](https://github.com/kazuho) kazuho [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#discussion_r1400444377)**\r\n```\r\n> I think it's fine for the issuer of Path IDs to take responsibility of retiring them.\r\nConsider the case of an endpoint deciding to stop using a path on which it sends packets. That endpoint has to retire the CID (or the path identifier in the new design) that is issued by the peer.\r\n\r\nIn -05, we use RETIRE_CONNECTION_ID as a signal. But in the new design, we are splitting CIDs and path IDs. So we need a new frame.\r\n\r\n> Besides, the receiver of the Path IDs could also use the Path Abandon to trigger the retirement of Path Identifier for both sides.\r\nThe path ID space will be different for each endpoint, won't it be? This is because each endpoint has its own view of paths, similar to Connection IDs.\r\n\r\nIf we are to use PATH_ABANDON for requesting retirement of path ID that the endpoint issued and also for signalling that retirement of a path ID that the peer issued, we need to add a field indicating to which side of path ID space (i.e., the endpoint or the peer) that the frame is referring.\r\n\r\nBut as the role of the frame will be different (as said, one endpoint signals the request to retire path ID, whereas the other side signals the fact that the path ID has been retired; that is how PATH_ABANDON and RETIRE_CONNECTION_ID work today), it might be better to have a different frame.\r\n```\r\n\r\n**@[yangfurong](https://github.com/yangfurong) yangfurong [on Nov 22, 2023](https://github.com/quicwg/multipath/issues/new#discussion_r1401979774)**\r\n```\r\n>The path ID space will be different for each endpoint, won't it be? This is because each endpoint has its own view of paths, similar to Connection IDs.\r\n\r\nWhy can't we use the same path ID space for both endpoints? I understand that it is necessary to have different spaces when the DCID sequence number is used for identifying paths. But, it is a result of using DCID sequence numbers as path identifiers which are not stable during the lifetime of paths. Since we are going to use explicit and stable path IDs, is it still necessary to have different ID spaces?\r\n```\r\n\r\n**@[yangfurong](https://github.com/yangfurong) yangfurong [on Nov 22, 2023](https://github.com/quicwg/multipath/issues/new#discussion_r1402009196)**\r\n```\r\nIf the two endpoints use the same path ID for a specific path, the situation becomes simpler.\r\n\r\n1. When the client finds the establishment of path1 and path2 fails, it should send two PATH_ABANDON frames to the server;\r\n2. Once the server receives the PATH_ABANDON frames, it should reply with two PATH_ABANDON frames and issue new CIDs associated with path3 and path4;\r\n3. When the client receives PATH_ABANDON frames from its peer, it should also issue new CIDs associated with path3 and path4;\r\n4. Once the client notices that both endpoints have available CIDs for the next path to be created and the active path count is less than the limit, it can request to open a new path.\r\n```\r\n\r\n**@[Yanmei-Liu](https://github.com/Yanmei-Liu) Yanmei-Liu [on Nov 23, 2023](https://github.com/quicwg/multipath/issues/new#r1402884204)**\r\n```\r\nUsing the same Path ID for both sides will introduce more negotiation and frame order dependency, we'd better avoid that.\r\n```\r\n\r\n**@[Yanmei-Liu](https://github.com/Yanmei-Liu) Yanmei-Liu [on Nov 23, 2023](https://github.com/quicwg/multipath/issues/new#r1402890767)**\r\n```\r\nI'm considering add a retirement frame for Path ID.\r\nAs @kazuho points out, we need retirement signals for both sides:\r\n\r\n- Although in normal situations Path Abandon could release the Path ID associated on both sides, but there're situations when endpoint try to create a new path by Path Challenge but the peer doesn't receive the packet and don't know what happened to the Path ID consumed.\r\n- Also, when endpoint allocates new CIDs for new Path IDs, it will not know whether it touch the max limit or not, as we don't have a retirement signal for Path ID and peer could maintain the history Path IDs. It's the same situation happens to CIDs, and that's why we need retirement frame and Retire Prior To field.\r\n ```\r\n\r\n**@[michael-eriksson](https://github.com/michael-eriksson) michael-eriksson [on Nov 23, 2023](https://github.com/quicwg/multipath/issues/new#r1403338005)**\r\n```\r\n> Using the same Path ID for both sides will introduce more negotiation and frame order dependency, we'd better avoid that.\r\n\r\nWhy is that? The connection IDs are signalled before the path is used and will uniquely identify the path; the first time a peer sees a connection ID used in a packet it can directly map the CID to a path which has a single stable path identifier. No negotiation or other extra signalling is needed.\r\n\r\nIf/when the protocol is extended to allow servers to initiate paths, the protocol should use even/odd path IDs, exactly like stream IDs are already used.\r\n```\r\n\r\n\r\n**@[huitema](https://github.com/huitema) huitema [on Nov 26, 2023](https://github.com/quicwg/multipath/issues/new#r1405472143)**\r\n```\r\nWe need more discussion of that specific point. The current situation is ambiguous. For example, what does \"Abandon path 17\" means? I am pretty sure that some implementations are going to get confused between \"the ID chosen by the server\" and \"the ID chosen by the client\".\r\n```\r\n\r\n**@[huitema](https://github.com/huitema) huitema [3 weeks ago](https://github.com/quicwg/multipath/issues/new#r1495321688)**\r\n```\r\nI think that if we go through the trouble of changing the current solution, we should go for having the same path ID in both directions. It will make management much simpler, and it is not very hard, see later comments.\r\n```",
      "createdAt": "2024-03-12T13:27:22Z",
      "updatedAt": "2024-03-17T07:29:37Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we let Path Abandon to do the job of retiring the associated Path ID, we don't need RETIRE_PATH_ID as far as I know.",
          "createdAt": "2024-03-17T06:24:57Z",
          "updatedAt": "2024-03-17T06:24:57Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See issue #313, which is somewhat related. ",
          "createdAt": "2024-03-17T07:29:35Z",
          "updatedAt": "2024-03-17T07:29:35Z"
        }
      ]
    },
    {
      "number": 296,
      "id": "I_kwDOGNtpaM6CCZDW",
      "title": "Is MP_RETIRE_CONNECTION_ID needed?",
      "url": "https://github.com/quicwg/multipath/issues/296",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "explicit path ID"
      ],
      "body": "From discussion in PR #292:\r\n\r\n**[huitema](https://github.com/huitema) [on Nov 20, 2023](https://github.com/quicwg/multipath/issues/new#r1399591428)**\r\n```\r\nI think adding an MP_RETIRE_CONNECTION_ID is unnecessary, and complicates the design. It is simpler to keep connection sequence number unique globally, and leave the RETIRE CONNECTION ID unchanged.\r\n ```\r\n\r\n**@[michael-eriksson](https://github.com/michael-eriksson) michael-eriksson [on Nov 23, 2023](https://github.com/quicwg/multipath/issues/new#r1403355808)**\r\n```\r\nI think that a per-path CID sequence number space is simpler, in particular since the MP_NEW_CONNECTION_ID has a Retire Prior To field. Retiring CIDs (which could be in use) for other paths when you get new CIDs for a path seems complex and not very useful.\r\n```",
      "createdAt": "2024-03-12T13:45:31Z",
      "updatedAt": "2024-03-17T06:19:10Z",
      "closedAt": "2024-03-17T06:19:10Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Also from discussion in PR #292:\r\n\r\n**@[huitema](https://github.com/huitema) huitema [on Nov 20, 2023](https://github.com/quicwg/multipath/issues/296#r1399596824)**\r\n```\r\nRetire Prior cannot be path specific. In practice, retire prior applies to all connection ID allocated before some event, such as rotation of the encryption key of connection ID used by the load balancer. In that scenario, repeating MP_RETIRE_CONNECTION_ID for every path would be very error prone.\r\n```\r\n\r\n**@[huitema](https://github.com/huitema) huitema [2 weeks ago](https://github.com/quicwg/multipath/issues/296#r1501369530)**\r\n```\r\nOK, strike that. We are going for collection of CID per path (or per path ID), and identification of CID by the tuple {path_id, sequence}. So we pretty much need MP_RETIRE_CONNECTION_ID .\r\n```",
          "createdAt": "2024-03-12T13:47:52Z",
          "updatedAt": "2024-03-12T13:47:52Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Also from discussion in PR #292:\r\n\r\n**@[huitema](https://github.com/huitema) huitema [on Nov 20, 2023](https://github.com/quicwg/multipath/issues/296#r1399596824)**\r\n```\r\nRetire Prior cannot be path specific. In practice, retire prior applies to all connection ID allocated before some event, such as rotation of the encryption key of connection ID used by the load balancer. In that scenario, repeating MP_RETIRE_CONNECTION_ID for every path would be very error prone.\r\n```\r\n\r\n**@[huitema](https://github.com/huitema) huitema [2 weeks ago](https://github.com/quicwg/multipath/issues/296#r1501369530)**\r\n```\r\nOK, strike that. We are going for collection of CID per path (or per path ID), and identification of CID by the tuple {path_id, sequence}. So we pretty much need MP_RETIRE_CONNECTION_ID .\r\n```",
          "createdAt": "2024-03-12T13:48:59Z",
          "updatedAt": "2024-03-12T13:48:59Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema sounds like we can close this issue. Can you confirm and go ahead and close?",
          "createdAt": "2024-03-12T13:49:20Z",
          "updatedAt": "2024-03-12T13:49:20Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes.",
          "createdAt": "2024-03-13T04:39:20Z",
          "updatedAt": "2024-03-13T04:39:20Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes. MP_RETIRE_CONNECTION_ID is needed. It's consensus",
          "createdAt": "2024-03-17T06:19:10Z",
          "updatedAt": "2024-03-17T06:19:10Z"
        }
      ]
    },
    {
      "number": 297,
      "id": "I_kwDOGNtpaM6CCvgp",
      "title": "Should Path IDs be reused or?",
      "url": "https://github.com/quicwg/multipath/issues/297",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "needs-discussion",
        "explicit path ID"
      ],
      "body": "From PR #292:\r\n\r\n**@[huitema](https://github.com/huitema) huitema [on Nov 20, 2023](https://github.com/quicwg/multipath/issues/new#r1399607235)**\r\n```\r\nThe path identifier is used to build the nonce. Reusing the same identifier would require either continuing the previously used sequence number space, otherwise the nonce would not be unique. But then that would require keeping these old number spaces in memory until the end of the connection, which seems like a waste of resource. Then there is the risk of confusion, what happens if old packets are delivered from a previous path using the path identifier.\r\n\r\nWe should make this very clear in the design. If the design goes for \"re-use\", then the node has to allocate an array of number spaces for the negotiated max number of spaces, and keep that for the duration of the connection. The effect of \"Abandon path\" becomes complicated -- if a CID for path N has never been used, should it be retired?\r\n\r\nIf the design goes for \"unique path ID\", the management of path and sequence numbers becomes simpler, but we need some logic to enforce the \"maximum number of active paths\". An advantage there is that endpoints can allocate more CID and more path than really needed, so the endpoint is always ready to start a new path after a previous one has been abandoned.\r\n```\r\n\r\n**@[kazuho](https://github.com/kazuho) kazuho [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#r1400043855)**\r\n```\r\nI do not feel strongly, but I think current design is fine as is.\r\n\r\nIn the new design, a QUIC Multipath connection that support N concurrent paths is essentially equivalent to N QUIC v1 connections running in parallel. If we think that way, migrating a particular path of a multipath connection can be equivalent to QUIC v1 doing intentional path migration.\r\n\r\nI do not think we have a problem in the design of QUIC v1 doing path migration. Do we?\r\n\r\ncc: @marten-seemann as also brought up the point.\r\n```\r\n\r\n**@[marten-seemann](https://github.com/marten-seemann) marten-seemann [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#r1400055027)**\r\n```\r\nI don't think we should reuse path identifiers. As @huitema correctly points out, reusing path identifiers means we can't start the packet number at 0 for reused paths, since that would be nonce reuse. The situation is even worse: As packet numbers are encoded in a maximum of 4 bytes, it wouldn't be possible to reuse a path ID once packet numbers have surpassed 2^32, unless you want to keep state for retired paths.\r\n\r\nHere's an idea (not fully fleshed out): We could define a PATH_LIMIT { HighestPathID (i) } frame. The receiver of this frame can then issue CIDs up to the highest Path ID, and the sender can use this path as soon as it received CIDs.\r\n```\r\n\r\n**@[Yanmei-Liu](https://github.com/Yanmei-Liu) Yanmei-Liu [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#r1400071961)**\r\n```\r\nI also prefer \"unique path ID\" here for AEAD security consideration. Not reusing resources and less corner case.\r\n```\r\n\r\n\r\n**@[kazuho](https://github.com/kazuho) kazuho [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#r1400077386)**\r\n```\r\n@marten-seemann\r\n\r\n> As @huitema correctly points out, reusing path identifiers means we can't start the packet number at 0 for reused paths, since that would be nonce reuse. The situation is even worse: As packet numbers are encoded in a maximum of 4 bytes, it wouldn't be possible to reuse a path ID once packet numbers have surpassed 2^32, unless you want to keep state for retired paths.\r\nI'm afraid this analysis is incorrect (specifically the 2nd sentence).\r\n\r\nIn QUIC v1, we retain packet numbers and those information for one path. In Multipath QUIC, we can do the same for N concurrent paths.\r\n\r\nIt is as simple as that.\r\n\r\n@Yanmei-Liu\r\n\r\n>Not reusing resources and less corner case.\r\n\r\n\"Not reusing resources\" this is correct. But the downside of not reusing path identifiers is that and endpoint has to issue credit to the other side (like MAX_STREAMS or NEW_CONNECTION_ID of QUIC v1).\r\n\r\nIt is the trade off between the two.\r\n```\r\n\r\n**@[kazuho](https://github.com/kazuho) kazuho [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#discussion_r1400081152)**\r\n```\r\nFor the purpose of pushing this PR forward as an experiment, I'm happy with going with the \"no-reuse\" route, but I want to have the records straight, as we will be coming back to the discussion of if the \"explicit path identifiers\" concept really makes sense.\r\n```\r\n\r\n**@[marten-seemann](https://github.com/marten-seemann) marten-seemann [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#discussion_r1400089897)**\r\n```\r\n> unless you want to keep state for retired paths\r\n\r\nI don't think my analysis is incorrect. You need to be able to reconstruct the packet number if you want to be able to decrypt the packet. So at the very least, you need to keep state to save the highest received packet number for every path ID.\r\n\r\nThat's not a lot of state, but there are other problems with reusing path IDs, namely that you're introducing much more reliance on timers than if you just keep incrementing. That's the reason why none of the other identifiers we use in the protocol ever wrap around (packet numbers, stream IDs, etc.).\r\n```\r\n\r\n**@[kazuho](https://github.com/kazuho) kazuho [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#discussion_r1400099026)**\r\n```\r\n>I don't think my analysis is incorrect. You need to be able to reconstruct the packet number if you want to be able to decrypt the packet. So at the very least, you need to keep state to save the highest received packet number for every path ID.\r\n\r\nThe presumption of reusing path identifiers is, as @huitema points out, that the packet number space would be retained. Highest received packet number is a property of a packet number space, so it does not cause any extra burden.\r\n```\r\n\r\n**@[Yanmei-Liu](https://github.com/Yanmei-Liu) Yanmei-Liu [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#discussion_r1400141853)**\r\n```\r\nHow about we use an interval for PATH_LIMIT { lowest path ID, highest path ID} frame here?\r\nTo inform the peer about the available range for Path IDs, and it has a clear signal for retirement of Path IDs.\r\n```\r\n\r\n**@[kazuho](https://github.com/kazuho) kazuho [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#discussion_r1400150933)**\r\n```\r\n@Yanmei-Liu I'm not sure if we can use a contiguous range for representing valid IDs.\r\n\r\nConsider the case of an endpoint sticking to using path ID 0, while retiring all paths between ID 2 to 9.\r\n\r\nI think it would make more sense to follow the design that we have for stream IDs / Connection IDs; i.e., have one frame that issues the new maximum, and another that informs the peer one path ID that is being disposed.\r\n```\r\n\r\n**@[Yanmei-Liu](https://github.com/Yanmei-Liu) Yanmei-Liu [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#r1400211449)**\r\n```\r\nPlease check the MP_MAX_PATHS frames part, it's Marten's idea and he reminds me of the mechanism is quite the same with MAX_STREAMS. I also update the mechanism of transport parameter for \"initial_max_paths\". It's true that we will not be able use contiguous range. I just use the maximum value.\r\n```\r\n\r\n**@[mirjak](https://github.com/mirjak) mirjak [on Nov 21, 2023](https://github.com/quicwg/multipath/issues/new#r1400478032)**\r\n```\r\nShould we can keep using the Destination Connection ID sequence number for the nonce and use a common sequence number space for all CIDs (as I believe CIDs should probably to be unique as well)? That means the encryption changes when the CID changes but I don't think that is a big issue...?\r\n```\r\n\r\n **@[michael-eriksson](https://github.com/michael-eriksson) michael-eriksson [on Nov 23, 2023](https://github.com/quicwg/multipath/issues/new#r1403382401)**\r\n```\r\nWe should definitely not reuse path IDs. One of the nice things with QUIC is that it doesn't reuse any identifiers, not even packet numbers, which makes implementations cleaner and simpler.\r\n\r\nWhen it comes to limiting the number of paths, I think there are two main designs:\r\n\r\n1. Reuse the design for connection IDs: limit the number of active paths. The max number of active CIDs is signalled as a transport parameter (active_connection_id_limit) and an endpoint is allowed to issue a new CID only after the peer has retired a previous CID. Analogously, an endpoint would only issue CIDs for a new path after a previous path had been abandoned.\r\n2. Use a MP_MAX_PATHS frame to dynamically allow new paths (similar to a MAX_STREAMS frame).\r\n\r\nIn short summary, 1. has less signalling and 2. can dynamically adapt the number of concurrent paths. Both designs have prior art in RFC 9000.\r\n```\r\n\r\n** @[michael-eriksson](https://github.com/michael-eriksson) michael-eriksson [on Nov 23, 2023](https://github.com/quicwg/multipath/issues/new#r1403398359)**\r\n```\r\n> Should we can keep using the Destination Connection ID sequence number for the nonce and use a common sequence number space for all CIDs (as I believe CIDs should probably to be unique as well)? That means the encryption changes when the CID changes but I don't think that is a big issue...?\r\n\r\nI don't think that a common sequence number space for all CIDs match well with the Retire Prior To field in the MP_NEW_CONNECTION_ID (see also other comment above) so using the path ID is a simpler way to get a unique nonce. When a packet is received, you anyway need to look up the per-path state, and the packet number space in particular, before you can expand the truncated packet number and then decrypt the packet which means that you can trivially also access the path ID.\r\n\r\nThere is also https://github.com/quicwg/multipath/issues/215 (now closed) as another solution to the nonce handling.\r\n```\r\n\r\n**@[huitema](https://github.com/huitema) huitema [on Nov 26, 2023](https://github.com/quicwg/multipath/issues/new#r1405471433)**\r\n```\r\nI like@kazuho's suggestion of using the same logic for controlling path ID as for controlling stream ID, but there is a little complicating factor. Stream ID are allocated in clear contexts (uni/bidir, client/server), and then the same stream ID is used in both directions. In the current design, stream IDs are allocated as part of CID, and there is no guarantee that client and server pick the same ID for a new path. DO we want to also handle that?\r\n```",
      "createdAt": "2024-03-12T14:24:37Z",
      "updatedAt": "2024-05-14T13:44:33Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Also from PR #292:\r\n\r\n**[huitema](https://github.com/huitema) [on Nov 20, 2023](https://github.com/quicwg/multipath/issues/297#r1399608616)**\r\n```\r\nSee comments above. In my mind, using the path ID in the nonce pretty much mandates unique path ID. Something like a monotonously increasing number.\r\n```\r\n\r\n+1 from @michael-eriksson @Yanmei-Liu @qdeconinck ",
          "createdAt": "2024-03-12T14:28:53Z",
          "updatedAt": "2024-03-12T14:28:53Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds like we all agree on this resolution but this might need some clarification in the draft.",
          "createdAt": "2024-03-12T14:29:23Z",
          "updatedAt": "2024-03-12T14:29:23Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Not that I have a strong opinion, but I do wonder if we need the concept of issuing and retiring new path IDs at all; see https://github.com/quicwg/multipath/issues/321.\r\n\r\nIn case of CIDs, we need to have the mechanism of issuing new CIDs, because the path migration can happy many nany times.\r\n\r\nBut path IDs are not exposed to the path, so endpoints can reuse them. It might sound counterintuitive to reuse an old path ID when intentionally creating a new path. But the catch is that the required behavior of intentionally migrating to a different path is going to be identical to involuntary migration (i.e., NAT rebinding) that we have to handle.\r\n\r\nConsidering that, to me it seems like an unnecessary complexity to have a different mechanism to handle intentional migration.",
          "createdAt": "2024-03-19T06:09:00Z",
          "updatedAt": "2024-03-19T06:09:00Z"
        }
      ]
    },
    {
      "number": 298,
      "id": "I_kwDOGNtpaM6CC7AZ",
      "title": "Clarify use of MAX_PATHS  and client created new paths",
      "url": "https://github.com/quicwg/multipath/issues/298",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR",
        "design",
        "explicit path ID"
      ],
      "body": "Issue raised in PR #292:\r\n\r\n**[huitema](https://github.com/huitema) [3 weeks ago](https://github.com/quicwg/multipath/issues/new#r1493952794)**\r\n```\r\nI think we should be a bit more prescriptive here. I would like MAX_PATHS to follow the same logic as MAX_STREAMS, and describe the number of paths that MAY be created by the peer. I would also like to exploit the asymmetry of clients and servers, in which only the clients create new paths. Something like:\r\n\r\n1. The server send MAX_PATHS to raise the maximum path number that it is willing to accept.\r\n2. The client sends MAX_PATHS to raise the maximum path number that it is willing to create.\r\n3. The server sends MP_NEW_CONNECTION_ID up to the min of client and server MAX_PATHS\r\n4. The client sends MP_NEW_CONNECTION_ID up to the min of client and server MAX_PATHS\r\n5. The client picks a server provided connection ID to create a new path, send a PATH CHALLENGE\r\n6. If the server receives the challenge, it picks a connection ID with the same path ID for sending the PATH RESPONSE\r\n\r\nWe have a set of error conditions:\r\n\r\n- Server sends MP_NEW_CONNECTION_ID with path ID larger than client limit -- protocol error\r\n- Client sends MP_NEW_CONNECTION_ID with path ID larger than server limit -- protocol error\r\n- Server receives a PATH CHALLENGE before receiving MP_NEW_CONNECTION_ID for the path -- not an error, but the PATH \r\n\r\nCHALLENGE is ignored, no response. Or, response is delayed until MP_NEW_CONNECTION_ID arrives.\r\nBut we also achieve path_id symmetry, I guess. Although there is probably some additional complexity with NAT Rebinding.\r\n```\r\n\r\n** @[michael-eriksson](https://github.com/michael-eriksson) michael-eriksson [3 weeks ago](https://github.com/quicwg/multipath/issues/new#r1495900516)\r\n```\r\nI agree, and this is more or less exactly how it is implemented in the Rask stack.\r\n```\r\n\r\n**@[huitema](https://github.com/huitema) huitema [2 weeks ago](https://github.com/quicwg/multipath/issues/new#r1501348942)**\r\n```\r\nThere is another issue regarding probing for new paths. When a client wants to create a new path, it is supposed to use a \"new\" path_id, select CID that match the path ID, send a Path Challenge, and wait for the Path Response. The Path Response may well never arrive. That means that the Path ID is \"burned\" for the client, but also for the server. But the server does not know, will not know until the client sends a Path Abandon. We should be clear that the client should do that. We should also clarify how the Path Abandon causes all the CID allocated for the path ID to be retired.\r\n```",
      "createdAt": "2024-03-12T14:45:23Z",
      "updatedAt": "2024-03-17T12:43:38Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 301,
      "id": "I_kwDOGNtpaM6ChdrZ",
      "title": "Write Security Consideration section",
      "url": "https://github.com/quicwg/multipath/issues/301",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "needs PR"
      ],
      "body": "The draft lacks content in the security consideration section. It is definitely time to start dealing with this. \r\n\r\nIssues for MP-QUIC include:\r\n\r\n- Max paths allowed to be open gives the size for what amount of traffic an attacker can cause towards an attack target by having the server send path_validate + path_challenge. \r\n- Having path resource control opens up for similar errors as have been found in QUIC. \r\n- etc. ",
      "createdAt": "2024-03-16T06:16:36Z",
      "updatedAt": "2024-03-18T06:23:47Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 302,
      "id": "I_kwDOGNtpaM6Chehq",
      "title": "Missing reference to sequence number for DCID",
      "url": "https://github.com/quicwg/multipath/issues/302",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "needs PR"
      ],
      "body": "Section 2:\r\n\r\n\"Further, the sequence number of Destination Connection ID is used as numerical identifier in control frames.\" This is unclear in how the sequence number works. This likely should have a reference to Section 5.1.1 in RFC 9000.\r\n",
      "createdAt": "2024-03-16T06:24:34Z",
      "updatedAt": "2024-05-14T14:05:03Z",
      "closedAt": "2024-05-14T14:05:03Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "We now use the path ID instead of the sequence number, so this issue is obsolete. Closing it now..",
          "createdAt": "2024-05-14T14:05:03Z",
          "updatedAt": "2024-05-14T14:05:03Z"
        }
      ]
    },
    {
      "number": 303,
      "id": "I_kwDOGNtpaM6ChfTm",
      "title": "Recommendation on token ambiguity issue is violating RFC 9000",
      "url": "https://github.com/quicwg/multipath/issues/303",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question",
        "editorial"
      ],
      "body": "Section 4.1:\r\n\r\n\"To alleviate such a token ambiguity issue, a server may issue a token that is capable of validating any of the previously validated addresses.\" \r\n\r\nisn't this against this normative rule in Section 8.1.1 of RFC 9000: \r\n\r\n\"A token sent in a NEW_TOKEN frame or a Retry packet MUST be constructed in a way that allows the server to identify how it was provided to a client. These tokens are carried in the same field but require different handling from servers.\"?\r\n\r\n",
      "createdAt": "2024-03-16T06:31:13Z",
      "updatedAt": "2024-05-14T14:13:45Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes it updates/changes this rule.",
          "createdAt": "2024-03-18T06:24:52Z",
          "updatedAt": "2024-03-18T06:24:52Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The rule in 8.1.1 is about distinguishing \"real time\" tokens created when sending a RETRY packet, and \"long term\" tokens send in NEW_TOKEN frames. The general expectation is that real time tokens are very short lived, but that NEW_TOKEN are valid longer. That's explained in section 8.1.3.\r\n\r\nThe NEW_TOKEN serve to attest that the client can legitimately send packets from a source IP address, and thus that address validation can be bypassed. This is generally done by linking the token to exactly one address, but there is no hard rule against linking to several IP addresses, as long as the server is convinced that the client can legitimately send packets from these IP addresses.\r\n\r\n",
          "createdAt": "2024-03-18T06:38:30Z",
          "updatedAt": "2024-03-18T06:38:30Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, I guess the statement above is vague enough that there is actually no conflict with RFC9000 as it only says \"identify how it was provided to a client\". We now add to this requirement and say all IP addresses used by the client need to be validated. Or I guess if you can't validate all IP addresses that have been used before, resumption might simply fails from some addresses, which I guess is okay as well.\r\n\r\nTwo quick questions:\r\n1. Not sure anymore if we need to say more. Do we? What?\r\n2. Should the sentence also use normative language?  ",
          "createdAt": "2024-05-14T14:13:27Z",
          "updatedAt": "2024-05-14T14:13:27Z"
        }
      ]
    },
    {
      "number": 304,
      "id": "I_kwDOGNtpaM6Chfef",
      "title": "Unclear usage of direciton of Path in specifcation text",
      "url": "https://github.com/quicwg/multipath/issues/304",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has PR",
        "editorial",
        "no-action-needed"
      ],
      "body": "During the reading I found places where me as reader got confused about which direction a message was sent. An example of this is the below. \r\n\r\nSection 4.3.1 and 4.3.3:\r\nDoesn't the use of Retire_connection_id is potentially in the reverse to how RFC9000 use it. Especially as the one receiving one a path can retire the connection ID, as well as the sender can indicate that it will not use it. However, to my understanding of how the frames are defined this can only be used in a particular direction. If A sends to B using DCID=X, which has sequence number Y. Then PATH_ABANDON with sequence Y can only be sent by B to A. And RETIRE_CONNECTION_ID can only be sent by A with seq=Y referencing DCID=X. \r\n\r\nTo my understanding of the text, this procedure is happening per direction independent and each path is going a unidirectional. However, one normally initiate the reverse direction path also. So I think it would be good if these section were a bit clearer with the various endpoints role in regards to who issued the CID etc so that it is less unclear in which direction this can be used. Because at first I thought you have reversed the usage of RETIRE_CONNECTION_ID. But that does not appear possible.\r\n\r\nSo I think the problem is that the document is not clear on when paths are used bi-directional, and when the path state in each direction can be different. Which also applies to closing it down aspects. \r\n",
      "createdAt": "2024-03-16T06:33:31Z",
      "updatedAt": "2024-05-14T16:46:50Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "Another example where the spec is a bit confused on if a path is unidirectional or not. \r\n\r\nSection 4.4:\r\n\r\n\"The endhost can use all the paths in the \"Active\" state, provided that the congestion control and flow control currently allow sending of new data on a path. Note that if a path became idle due to a timeout, endpoints SHOULD send PATH_ABANDON frame before closing the path.\" \r\n",
          "createdAt": "2024-03-16T06:34:37Z",
          "updatedAt": "2024-03-16T06:34:37Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I address the sentence is section 4.4 as part of PR #334. I think the rest might be obsolete with the explicit Path ID merge?",
          "createdAt": "2024-05-14T16:46:41Z",
          "updatedAt": "2024-05-14T16:46:41Z"
        }
      ]
    },
    {
      "number": 305,
      "id": "I_kwDOGNtpaM6ChfoG",
      "title": "Split State diagram based on role as sender on a path or receiver. ",
      "url": "https://github.com/quicwg/multipath/issues/305",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Section 4.4:\r\n\r\nI think Figure 1 should be split in one state diagram per role of sender on a path and receiver on a path. ",
      "createdAt": "2024-03-16T06:35:24Z",
      "updatedAt": "2024-03-18T06:23:21Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 306,
      "id": "I_kwDOGNtpaM6Chf0y",
      "title": "In some situations the ACK frames will be for CID with sequence number 1",
      "url": "https://github.com/quicwg/multipath/issues/306",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "no-action-needed"
      ],
      "body": "Section 5.1\r\n\"If the multipath extension has been successfully negotiated, ACK frames in 1-RTT packets acknowledge packets sent with the Connection ID having sequence number 0.\"\r\n\r\nI want to note the following in RFC 9000 from section 5.1.1:\r\n\"If the preferred_address transport parameter is sent, the sequence number of the supplied connection ID is 1.\"\r\n\r\nTo my understanding there is this case discussed in Section 4:\r\n\"They can also start using multiple paths, unless both server preferred addresses and a disable_active_migration transport parameter were provided by the server, in which case a client is forbidden to establish new paths until \"after a client has acted on a preferred_address transport parameter\" (Section 18.2. of [QUIC-TRANSPORT]).\"\r\n\r\nIsn't it necessary to use normal ACK frames while performing this migration. Thus, normal ACKS may also be used for sequence number 1? Or should one use MP_ACKS for this sequnce number space?\r\n\r\nSo text should be updated to include this exception or clarify usage of MP_ACK in this case. . ",
      "createdAt": "2024-03-16T06:36:58Z",
      "updatedAt": "2024-05-14T16:45:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the multipath draft needs to explicitly update that section of RFC 9000. \r\n\r\nThe sender preferred path is carried as a transport parameter, and is only activated after the client has received the server's transport parameters. At that point, the client knows whether multipath has been negotiated or not. When multipath is negotiated, the following should apply:\r\n\r\n1) The CID provided in the preferred address transport parameter is considered to have path-ID=1. We can debate whether the CID sequence number shall be zero or 1, it does not matter much, and sequence number 1 would help maintain some compatibility with RFC 9000\r\n\r\n2) If the client creates a new path using the server provided parameters, that new path SHOULD have path-ID=1.\r\n\r\n3) For the new path, we use MP_ACK, etc.",
          "createdAt": "2024-03-19T18:56:58Z",
          "updatedAt": "2024-03-19T18:56:58Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "But we should only do that work after we have decided whether to use unique path ID or not. This is an area where the CID solution is in fact simpler.",
          "createdAt": "2024-03-19T18:58:11Z",
          "updatedAt": "2024-03-19T18:58:11Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Current the draft says:\r\n\r\n> Also, the Path Identifier for the connection ID specified in the \"preferred address\" transport parameter is 0. Use of the \"preferred address\" is considered as a migration event that does not change the path ID.\r\n\r\nI think that is fine actually. Do we need to say more? Can we close this issue?",
          "createdAt": "2024-05-14T16:45:14Z",
          "updatedAt": "2024-05-14T16:45:14Z"
        }
      ]
    },
    {
      "number": 307,
      "id": "I_kwDOGNtpaM6ChgFM",
      "title": "Clarify requirement to avoid wrapping CID seqenunce number",
      "url": "https://github.com/quicwg/multipath/issues/307",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question",
        "design"
      ],
      "body": "Sectionm 5.2:\r\n\"Section 19 of [QUIC-TRANSPORT] encodes the Connection ID Sequence Number as a variable-length integer, allowing values up to 2^62-1; in this specification, a range of less than 2^32-1 values MUST be used before updating the packet protection key\"\r\n\r\nI think this is unlikely to cause a real issue, but is sloppy writing. At no point in time may a sequence number n and its next wrapped value ( n+2^32) be protected by the same packet protection key. This is unlikely to ever happen due to AEAD limits of at least current ciphers. But I think it would be good to be formally correct here.\r\n\r\nI will note that there is duplication of the imprecise requirement in the last paragraph of the seciton too: \"Due to the way the nonce is constructed, endpoints MUST NOT use more than 2^32 Connection IDs without a key update.\"\r\n",
      "createdAt": "2024-03-16T06:40:23Z",
      "updatedAt": "2024-05-25T02:30:10Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we have consensus here to limit the upper bound of Path ID to 2^32-1 and avoid reuse of nonce here.\r\nI've updated the description in PR #292.",
          "createdAt": "2024-03-19T06:36:00Z",
          "updatedAt": "2024-03-19T06:36:00Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Before I close this issue:\r\n\r\nThe text says:\r\n\r\n> the Path ID is an integer between 0 and 2^32 - 1 (inclusive).\r\n\r\nDo we need normative language here? Also do we need to specify what to do if a larger path ID is sent? Can that even happen?",
          "createdAt": "2024-05-14T16:41:36Z",
          "updatedAt": "2024-05-14T16:41:36Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "32 bits is an odd boundary in this case. It's being sent in a varint, which means its size boundaries are at 62 bits, 30 bits, 14 bits, and 6 bits.  I understand the rationale for the 2^32 cap due to the nonce, but that means we're spilling over into eight-byte representations without taking advantage of the eight-byte space.\r\n\r\nI would suggest either:\r\n- Cap the number of path IDs per connection to 2^30 -1 and never use the 62-bit representation\r\n- Allow path IDs to go up to 2^62 - 1, but keep the requirement that key rotation must happen at most every 2^32-1 paths.\r\n\r\nA larger path ID can definitely be sent in frames, so we should be sure there are normative requirements around it. (Several may be covered by existing requirements about larger Path IDs than have been permitted by the peer, however.)",
          "createdAt": "2024-05-25T02:30:09Z",
          "updatedAt": "2024-05-25T02:30:09Z"
        }
      ]
    },
    {
      "number": 308,
      "id": "I_kwDOGNtpaM6ChgG_",
      "title": "Expand LIA",
      "url": "https://github.com/quicwg/multipath/issues/308",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Section 7.2:\r\n\"Multipath TCP uses the LIA congestion control scheme specified in [RFC6356] to solve this problem.\"\r\n\r\nPlease expand \"LIA\".",
      "createdAt": "2024-03-16T06:40:46Z",
      "updatedAt": "2024-03-18T06:21:15Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 309,
      "id": "I_kwDOGNtpaM6ChgT9",
      "title": "Clarify refragmenting of stream data when MTU is different and retransmission happens on other path. ",
      "url": "https://github.com/quicwg/multipath/issues/309",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Section 7.6\r\nIs refragmentation of data in DATA frames allowed to cope with PMTUD. Maybe should be mentioned explicitly to ensure that this is not resulting in implementation issues. Sender responsibility?\r\n",
      "createdAt": "2024-03-16T06:42:38Z",
      "updatedAt": "2024-05-14T16:38:08Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "refragmentation? When?",
          "createdAt": "2024-03-18T06:21:00Z",
          "updatedAt": "2024-03-18T06:21:00Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Picoquic has been doing refragmentation of retransmitted packets for several years. That is tested in the interop runner, and does not create any particular interop issue. Hey, I think that the code may well split a stream_data_frame in several segments and send the segments over different paths...",
          "createdAt": "2024-03-18T06:28:34Z",
          "updatedAt": "2024-03-18T06:28:34Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "I think it would be good to add some text in the specification that sender MAY do this and receiver MUST be able to accept refragmentation done in retransmissions. ",
          "createdAt": "2024-03-18T06:35:42Z",
          "updatedAt": "2024-03-18T06:35:42Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Why is this different in the multipath case than in RFC9000?",
          "createdAt": "2024-03-18T06:44:21Z",
          "updatedAt": "2024-03-18T06:44:21Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak exactly. Besides, if the packet was lost, the receiver has not seen the first copy of the frame, so it cannot tell that it is a retransmission. It is a well tested feature of RFC9000.",
          "createdAt": "2024-03-18T06:58:14Z",
          "updatedAt": "2024-03-18T06:58:14Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "I don't think it is different. It is just more likely to occur. In RFC 9000 an MTU change is most likely to occur due to a connection migration event. Thus you may have some outstanding stream data ranges that needs to be retransmitted. In MP-QUIC you might attempt to send retransmission for a 1400 byte block over the other path that can only fit a 1200 byte data block. Thus, you will be forced to create two stream frames and send them in two packets if you are going to retransmitt. ",
          "createdAt": "2024-03-18T07:00:08Z",
          "updatedAt": "2024-03-18T07:00:08Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "So something like:\r\n\r\n> As noted in {{Section 2.2 of QUIC-TRANSPORT}}, STREAM frame boundaries are not expected to be preserved when data is transmitted. Especially when STREAM frames have to be retransmitted over a different path with a smaller MTU limit, new smaller STREAM frames might need to be sent instead.\r\n\r\nShould we add that somewhere?",
          "createdAt": "2024-05-14T16:38:07Z",
          "updatedAt": "2024-05-14T16:38:07Z"
        }
      ]
    },
    {
      "number": 310,
      "id": "I_kwDOGNtpaM6Chgaw",
      "title": "Clarify which endpoints sequence number are referenced. ",
      "url": "https://github.com/quicwg/multipath/issues/310",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Section 8.1: \r\n\"The sequence number of the Connection ID identifying the packet number space of the 0-RTT and 1-RTT packets which are acknowledged by the ACK_MP frame.\" \r\nAccording to the sender of this ACK. I think clarifying that the seuqence numbers are of the CIDs used belong to the receiver of the acked packets.\r\n",
      "createdAt": "2024-03-16T06:44:01Z",
      "updatedAt": "2024-05-14T16:38:53Z",
      "closedAt": "2024-05-14T16:38:53Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as this is obsolete with the explicit Path Id merge.",
          "createdAt": "2024-05-14T16:38:53Z",
          "updatedAt": "2024-05-14T16:38:53Z"
        }
      ]
    },
    {
      "number": 311,
      "id": "I_kwDOGNtpaM6Chghh",
      "title": "Simplify reference to whose sequence number space.",
      "url": "https://github.com/quicwg/multipath/issues/311",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has PR",
        "no-action-needed"
      ],
      "body": "Section 8.3:\r\n\"The sequence number of the Destination Connection ID used by the receiver of this frame to send packets over the path the status update corresponds to. All Destination Connection IDs that have been issued MAY be specified, even if they are not yet in use over a path.\"\r\n\r\nSo this is the PATH_STANDBY senders own CIDs sequence numbers. Consider simplifying.\r\n",
      "createdAt": "2024-03-16T06:45:27Z",
      "updatedAt": "2024-05-24T17:56:31Z",
      "closedAt": "2024-05-24T17:56:31Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think I understand you comment. Can you propose text?",
          "createdAt": "2024-03-18T06:19:53Z",
          "updatedAt": "2024-03-18T06:19:53Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "Yes, I can create an PR. ",
          "createdAt": "2024-03-18T06:22:54Z",
          "updatedAt": "2024-03-18T06:22:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is obsolete if we merge PR #315. We wait until this PR is merged before closing.",
          "createdAt": "2024-05-14T16:32:31Z",
          "updatedAt": "2024-05-14T16:32:31Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "#315 merged",
          "createdAt": "2024-05-24T17:56:31Z",
          "updatedAt": "2024-05-24T17:56:31Z"
        }
      ]
    },
    {
      "number": 312,
      "id": "I_kwDOGNtpaM6Chg2C",
      "title": "PATH_STANDBY PATH_AVAILABLE Sequence number spaces",
      "url": "https://github.com/quicwg/multipath/issues/312",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Section 8.3: \r\nA variable-length integer specifying the sequence number assigned for this PATH_STANDBY frame. The sequence number space is shared with the PATH_AVAILABLE frame and the sequence number MUST be monotonically increasing generated by the sender of the PATH_STANDBY frame in the same connection. The receiver of the PATH_STANDBY frame needs to use and compare the sequence numbers separately for each Destination Connection ID Sequence Number.\r\n\r\nSo are sequnce number spaces per CID? But shared across the PATH_STANDBY and PATH_AVAILABLE\r\n",
      "createdAt": "2024-03-16T06:48:02Z",
      "updatedAt": "2024-05-14T16:20:19Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "No one number space but you only compare to the number that you previously received for the same CID.\r\n\r\nE.g. you received\r\n\r\nSEQ=1 CID=1\r\nSEQ=2 CID=2\r\nSEQ=4 CID=1\r\nSEQ=3 CID=2\r\n\r\nThat means you have to update both paths and not throw away the frame with SEQ=3",
          "createdAt": "2024-03-18T06:18:27Z",
          "updatedAt": "2024-03-18T06:18:27Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this issue is still true but you use now one sequence number space for all path IDs (instead of CIDs). I guess we could also define a separate sequence number path for each path ID now that the path IDs are stable, however, I don't think that makes a real difference.\r\n\r\nHowever, I guess we should clarify this in the draft?",
          "createdAt": "2024-05-14T16:20:14Z",
          "updatedAt": "2024-05-14T16:20:14Z"
        }
      ]
    },
    {
      "number": 313,
      "id": "I_kwDOGNtpaM6CjHdJ",
      "title": "When to CID expire if using Unique Path ID?",
      "url": "https://github.com/quicwg/multipath/issues/313",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "explicit path ID"
      ],
      "body": "In the Unique Path ID model, the creation of a CID is always linked to the creation of a potential path. CIDs are managed using two frames:\r\n\r\n* MP_NEW_CONNECTION_ID with parameters CID value, path ID, sequence, and retire prior.\r\n* MP_RETIRE_CID with parameters path ID and sequence.\r\n\r\nPath IDs are not supposed to live forever. If a path is abandoned, the path ID will not be reused, because of potential ambiguity: reusing path id and sequence numbers could break encryption; when packets arrive for an abandoned path ID and the path state has been delete, there is no way to distinguish new packets from copies of old packets. Yet, as long as there is a valid CID available, nothing prevents a node from using it and sending packets with that corresponding path_id.\r\n\r\nThe sender of the MP_NEW_CONNECTION_ID can only force retirement of old path IDs by sending an MP_NEW_CONNECTION_ID frame and setting the \"retire prior\" value, but doing so creates a new CID for the old path and does not actually \"retire all CID for the path\".\r\n\r\nIn the current specification, these \"old path CID\" can only be retired by the peer, who could send series of MP_RETIRE_CID frames. The local node knows that the path is abandoned, so it could refrain from providing new CID to replace them. But nothing forces the peer to do that.\r\n\r\nWe miss a way to say \"retire all CID for that path\". One way would be to state that as a side effect of \"PATH_ABANDON\": the peer should immediately retire all CIDs tied to that path. We should also specify that a node MUST retain knowledge of all valid CID until they have been retired -- otherwise we get issue like a peer sending packets with old CID values, resulting in a stateless reset. Instead, the node that receive a packet with an old CID for an abandoned path should probably just ignore it. \r\n\r\nMaybe there are simpler solutions, but the current behavior is under-specified.\r\n",
      "createdAt": "2024-03-16T20:50:08Z",
      "updatedAt": "2024-05-25T06:12:18Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "To my understanding is that how it is currently specified is that each endpoint need to close the path in the direction towards  itself by first sending the path_abandon then wait the 3*PTO, then send the retire CID for all the CIDs used by that path. And if the peer don't send a path_abandon back to you when you have sent one, this results in a path that is open in only one direction. That is probably not what we want the situation to be in. \r\n",
          "createdAt": "2024-03-17T00:24:08Z",
          "updatedAt": "2024-03-17T00:24:08Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "I would suggest that we ensure that we have when it comes to the path close scenarion, that one says first stop sending, i.e. path_abandon. Then a path_close that retires the path in this direction and all related CIDs. This could actually be a frame that says path_closed which references a path Index. \r\n\r\nThen when it comes to cycle CIDs used by a path one need MP_NEW_CONNECTION_ID frame to add new CIDs to a path. This can retire older ones when one moved forward. A question is if one need a MP_RETIRE_CONNECTION_ID that can deal with path + CID addressing properly as the single path sequence number assumption does not hold when one have explicit path IDs. ",
          "createdAt": "2024-03-17T02:14:02Z",
          "updatedAt": "2024-03-17T02:14:02Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Record comments here:\r\n\r\n[marten-seemann](https://github.com/marten-seemann) [4 days ago](https://github.com/quicwg/multipath/pull/292#discussion_r1527501102)\r\n> Should PATH_ABANDON automatically retire the connection IDs, without the need to send any frames? It would be nice if we don't have to deal with a malicious / misbehaving peer that abandons a path, but keeps the CIDs active.\r\n\r\n[michael-eriksson](https://github.com/michael-eriksson) [4 days ago](https://github.com/quicwg/multipath/pull/292#discussion_r1527531334)\r\n> Yes, it should! Or at least the complete closing of a path, with dual PATH_ABANDON frames should.",
          "createdAt": "2024-03-21T14:03:50Z",
          "updatedAt": "2024-03-21T14:03:50Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There is a potential issue with \"implicit retire\". Suppose the client sends \"Abandon path 1\", and after some delay, maybe 3*RTO, implicitly retires the CID that he sent on path 1. And then suppose that the server was somehow slow in receiving and processing the ABANDON_PATH, and has kept sending 1RTT packets over path 1. Once the CIDs have been implicitly retired, they will elicit StatelessReset, which may well cause the server to abandon the whole connection.\r\n\r\nI think we could solve that by redefining the \"Path Abandon\" frame. Currently, it only imposes actions to its recipient: stop sending. Going implicit with that creates an implicit race condition, because the sender will act upon those actions \"as if the recipient has done them\"... but can only guess whether the recipient has in fact processed the frame.\r\n\r\nIf we reverse the meaning from \"please do not send\" to \"I will not send anymore\", the race condition disappears. The recipient can act on that immediately, because it knows that the sender has already stopped sending. If the recipient reply with its own \"Path Abandon\", the loop is closed, and there is no ambiguity. The nodes may still want to wait 3*RTO after Path Abandon frames have been sent and received to ensure there are no lingering frames in the network, but the race condition has disappeared.\r\n",
          "createdAt": "2024-03-21T22:58:45Z",
          "updatedAt": "2024-03-21T22:58:45Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I had a similar question reading the draft, and while @huitema's suggestion here simplifies dealing with CID retirement, I'm not certain it fixes the issue with ABANDON in general. I agree that abandoning a path means two things:\r\n\r\n- I will no longer send on this path, and all CIDs you issued for it have been retired\r\n- I will shortly stop accepting packets on this path, so stop sending them\r\n\r\nThe sender of ABANDON will not process any Stateless Resets that might arrive, since it already considers the CIDs and tokens from that path to be invalid.  However, there still needs to be that loop closure before it can safely start sending Stateless Resets in response to straggler packets, and probably still a draining period.",
          "createdAt": "2024-05-25T03:12:59Z",
          "updatedAt": "2024-05-25T03:12:59Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In the last interop, we pretty much concluded that the robust solution was to have Abandon sent by both end points, either simultaneously or one in response to the other. The abandon means \"I won't send on this path, please consider the CID that you sent me as retired, and please send an Abandon frame of your own if you have not already done so.\" If both ends do that, the path is effectively wiped. You probably need to keep some memory for some time before serving stateless resets, e.g., because of out of order deliveries. The usual timer for this kind of things is 3*PTO.\r\n\r\nAnother reason to keep memory is ACK_MP frames. It makes sense to send them even for a path that has been abandoned, otherwise the packets in flight for that path will be considered lost.",
          "createdAt": "2024-05-25T06:11:07Z",
          "updatedAt": "2024-05-25T06:11:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We could make a case that Abandon frames must not be sent on the path that they are abandoning.",
          "createdAt": "2024-05-25T06:12:18Z",
          "updatedAt": "2024-05-25T06:12:18Z"
        }
      ]
    },
    {
      "number": 317,
      "id": "I_kwDOGNtpaM6CkvtK",
      "title": "explicit path IDs: Should server preferred address have its own path ID?",
      "url": "https://github.com/quicwg/multipath/issues/317",
      "state": "OPEN",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "needs PR",
        "explicit path ID"
      ],
      "body": "It's kind of weird that for the migration to the server preferred address path, the path ID is defined as 0. It might be advantageous to keep the anycast and the unicast path open for a limited amount of time.\r\n\r\nWe could consider defining this path to have path ID 1?",
      "createdAt": "2024-03-17T13:25:01Z",
      "updatedAt": "2024-05-24T17:54:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1. I was under the impression that the preferred path was path-id=1 from the start.",
          "createdAt": "2024-03-18T03:42:03Z",
          "updatedAt": "2024-03-18T03:42:03Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's tackle that in conjunction with the server/client odd/even split. With that split, we have two options:\r\n\r\n1) Stay strictly compatible with 9000. The client performs a path migration, very similar in nature to a NAT rebinding, and the path ID remains 0.\r\n\r\n2) Create a specific path for the \"preferred\" address, in which case the client initiates a new path to that address. Since this is a client initiated new path, the path ID should be an even number, probably 2.",
          "createdAt": "2024-04-03T20:27:55Z",
          "updatedAt": "2024-04-03T20:27:55Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is a migration event as also in RFC9000. What would be the benefit of using a new path ID? When would it be useful to have the anycast and unicast address in use at the same time?",
          "createdAt": "2024-05-24T17:54:45Z",
          "updatedAt": "2024-05-24T17:54:45Z"
        }
      ]
    },
    {
      "number": 318,
      "id": "I_kwDOGNtpaM6ClMrF",
      "title": "Should path numbers be continuous?",
      "url": "https://github.com/quicwg/multipath/issues/318",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "needs PR",
        "explicit path ID"
      ],
      "body": "We observed an interop failure between picoquic and the Quiche implementation modified by Quentin. The picoquic client is waiting for a CID with pathID=1 before opening the second path with path number 1, but Quentin's implementation will only send paths with even numbers.\r\n\r\nThe immediate interop issue would be fixed if Picoquic used number 2 for its first path creation, but that is not a long term solution. If one implementation expects to see all number used and the other only uses one of them, we will shortly see an issue -- some CID do not get used but still contribute to the \"MAX_PATHS\" limits, or to the implicit number of path limit at the client. Creation of new paths will then stop, even if the number of paths in actual use remains below the limit.\r\n\r\nShould we have a rule about not skipping path numbers? ",
      "createdAt": "2024-03-17T18:04:56Z",
      "updatedAt": "2024-03-18T06:35:18Z",
      "closedAt": null,
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Path validation on a particular path might fail, without the server receiving any packet for that path. When the client then validates another path, this will look like a skipped path to the server.\r\n\r\nSo to answer the question: Path IDs SHOULD be used sequentially, but you can't enforce this.",
          "createdAt": "2024-03-18T03:09:23Z",
          "updatedAt": "2024-03-18T03:09:23Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, we do have the case in with the client probes path[3] and the server never gets the probe. The client should send an Abandon[3] to clear the state.",
          "createdAt": "2024-03-18T03:43:28Z",
          "updatedAt": "2024-03-18T03:43:28Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's true, but you don't know when the PATH_ABANDON arrives. It might be lost / reordered. So you'll need to deal with what looks like non-continuous use of Path IDs anyway.",
          "createdAt": "2024-03-18T03:47:48Z",
          "updatedAt": "2024-03-18T03:47:48Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes. My real concern was one of the nodes issuing just some CID -- like Quentin's code only creating CID for even numbers, 0, 2, etc. We will have two limits:\r\n\r\n1) the \"max paths\" value, which determines the maximum but does not force the peers to send that much.\r\n2) the lower \"local maximum\" value, based on available memory and other local resource.\r\n\r\nMy real concern is that if nodes are not going to publish CID for all possible paths, they should start with the lowest numbers to maximize chances of finding numbers supported by both sides.",
          "createdAt": "2024-03-18T04:00:31Z",
          "updatedAt": "2024-03-18T04:00:31Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would consider this a misbehaviour of the peer. If you refuse to use path IDs available to you, the protocol might get stuck.",
          "createdAt": "2024-03-18T04:07:46Z",
          "updatedAt": "2024-03-18T04:07:46Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes. But the current draft does not say \"dont do that\"",
          "createdAt": "2024-03-18T04:24:55Z",
          "updatedAt": "2024-03-18T04:24:55Z"
        }
      ]
    },
    {
      "number": 319,
      "id": "I_kwDOGNtpaM6ClRiu",
      "title": "What if a client falsely links two paths using CIDs associated with the same path ID",
      "url": "https://github.com/quicwg/multipath/issues/319",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "explicit path ID"
      ],
      "body": "Stable path ID is helpful to link two paths when CID rotation and NAT rebinding happen at the same time. However, this could also have a downside. There's a chance that a client might falsely apply a CID from an old path to a new one. If this happens, the server may incorrectly treat both paths as identical, despite changes in the CID and the 4-tuple. Should the server opt to retain the congestion window under this assumption, it could inadvertently trigger network congestion, affecting other clients on the new path. Moreover, this vulnerability could be exploited by attackers to deliberately disrupt service for others.",
      "createdAt": "2024-03-17T18:42:17Z",
      "updatedAt": "2024-03-19T06:46:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "I don't understand how this happens I think you may have to make event diagram to explain how one would draw the wrong conlcusion. To my understanding you are talking about this case:\r\n\r\nSo for path 1 the server has announced DCIDs X, Y, Z to the client\r\n\r\nA (Client) -> NAT -> B (server):\r\nIP_A:port_A ->IP_B:Port_B: DCID:X  -> arrive as IP_N:Port_N1 -> IP_B:Port_B DCID:X\r\nThen the client decides to cycle DCID\r\nIP_A:port_A ->IP_B:Port_B: DCID:Y  -> arrive as IP_N:Port_N2 -> IP_B:Port_B DCID:Y\r\nThis triggers a path challenge by the server on the related reverse path. \r\nSo if the client correctly associates the reverse path the path challenge is what should indicate to the client that something have occurred that require client to reset its path state. But, as the client's forward path will continue to be correctly acked by server I don't see this is case which likely have significant transport impact. A port rebinding would not affect the client to NAT path conditions. It could possibly affect ECMP etc betwen NAT and server. \r\nThe server will clearly know that the path changed and if it is larger than just a port change or not. \r\n\r\n",
          "createdAt": "2024-03-18T01:31:21Z",
          "updatedAt": "2024-03-18T01:31:21Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I don't understand how this happens I think you may have to make event diagram to explain how one would draw the wrong conlcusion. To my understanding you are talking about this case:\r\n> \r\n> So for path 1 the server has announced DCIDs X, Y, Z to the client\r\n> \r\n> A (Client) -> NAT -> B (server): IP_A:port_A ->IP_B:Port_B: DCID:X -> arrive as IP_N:Port_N1 -> IP_B:Port_B DCID:X Then the client decides to cycle DCID IP_A:port_A ->IP_B:Port_B: DCID:Y -> arrive as IP_N:Port_N2 -> IP_B:Port_B DCID:Y This triggers a path challenge by the server on the related reverse path. So if the client correctly associates the reverse path the path challenge is what should indicate to the client that something have occurred that require client to reset its path state. But, as the client's forward path will continue to be correctly acked by server I don't see this is case which likely have significant transport impact. A port rebinding would not affect the client to NAT path conditions. It could possibly affect ECMP etc betwen NAT and server. The server will clearly know that the path changed and if it is larger than just a port change or not.\r\n\r\nOne possibility is a \"bad\" client behavior, either intentionally or unintentionally. For example, a client simply opens a new UDP socket on a different interface and uses DCID Y.\r\n\r\nI think we should say something like `\"An endpoint MUST NOT reuse a path ID when sending from more than one local address\"`.",
          "createdAt": "2024-03-18T03:53:15Z",
          "updatedAt": "2024-03-18T03:53:15Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The issue is NAT. Suppose the client has path[1] from address 10.0.0.1:1234, and path[2] from address 10.0.0.2:4567. Suppose that the NAT intercepts a packet send on path[1] and re-sends it from address 10.0.0.2:4567. The CID will still say \"path[1]\", but the IP addresses will end up being exactly the same.",
          "createdAt": "2024-03-18T04:04:53Z",
          "updatedAt": "2024-03-18T04:04:53Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "> The issue is NAT. Suppose the client has path[1] from address 10.0.0.1:1234, and path[2] from address 10.0.0.2:4567. Suppose that the NAT intercepts a packet send on path[1] and re-sends it from address 10.0.0.2:4567. The CID will still say \"path[1]\", but the IP addresses will end up being exactly the same.\r\n\r\nIs that a real problem we have to worry about? Otherwise we could just close the path?",
          "createdAt": "2024-03-18T06:37:16Z",
          "updatedAt": "2024-03-18T06:37:16Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "> I think we should say something like \"An endpoint MUST NOT reuse a path ID when sending from more than one local address\".\r\n\r\nMaybe saying this is part of the clarification of what is path. To my understanding if one changes anything in the 5-tuple one is forced to use a new path and a CID that indicates this path. \r\n\r\n> The issue is NAT. Suppose the client has path[1] from address 10.0.0.1:1234, and path[2] from address 10.0.0.2:4567. Suppose that the NAT intercepts a packet send on path[1] and re-sends it from address 10.0.0.2:4567. The CID will still say \"path[1]\", but the IP addresses will end up being exactly the same.\r\n\r\nSo, the NAT would be totally broken if it collapse both these UDP flows to one external port on the same IP address, Thus, I would suggest two flows through one NAT would still get differnet ports, and thus be the receiver be handled as two different paths. Also for the client as they have different destination ports for incoming packet flows they will be treated differently. \r\n",
          "createdAt": "2024-03-18T06:57:08Z",
          "updatedAt": "2024-03-18T06:57:08Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe these scenarios cannot normally happen. A NAT will normally not give the same mappings to two different paths. When that happens, it is probably some kind of attack: either the client is deliberately trying to pile up multiple paths through the same bottleneck, or an observer on path is re-injecting packets trying to do some damage. In the latter case, the defense would be to remain with the old path and not execute the NAT rebinding.",
          "createdAt": "2024-03-18T08:12:25Z",
          "updatedAt": "2024-03-18T08:12:25Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Consider the case of a NAT handling only a handful of ports (e.g., MAP-E providing 240 ports to the NAT).\r\n\r\nWhen two paths (A and B) are established through that NAT and the NAT reboots, the server could notice the migration of path A to path B, before noticing that path B has also migrated.\r\n\r\nI think what endpoints should do is just ignore overlaps of 4 tuples. The problem would be fixed in a moment, as the purpose of NATs are to provide unique mappings.",
          "createdAt": "2024-03-19T06:46:31Z",
          "updatedAt": "2024-03-19T06:46:31Z"
        }
      ]
    },
    {
      "number": 320,
      "id": "I_kwDOGNtpaM6Cnx6F",
      "title": "Sending NEW_CONNECTION_ID and RETIRE_CONNECTION_ID frames when multipath has been negotiated",
      "url": "https://github.com/quicwg/multipath/issues/320",
      "state": "OPEN",
      "author": "michael-eriksson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "explicit path ID"
      ],
      "body": "It should be explicitly specified if it is allowed/discouraged/forbidden to send `NEW_CONNECTION_ID` and `RETIRE_CONNECTION_ID` frames (implicitly referencing path ID 0) when multipath has been negotiated.\r\n",
      "createdAt": "2024-03-18T07:51:14Z",
      "updatedAt": "2024-05-14T16:13:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we have to allow it because it could be sent before multipath is \"negotiated\". Also not that QUIC does really negotiate but rather another, which is another reason why forbidding based RFC frames is generally hard.\r\n\r\nWe could say this more explicitly but we don't have to because it is a general thing about how QUIC transport parameters work.",
          "createdAt": "2024-03-18T08:11:22Z",
          "updatedAt": "2024-03-18T08:11:22Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "FWIW I think we have the option to state that use of multipath, specifically the maximum number of paths, is remembered. Then, endpoints can send the correct frame in 0-RTT too, depending on if the original connection was MP or not.\r\n\r\nAt the moment, we state that use of multipath is not remembered, but I don't think anybody had a strong argument one way or anotther; see https://github.com/quicwg/multipath/issues/219.",
          "createdAt": "2024-03-19T06:31:34Z",
          "updatedAt": "2024-03-19T06:31:34Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We can plausibly say that a legacy NEW_CONNECTION_ID frame is equivalent to MP_NEW_CONNECTION_ID with pathID=0. That means it would be allowed at the beginning of the connection, but disallowed if the pathID 0 was Abandoned.\r\n\r\nWhich brings a related issue. Is it legit to send an MP_NEW_CONNECTION_ID with pathID=N after path N has been abandoned?",
          "createdAt": "2024-03-19T18:49:46Z",
          "updatedAt": "2024-03-19T18:49:46Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "Indirectly yes, since packets can be reordered and the receiver can't tell the difference. The receiver should obviously ignore the frame like any other stale frame.",
          "createdAt": "2024-03-21T14:48:53Z",
          "updatedAt": "2024-03-21T14:48:53Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "In summary:\r\n\r\n1) NEW_CONNECTION_ID and RETIRE_CONNECTION_ID are still allowed and associated to path ID 0. The document says this already, at least that path ID 0 is used. It doesn't explicit say that these frames can still be used. I don't think that is needed, or would people prefer to be explicit?\r\n\r\n2) Control frames that have an abandoned path ID MUST be ignored. We don't say that explicitly yet. But do we need to add that?",
          "createdAt": "2024-05-14T16:13:11Z",
          "updatedAt": "2024-05-14T16:13:11Z"
        }
      ]
    },
    {
      "number": 321,
      "id": "I_kwDOGNtpaM6Cxp3v",
      "title": "Static path IDs?",
      "url": "https://github.com/quicwg/multipath/issues/321",
      "state": "OPEN",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "duplicate",
        "design",
        "needs-discussion",
        "explicit path ID"
      ],
      "body": "With the new design of having explicit path identifiers, do we need a mechanism for issuing and retiring path IDs at all? They seem to be an unnecessary complexity to me.\r\n\r\nThe simpler design would be to say that if an endpoint is capable of handling N paths simultaneously, it would use path IDs between 0 and N-1 for the lifetime of the connection, regardless of how many times paths are migrated, either voluntary or involuntary.\r\n\r\nWhen a receiver receives packets on a new path, it has to perform path validation and reset CC regardless of if the received packets carry a new path ID or a old one. Therefore, I think there is not much effort in having the complexity of issuing and retiring path IDs within the protocol.\r\n\r\nThe downside of reusing path IDs is that endpoints have to remember the last packet number it sent / received on paths that become idle. But that cost would likely be smaller than having the cost of maintaining a dynamic list of path IDs that are alive.",
      "createdAt": "2024-03-19T05:22:56Z",
      "updatedAt": "2024-05-14T13:44:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is a mostly a duplicate of #297. I propose to have the discussion there!\r\n\r\nCan we close this issue and use #297 instead?",
          "createdAt": "2024-05-14T13:44:07Z",
          "updatedAt": "2024-05-14T13:44:07Z"
        }
      ]
    },
    {
      "number": 322,
      "id": "I_kwDOGNtpaM6C4XyL",
      "title": "MAX_PATH, sender initiated streams, and CID allocation.",
      "url": "https://github.com/quicwg/multipath/issues/322",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "We have a lingering issue of whether to support sender-initiated paths or not. We have dodged this issue so far, because clients will often be located behind NAT or firewalls, which would cause server packets to be dropped if they did not match a 4-tuple previously used by the client. In that case, the server would not directly try to open paths, but might instead suggest IP addresses and port numbers that the client could use in path openings. But there are scenarios in which the client is not behind a firewall, and in which sender initiated path could be a performance improvement.\r\n\r\nIn the \"unique path ID\" scenario, we risk a collision if the sender and the client try to initiate different paths at the same time. Suppose that the client has addresses C1 and C2, the server addresses S1 and S2. The client is not yet aware of S2, and the server is not yet aware of S1. Path 0 has been established with the tuple C1-S1. The peers have both provided CID for Path-ID=1. The collision happens if, at the same time, client and server try to open path 1 as follow:\r\n\r\n* Client selects the server CID with path-ID=1, sequence=0, and sends a \"PATH_CHALLENGE\" from source address C2 to server address S1.\r\n* Server selects the client CID with path-ID=1, sequence=0, and sends a \"PATH_CHALLENGE\" from source address S2 to client address C1.\r\n\r\nWhat follows depends on transmission order and local decisions, but is essentially non-deterministic. We might get a new path 1 with tuples C2-S1, C1-S2, or maybe C2-S2 or C1-S1.\r\n\r\nWe have discussed ways to avoid that, by splitting the \"path ID\" space in two. When the the client starts a path, it should use a CID with an even sequence number path, and the server should pick an odd sequence number space. The example above would become:\r\n\r\n* Client selects the server CID with path-ID=2, sequence=0, and sends a \"PATH_CHALLENGE\" from source address C2 to server address S1.\r\n* Server selects the client CID with path-ID=1, sequence=0, and sends a \"PATH_CHALLENGE\" from source address S2 to client address C1.\r\n\r\nThis becomes deterministic, which we like, but it makes the management of path numbers more complex. If we follow the rules set for MAX_STREAMS, we would need the following behavior:\r\n\r\n1. MAX_PATHS=N should be interpreted differently whether N is even or odd.\r\n2. MAX_PATHS=2*N+1 indicates the largest \"odd\" path number than the sender supports.\r\n3. MAX_PATHS=2*N indicates the largest \"odd\" path number than the sender supports.\r\n4. The largest negotiated odd number is the lowest of the MAX_PATHS odd numbers send by client and server\r\n5. Ditto odd numbers.\r\n6. Both peers MAY provide CID for even and odd path numbers, within the limits of values allowed.\r\n7. A new path can only created if both peers have provided MP_NEW_CONNECTION_ID with that path value\r\n8. Clients can only initiate even numbered paths, servers can only initiate odd numbered paths.\r\n\r\nWe need to decide now whether we want to do that. A fall back position would be to state that \"this version of multipath only support even numbered path ID, odd numbers will be used if and when we support server initiated path-ID.\"",
      "createdAt": "2024-03-19T19:27:00Z",
      "updatedAt": "2024-05-14T18:26:15Z",
      "closedAt": "2024-05-14T18:26:15Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema thanks for writing this down. Given we have issue #328 can we close this issue now and have the discussion there? Or is there anything else that is missing in #328 from this issue?",
          "createdAt": "2024-05-14T14:02:35Z",
          "updatedAt": "2024-05-14T14:02:35Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's continue this discussion in issue #328.",
          "createdAt": "2024-05-14T18:26:15Z",
          "updatedAt": "2024-05-14T18:26:15Z"
        }
      ]
    },
    {
      "number": 323,
      "id": "I_kwDOGNtpaM6C6Qdf",
      "title": "Alternative to defining a bunch of MP-specific frames",
      "url": "https://github.com/quicwg/multipath/issues/323",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "no-action-needed"
      ],
      "body": "With the new explicit path identifier, maybe I can suggest an improvement.\r\n\r\nLook at Victor's https://datatracker.ietf.org/doc/draft-vvv-quic-namespaces/ It strikes me that the trick he is using with the NS frame there might be useful for MP QUIC.  Only path-specific frames would be affected.  You can even start with a default value of the current path.",
      "createdAt": "2024-03-20T00:14:01Z",
      "updatedAt": "2024-05-14T13:33:21Z",
      "closedAt": null,
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not treating frames as separate entities breaks *a ton* of assumption I have in my code. I think this massively complicates implementations.",
          "createdAt": "2024-03-20T00:16:22Z",
          "updatedAt": "2024-03-20T00:16:22Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, this was already discussed a bit as part of #214 (https://github.com/quicwg/multipath/issues/214#issuecomment-1614669787); I believe frames should be fully self-contained, and not doing so would complicate at lot implementations.",
          "createdAt": "2024-03-20T00:46:57Z",
          "updatedAt": "2024-03-20T00:46:57Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Given this was discussed in #214 already, can we close this issue?",
          "createdAt": "2024-05-14T13:33:14Z",
          "updatedAt": "2024-05-14T13:33:14Z"
        }
      ]
    },
    {
      "number": 324,
      "id": "I_kwDOGNtpaM6DJYie",
      "title": "Rename \"initial_max_paths / MAX_PATHS\" to \"intial_max_path_id / MAX_PATH_ID\" ?",
      "url": "https://github.com/quicwg/multipath/issues/324",
      "state": "OPEN",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "question",
        "design",
        "explicit path ID"
      ],
      "body": "Record from comments:\r\n\r\n[marten-seemann](https://github.com/marten-seemann) [4 days ago](https://github.com/quicwg/multipath/pull/292#discussion_r1527500625)\r\n> Probably better: initial_max_path_id. This would mirror the meaning of the frame as suggested in https://github.com/quicwg/multipath/pull/292/files#r1527500161.\r\n\r\n\r\n[michael-eriksson](https://github.com/michael-eriksson) [4 days ago](https://github.com/quicwg/multipath/pull/292#discussion_r1527532226)\r\n> I think it should remain initial_max_paths to be symmetric with initial_max_streams_*.\r\n\r\n> The explanation can be copied from [RFC 9000](https://www.rfc-editor.org/rfc/rfc9000.html#section-18.2-4.22.1):\r\n\r\n>> Setting this parameter is equivalent to sending a MAX_PATHS of the corresponding type with the same value.\r\n\r\n\r\n[marten-seemann](https://github.com/marten-seemann) [4 days ago](https://github.com/quicwg/multipath/pull/292#discussion_r1527658157)\r\n> My 2c: There's only so much value you get from consistency with RFC 9000. This has created a fair amount of confusion in the review of this PR, and it seems like calling it initial_max_path_id (and the corresponding renaming of the frame), would make it 100% clear what is meant, without the need for long explanations.\r\n\r\n[michael-eriksson](https://github.com/michael-eriksson) [3 days ago](https://github.com/quicwg/multipath/pull/292#discussion_r1527988506)\r\n> Well, then I think that the frame type should be MAX_PATH_ID to further reduce the confusion and increase the multipath specification consistency.\r\n",
      "createdAt": "2024-03-21T13:58:47Z",
      "updatedAt": "2024-05-27T15:00:01Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "the current draft (-07) uses MAX_PATH to announce the max number of paths and not the largest path ID that can be used. So the name matches the meaning, I would say.\r\n\r\nIs this issue to discuss to use the max path ID instead (or was this just about aligning the naming)? ",
          "createdAt": "2024-05-14T13:31:17Z",
          "updatedAt": "2024-05-14T13:31:17Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is an entire mess right now in the draft:\r\n\r\ninitial_max_path is defined like this (as the max number of path):\r\n\r\n```\r\ninitial_max_path: initial_max_paths (current version uses 0x0f739bbc1b666d07): the initial_max_paths transport parameter is included if the endpoint supports the multipath extension as defined in this document. This is a variable-length integer value specifying the maximum number of active concurrent paths an endpoint is willing to build. The value of the initial_max_paths parameter MUST be at least 2. An endpoint that receives a value less than 2 MUST close the connection with an error of type TRANSPORT_PARAMETER_ERROR. Setting this parameter is equivalent to sending a MAX_PATHS ([Section 8.7](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#max-paths-frame)) of the corresponding type with the same value.[\u00b6](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-3-2.1.1)\r\n```\r\n\r\nMAX_PATH is defined like this however:\r\n\r\n```\r\nMAX_PATHS frames are formatted as shown in [Figure 11](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#fig-max-paths-frame-format).[\u00b6](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-8.7-2)\r\n\r\nMAX_PATHS Frame {\r\n  Type (i) = 0x15228c0b,\r\n  Maximum Paths (i),\r\n}\r\n[Figure 11](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#figure-11): [MAX_PATHS Frame Format](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-max_paths-frame-format)\r\nMAX_PATHS frames contain the following field:[\u00b6](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-8.7-4)\r\n\r\nMaximum Path Identifier:\r\nA count of the cumulative number of path that can be opened over the lifetime of the connection. This value cannot exceed 2^32-1, as it is not possible to encode Path IDs larger than 2^32-1. Receipt of a frame that permits opening of a path with Path Identifier larger than this limit MUST be treated as a connection error of type FRAME_ENCODING_ERROR.[\u00b6](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-8.7-5.2.1)\r\n```",
          "createdAt": "2024-05-27T12:50:10Z",
          "updatedAt": "2024-05-27T12:50:10Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created PR #354 to fix the definition of the MAX_PATHS frame now actually indicating the largest Path ID that can be used. \r\n\r\nHowever, initial_max_paths is still defined as the max number of paths (and also thereby also indicate the max path ID at the beginning when no MAX_PATHS frame was received yet). Do we want to change this?\r\n\r\n\r\n",
          "createdAt": "2024-05-27T13:18:54Z",
          "updatedAt": "2024-05-27T13:18:54Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes we do. the \"initial_max_path\" frame shall be the same as \"the first MAX PATH frame received on the connection\".",
          "createdAt": "2024-05-27T15:00:00Z",
          "updatedAt": "2024-05-27T15:00:00Z"
        }
      ]
    },
    {
      "number": 325,
      "id": "I_kwDOGNtpaM6DJjP_",
      "title": "CID allocation strategy",
      "url": "https://github.com/quicwg/multipath/issues/325",
      "state": "OPEN",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "question",
        "explicit path ID"
      ],
      "body": "We need to specify CID allocation strategy in case endpoints doesn't have available CIDs with same unused Path ID to initialize a new path.\r\n\r\nAlso need to take security into consideration.\r\n\r\nComments from PR#292:\r\n\r\n[marten-seemann](https://github.com/marten-seemann) [4 days ago](https://github.com/quicwg/multipath/pull/292/files#r1527502104)\r\n> This seems backwards. Connection IDs are issues for paths, not the other way around.\r\nAlso, if I allow you to open 1 million paths, you're probably wise to not issue me 1 million CIDs.",
      "createdAt": "2024-03-21T14:17:14Z",
      "updatedAt": "2024-05-24T08:48:29Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "What do you want to say here @Yanmei-Liu?\r\n\r\nI think it simply the case if you don't have a CIDs for an unused path ID, you can't open a new path. However, the other end might purposefully not provide more path IDs. I think you just have to accept it.\r\n\r\nIf you have CIDs for an unused path ID from the peer but did not provide CIDs for the the same path ID to your peer, you need to do that before opening the path. #315 discusses that already.\r\n\r\nWhat else do we need? or what else would we even be able to say?\r\n\r\n",
          "createdAt": "2024-05-14T13:13:59Z",
          "updatedAt": "2024-05-14T13:13:59Z"
        }
      ]
    },
    {
      "number": 326,
      "id": "I_kwDOGNtpaM6EY1Bi",
      "title": "The spec doesn't say enough about DPLPMTUD or max_udp_payload_size",
      "url": "https://github.com/quicwg/multipath/issues/326",
      "state": "OPEN",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "question"
      ],
      "body": "see https://datatracker.ietf.org/doc/html/rfc9000#name-datagram-packetization-laye and https://datatracker.ietf.org/doc/html/rfc9000#section-18.2\r\n\r\n> The maximum UDP payload size parameter is an integer value that limits the size of UDP payloads that the endpoint is willing to receive. UDP datagrams with payloads larger than this limit are not likely to be processed by the receiver.\r\n> \r\n> The default for this parameter is the maximum permitted UDP payload of 65527. Values below 1200 are invalid.\r\n> \r\n> This limit does act as an additional constraint on datagram size in the same way as the path MTU, but it is a property of the endpoint and not the path; see [Section 14](https://datatracker.ietf.org/doc/html/rfc9000#datagram-size). It is expected that this is the space an endpoint dedicates to holding incoming packets.\r\n\r\nI expect this document to say more about path MTU discovery than is written in https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-7.6. Especially that the `max_udp_payload_size` TP applies to all paths and could have unintended consequences for multipath PMTUD.",
      "createdAt": "2024-04-02T17:53:59Z",
      "updatedAt": "2024-05-14T13:04:08Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The text above that you cited explicitly say that max_udp_payload_size is an endpoint property and not a path property. I don't think we need/should restate that.\r\n\r\nWhat else should it say about MTU discovery? (Note this is now section 8.6)",
          "createdAt": "2024-05-14T13:04:01Z",
          "updatedAt": "2024-05-14T13:04:01Z"
        }
      ]
    },
    {
      "number": 327,
      "id": "I_kwDOGNtpaM6EeeYH",
      "title": "How will MPQUIC support the scenario where the client connects with a dual-stack server via both IPv4 and IPv6 paths?",
      "url": "https://github.com/quicwg/multipath/issues/327",
      "state": "OPEN",
      "author": "yangfurong",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "separate draft"
      ],
      "body": "Considering a scenario where a server has both IPv4 and IPv6 addresses and a client has two interfaces (one with IPv4 and the other with IPv6), how will MPQUIC support it?\r\n\r\nIt seems like there should be an address announcement mechanism in MPQUIC to support such a scenario.\r\n\r\n",
      "createdAt": "2024-04-03T10:46:15Z",
      "updatedAt": "2024-05-14T12:58:40Z",
      "closedAt": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Currently, the base MPQUIC draft assumes that either the server has a single address (while the client may have several), or it knows additional addresses by side-channels (like preferred_address TP or application information). One solution could be to bring back the ADD_ADDRESS/REMOVE_ADDRESS frames defined in a previous draft version (see https://datatracker.ietf.org/doc/html/draft-deconinck-quic-multipath-07#section-6.4).\r\n\r\nThe question being, should it be part of the base draft, or be an extension to the multipath extension?",
          "createdAt": "2024-04-03T15:58:00Z",
          "updatedAt": "2024-04-03T15:58:00Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "I think any work needs to be motivated by practical use cases. \r\n\r\nCommonly, a server that supports listening on multiple IP addresses would declare them in the DNS. Is that not already good enough?",
          "createdAt": "2024-04-03T16:20:54Z",
          "updatedAt": "2024-04-03T16:20:54Z"
        },
        {
          "author": "yangfurong",
          "authorAssociation": "NONE",
          "body": "> I think any work needs to be motivated by practical use cases.\r\n> \r\n> Commonly, a server that supports listening on multiple IP addresses would declare them in the DNS. Is that not already good enough?\r\n\r\nIf we rely on DNS to handle this case, the DNS resolver must ensure that the resolved v6 and v4 addresses are attached to the same cluster.  In our usecase, the DNS resolver can not garuantee that. Here is an example. \r\n\r\n![aaa](https://github.com/quicwg/multipath/assets/10102895/47a05586-2901-46fb-b46e-4098984d3575)\r\n\r\n",
          "createdAt": "2024-04-09T07:33:09Z",
          "updatedAt": "2024-04-09T07:33:09Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "You can use load balancer techniques to resolve that, for example using CID based routing to ensure cluster affinity.",
          "createdAt": "2024-04-09T08:12:26Z",
          "updatedAt": "2024-04-09T08:12:26Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@LPardue You are proposing to have the client use the DNS to find alternate IP or IPv6 addresses. That will not work naturally if the client just picks the first address returned by the DNS. The client has connection set with Cluster2, IPv4: a2. The DNS proposes AAAA records for IPv6:aa1 or IPv6:aa2. If the client sends a \"PATH_CHALLENGE\" towards IPv6:aa1, it will arrive at Cluster 1, the CID will probably not be recognized, and the challenge will fail.\r\n\r\nHowever, since the DNS has returned 2 IPv6 addresses, the client could prepare as many path challenges as it has learned addresses. That's a bit wasteful, but one of them will arrive at Cluster2, and if the CID is recognized and routed to the correct server the second path will eventually be established.\r\n\r\n@yangfurong we have discussed similar scenarios before. The general consensus is that handling the general case for \"client connects to an alternate server address\" would require a new frame, through which the server advertises a list of addresses -- see for example [this discussion](https://github.com/quicwg/multipath/issues/47#issuecomment-1010140751). We explicitly decided to not do that in the first version of the multipath draft -- it is already very complex, and we don't need the extra complexity of this feature now. It could be added by an extension on top of the multipath draft, defining a new frame, explaining its use, and most importantly analyzing the related security issues.\r\n\r\n\r\n\r\n",
          "createdAt": "2024-04-10T01:58:30Z",
          "updatedAt": "2024-04-10T01:59:29Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "The presented scenario, of a client supporting two interfaces with no overlap of IP version, seems a bit arbitrary. However, I don't think it's unique to multipath and could happen with vanilla QUIC. \r\n\r\n> If the client sends a \"PATH_CHALLENGE\" towards IPv6:aa1, it will arrive at Cluster 1, the CID will probably not be recognized, and the challenge will fail.\r\n\r\nThis depends on the deployment architecture, load balancer, and CID-based routing. If a packet shouldn't go to the wrong cluster, don't forward it there. These capabilities exist today without multipath. \r\n\r\nI don't find it a compelling to make the protocol more complicated when other solutions can already be used. \r\n",
          "createdAt": "2024-04-10T10:23:42Z",
          "updatedAt": "2024-04-10T10:23:42Z"
        }
      ]
    },
    {
      "number": 328,
      "id": "I_kwDOGNtpaM6EkW7z",
      "title": "Designing odd/even path-id, or not.",
      "url": "https://github.com/quicwg/multipath/issues/328",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "needs-discussion",
        "explicit path ID"
      ],
      "body": "During the processing of PR #272, we discussed separating the path identifiers in two classes: client initiated path identifiers, with even numbers, and server initiated path identifiers, with odd numbers.\r\n\r\nSeparating the identifiers in two classes allows clients and servers to both initiate paths, without risking identifier collisions. The current single-class design only works because only the client initiates paths. Otherwise, we would have the risk of both client and servers picking the same path identifiers, and simultaneously sending \"path challenges\" with the same identifier, but using different IP addresses and UDP ports. This would create confusion.\r\n\r\nThe design itself is fairly simple: both endpoints advertise odd and even path identified connection identifiers. When the client creates a path, the client picks an available even numbered identifier advertised by the server; when the server creates a path, it picks an odd numbered identifier. When receiving a packet for a new path, each endpoint verifies that the new number is authorized. For example, if the client receives from the server a message on a new path, it verifies that the path identifier of the connection ID chosen by the server is odd. If not, it MAY signal an MP protocol violation. When responding, the endpoint picks a connection ID with the same path identifier as that of the incoming packet.\r\n\r\nThat much is clear, but then we have to look at the impact of the odd/even design on the number of paths in the `initial_max_paths` transport parameter, and in the `MAX_PATHS` frame. If we follow the design of the max streams design in RFC 9000, we should replace the `initial_max_paths` parameters by two separate parameters:\r\n\r\n* initial_max_paths_client: maximum number of path that the client may inititiate,\r\n* initial_max_paths_server: maximum number of path that the server may inititiate.\r\n\r\nFor each of those, the maximum would be the minimum of the values advertised by client and server. Instead of writing that the multipath option is not used if the `initial_max_paths` parameter is not present, we would have something a bit more complicated, i.e., stating that the frames are only used if at least one of the parameters is present.\r\n\r\nThen we would also have to split the `MAX_PATHS` frame into `MAX_PATHS_CLIENT` and `MAX_PATHS_SERVER`.\r\n\r\nAll that is doable, but I wonder whether this complexity is justified. Maybe what we need instead is just a way to resolve the \"path identifier collision\". For example, assuming just on path identifier space, we could have a \"client win\" rule: if the client creates path N with a specific 4 tuple and then receives a path message with identifier N from the server using a different 4 tuple, it just ignores it; if the server sends a path challenge four path N with a four tuple, and then receives a path message from the client with a different 4 tuple, it consider its initial challenge as lost and only responds to the client's message.\r\n\r\nSo, I have a question: bite the complexity of 2 parallel path identifier sequences; or, simply add a \"collisions\" rule. What do people think?\r\n\r\n\r\ninitial_max_stream_data_bidi_local\r\ninitial_max_stream_data_bidi_remote",
      "createdAt": "2024-04-03T23:38:58Z",
      "updatedAt": "2024-05-25T02:22:29Z",
      "closedAt": null,
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "I'm not sure I follow the frame split argument. Stream IDs are split 4 ways and don't require 4 different 4 types of MAX_STREAMS to manage vending credits - they only use 2 types for the bidi/uni split, not the client/server split.\r\n\r\nI'm not sure I follow the argument that an `initial_max_paths_client` maximum would have to resolve to the minimum of what both endpoints sent. A client doesn't need to send the parameter at all. \r\n\r\nMy understanding during IETF is that it wasnt clear if people wanted server IDs today, socall we were doing is making space for some future extwnsion. In that case, it would be simple enough to define a parameter `initial_max_paths_client` sent only by the server, and then a frame to manage increasing that value sent only by the server. A future extension could use a new TP in the opposite direction and reuse the frame.",
          "createdAt": "2024-04-04T08:23:24Z",
          "updatedAt": "2024-04-04T08:23:24Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@LPardue I started writing up a copy of the stream-id design, but there is a difference. The \"max path\" parameter does not just control the \"number of paths\". It also controls \"the number of paths for which the endpoint is willing to accept connection ID\". So, suppose the server sends \"initial_max_paths_client=0xffff\", but the client is unwilling to accept connection IDs for more than 3 paths? The client will need to send \"initial_max_paths_client=3\" to constrain the server.",
          "createdAt": "2024-04-04T16:14:12Z",
          "updatedAt": "2024-04-04T16:14:12Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The more I think it about it, I'm also not sure if the even/odd split is really the easiest solution or maybe just an unnecessary restriction. I think a collision rule is probably good enough, especially as I would think it is a very rare case that the client and server want to open a new path at the same time.\r\n\r\nI'm not sure if ignoring the server initiated path challenge is best approach. It's probably the simplest and it should work as a path challenges can alway be lost. The other option (maybe more clean option?) would to send an path abandon and try again with a different path ID and then define a rule how to deconflict. E.g. the client picks the next and the server the one after or just waits for a while...? But that seems more fiddly than the \"client-wins\" rule @huitema proposed. ",
          "createdAt": "2024-05-14T11:11:27Z",
          "updatedAt": "2024-05-14T11:11:27Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Shades of ALOHA, CDMA, CDMA-CD, etc... Yes, there are multiple ways to detect collisions. We can pick anyone we want, with two main goals:\r\n\r\n* the result should be ambiguous, i.e., both client and server agree on which path ID is in use with what 4-tuple.\r\n* the collision resolution allows for a reliable and timely initiation of paths by either peer.\r\n\r\nI like \"client wins\" because of the timeliness properties, but I agree that \"ignoring the server path challenge\" does create ambiguity. Maybe we need some kind of explicit \"Challenge Reject\", with an \"already in use\" or \"collision\" rule. Or maybe just call it \"challenge collision\".\r\n\r\nI don't know how far we want to go for detailing the collision resolution. If the path-id is the last available path, there is no resolution possible. If there is just one more available path, there is no need to specify it. So maybe better not say anything.\r\n\r\nStepping back, the question is whether we should do anything at all regarding server initiation. We could decide to just not allow it for now, and maybe just add a paragraph explaining that there are plausible collision resolution rules, give a plausible example, and let the designer of the \"server initiated path\" extension provide the full design.",
          "createdAt": "2024-05-14T17:53:25Z",
          "updatedAt": "2024-05-14T17:53:25Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "FWIW, I am convinced that paths initiated from different endpoints should use separate sets of path IDs -- that is a trivial way to avoid designing and implementing (and debugging) collision handling logic. Also note that bidirectional streams work exactly this way in QUIC with good results.\r\n\r\nReserving odd path IDs for server-initiated paths already in this specification is OK with me, even if I don't really see the need.",
          "createdAt": "2024-05-15T12:42:34Z",
          "updatedAt": "2024-05-15T12:42:34Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "It's maybe not that complicated but it means you have to hold separate state for each side. I'm just not sure if that is necessarily at all. As such not splitting the path id space and use the \"client-win\" strategy is probably even more trivial.",
          "createdAt": "2024-05-15T13:34:47Z",
          "updatedAt": "2024-05-15T13:34:47Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is reminiscent of the discussion about whether bidi/uni streams should be split by frame type or by stream ID. Stream ID won out, and I suspect we should follow QUIC precedent here.",
          "createdAt": "2024-05-25T02:22:28Z",
          "updatedAt": "2024-05-25T02:22:28Z"
        }
      ]
    },
    {
      "number": 332,
      "id": "I_kwDOGNtpaM6Iy8lD",
      "title": "Should active_connection_id_limit be per path or per connection?",
      "url": "https://github.com/quicwg/multipath/issues/332",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "needs-discussion",
        "explicit path ID"
      ],
      "body": "With PR  #292 we changed the active_connection_id_limit to be now per path. Is that really necessary or the correct thing to do?\r\n\r\nIf we can keep active_connection_id_limit to limit the total numbers of CID an endpoint is willing to maintain (because maintaining with or without a path ID associated to the CID is not really a difference), each endpoint can still control the maximum number of paths by announcing CIDs respectively.",
      "createdAt": "2024-05-14T10:27:30Z",
      "updatedAt": "2024-05-27T23:26:58Z",
      "closedAt": null,
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would be inclined to mint a separate transport parameter here. The number of CIDs an endpoint is committing to manage is `active_connection_id_limit` if MP is not negotiated, but `active_connection_id_limit` times number of paths if MP is negotiated. An endpoint might want to select comparable total numbers for each case, but can't know in advance whether the peer will negotiate multipath or not.",
          "createdAt": "2024-05-25T02:18:16Z",
          "updatedAt": "2024-05-25T02:18:16Z"
        }
      ]
    },
    {
      "number": 333,
      "id": "I_kwDOGNtpaM6I1U0a",
      "title": "Which/how many unused CIDs SHOULD be provided?",
      "url": "https://github.com/quicwg/multipath/issues/333",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "explicit path ID"
      ],
      "body": "In section https://quicwg.org/multipath/draft-ietf-quic-multipath.html#name-allocating-consuming-and-re we currently say:\r\n\r\n> \"Endpoints SHOULD issue at least one unused connection ID with unused Path Identifier.\"\r\n\r\nI don't think we can or should require to provide one unused Path ID. Instead this sentence originally intended to say that one unused CID should be provide to enable migration. As such this sentence should say:\r\n\r\n> \"Endpoints SHOULD issue at least one unused connection ID with for each active path.\"",
      "createdAt": "2024-05-14T14:41:51Z",
      "updatedAt": "2024-05-24T18:05:33Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Further the text says the following:\r\n\r\n> When there is not enough unused Path Identifiers, endpoints SHOULD\r\n> send MAX_PATHS frame to inform the peer that new Path Identifiers are available.\r\n\r\nHowever, it is fully unclear what \"not enough\" means. I therefore propose to remove this sentence.",
          "createdAt": "2024-05-14T15:22:08Z",
          "updatedAt": "2024-05-14T15:22:08Z"
        }
      ]
    },
    {
      "number": 335,
      "id": "I_kwDOGNtpaM6I2TEt",
      "title": "Add a short name for \"Multipath Extension for QUIC\" (possibly \"Multipath QUIC\") and an abbreviation (possibly \"MP-QUIC\")",
      "url": "https://github.com/quicwg/multipath/issues/335",
      "state": "OPEN",
      "author": "SpencerDawkins",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I'm starting to refer to this draft in multiple places, both inside and outside the IETF, and I would like to use a correct identifier, but I'm seeing this referred to as both \"Multipath QUIC\" and \"QUIC Multipath\"(*). The draft contains the string \"Multipath Extension for QUIC\" about 17 times, so I'm guessing you'd prefer \"Multipath QUIC\", but putting that in the draft would be helpful. \r\n\r\nIn addition, if there was a short abbreviation that people would be likely to include as a search term, that would also be helpful. \r\n\r\nIf you wanted to make me do the work on that, I'd be happy to submit a PR - just let me know. \r\n\r\n(*) Yes, this is a request for better marketing. I understand why it seems silly.  But I'm also seeing atrocities like \"multi-path QUIC\", because \"Multipath Extension for QUIC\" is accurate, but people are coming up with a shorter form on their own. ",
      "createdAt": "2024-05-14T16:45:25Z",
      "updatedAt": "2024-05-21T20:01:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I was actually rather trying to avoid the term \"Multipath QUIC\" (or \"QUIC Multipath\") and rather tried to talk about the multipath extension or multipath support, to explicitly indicate that this is not a new/different protocol but really just an extension and part of QUIC (similar as datagram support is also just an extension). I know the terms are still a few time in the draft but these are mainly left overs from the initial merger of the different drafts. This still needs some editorial clean-up.",
          "createdAt": "2024-05-14T17:04:06Z",
          "updatedAt": "2024-05-14T17:04:06Z"
        },
        {
          "author": "SpencerDawkins",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I was actually rather trying to avoid the term \"Multipath QUIC\" (or \"QUIC Multipath\") and rather **tried to talk about the multipath extension or multipath support, to explicitly indicate that this is not a new/different protocol but really just an extension** and part of QUIC (similar as datagram support is also just an extension). I know the terms are still a few time in the draft but these are mainly left overs from the initial merger of the different drafts. This still needs some editorial clean-up.\r\n\r\nHi, @mirjak, the part in bold especially makes perfect sense to me. Would the authors be willing to consider changing the document title to \r\n\r\n> Multipath Extension for QUIC **(MP-QUIC)**\r\n\r\nwith no other changes requested?",
          "createdAt": "2024-05-21T19:50:33Z",
          "updatedAt": "2024-05-21T19:50:33Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@SpencerDawkins I understand that @mirjak does not want to use \"MP-QUIC\" or \"Multipath QUIC\" as some kind of brand. I think this is right: we are defining an extension to QUIC, not some kind of fork or QUIC. But by definition, adding a short name would give just that impression. The best way to avoid that would be to have no short name at all -- indeed extensions like \"datagram\" or \"ack frequency\" do not have short names. If we do pick a short term, I would specifically not use \"MP-QUIC\" or \"QUIC-MP\", because these are too damn close to being a brand. Maybe \"QUIC-ME\" for multipath extensions. But not saying anything is better.",
          "createdAt": "2024-05-21T20:01:31Z",
          "updatedAt": "2024-05-21T20:01:31Z"
        }
      ]
    },
    {
      "number": 336,
      "id": "I_kwDOGNtpaM6JOveO",
      "title": "How should the receiver react if it receives Connection IDs for non-authorised paths IDs?",
      "url": "https://github.com/quicwg/multipath/issues/336",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "explicit path ID"
      ],
      "body": " Closing the connection with some MP_PROTOCOL_VIOLATION error?",
      "createdAt": "2024-05-17T10:17:02Z",
      "updatedAt": "2024-05-17T12:45:47Z",
      "closedAt": null,
      "comments": [
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "Yes.\r\n\r\nA side note: I don't really see the point of `MP_PROTOCOL_VIOLATION`; why is RFC 9000's `PROTOCOL_VIOLATION` not good enough?",
          "createdAt": "2024-05-17T12:45:46Z",
          "updatedAt": "2024-05-17T12:45:46Z"
        }
      ]
    },
    {
      "number": 337,
      "id": "I_kwDOGNtpaM6J0sEP",
      "title": "Advertising CIDs on Path ID != needs to use MP_NEW_CONNECTION_ID by design",
      "url": "https://github.com/quicwg/multipath/issues/337",
      "state": "OPEN",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "explicit path ID"
      ],
      "body": "Coming from #334, there is currently a SHOULD that is not necessary. We should update the text to state that MP_NEW_CONNECTION_ID frames are used to allocate CIDs on a specific Path ID, and that NEW_CONNECTION_ID frames are equivalent to MP_NEW_CONNECTION_ID frames with Path ID 0.\r\nSee original discussion below.\r\n\r\n------\r\n\r\n              I don't understand the motivation behind\r\n> After a successful handshake indicating multipath support by both endpoints,\r\n\tendpoints SHOULD also use the MP_NEW_CONNECTION_ID and\r\n\tMP_RETIRE_CONNECTION_ID frames to provide new connection IDs\r\n\tor, respectively, retire them for the initial path with Path ID 0.\r\n\r\nWe can just say that MP_NEW_CONNECTION_ID with path ID 0 is equivalent to NEW_CONNECTION_ID. That's how we dealt with the fact that there's one bespoke value in RESET_STREAM_AT. It really doesn't matter which frame the peer uses, but in my code, I'd always go for the shortest encoding.\r\n\r\n_Originally posted by @marten-seemann in https://github.com/quicwg/multipath/pull/334#discussion_r1606214314_\r\n            ",
      "createdAt": "2024-05-23T08:29:22Z",
      "updatedAt": "2024-05-23T09:18:26Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 338,
      "id": "I_kwDOGNtpaM6J3oR9",
      "title": "Further clarify how new CIDs are allocated",
      "url": "https://github.com/quicwg/multipath/issues/338",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The process involves:\r\n\r\n- Endpoints decide for which paths they will allocate connection identifiers, subject to both the limits imposed by \"max paths\" and the limits of local resource.\r\n- Endpoint advertise connection identifiers for these paths.\r\n- Connection identifier values must be unique for the scope of the connection, regardless of path-id.\r\n- The number of connection-id active for a given path must not exceed the active_connection_id_limit.\r\n\r\nIt should be clear that at any given time there will be paths for which no connection ID is advertised yet, because the peer did not yet have the time or resource to advertise them. This is not an error.",
      "createdAt": "2024-05-23T14:22:01Z",
      "updatedAt": "2024-05-23T14:22:08Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 339,
      "id": "I_kwDOGNtpaM6J3so8",
      "title": "Review text in CID retirement section",
      "url": "https://github.com/quicwg/multipath/issues/339",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "> The list of received packets used to send acknowledgements also remains unaffected as the packet number space is associated with a path.\r\n\r\nand \r\n\r\n> The peer, that sends the MP_RETIRE_CONNECTION_ID frame, can keep sending data using the same IP addresses and UDP ports previously associated with that connection ID, but has to use a different connection ID when doing so.\r\n\r\nThese are just plain RFC 9000 behavior and might not be mentioned here explicitly. ",
      "createdAt": "2024-05-23T14:29:28Z",
      "updatedAt": "2024-05-24T08:49:59Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 340,
      "id": "I_kwDOGNtpaM6KCeMY",
      "title": "What should an endpoint do if it receives a PATH_CHALLENGE for an path ID that it doesn't have CIDs for?",
      "url": "https://github.com/quicwg/multipath/issues/340",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "explicit path ID"
      ],
      "body": "",
      "createdAt": "2024-05-24T17:36:05Z",
      "updatedAt": "2024-05-24T18:05:43Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is the discussion from PR #315:\r\n\r\n*[mirjak](https://github.com/mirjak) [2 weeks ago](https://github.com/quicwg/multipath/issues/340#discussion_r1594249689)*\r\nI think the client should only try to open a path if it had send CIDs for that path ID (and the reception has been ack'ed). Then if the server received a path challenges for a path ID it doesn't have a CID for, it should either be an error or it should send a path abandon on another path.\r\n\r\n*@[qdeconinck](https://github.com/qdeconinck) qdeconinck [last week](https://github.com/quicwg/multipath/issues/340#discussion_r1604426437)*\r\n> I think the client should only try to open a path if it had send CIDs for that path ID (and the reception has been ack'ed).\r\n\r\nWe could be in the situation where the server has sent MP_NEW_CONNECTION_ID frames to the client, and the client wants to open a new path by sending a PATH_CHALLENGE along with a MP_NEW_CONNECTION_ID frame with the associated Path ID.\r\n\r\n*@[mirjak](https://github.com/mirjak) mirjak [last week](https://github.com/quicwg/multipath/issues/340#discussion_r1604651489)*\r\nYes sending it in the same packet is fine as well because than it cannot be lost or reordered separately.\r\n\r\n*@[mirjak](https://github.com/mirjak) mirjak [yesterday](https://github.com/quicwg/multipath/issues/340#discussion_r1611853509)*\r\nActually this issue is not resolved because if you send it in the same packet, it's \"just\" a matter of processing it the right order. However, otherwise I don't think it's a good idea to save the path challenge for later because then you also have to specify how long to wait.",
          "createdAt": "2024-05-24T17:38:14Z",
          "updatedAt": "2024-05-24T17:38:30Z"
        }
      ]
    },
    {
      "number": 342,
      "id": "I_kwDOGNtpaM6KFGw6",
      "title": "MAX_PATHS_BLOCKED",
      "url": "https://github.com/quicwg/multipath/issues/342",
      "state": "OPEN",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "explicit path ID"
      ],
      "body": "In #328, we're discussing how much the path ID allocation should resemble stream ID allocation.  Along the same lines, I think the suggestion in 4.3.3 to overload MAX_PATHS to indicate that the sender would like to open more paths but is out of path IDs is not wonderful. \r\n\r\n> When endpoint finds it has not enough available unused Path Identifiers, it SHOULD send a MP_MAX_PATHS frame to inform the peer that it could use larger active Path Identifiers.\r\n\r\nFollowing the stream ID design, there should be a MP_MAX_PATHS_BLOCKED frame for that purpose instead.",
      "createdAt": "2024-05-25T02:24:28Z",
      "updatedAt": "2024-05-27T14:55:04Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 343,
      "id": "I_kwDOGNtpaM6KFL0Q",
      "title": "What if SPA migration fails?",
      "url": "https://github.com/quicwg/multipath/issues/343",
      "state": "OPEN",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "The draft currently says, from #256, that:\r\n\r\n> They can also start using multiple paths, unless both server preferred addresses and a disable_active_migration transport parameter were provided by the server, in which case a client is forbidden to establish new paths until \"after a client has acted on a preferred_address transport parameter\" ([Section 18.2.](https://rfc-editor.org/rfc/rfc9000#section-18.2.) of [[QUIC-TRANSPORT](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#QUIC-TRANSPORT)]).\r\n\r\nThis is nearly correct. The `disable_active_migration` transport parameter indicates that \"an endpoint ... MUST NOT use a new local address when sending to the address that the peer used during the handshake.\" This does not prohibit the client from connecting to any other server address that it might know about.\r\n\r\nThe targeted scenario for the RFC 9000 text is an Anycast IP, where attempting to connect from a different source may land on a different destination instance. The migration to the SPA will allow a direct connection to the server that performed the handshake regardless of source address.\r\n\r\nNotably, if the migration fails, the current text prohibits the client from *ever* establishing any other paths, which is probably not what we want.\r\n\r\nI would suggest that we clarify that this prohibition applies only to the handshake address, and that establishment of additional paths to other addresses (potentially including the SPA) is valid immediately.",
      "createdAt": "2024-05-25T02:45:20Z",
      "updatedAt": "2024-05-27T12:41:13Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 344,
      "id": "I_kwDOGNtpaM6KFM4g",
      "title": "Retiring paths doesn't allow new ones",
      "url": "https://github.com/quicwg/multipath/issues/344",
      "state": "OPEN",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "explicit path ID"
      ],
      "body": "The draft currently says:\r\n\r\n> If the transport parameter \"initial_max_paths\" is negotiated as N, and the client is already actively using N paths, the limit is reached. If the client wants to start a new path, it has to retire one of the established paths.\r\n\r\nRetiring a path does not immediately allow the endpoint to open a new one or guarantee that the peer will issue a new path ID for its use. I would either remove the client instructions or address it alongside #342 with a suggestion to send whatever signal is defined there.",
      "createdAt": "2024-05-25T02:51:40Z",
      "updatedAt": "2024-05-27T14:55:14Z",
      "closedAt": null,
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, per @mirjak's comment in #324, I might have misunderstood how MAX_PATHS is interpreted. In that case, I strongly support sending the maximum Path ID which a peer is willing to receive, lest we have another Rapid Reset design on our hands.",
          "createdAt": "2024-05-25T04:15:11Z",
          "updatedAt": "2024-05-25T04:15:11Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The design is clearly \"maximum path ID\", even if the name \"MAX_PATHS\" brings some confusion. We debated for some time, and we decided to keep the MAX_PATHS terminology, and treat it pretty much like MAX_STREAMS. Just like RFC9000 says \"Only streams with a stream ID less than (max_streams * 4 + first_stream_id_of_type) can be opened\", we have \"Only connection ID with a path ID less than max_paths can be sent in MP_NEW_CONNECTION_ID frames\". Or, if we go for the even/odd split, \"Only connection ID with a path ID less than (max_paths * 2 + first_path_id_of_type) can be sent in MP_NEW_CONNECTION_ID frames\".\r\n\r\nA difference with streams is that both endpoints need to send connection ID for every path_id, so for each endpoint \"max_paths\" is \"the max_paths value advertised by the peer\".",
          "createdAt": "2024-05-25T05:19:18Z",
          "updatedAt": "2024-05-25T05:21:30Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema actually initial_max_path is defined as a maximum count and MAX_PATH is defined inconsistently. We really need to fix that but let's discuss that in issue #324 ",
          "createdAt": "2024-05-27T12:51:33Z",
          "updatedAt": "2024-05-27T12:51:33Z"
        }
      ]
    },
    {
      "number": 345,
      "id": "I_kwDOGNtpaM6KFTNT",
      "title": "Path Blackhole",
      "url": "https://github.com/quicwg/multipath/issues/345",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "This term appears in Figure 1 but does not appear anywhere in the text of the document. What is it doing there?",
      "createdAt": "2024-05-25T03:21:17Z",
      "updatedAt": "2024-05-27T12:34:56Z",
      "closedAt": "2024-05-27T12:34:56Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks! I replaced it with \"Idle timeout\" in PR #353.",
          "createdAt": "2024-05-27T12:34:56Z",
          "updatedAt": "2024-05-27T12:34:56Z"
        }
      ]
    },
    {
      "number": 346,
      "id": "I_kwDOGNtpaM6KFWY8",
      "title": "Capitalization and usage consistency",
      "url": "https://github.com/quicwg/multipath/issues/346",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Purely editorial nit; maybe do a global pass right before submission, but consider when updating existing text.\r\n\r\nIn RFC 9000 et al., there is a subtle distinction between capitalized and uncapitalized terms.  The \"connection ID\" is the value, while \"Connection ID\" is the field in a packet or frame.  The term \"CID\" never appears; DCID and SCID abbreviations are only used in examples.  This draft does not appear to follow that distinction or have a similar distinction between the \"path ID\" and \"Path ID\" fields.\r\n\r\n(The draft is also inconsistent between \"ID\" and \"identifier\", though RFC 9000 could have been improved there as well.)",
      "createdAt": "2024-05-25T03:41:08Z",
      "updatedAt": "2024-05-27T13:59:08Z",
      "closedAt": "2024-05-27T12:31:22Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks! This was already mainly addressed in #334 and I now also removed CID in #352. ",
          "createdAt": "2024-05-27T12:31:22Z",
          "updatedAt": "2024-05-27T12:31:22Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Path ID/path identifier use still had issues. Also merged #356 now!",
          "createdAt": "2024-05-27T13:59:07Z",
          "updatedAt": "2024-05-27T13:59:07Z"
        }
      ]
    },
    {
      "number": 347,
      "id": "I_kwDOGNtpaM6KFX6_",
      "title": "Are MP_PATH_(AVAILABLE|STANDBY) probing frames?",
      "url": "https://github.com/quicwg/multipath/issues/347",
      "state": "OPEN",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "no-action-needed"
      ],
      "body": "The draft does not modify RFC 9000's definition that \"PATH_CHALLENGE, PATH_RESPONSE, NEW_CONNECTION_ID, and PADDING frames are 'probing frames', and all other frames are 'non-probing frames'.\" However, it does say that \"A PATH_(AVAILABLE|STANDBY) frame MAY be bundled with ... a PATH_RESPONSE frame in order to indicate the preferred path usage before or during path initiation.\"\r\n\r\nThis suggests that these frames might be treated as probing frames. Either way, the draft should explicitly state that they are or are not.\r\n\r\n(Alternatively, the concept of probing packets/frames might be outmoded in a multipath world. This concept seems largely unused in this document except in Section 4.3.5.)",
      "createdAt": "2024-05-25T03:48:15Z",
      "updatedAt": "2024-05-27T12:25:41Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "We discussed this already and decided that we don't need the concept of probing frames. This is why the draft has the following text in section 4.1:\r\n\r\n```\r\nSection 9.1 of [[QUIC-TRANSPORT] introduces the concept of \"probing\" and \"non-probing\" frames. \r\nWhen the multipath extension is negotiated, the reception of \"non-probing\" packet on a new path \r\nneeds to be considered as a path initiation attempt that does not impact the path status of any\r\nexisting path. Therefore, any frame can be sent on a new path at any time as long as \r\nthe anti-amplification limits (Section 21.1.1.1 of [[QUIC-TRANSPORT]) and\r\nthe congestion control limits for this path are respected.\r\n```\r\n\r\nCan we close this issue or is there anything else needed?",
          "createdAt": "2024-05-27T12:23:28Z",
          "updatedAt": "2024-05-27T12:25:24Z"
        }
      ]
    },
    {
      "number": 348,
      "id": "I_kwDOGNtpaM6KFYi8",
      "title": "Is the Path Status number space per-path or global?",
      "url": "https://github.com/quicwg/multipath/issues/348",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "It appears that the Path Status sequence number is always interpreted in the context of a path ID. However, I did not find an explicit statement of whether the same sequence number for different paths is permitted or prohibited.",
      "createdAt": "2024-05-25T03:51:25Z",
      "updatedAt": "2024-05-27T12:20:55Z",
      "closedAt": "2024-05-27T12:20:55Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "currently it's one sequence number space for the whole connection. So, no the same seq number is not permitted. However, we the explicit oath id approach we could reconsider that. In any case we need to clarify it. However, I will close this now as this is a duplicate of issue #312 ",
          "createdAt": "2024-05-27T12:20:55Z",
          "updatedAt": "2024-05-27T12:20:55Z"
        }
      ]
    },
    {
      "number": 349,
      "id": "I_kwDOGNtpaM6KFY4H",
      "title": "How is \"MP_\" said?",
      "url": "https://github.com/quicwg/multipath/issues/349",
      "state": "OPEN",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "(Editorial nit.)\r\n\r\nIf it's pronounced \"em pee\", then references should be \"an MP_whatever frame\".  If it's pronounced \"multipath\", references should be \"a MP_whatever frame\".\r\n\r\nThe draft currently uses \"a\" throughout, which may be the answer, but I wanted to check.",
      "createdAt": "2024-05-25T03:56:05Z",
      "updatedAt": "2024-05-27T20:43:20Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for checking. No idea... anybody has any glue/preferences?\r\n\r\nI think there is actually a more generally question about naming of these frames; I will open a separate issue for that!",
          "createdAt": "2024-05-27T20:43:19Z",
          "updatedAt": "2024-05-27T20:43:19Z"
        }
      ]
    },
    {
      "number": 359,
      "id": "I_kwDOGNtpaM6KRMf3",
      "title": "Naming consistency of frames",
      "url": "https://github.com/quicwg/multipath/issues/359",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "We should maybe review the names of the frames, e.g.:\r\n\r\n1) Should we rename ACK_MP to MP_ACK? Or PATH_ACK?\r\n\r\n2) Is it MP_NEW_CONNECTION_ID or maybe rather PATH_NEW_CONNECTION_ID or NEW_PATH_CONNECTION_ID or go shorter to PATH_NEW_CID or something?\r\n\r\n3) Depending on the final definition is could be MAX_PATHS or MAX_PATH_ID",
      "createdAt": "2024-05-27T20:49:09Z",
      "updatedAt": "2024-05-27T20:49:14Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 360,
      "id": "I_kwDOGNtpaM6KRPuI",
      "title": "Controlling Path and Path-ID resource",
      "url": "https://github.com/quicwg/multipath/issues/360",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We should say something about controlling the use of multipath resource. Something like:\r\n\r\nImplementing the multipath extension requires expanding the use of two kind of resource: connection identifiers, which must be provided to the peer before being used in a path; and active paths contexts, which include data structures for managing the path and the associated packet number space.\r\n\r\nThe number of connection identifiers is limited by the Max Path value and by the Maximum Number of Active Connection IDs. When endpoints advertise a Max Path value, they authorize the peer to send the authorized maximum number of active connection IDs for all the newly allowed paths. The peer may advertise that many Connection IDs, and the local endpoint has to be ready to store them all.\r\n\r\nThe number of paths is limited by the Max Path value, but is also gated by the availability of connection identifiers. Endpoints advertise Max Path values that match their available resource. They only advertise Connection IDs for a specific path ID if they are ready to allocate resource for managing that path ID.",
      "createdAt": "2024-05-27T21:04:17Z",
      "updatedAt": "2024-05-27T21:04:17Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 6,
      "id": "PR_kwDOGNtpaM4tPebr",
      "title": "[~] modification for checking available CIDs",
      "url": "https://github.com/quicwg/multipath/pull/6",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T08:59:24Z",
      "updatedAt": "2021-10-16T07:31:50Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/yanmei",
      "headRefOid": "2681a3fba2713af375fada09e28e77879c6b4d81",
      "closedAt": "2021-10-15T19:53:42Z",
      "mergedAt": "2021-10-15T19:53:42Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "291f05b716df614f1720724622438fe0764f037d"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "fixes #5 ",
          "createdAt": "2021-10-15T19:53:32Z",
          "updatedAt": "2021-10-15T19:53:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uh_1J",
          "commit": {
            "abbreviatedOid": "4d70bf6"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2021-10-15T09:52:31Z",
          "updatedAt": "2021-10-15T09:52:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uj0UZ",
          "commit": {
            "abbreviatedOid": "2681a3f"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T18:46:10Z",
          "updatedAt": "2021-10-15T18:46:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uj_tX",
          "commit": {
            "abbreviatedOid": "2681a3f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T19:52:23Z",
          "updatedAt": "2021-10-15T19:52:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOGNtpaM4tPkg8",
      "title": "Whole-text pass on the draft",
      "url": "https://github.com/quicwg/multipath/pull/7",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Mostly to fix presentation/grammar issues, also merging section\r\nPath Validation / Path Initiation as this seems to be the same\r\nprocess.",
      "createdAt": "2021-10-15T09:35:04Z",
      "updatedAt": "2021-10-15T11:52:54Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "6d52b63ba2418be28f247a8e785ab809617013ad",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "rephrasing",
      "headRefOid": "a08e9da7763491bca953b6793d95cdb802b57cf8",
      "closedAt": "2021-10-15T11:52:54Z",
      "mergedAt": "2021-10-15T11:52:54Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9f1ee2cfc703ea960a5a85e444e3b0b35f64d707"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uh9cu",
          "commit": {
            "abbreviatedOid": "012853b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks for all the text correction! It's ok for me.",
          "createdAt": "2021-10-15T09:40:53Z",
          "updatedAt": "2021-10-15T09:47:10Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "Close a Path",
              "createdAt": "2021-10-15T09:40:53Z",
              "updatedAt": "2021-10-15T09:47:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiGTW",
          "commit": {
            "abbreviatedOid": "a08e9da"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T10:22:03Z",
          "updatedAt": "2021-10-15T10:22:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOGNtpaM4tPrCR",
      "title": "[~] error treatment for invalid PN space ID",
      "url": "https://github.com/quicwg/multipath/pull/11",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T10:14:05Z",
      "updatedAt": "2021-10-15T12:06:32Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "9f1ee2cfc703ea960a5a85e444e3b0b35f64d707",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/illegal_pn_id",
      "headRefOid": "484d2ec466a4157edabc13da8542d90bfc43e8e1",
      "closedAt": "2021-10-15T12:00:23Z",
      "mergedAt": "2021-10-15T12:00:23Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uiG5c",
          "commit": {
            "abbreviatedOid": "08898a6"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T10:25:16Z",
          "updatedAt": "2021-10-15T10:25:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uiSEg",
          "commit": {
            "abbreviatedOid": "08898a6"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "One typo and a small discussion on the added SHOULD.",
          "createdAt": "2021-10-15T11:30:47Z",
          "updatedAt": "2021-10-15T11:36:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "There is still a MP_ACK on this line",
              "createdAt": "2021-10-15T11:30:47Z",
              "updatedAt": "2021-10-15T11:36:13Z"
            },
            {
              "originalPosition": 17,
              "body": "The SHOULD here sounds strange. I would rather set a MUST, otherwise how should we handle ACK_MP of a given Path ID, non-existing at the reception time, but that later exists?",
              "createdAt": "2021-10-15T11:35:28Z",
              "updatedAt": "2021-10-15T11:36:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiVUB",
          "commit": {
            "abbreviatedOid": "4467a87"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-15T11:49:38Z",
          "updatedAt": "2021-10-15T11:49:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Modified",
              "createdAt": "2021-10-15T11:49:39Z",
              "updatedAt": "2021-10-15T11:49:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiW9p",
          "commit": {
            "abbreviatedOid": "4467a87"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2021-10-15T11:58:59Z",
          "updatedAt": "2021-10-15T11:58:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDOGNtpaM4tQVi6",
      "title": "[~] fix nonce example mistake",
      "url": "https://github.com/quicwg/multipath/pull/13",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T14:33:20Z",
      "updatedAt": "2021-10-16T07:14:46Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/fix_example",
      "headRefOid": "04afe89d9ef2b52a52277739d06ce3603c521a52",
      "closedAt": "2021-10-15T15:16:27Z",
      "mergedAt": "2021-10-15T15:16:27Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "ec9f7fe1807fa02e8703d1f1573d57f4f339ca3e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ui9sx",
          "commit": {
            "abbreviatedOid": "04afe89"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T14:37:41Z",
          "updatedAt": "2021-10-15T14:37:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOGNtpaM4tQ99i",
      "title": "add path id type in illustration figure 3",
      "url": "https://github.com/quicwg/multipath/pull/14",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T18:50:05Z",
      "updatedAt": "2021-10-15T19:54:22Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "ec9f7fe1807fa02e8703d1f1573d57f4f339ca3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/add-example-pathid-type",
      "headRefOid": "72c770509bd16177d6678807406eb70e88005158",
      "closedAt": "2021-10-15T19:54:22Z",
      "mergedAt": "2021-10-15T19:54:21Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "b6331e57d7373526cc4af756386473ca16ece41a"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I will merge this one as I consider it editorial\r\n",
          "createdAt": "2021-10-15T19:54:06Z",
          "updatedAt": "2021-10-15T19:54:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uj_qJ",
          "commit": {
            "abbreviatedOid": "72c7705"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T19:52:04Z",
          "updatedAt": "2021-10-15T19:52:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOGNtpaM4tRJkh",
      "title": "SHOULD -> MUST for use of different CIDs on different paths",
      "url": "https://github.com/quicwg/multipath/pull/16",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There is a SHOULD here, which I believe should be a MUST as we taking about the receiver behaviour here.",
      "createdAt": "2021-10-15T20:18:48Z",
      "updatedAt": "2024-03-12T16:19:28Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-1",
      "headRefOid": "6be669710bb226f4ac0124ab19529eba4b065ca4",
      "closedAt": "2021-10-22T09:08:57Z",
      "mergedAt": "2021-10-22T09:08:57Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "7bbb37fb2db5d8be017016badcc9fb2b312e1c7d"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema @Yanmei-Liu is this ready to merge?",
          "createdAt": "2021-10-22T08:55:19Z",
          "updatedAt": "2021-10-22T08:55:19Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I am working on several projects in parallel, missed this. Text is fine.",
          "createdAt": "2021-10-23T05:38:33Z",
          "updatedAt": "2021-10-23T05:38:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukGFC",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-15T20:31:18Z",
          "updatedAt": "2021-10-15T20:31:24Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Section 9.5 of RFC 9000 says: _\"At any time, endpoints MAY change the Destination Connection ID they transmit with to a value that has not been used on another path.\"_ I don't know whether we want to repeat that, but it seems that we have to consider two cases:\r\n\r\n1) Packet received with a different 4-tuple, same CID: treat as specified in section 9.3 of RFC 9000, i.e., handle NAT rebinding.\r\n2) Packet received on existing 4-tuple, different CID: treat as specified in section 9.5 of RFC 9000, i.e., renewal of CID on an existing path.",
              "createdAt": "2021-10-15T20:31:18Z",
              "updatedAt": "2021-10-15T20:31:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uknj8",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T11:12:09Z",
          "updatedAt": "2021-10-16T11:12:09Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yes, we need to handle NAT rebinding cases when the 1-RTT packets are sent with different 4-tuples and the same CID, so I prefer SHOULD here.",
              "createdAt": "2021-10-16T11:12:09Z",
              "updatedAt": "2021-10-16T11:12:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ul8ao",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-18T07:51:53Z",
          "updatedAt": "2021-10-18T07:51:54Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yes, the rebinding case is considered here. The text says that the sender must change the CID when you move to a new path, however, the receiver should not expect to always see a new CID if the address changes (because of NAT rebinding). This MUST is only for the receiver. ",
              "createdAt": "2021-10-18T07:51:53Z",
              "updatedAt": "2021-10-18T07:51:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uvQ8C",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-20T08:15:16Z",
          "updatedAt": "2021-10-20T08:15:16Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Maybe a way to rephrase this:\r\n\"An endpoint sending 1-RTT packets MUST use different Connection IDs on different paths, if non-zero-length Connection IDs are used. Still, the receiver may observe the same Connection ID used on different 4-tuples due to, e.g., NAT rebinding. In such case, the receiver reacts as specified in {{Section 9.3 of QUIC-TRANSPORT}}.\"",
              "createdAt": "2021-10-20T08:15:16Z",
              "updatedAt": "2021-10-20T08:15:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uvRlG",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-20T08:17:35Z",
          "updatedAt": "2021-10-20T08:17:36Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nAn endpoint sending 1-RTT packets MUST use different Connection IDs on different paths, if non-zero-length\r\nConnection IDs are used. Still, the receiver may observe the same Connection ID used on different 4-tuples\r\ndue to, e.g., NAT rebinding. In such case, the receiver reacts as specified in\r\n{{Section 9.3 of QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2021-10-20T08:17:35Z",
              "updatedAt": "2021-10-20T08:17:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uvghn",
          "commit": {
            "abbreviatedOid": "6be6697"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-20T09:10:21Z",
          "updatedAt": "2021-10-20T09:10:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u4qjM",
          "commit": {
            "abbreviatedOid": "6be6697"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-22T09:07:29Z",
          "updatedAt": "2021-10-22T09:07:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOGNtpaM4tRL4o",
      "title": "Replace single instance of uniflow per path",
      "url": "https://github.com/quicwg/multipath/pull/17",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is really a minor issue, but the word \"uniflow\" appears just once in the draft, in section 5, packet scheduling. I think the packet scheduling text could simply use the word \"path\".",
      "createdAt": "2021-10-15T20:38:00Z",
      "updatedAt": "2021-10-16T22:59:01Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "quicwg/multipath",
      "headRefName": "uniflow-should-be-path",
      "headRefOid": "747b177c6dce6332d88487fdeabbb79641fcfd33",
      "closedAt": "2021-10-16T22:59:01Z",
      "mergedAt": "2021-10-16T22:59:01Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "35df4daaeb56110ececcfee473f2f2f45b04a254"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukhJi",
          "commit": {
            "abbreviatedOid": "747b177"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T03:34:12Z",
          "updatedAt": "2021-10-16T03:34:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ukjnE",
          "commit": {
            "abbreviatedOid": "747b177"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T06:37:21Z",
          "updatedAt": "2021-10-16T06:37:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOGNtpaM4tRY74",
      "title": "Simplify PATH_STATUS frame with PATH_ABANDON frame",
      "url": "https://github.com/quicwg/multipath/pull/19",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Simplify path_status frame with path_abandon frame following the discussion on issue#2. Error code and Reason Phrase are left TBD.",
      "createdAt": "2021-10-15T22:39:07Z",
      "updatedAt": "2021-10-18T07:55:28Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path-abandon-frame",
      "headRefOid": "a18ebf98f9f77c0682de2734c47545237862f6bd",
      "closedAt": "2021-10-16T22:58:25Z",
      "mergedAt": "2021-10-16T22:58:25Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "bd63a177aa2a8d2d98146481d829b6b99216d470"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I actually think we should have keep stand-by. I think this was useful in MPTCP and it's not really related to scheduling. Stand-by only means: I won't use this path but please keep it open.",
          "createdAt": "2021-10-18T07:55:28Z",
          "updatedAt": "2021-10-18T07:55:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukYGU",
          "commit": {
            "abbreviatedOid": "ecf047c"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Providing text for error and reason phrase, and suggesting change in default code for PATH_ABANDON",
          "createdAt": "2021-10-15T22:52:03Z",
          "updatedAt": "2021-10-15T22:53:57Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "How about just adapting the text from QUIC Connection_Close frame:\r\n```\r\nError Code:\r\n: A variable-length integer that indicates the reason for closing this connection.\r\n\r\nReason Phrase Length:\r\n: A variable-length integer specifying the length of the reason phrase in bytes.\r\n  Because an ABANDON_FRAME frame cannot be split between packets, any limits\r\n  on packet size will also limit the space available for a reason phrase.\r\n\r\nReason Phrase:\r\n: Additional diagnostic information for the closure. This can be zero length if\r\n  the sender chooses not to give details beyond the Error Code value.\r\n  This SHOULD be a UTF-8 encoded string {{!RFC3629}}, though the frame\r\n  does not carry information, such as language tags, that would aid comprehension\r\n  by any entity other than the one that created the text.\r\n```\r\n\r\nThe error code will often be \"No Error\". However, some issues can happen, such as closing a path because resource are exceeded, or because there are too many transmission errors, or anything else. Having error codes and an optional reason phrase will help diagnostic and debugging.",
              "createdAt": "2021-10-15T22:52:03Z",
              "updatedAt": "2021-10-15T22:53:57Z"
            },
            {
              "originalPosition": 177,
              "body": "How about not reusing the exact same code as the old PATH_STATUS frame? I would suggest something like \"experiments use 0xbaba05\".",
              "createdAt": "2021-10-15T22:53:17Z",
              "updatedAt": "2021-10-15T22:53:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhFA",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T03:29:01Z",
          "updatedAt": "2021-10-16T03:29:01Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "I have merged your texts into the draft.",
              "createdAt": "2021-10-16T03:29:01Z",
              "updatedAt": "2021-10-16T03:29:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhFr",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T03:29:54Z",
          "updatedAt": "2021-10-16T03:29:54Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "Yes, the PATH_ABANDON type is changed to 0xbaba05 now.",
              "createdAt": "2021-10-16T03:29:54Z",
              "updatedAt": "2021-10-16T03:29:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhcV",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I made a typo, see comment on closing this path. Apart from that, looks good.",
          "createdAt": "2021-10-16T03:55:32Z",
          "updatedAt": "2021-10-16T03:56:36Z",
          "comments": [
            {
              "originalPosition": 154,
              "body": "Fixed the text to say \"abandoning this path\". ",
              "createdAt": "2021-10-16T03:55:32Z",
              "updatedAt": "2021-10-16T15:59:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukmgb",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2021-10-16T10:00:54Z",
          "updatedAt": "2021-10-16T10:00:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOGNtpaM4tRyj5",
      "title": "[+] add definitions for transport parameter",
      "url": "https://github.com/quicwg/multipath/pull/20",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-16T10:52:42Z",
      "updatedAt": "2021-10-28T08:12:47Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0fccf8df3dfd72ff100d5724275250fc205a71bf",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/options_for_pn_space",
      "headRefOid": "1f3fb551d7c2f60d3799d40e13c8b4d8721a528f",
      "closedAt": "2021-10-18T07:08:16Z",
      "mergedAt": "2021-10-18T07:08:16Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "4fcc470e59017459f031e1a3fad5c39faa5c1301"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I just want to note that I used value 1 for multiple packet number spaces to bee compatible with what is already used by Alibaba. However, if that change it not a problem for Alibaba, this order is slightly nicer.",
          "createdAt": "2021-10-18T07:53:29Z",
          "updatedAt": "2021-10-18T07:53:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uksGE",
          "commit": {
            "abbreviatedOid": "1f3fb55"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T15:50:20Z",
          "updatedAt": "2021-10-16T15:50:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ulylI",
          "commit": {
            "abbreviatedOid": "1f3fb55"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T07:07:54Z",
          "updatedAt": "2021-10-18T07:07:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOGNtpaM4tR0Qo",
      "title": "[+] add error codes for IANA registry",
      "url": "https://github.com/quicwg/multipath/pull/21",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-16T11:45:11Z",
      "updatedAt": "2021-10-28T08:12:46Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0fccf8df3dfd72ff100d5724275250fc205a71bf",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/error_code",
      "headRefOid": "86a198adff0c6f477b6ce60d9a0defedd0f32f4f",
      "closedAt": "2021-10-18T07:09:34Z",
      "mergedAt": "2021-10-18T07:09:34Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "9c2773aee0240eb4958d6b476d799f06f216bdef"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uksJk",
          "commit": {
            "abbreviatedOid": "86a198a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks OK.",
          "createdAt": "2021-10-16T15:53:27Z",
          "updatedAt": "2021-10-16T15:53:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uly5I",
          "commit": {
            "abbreviatedOid": "86a198a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T07:09:24Z",
          "updatedAt": "2021-10-18T07:09:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 23,
      "id": "PR_kwDOGNtpaM4tT8jM",
      "title": "ACK_MP only valid using multiple packet number spaces",
      "url": "https://github.com/quicwg/multipath/pull/23",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #8.",
      "createdAt": "2021-10-18T08:34:32Z",
      "updatedAt": "2021-10-18T17:26:24Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "74e66ac8569cab84f21a4ef5a7d0e14ac084f7b7",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "ack-mp-single-psn",
      "headRefOid": "94192df0e6e8857a38f2a6a5426c501bdd818096",
      "closedAt": "2021-10-18T17:26:24Z",
      "mergedAt": "2021-10-18T17:26:24Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "d48c10ceb1430ccfaae823affd8fa28c361425ec"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4umKdo",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T08:42:33Z",
          "updatedAt": "2021-10-18T08:42:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4umpXp",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2021-10-18T10:40:51Z",
          "updatedAt": "2021-10-18T10:40:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uoYGb",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T16:54:58Z",
          "updatedAt": "2021-10-18T16:54:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 24,
      "id": "PR_kwDOGNtpaM4tUzj0",
      "title": "Introduce finite state machine for path's state",
      "url": "https://github.com/quicwg/multipath/pull/24",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Initial attempt to solve #10.",
      "createdAt": "2021-10-18T12:49:40Z",
      "updatedAt": "2021-10-25T12:23:21Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "65fbd86ee4dfdc32e5eeedcd295140587c4ce2e3",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "path-states",
      "headRefOid": "2319475349fcf7b574bef897edf4c7f7cd5f0cd2",
      "closedAt": "2021-10-25T12:23:21Z",
      "mergedAt": "2021-10-25T12:23:20Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9bb0ec671d391ea300fd7837928bc1626f8ba8b8"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "One more editorial comment: This section is now somehow in the middle between the cc section and the packet scheduling section. I think it would be better to have this new section as a subsection of section 3 (on Path Setup and Removal).",
          "createdAt": "2021-10-25T12:05:29Z",
          "updatedAt": "2021-10-25T12:05:29Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Indeed, let me fix that.",
          "createdAt": "2021-10-25T12:07:34Z",
          "updatedAt": "2021-10-25T12:07:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u1fDi",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T14:21:00Z",
          "updatedAt": "2021-10-21T14:21:00Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Not sure if we need to use normative language here: MUST -> have to\r\n\r\nAnd do you maybe mean non-final state?",
              "createdAt": "2021-10-21T14:21:00Z",
              "updatedAt": "2021-10-21T14:21:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1gYA",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-10-21T14:24:45Z",
          "updatedAt": "2021-10-21T14:33:05Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Isn't the first step to send (not received) a PATH_CHALLENGE and then you stay in \"Validating\" state until you receive PATH_RESPONSE (which would trigger the transition to the next state)?",
              "createdAt": "2021-10-21T14:24:45Z",
              "updatedAt": "2021-10-21T14:33:05Z"
            },
            {
              "originalPosition": 56,
              "body": "We should not use normative language in this section, however, not sure if normative language is needed in this case.",
              "createdAt": "2021-10-21T14:28:56Z",
              "updatedAt": "2021-10-21T14:33:05Z"
            },
            {
              "originalPosition": 59,
              "body": "\"usage is enabled by\" is a bit unclear. Maybe: ... provided the congestion control and flow control currently allow sending of new data on a path",
              "createdAt": "2021-10-21T14:32:35Z",
              "updatedAt": "2021-10-21T14:33:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1sTL",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T14:58:07Z",
          "updatedAt": "2021-10-21T14:58:07Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Indeed, let's avoid using normative language, and maybe non-final sounds better.",
              "createdAt": "2021-10-21T14:58:07Z",
              "updatedAt": "2021-10-21T14:58:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1s-T",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T15:00:02Z",
          "updatedAt": "2021-10-21T15:00:03Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "The \"initiate path validation\" is indeed sending a PATH_CHALLENGE on the new path, but we can also have the case of a server that received the PATH_CHALLENGE, sent back the PATH_RESPONSE but did not sent PATH_CHALLENGE (yet). Actually, the transition can be simplified by a \"PATH_CHALLENGE sent/received on new path\", and the following one \"PATH_RESPONSE received\".",
              "createdAt": "2021-10-21T15:00:03Z",
              "updatedAt": "2021-10-21T15:00:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u16NJ",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T15:45:27Z",
          "updatedAt": "2021-10-21T15:45:27Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I think I would omit the part in this diagram where  PATH_CHALLENGE is received by not not send and just define that the validating is enter as soon as a PATH_CHALENGE is sent. Or if you want to show this in the diagram then we would need a separate state for this? Or maybe a separate diagram for the initiator and the \"responder\"?",
              "createdAt": "2021-10-21T15:45:27Z",
              "updatedAt": "2021-10-21T15:45:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u4O8Z",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T07:04:49Z",
          "updatedAt": "2021-10-22T07:04:49Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I don't know if we need a specific state for this (or a different name for the state), but the receiver of the PATH_CHALLENGE frame needs to reply a PATH_RESPONSE frame on the viewed 4-tuple using a unused CID. It should probably keep this mapping if later it wants to validate the path (although I think the receiver should also send a PATH_CHALLENGE, but nothing forces it to do so).",
              "createdAt": "2021-10-22T07:04:49Z",
              "updatedAt": "2021-10-22T07:04:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9W18",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I believe this is ready to merge. @Yanmei-Liu can you check and merge?",
          "createdAt": "2021-10-25T08:55:57Z",
          "updatedAt": "2021-10-25T08:55:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9yEG",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-10-25T10:41:31Z",
          "updatedAt": "2021-10-25T10:41:53Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "As we have 0-RTT transmission in QUIC-TRANSPORT, we should not limit that non-probing packets can only be transmitted after the path address has been validated in multi-path, which could add at least one round-trip-time delay for data sent on the new path. We can use anti-amplification limit instead.",
              "createdAt": "2021-10-25T10:41:32Z",
              "updatedAt": "2021-10-25T10:41:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u98cY",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:28:27Z",
          "updatedAt": "2021-10-25T11:28:27Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "@Yanmei-Liu this is a restriction from RFC9000 and also indicated like this in the current text. If you want to release that restriction please open a new issue for it (which we probably leave open for discussion after submission of -00)",
              "createdAt": "2021-10-25T11:28:27Z",
              "updatedAt": "2021-10-25T11:28:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_oL",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:42:50Z",
          "updatedAt": "2021-10-25T11:42:50Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "It's ok. I record it in a new issue and we keep this limitation in version 00.",
              "createdAt": "2021-10-25T11:42:50Z",
              "updatedAt": "2021-10-25T11:42:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-AB5",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:44:36Z",
          "updatedAt": "2021-10-25T11:44:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 28,
      "id": "PR_kwDOGNtpaM4teVas",
      "title": "add more illustration figures to path close, maybe need revisions",
      "url": "https://github.com/quicwg/multipath/pull/28",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I added 2 illustration figures describing path close when null-length CIDs are used. This changes are based on the discussion of issue #1 . But I think it may need additional revision.  ",
      "createdAt": "2021-10-21T05:50:25Z",
      "updatedAt": "2022-01-20T08:28:56Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "30e9429950fb215400ed552fc9ea68e1509e9658",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path-close-figures",
      "headRefOid": "b949f72c933ad13a837ffe019a8327a9b2afd2f3",
      "closedAt": "2022-01-20T08:28:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I think it would be valuable to also update the description of the Path Identifier Type field of the PATH_ABANDON frame, as I find the current description a bit unclear.\r\n\r\nI have updated the path identifier description. Hope this makes things more clear.",
          "createdAt": "2021-10-23T07:46:55Z",
          "updatedAt": "2021-10-23T07:46:55Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@huitema Could you take a look and see if there are additional things we need to change here?",
          "createdAt": "2021-10-25T04:55:26Z",
          "updatedAt": "2021-10-25T04:55:26Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> My main issue is that I don't think the server should reply to a client's ABANDON with an ABANDON of its own. It should just stop sending on that path. The client MAY want to eter some kind of path closing state, during which it MAY repeat the ABANDON if it sees the server continuing to send traffic. After some time (3xRTO) the client just drops the path. If the server continues sending, the packets will be dropped, and the server will eventually close the path the hard way.\r\n> \r\n> OK, we need to publish in about 12 hours, so maybe it is too late to change the version 00 of the draft now. Maybe resolve that issue later, when we publish a new version?\r\n\r\nYes. I agree, we can fix this issue later. Shall we first keep path_abandons from both sides?",
          "createdAt": "2021-10-25T06:36:11Z",
          "updatedAt": "2021-10-25T06:36:11Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd be okay to merge but maybe it better to just leave this unmerged for -00 and merge later when we have decided how to handle path-abandon best? Otherwise having this example could be confusing.",
          "createdAt": "2021-10-25T08:58:35Z",
          "updatedAt": "2021-10-25T08:58:35Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IMHO we could leave that for -01 indeed.",
          "createdAt": "2021-10-25T11:26:43Z",
          "updatedAt": "2021-10-25T11:26:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u1l8v",
          "commit": {
            "abbreviatedOid": "1d9b085"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T14:39:49Z",
          "updatedAt": "2021-10-21T14:39:51Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "Isn't that always the case that if a single packet number space is used in one directly is also needs to be used in the other direction?\r\n\r\nAlso the assumption here is because there is a non-zero length CID in on direction, this has to use one packet number space? Maybe better so say this at the beginning of this paragraph.",
              "createdAt": "2021-10-21T14:39:50Z",
              "updatedAt": "2021-10-21T14:39:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1xXk",
          "commit": {
            "abbreviatedOid": "1d9b085"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I'm a bit confused by the second example, as I currently understand the path identifier type, I think there are typos there.",
          "createdAt": "2021-10-21T15:14:21Z",
          "updatedAt": "2021-10-21T15:27:22Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "I would say \"... use non-zero length CIDs. For the first path, the server's 1-RTT packets use DCID C1... Note that two paths use different packet number spaces.\" Then, I would complement by \"In this case, the client is going to close the first path. It identifies it by the sequence number of the DCID it uses over that path (path identifier type 0x00), hence using the path_id 1. In reply, the server confirms the path using the sequence number of the DCID it uses over that path (path identifier type 0x00), corresponding to path_id 2.",
              "createdAt": "2021-10-21T15:14:21Z",
              "updatedAt": "2021-10-21T15:27:22Z"
            },
            {
              "originalPosition": 108,
              "body": "I would precise that this is still the client that initiates the path closure.",
              "createdAt": "2021-10-21T15:17:20Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            },
            {
              "originalPosition": 110,
              "body": "Shouldn't the server use 0x01 as path_identifier_type instead? Maybe the figure should be updated as well.",
              "createdAt": "2021-10-21T15:18:50Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            },
            {
              "originalPosition": 112,
              "body": "As I understand the path identifier type, it should be 0x00 here",
              "createdAt": "2021-10-21T15:21:14Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            },
            {
              "originalPosition": 168,
              "body": "I suppose it can terminate using a path immediately and maybe send a PATH_ABANDON later, but I assume the use case here is to say that PATH_ABANDON is a kind of graceful path closure, but abrupt closures are also possible.",
              "createdAt": "2021-10-21T15:25:28Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u4K0i",
          "commit": {
            "abbreviatedOid": "1d9b085"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T06:39:59Z",
          "updatedAt": "2021-10-22T06:39:59Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "Good suggestion. Yes, moving it to the beginning of the paragraph is more clear.",
              "createdAt": "2021-10-22T06:39:59Z",
              "updatedAt": "2021-10-22T06:39:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u4usZ",
          "commit": {
            "abbreviatedOid": "db6d389"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I think it would be valuable to also update the description of the Path Identifier Type field of the PATH_ABANDON frame, as I find the current description a bit unclear.",
          "createdAt": "2021-10-22T09:25:05Z",
          "updatedAt": "2021-10-22T09:25:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u8rgG",
          "commit": {
            "abbreviatedOid": "b949f72"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "My main issue is that I don't think the server should reply to a client's ABANDON with an ABANDON of its own. It should just stop sending on that path. The client MAY want to eter some kind of path closing state, during which it MAY repeat the ABANDON if it sees the server continuing to send traffic. After some time (3xRTO) the client just drops the path. If the server continues sending, the packets will be dropped, and the server will eventually close the path the hard way.\r\n\r\nOK, we need to publish in about 12 hours, so maybe it is too late to change the version 00 of the draft now. Maybe resolve that issue later, when we publish a new version?",
          "createdAt": "2021-10-25T05:10:09Z",
          "updatedAt": "2021-10-25T05:17:21Z",
          "comments": [
            {
              "originalPosition": 169,
              "body": "Do we really need the server to send a Path Abandon? ",
              "createdAt": "2021-10-25T05:10:09Z",
              "updatedAt": "2021-10-25T05:17:21Z"
            },
            {
              "originalPosition": 149,
              "body": "I would personally not have the server send a PATH ABANDON in reply to the client message. The client may want to repeat the ABANDON if it sees the server continuing to send data, kind of like the \"closing\" state in RFC 9000, but we do not need a handshake.\r\n",
              "createdAt": "2021-10-25T05:12:13Z",
              "updatedAt": "2021-10-25T05:17:21Z"
            },
            {
              "originalPosition": 106,
              "body": "Not sure the server needs to send a path abandon. What is supposed to happen if it doesn't? Wouldn't the client close the path anyhow?",
              "createdAt": "2021-10-25T05:13:14Z",
              "updatedAt": "2021-10-25T05:17:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ynBUx",
          "commit": {
            "abbreviatedOid": "b949f72"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-11T12:18:15Z",
          "updatedAt": "2022-01-11T12:18:21Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "This is what we say in the dark currently:\r\n\r\n`The receiver of an PATH_ABANDON frame MAY also send an PATH_ABANDON frame to signal its own willingness to not send any packet on this path anymore.`\r\n\r\nI guess we could remove the abandon from from the server in this example or clarify in the text that this is optional.\r\n\r\n@yfmascgy can you update the PR accordingly?",
              "createdAt": "2022-01-11T12:18:15Z",
              "updatedAt": "2022-01-11T12:18:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 29,
      "id": "PR_kwDOGNtpaM4tidpQ",
      "title": "Update identification of packet number space identifier",
      "url": "https://github.com/quicwg/multipath/pull/29",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Attempt to address #27, probably more text will be needed afterwards.",
      "createdAt": "2021-10-22T09:12:05Z",
      "updatedAt": "2022-07-07T09:38:49Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "7bbb37fb2db5d8be017016badcc9fb2b312e1c7d",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "pnsi-zero-length",
      "headRefOid": "8df480190cdcb0b355920a236cbe5cce467dc9d1",
      "closedAt": "2022-07-07T09:38:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this might need a few more updates in the rest of the text. Thee abandon frame support this already but there might be more text needed on the PN space section.",
          "createdAt": "2021-10-22T17:04:54Z",
          "updatedAt": "2021-10-22T17:04:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Just as a matter of process: if we don't merge this PR (now) we need another PR (till Monday) that clearly specifies that in case of multipath_enabled=2 both endpoints MUST use connection IDs and if that is not the case the connection MUST be closed with an error. I guess that belongs in the negotiation section (as well as probably one sentence somewhere in the intro).",
          "createdAt": "2021-10-23T07:47:52Z",
          "updatedAt": "2021-10-23T07:47:52Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we have reach any conclusion here or do we want to bring this up for further discussion on the list/during the meeting?",
          "createdAt": "2022-03-03T13:59:36Z",
          "updatedAt": "2022-03-03T13:59:36Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Quentin has opened issue #96, which is a good place for this discussion. I would rather table this PR, and not change the text before we agree on a solution to #96.",
          "createdAt": "2022-03-03T18:46:10Z",
          "updatedAt": "2022-03-03T18:46:10Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema not sure if this is the right order of things. This is a change/improvement to the multiple PNS approach. I think we want to know if/how this works in order to be able to make an informed decision about which approach to choose. In other words I think we should resolve this issue before we address #96. However, not sure we did reach agreement yet if this is actually an improvement and therefore we might bring this up for more working group discussion on the list or the next meeting.",
          "createdAt": "2022-03-03T19:07:07Z",
          "updatedAt": "2022-03-03T19:07:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't believe that making decryption dependent on evaluation of IP addresses is a good idea. There are too many ways in which this can lead to trouble, e.g., variations of load balancer and NAT configurations. I would table this PR.",
          "createdAt": "2022-03-03T19:32:06Z",
          "updatedAt": "2022-03-03T19:32:06Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would personally like to have a decryption processing and ACK processing as simple ans straightforward as possible, to minimize risks of bugs, etc. Something like:\r\n\r\n* Number space is directly tied to DCID\r\n* MP-ACK are tied to number space, and identified by DCID of incoming packets\r\n\r\nThis leaves an ambiguity for the identifier in \"Abandon PATH\". I would be OK to simplify this to state either DCID used by peer, or some escape for \"this path\". That way we could see a simple reactive process:\r\n\r\n* receiver receives packet on path that it would rather not see in use anymore\r\n* if DCID in packet, receiver sends \"ABANDON PATH(this DCID)\"\r\n* else, receiver sends \"ABANDON_PATH(this path)\".",
          "createdAt": "2022-03-03T19:37:53Z",
          "updatedAt": "2022-03-03T19:37:53Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema I not sure I fully understand your proposal but it seems like a new/separate issue. Can you please open a new issue and if possible create an alternative PR?",
          "createdAt": "2022-03-04T10:05:05Z",
          "updatedAt": "2022-03-04T10:05:05Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this PR is OBE. @qdeconinck can we close it?",
          "createdAt": "2022-07-06T13:51:14Z",
          "updatedAt": "2022-07-06T13:51:14Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given that #103 is now merged, we can close this now.",
          "createdAt": "2022-07-07T09:38:49Z",
          "updatedAt": "2022-07-07T09:38:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u7jMY",
          "commit": {
            "abbreviatedOid": "8df4801"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I would rather keep it simple and require non null connection IDs for the MP variant. I think mixing 5 tuples into low level packet decryption and parsing is asking for trouble. Also, I am concerned that we are introducing here an untested variation, which might make the whole proposal weaker.\r\n\r\nIn any case, the text has to be specialized to the case in which the client, but not the server, use non null connection ID.",
          "createdAt": "2021-10-23T05:54:13Z",
          "updatedAt": "2021-10-23T05:57:57Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I do not agree that this works.\r\n\r\nFor starter, it does not work if the server uses a zero length CID. It that case, in order to create a new path, a client sends a probe with a zero length CID. It arrives at the server on a five tuple that the server has not yet seen. How can the server know which encryption context it should use? The same issue would also happen in the case of NAT rebinding. The server sees a new five tuple, does not know what encryption to apply.\r\n\r\nSo, the first request is to specialize this text to the case in which the client uses zero length CID but the server does not.\r\n\r\nEven in that case, using the five tuple is going to make client-side encryption offload significantly more complex. The offload engines will have to remember all the five tuples used in the connection, and the corresponding keys. This is a new requirement, and it may be difficult to meet by many implementations.\r\n\r\nI think it would be much simpler to accept the limitation: using multiple number spaces requires that both sides use non-null connection IDs.",
              "createdAt": "2021-10-23T05:54:13Z",
              "updatedAt": "2021-10-23T05:57:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ym_7a",
          "commit": {
            "abbreviatedOid": "8df4801"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-11T12:13:06Z",
          "updatedAt": "2022-01-11T12:13:06Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I definitely agree with your first point or to say it more generally, the host opening a new path needs to carry a CID. \r\n\r\nNot entirely sure about the second point: Why do you think it is more complicated to path to a 5-tuple instead of matching the CID? Or do you mean that current offload engines only use the CID and this would simply be a change? Are these kind of offload engines already deployed?\r\n",
              "createdAt": "2022-01-11T12:13:06Z",
              "updatedAt": "2022-01-11T12:13:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41lQLn",
          "commit": {
            "abbreviatedOid": "8df4801"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-03-03T13:58:47Z",
          "updatedAt": "2022-03-03T13:58:58Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nsequence number of the Connection ID used by its peer over the same 5-tuple. \r\nThis implies that if a connection ID is used by either host, only packets that carry\r\na connection ID can be used to open a new path. When both hosts\r\n```",
              "createdAt": "2022-03-03T13:58:48Z",
              "updatedAt": "2022-03-03T13:58:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41m087",
          "commit": {
            "abbreviatedOid": "8df4801"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T18:44:16Z",
          "updatedAt": "2022-03-03T18:44:17Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "The current API only uses the packet itself: look at the packet, find the number context, expand the number to 64 bits, attempt decryption. Using IP addresses makes this a bit more complicated, and introduces new failure modes such as variation of NAT. Using the peer's CID is also error prone. For example, in case of probes, the receiver has no idea of the value of the peer's CID.\r\n\r\nSee issue #96 for a discussion of options.",
              "createdAt": "2022-03-03T18:44:17Z",
              "updatedAt": "2022-03-03T18:44:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOGNtpaM4tjbV5",
      "title": "Editorial pass",
      "url": "https://github.com/quicwg/multipath/pull/30",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-22T14:39:22Z",
      "updatedAt": "2024-03-12T16:19:27Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "7bbb37fb2db5d8be017016badcc9fb2b312e1c7d",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-2",
      "headRefOid": "3686e07f1b2f08df8da9b008fc80968385d9d624",
      "closedAt": "2021-10-24T08:05:07Z",
      "mergedAt": "2021-10-24T08:05:07Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "0f3c9464445492926e9f1e4460a75ff4030fd368"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm still working on this but need to take a little break now.",
          "createdAt": "2021-10-22T14:42:20Z",
          "updatedAt": "2021-10-22T14:42:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u564N",
          "commit": {
            "abbreviatedOid": "8893fa4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T14:40:03Z",
          "updatedAt": "2021-10-22T14:40:04Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "This was moved to the next section and the section were the frame is specified.",
              "createdAt": "2021-10-22T14:40:03Z",
              "updatedAt": "2021-10-22T14:40:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u57Va",
          "commit": {
            "abbreviatedOid": "8893fa4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T14:41:38Z",
          "updatedAt": "2021-10-22T14:41:38Z",
          "comments": [
            {
              "originalPosition": 222,
              "body": "This part was removed as it is more implementation guidance. A sentence that the initial path has the path ID 0 was added to the previous section.\r\n\r\nSomething could be re-added later to the implementation guidance section. Please provide a PR if you think that is useful.  ",
              "createdAt": "2021-10-22T14:41:38Z",
              "updatedAt": "2021-10-22T14:41:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u6ejU",
          "commit": {
            "abbreviatedOid": "8893fa4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T16:59:05Z",
          "updatedAt": "2021-10-22T16:59:05Z",
          "comments": [
            {
              "originalPosition": 232,
              "body": "```suggestion\r\n## Using One Packet Number Space\r\n```",
              "createdAt": "2021-10-22T16:59:05Z",
              "updatedAt": "2021-10-22T16:59:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u6ers",
          "commit": {
            "abbreviatedOid": "8194d6e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T16:59:42Z",
          "updatedAt": "2021-10-22T16:59:42Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "I removed the experimental value for now. We should probably add a new one!",
              "createdAt": "2021-10-22T16:59:42Z",
              "updatedAt": "2021-10-22T16:59:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u6fB4",
          "commit": {
            "abbreviatedOid": "8194d6e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T17:01:20Z",
          "updatedAt": "2021-10-22T17:01:20Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "I removed this, as I understood that we don't support this case anymore. @Yanmei-Liu please confirm!",
              "createdAt": "2021-10-22T17:01:20Z",
              "updatedAt": "2021-10-23T07:25:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u7jRW",
          "commit": {
            "abbreviatedOid": "e554d06"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-23T06:00:49Z",
          "updatedAt": "2021-10-23T06:00:50Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "I think you wanted to remove lines 409, not line 407.",
              "createdAt": "2021-10-23T06:00:50Z",
              "updatedAt": "2021-10-23T06:00:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u7jit",
          "commit": {
            "abbreviatedOid": "4f2f228"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I think these are good editorial fixes. When reviewing, I fixed half a dozen typos, committing the edits directly. I also opened two issues: the text on allocating CID before opening paths should be moved from the introduction of \"multiple number spaces\" to a common section, maybe the introduction of both spaces; and, the option 2 of the syntax of the path identifier could be simplified. I had previously opened another issue about moving the text on RTT estimates from \"single space\" to a common section.",
          "createdAt": "2021-10-23T06:18:59Z",
          "updatedAt": "2021-10-23T06:37:43Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "Please disregard my previous comment. I agree with this edit.",
              "createdAt": "2021-10-23T06:18:59Z",
              "updatedAt": "2021-10-23T06:37:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u7kd9",
          "commit": {
            "abbreviatedOid": "3686e07"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-23T07:26:24Z",
          "updatedAt": "2021-10-23T07:26:25Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "Yes 407 was edited and keep; 409 was removed.",
              "createdAt": "2021-10-23T07:26:24Z",
              "updatedAt": "2021-10-23T07:26:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u8ACx",
          "commit": {
            "abbreviatedOid": "3686e07"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T07:57:38Z",
          "updatedAt": "2021-10-24T07:57:38Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "That's ok.",
              "createdAt": "2021-10-24T07:57:38Z",
              "updatedAt": "2021-10-24T07:57:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u8AOU",
          "commit": {
            "abbreviatedOid": "3686e07"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks, Mirja. Look good to me. ",
          "createdAt": "2021-10-24T08:04:52Z",
          "updatedAt": "2021-10-24T08:04:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOGNtpaM4tl8xM",
      "title": "[~] new code point for negotiation option ",
      "url": "https://github.com/quicwg/multipath/pull/36",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For issue #26 ",
      "createdAt": "2021-10-24T18:19:30Z",
      "updatedAt": "2021-10-28T08:12:45Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/new_option",
      "headRefOid": "826b8c41b35a22624e89b593352b994690769333",
      "closedAt": "2021-10-25T11:11:36Z",
      "mergedAt": "2021-10-25T11:11:36Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "d6ed0589e8e1499c87e8d128ca567af23be6434e"
      },
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok too.",
          "createdAt": "2021-10-25T11:39:42Z",
          "updatedAt": "2021-10-25T11:39:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u8TuC",
          "commit": {
            "abbreviatedOid": "1a47fa7"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T22:41:21Z",
          "updatedAt": "2021-10-24T22:41:27Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"babe\", uh? When I was at Microsoft, constants like would be auto-flagged as sexist in the code review. Can we pick something else, maybe 0xbabf ?",
              "createdAt": "2021-10-24T22:41:21Z",
              "updatedAt": "2021-10-24T22:41:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u8tB9",
          "commit": {
            "abbreviatedOid": "826b8c4"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T05:24:53Z",
          "updatedAt": "2021-10-25T05:24:54Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yes. We should be more careful. I fixed this issue.",
              "createdAt": "2021-10-25T05:24:53Z",
              "updatedAt": "2021-10-25T05:24:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9QOP",
          "commit": {
            "abbreviatedOid": "826b8c4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "@qdeconinck please confirm that this is okay and merge!",
          "createdAt": "2021-10-25T08:31:33Z",
          "updatedAt": "2021-10-25T08:31:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9qOg",
          "commit": {
            "abbreviatedOid": "826b8c4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T10:08:26Z",
          "updatedAt": "2021-10-25T10:08:26Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Very sorry for that. I didn't notice the trick. I'll pay attention next time.",
              "createdAt": "2021-10-25T10:08:26Z",
              "updatedAt": "2021-10-25T10:13:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 37,
      "id": "PR_kwDOGNtpaM4tl9On",
      "title": "[~] fix Path Identifier Content",
      "url": "https://github.com/quicwg/multipath/pull/37",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #35.",
      "createdAt": "2021-10-24T18:31:30Z",
      "updatedAt": "2021-10-28T08:12:39Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_id",
      "headRefOid": "dd84eaaf871f1f6e850f9143838a50487be8ab49",
      "closedAt": "2021-10-25T08:24:40Z",
      "mergedAt": "2021-10-25T08:24:40Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "71f7b0096f9d4afa46b27a6420d7e053c5cd5aea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u8WPH",
          "commit": {
            "abbreviatedOid": "dd84eaa"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Yes, perfect.",
          "createdAt": "2021-10-25T00:09:58Z",
          "updatedAt": "2021-10-25T00:09:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9OQy",
          "commit": {
            "abbreviatedOid": "dd84eaa"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T08:24:24Z",
          "updatedAt": "2021-10-25T08:24:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOGNtpaM4tmGuY",
      "title": "Description of RTT issue to common part of draft.",
      "url": "https://github.com/quicwg/multipath/pull/38",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This would resolve issue #18\r\n\r\nClose #18",
      "createdAt": "2021-10-24T22:57:30Z",
      "updatedAt": "2021-10-25T16:06:12Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "quicwg/multipath",
      "headRefName": "move-rtt-text",
      "headRefOid": "58fbcb4812002f0be1c194a8a84170060796e230",
      "closedAt": "2021-10-25T10:16:55Z",
      "mergedAt": "2021-10-25T10:16:54Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u9P5Q",
          "commit": {
            "abbreviatedOid": "58fbcb4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I guess could have move this in the implementation guidance section but this is fine as well.",
          "createdAt": "2021-10-25T08:30:21Z",
          "updatedAt": "2021-10-25T08:30:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9sRa",
          "commit": {
            "abbreviatedOid": "58fbcb4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T10:16:43Z",
          "updatedAt": "2021-10-25T10:16:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 41,
      "id": "PR_kwDOGNtpaM4tmIGM",
      "title": "Fix kramdown and xml2rfc warnings",
      "url": "https://github.com/quicwg/multipath/pull/41",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Close #39",
      "createdAt": "2021-10-24T23:29:34Z",
      "updatedAt": "2021-10-25T16:05:44Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "quicwg/multipath",
      "headRefName": "more-editorial-fixes",
      "headRefOid": "a8ca17962a830ac8c7ced1019afa142357631819",
      "closedAt": "2021-10-25T08:26:39Z",
      "mergedAt": "2021-10-25T08:26:39Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "a0eed5da5ccc555d90a075f9d63e0be6f21c6942"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 42,
      "id": "PR_kwDOGNtpaM4tm0eN",
      "title": "fix more than one experimental value of ACK MP",
      "url": "https://github.com/quicwg/multipath/pull/42",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Given the deadline, let's first have one set of values instead of two. We may want to decide a third value set later. ",
      "createdAt": "2021-10-25T07:07:27Z",
      "updatedAt": "2021-11-03T03:52:51Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/ack-mp-exp-value",
      "headRefOid": "3c4e13ec28dff5fd514770e800d4eccd1a817b75",
      "closedAt": "2021-10-25T11:06:09Z",
      "mergedAt": "2021-10-25T11:06:09Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "5a62c429b071fb3aa29ae6a6d9f2ce7e9b0a4e51"
      },
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok for me!",
          "createdAt": "2021-10-25T11:37:27Z",
          "updatedAt": "2021-10-25T11:37:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u9WOe",
          "commit": {
            "abbreviatedOid": "a59ef05"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "@qdeconinck please review and merge if you agree!",
          "createdAt": "2021-10-25T08:53:47Z",
          "updatedAt": "2021-10-25T08:53:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9tUm",
          "commit": {
            "abbreviatedOid": "a59ef05"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T10:21:06Z",
          "updatedAt": "2021-10-25T10:21:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u93i_",
          "commit": {
            "abbreviatedOid": "3c4e13e"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Fixed conflict.",
          "createdAt": "2021-10-25T11:05:59Z",
          "updatedAt": "2021-10-25T11:05:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 44,
      "id": "PR_kwDOGNtpaM4tnVFT",
      "title": "Clarify that multiple PN spaces require CID in both directions",
      "url": "https://github.com/quicwg/multipath/pull/44",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #43",
      "createdAt": "2021-10-25T09:52:44Z",
      "updatedAt": "2024-03-12T16:19:27Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "a0eed5da5ccc555d90a075f9d63e0be6f21c6942",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-pns-cids",
      "headRefOid": "06faf2664179bcbe92c9fda8a1739d64bcfba7c3",
      "closedAt": "2021-10-25T11:21:41Z",
      "mergedAt": "2021-10-25T11:21:41Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "b16e25959033d6d868d4e63e31074938b709d8da"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u9ybL",
          "commit": {
            "abbreviatedOid": "06faf26"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T10:43:09Z",
          "updatedAt": "2021-10-25T10:43:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u964h",
          "commit": {
            "abbreviatedOid": "06faf26"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:21:17Z",
          "updatedAt": "2021-10-25T11:21:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOGNtpaM4tncl7",
      "title": "Clarification of congestion control section",
      "url": "https://github.com/quicwg/multipath/pull/45",
      "state": "MERGED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some more text in the congestion control section explaining why coupled congestion control is suggested. We could later add SHOULD or MUST to request the utilization of coupled congestion control schemes for multipath QUIC.",
      "createdAt": "2021-10-25T10:26:53Z",
      "updatedAt": "2021-10-25T11:15:18Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "congestion",
      "headRefOid": "baa62e7b3fabc194f329ab5026ebce182263de59",
      "closedAt": "2021-10-25T11:15:18Z",
      "mergedAt": "2021-10-25T11:15:18Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "f7d22b7d88843be13491e40a6e0d0b71b875efe1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u948I",
          "commit": {
            "abbreviatedOid": "baa62e7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:12:16Z",
          "updatedAt": "2021-10-25T11:12:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u95jM",
          "commit": {
            "abbreviatedOid": "baa62e7"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:15:06Z",
          "updatedAt": "2021-10-25T11:15:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOGNtpaM4tnfLP",
      "title": "Clarifications on PATH_ABANDON",
      "url": "https://github.com/quicwg/multipath/pull/46",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #32 \r\n\r\nPlease carefully review the text about abandon frames on the last active path. This is new and maybe not what you intended, however, because of potential crossing of abandon frames from each direction (as mentioned by @huitema in the issue), I don't think receiving an abandon frame on the last active path should be a protocol violation.",
      "createdAt": "2021-10-25T10:40:39Z",
      "updatedAt": "2024-03-12T16:19:16Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-abandon",
      "headRefOid": "cc686c0228562aed817797a10932d1cca7981bac",
      "closedAt": "2021-10-25T12:22:37Z",
      "mergedAt": "2021-10-25T12:22:37Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "6391660f7b27757232ca0242a9bad9adea16da26"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u97hg",
          "commit": {
            "abbreviatedOid": "2d878bf"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:24:14Z",
          "updatedAt": "2021-10-25T11:24:14Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "that also _may_ trigger retransmission of data ...",
              "createdAt": "2021-10-25T11:24:14Z",
              "updatedAt": "2021-10-25T11:24:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u971X",
          "commit": {
            "abbreviatedOid": "2d878bf"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:25:39Z",
          "updatedAt": "2021-10-25T11:25:40Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nas ACK can still be received on other frame that also may trigger retransmission of data on another path.\r\n```",
              "createdAt": "2021-10-25T11:25:39Z",
              "updatedAt": "2021-10-25T11:25:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u99hb",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:33:22Z",
          "updatedAt": "2021-10-25T11:40:56Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "it is possible that the packet containing the PATH_ABANDON frame or\r\nthe packet containing the ACK for the PATH_ABANDON frame cannot _be_ received anymore",
              "createdAt": "2021-10-25T11:33:22Z",
              "updatedAt": "2021-10-25T11:40:56Z"
            },
            {
              "originalPosition": 28,
              "body": "The PATH_ABANDON frame therefore indicates to the receiving peer that the sender\r\ndoes not _intend_ to send any packets on that path anymore",
              "createdAt": "2021-10-25T11:34:08Z",
              "updatedAt": "2021-10-25T11:40:56Z"
            },
            {
              "originalPosition": 47,
              "body": "Would it be more clear that the endpoint just use CONNECTION_CLOSE frame immediately if the endpoint don't want to use the last path?",
              "createdAt": "2021-10-25T11:40:45Z",
              "updatedAt": "2021-10-25T11:40:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_gI",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:42:18Z",
          "updatedAt": "2021-10-25T11:42:18Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nthe packet containing the ACK for the PATH_ABANDON frame cannot be received anymore and the endpoint\r\n```",
              "createdAt": "2021-10-25T11:42:18Z",
              "updatedAt": "2021-10-25T11:42:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_l4",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:42:41Z",
          "updatedAt": "2021-10-25T11:42:42Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\ndoes not intend to send any packets on that path anymore but also recommends to the receiver that no \r\n```",
              "createdAt": "2021-10-25T11:42:42Z",
              "updatedAt": "2021-10-25T11:42:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-AMO",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:44:54Z",
          "updatedAt": "2021-10-25T11:44:54Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "Yes, that's what the client/sender should do. However this text is discussing what happens if you received a PATH_ABANDON on the last open path despite.\r\n\r\nWe could consider this as a protocol violation, however, as two PATH_ABANDON frames for each end could cross each other if both ends are allow to send PATH_ABANDON, I don't think it should be a protocol violation.\r\n\r\nWe could add one more sentence that usually CONNECTION_CLOSE should be used to close the last open path.",
              "createdAt": "2021-10-25T11:44:54Z",
              "updatedAt": "2021-10-25T11:44:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-Ahj",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:46:22Z",
          "updatedAt": "2021-10-25T11:46:22Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\n\r\nIf an endpoint wants to close the last open path of a connection, it MUST use the CONNECTION_CLOSE frame as specified in {{RFC9000}}.\r\n\r\n```",
              "createdAt": "2021-10-25T11:46:22Z",
              "updatedAt": "2021-10-25T11:56:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_f5",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Some suggestions to make the text ACK/ACK_MP agnostic and about retransmissions.",
          "createdAt": "2021-10-25T11:42:16Z",
          "updatedAt": "2021-10-25T11:48:42Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "\"as acknowledgment can still be received or other frame that...\"",
              "createdAt": "2021-10-25T11:42:17Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            },
            {
              "originalPosition": 19,
              "body": "\"when the packet that contained the PATH_ABANDON frame got acknowledged\"",
              "createdAt": "2021-10-25T11:43:11Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            },
            {
              "originalPosition": 36,
              "body": "\"the packet acknowledging the PATH_ABANDON frame\"",
              "createdAt": "2021-10-25T11:44:48Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            },
            {
              "originalPosition": 40,
              "body": "I would precise that the retransmittable frames (or content) of these packets should be retransmitted",
              "createdAt": "2021-10-25T11:47:00Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-Bs8",
          "commit": {
            "abbreviatedOid": "8f13055"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:51:25Z",
          "updatedAt": "2021-10-25T11:51:25Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nas acknowledgments can still be received or other frames that also may trigger retransmission of data on another path.\r\n```",
              "createdAt": "2021-10-25T11:51:25Z",
              "updatedAt": "2021-10-25T11:51:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-B-m",
          "commit": {
            "abbreviatedOid": "8f13055"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:52:39Z",
          "updatedAt": "2021-10-25T11:52:39Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nThe endpoint sending the PATH_ABANDON frame SHOULD consider a path as abandoned when the \r\npacket that contained the PATH_ABANDON frame is acknowledged. When releasing resources of a path,\r\n```",
              "createdAt": "2021-10-25T11:52:39Z",
              "updatedAt": "2021-10-25T11:52:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-CcT",
          "commit": {
            "abbreviatedOid": "8f13055"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:54:40Z",
          "updatedAt": "2021-10-25T11:54:41Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nRetransmittable frame, that have previously been send on the abandoned path and are considered lost, \r\nSHOULD be retransmitted on a different path.\r\n```",
              "createdAt": "2021-10-25T11:54:41Z",
              "updatedAt": "2021-10-25T11:54:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-DPN",
          "commit": {
            "abbreviatedOid": "cc686c0"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:58:01Z",
          "updatedAt": "2021-10-25T11:58:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u-I-k",
          "commit": {
            "abbreviatedOid": "cc686c0"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T12:21:05Z",
          "updatedAt": "2021-10-25T12:21:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u_DGX",
          "commit": {
            "abbreviatedOid": "cc686c0"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Sounds good. I think the next feedback will come once we have implemented and tested the feature.",
          "createdAt": "2021-10-25T15:24:40Z",
          "updatedAt": "2021-10-25T15:24:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 48,
      "id": "PR_kwDOGNtpaM4tnjAl",
      "title": "Clarification in the section on packet scheduling",
      "url": "https://github.com/quicwg/multipath/pull/48",
      "state": "MERGED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some more text for the scheduling section to clarify it.",
      "createdAt": "2021-10-25T10:59:12Z",
      "updatedAt": "2021-10-25T12:34:12Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "scheduling",
      "headRefOid": "0ab714af6208163d268b2c3bd525622840dc14e6",
      "closedAt": "2021-10-25T12:34:12Z",
      "mergedAt": "2021-10-25T12:34:11Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "31b2dfe01133d9433c042d9a3656d1d72d04ba4c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u93Rn",
          "commit": {
            "abbreviatedOid": "1496b8e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:04:45Z",
          "updatedAt": "2021-10-25T11:04:46Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\npackets can only be sent when the congestion window of at least one path is open.\r\n```\r\nNote that the previous section also talks about congestion control but I think that is okay.",
              "createdAt": "2021-10-25T11:04:45Z",
              "updatedAt": "2021-10-25T11:04:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u93s2",
          "commit": {
            "abbreviatedOid": "1496b8e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think you first change needs a revision. I left another clarifying edit for the rest of your text.",
          "createdAt": "2021-10-25T11:06:38Z",
          "updatedAt": "2021-10-25T11:07:55Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think we actually already agreed that this will be a different document and not path of a future version of this document (as indicated in the intro). Of course the wg can always revisit this decision but we should document what we agree to for now.",
              "createdAt": "2021-10-25T11:06:38Z",
              "updatedAt": "2021-10-25T11:07:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-CIv",
          "commit": {
            "abbreviatedOid": "1496b8e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "A suggestion to resolve Mirja's point, also agree on the proposed change in line 248.",
          "createdAt": "2021-10-25T11:53:20Z",
          "updatedAt": "2021-10-25T11:55:02Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nAfter completing the handshake, endpoints have agreed to enable multipath feature and can start using multiple paths. This document does not discuss when a client decides to initiate a new path. We delegate such discussion in separate documents.\r\n```",
              "createdAt": "2021-10-25T11:53:21Z",
              "updatedAt": "2021-10-25T11:55:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-DKU",
          "commit": {
            "abbreviatedOid": "0ab714a"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:57:43Z",
          "updatedAt": "2021-10-25T11:57:43Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Quentin replied faster than me",
              "createdAt": "2021-10-25T11:57:43Z",
              "updatedAt": "2021-10-25T11:57:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-DL8",
          "commit": {
            "abbreviatedOid": "0ab714a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:57:50Z",
          "updatedAt": "2021-10-25T11:57:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOGNtpaM4tnjCv",
      "title": "Add link to PN space slides from side meeting",
      "url": "https://github.com/quicwg/multipath/pull/49",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #26",
      "createdAt": "2021-10-25T10:59:25Z",
      "updatedAt": "2024-03-12T16:19:26Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-3",
      "headRefOid": "8ed32784b206073c5004445fc6b0643bf6164d32",
      "closedAt": "2021-10-25T11:36:07Z",
      "mergedAt": "2021-10-25T11:36:07Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "65fbd86ee4dfdc32e5eeedcd295140587c4ce2e3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u92d6",
          "commit": {
            "abbreviatedOid": "e615f84"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:01:11Z",
          "updatedAt": "2021-10-25T11:01:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u99lY",
          "commit": {
            "abbreviatedOid": "e615f84"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Ok with the PR, I can make a quick commit to fix the listed typos",
          "createdAt": "2021-10-25T11:33:39Z",
          "updatedAt": "2021-10-25T11:34:06Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"highly difference latencies\" -> \"highly different latencies\"\r\n\"an multipath extension\" -> \"a multipath extension\"\r\n\"before final publlication\" \"publication\"",
              "createdAt": "2021-10-25T11:33:39Z",
              "updatedAt": "2021-10-25T11:34:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOGNtpaM4tq_Y8",
      "title": "Some edits to the Introduction",
      "url": "https://github.com/quicwg/multipath/pull/52",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-26T09:17:17Z",
      "updatedAt": "2021-10-27T05:33:04Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "master",
      "headRefOid": "fe3fed0d9c078643487b3ad1f4ee43f786958bd5",
      "closedAt": "2021-10-27T05:33:04Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD2kN",
          "commit": {
            "abbreviatedOid": "fe3fed0"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't think we should approve this proposal. I have questions about both the specifics and the process. On the specific, the changes are a mix of suggested rewrite for clarity and subtle deviations from the original intent. The clarity part is a matter of taste; the subtle deviations need discussion.\r\n\r\nAnd thus, to process. Since the DPRIVE WG has not adopted a fully GitHub based process, the preferred method for requesting changes is by having a discussion on the WG mailing list. If we did adopt a GitHub based process, we should probably first migrate this depot to an IETF managed account. Then, we should make clear that discussions should start by opening an issue, not a pull request. Issues allow presentation of the problem before text changes and the archival of those discussions, pull requests are not designed for that. They should come later, when the issue has outlined a consensus for change.",
          "createdAt": "2021-10-26T15:04:54Z",
          "updatedAt": "2021-10-26T15:17:53Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I don't think we should mention scenarios like resource pooling in the introduction. I also don't think we should use loaded language like \"not optimal\". I like the original writing better.",
              "createdAt": "2021-10-26T15:04:54Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            },
            {
              "originalPosition": 32,
              "body": "This is the introduction, I don't think we need detailed quotes of QUIC section. If we do, however, we need to adopt the quoting format of XML2RFC v3.",
              "createdAt": "2021-10-26T15:07:06Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            },
            {
              "originalPosition": 35,
              "body": "No. WE are indeed speaking of path management in QUIC V1, including functions like path validation.",
              "createdAt": "2021-10-26T15:08:01Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            },
            {
              "originalPosition": 47,
              "body": "No. The packet number is also used in path that are not active.",
              "createdAt": "2021-10-26T15:09:32Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 54,
      "id": "PR_kwDOGNtpaM4trE70",
      "title": "Update the terminology section",
      "url": "https://github.com/quicwg/multipath/pull/54",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add an entry for \"path\" and some minor tweaks.",
      "createdAt": "2021-10-26T09:43:19Z",
      "updatedAt": "2021-10-27T05:33:14Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-1",
      "headRefOid": "d2f399fe78f0c440bed46984f6f9423aca502929",
      "closedAt": "2021-10-27T05:33:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD8Jy",
          "commit": {
            "abbreviatedOid": "d2f399f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Same comments as Pr #52. This is not the right process. Please open an issue or have a discussion on the mailing list.",
          "createdAt": "2021-10-26T15:21:26Z",
          "updatedAt": "2021-10-26T15:21:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOGNtpaM4trzIL",
      "title": "Handshake Section",
      "url": "https://github.com/quicwg/multipath/pull/55",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-26T13:18:26Z",
      "updatedAt": "2021-10-27T05:32:52Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-2",
      "headRefOid": "0d9e002752f3f4453e7dd5a8ae846217555be24f",
      "closedAt": "2021-10-27T05:32:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD7qP",
          "commit": {
            "abbreviatedOid": "0d9e002"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "See comments on the other PR for the introduction session. This is not the right process. Please have the discussion on the mailing list first, or submit an issue to discuss specific problems.",
          "createdAt": "2021-10-26T15:19:52Z",
          "updatedAt": "2021-10-26T15:19:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOGNtpaM4tr7aN",
      "title": "Edits to \"Path Setup and Removal\" Section",
      "url": "https://github.com/quicwg/multipath/pull/57",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-26T13:51:37Z",
      "updatedAt": "2021-10-27T05:32:41Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-3",
      "headRefOid": "d9e890d458357185dc75379ef9e1c46a4634b327",
      "closedAt": "2021-10-27T05:32:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD9yF",
          "commit": {
            "abbreviatedOid": "d9e890d"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "As noted in the comments on PR #52 the changes mix some efforts at clarity and some subtle deviations from the consensus. Submitting a PR is NOT the proper process. Start with a discussion on the mailing list or open issues. I think there are valid issues here, such as inconsistent writing of \"multipath\" and \"multi-path\", or the formatting of section references, but these should be treated as specific issues, rather than intermingled with other changes.",
          "createdAt": "2021-10-26T15:26:23Z",
          "updatedAt": "2021-10-26T15:26:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOGNtpaM4tuCed",
      "title": "change MP_ACK to ACK_MP so that the name is unified",
      "url": "https://github.com/quicwg/multipath/pull/62",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This should be a simple fix. There was only one place where MP_ACK appeared.",
      "createdAt": "2021-10-27T04:58:48Z",
      "updatedAt": "2021-10-27T06:05:30Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/one-ack-name",
      "headRefOid": "1282b5f9447da92479bf41388dc14c2ad99fc4b4",
      "closedAt": "2021-10-27T06:05:30Z",
      "mergedAt": "2021-10-27T06:05:30Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "fd89c897a10bc57f1150df180d0e6348e5ed439c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vGNGl",
          "commit": {
            "abbreviatedOid": "ca3b5c1"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I added changes of the tag \"mp-ack-frame\" to \"ack-mp-frame\" for consistency...",
          "createdAt": "2021-10-27T05:10:10Z",
          "updatedAt": "2021-10-27T05:10:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vGUEN",
          "commit": {
            "abbreviatedOid": "1282b5f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-27T06:05:18Z",
          "updatedAt": "2021-10-27T06:05:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOGNtpaM4tuOlq",
      "title": "Improve text in handshake negotiation",
      "url": "https://github.com/quicwg/multipath/pull/67",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Close #66 \r\n",
      "createdAt": "2021-10-27T06:43:19Z",
      "updatedAt": "2021-10-28T07:06:45Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "fd89c897a10bc57f1150df180d0e6348e5ed439c",
      "headRepository": "quicwg/multipath",
      "headRefName": "clarify-handshake-nego",
      "headRefOid": "19a58c649413a6c2eacaef9e2136acad2a1d890f",
      "closedAt": "2021-10-28T07:06:45Z",
      "mergedAt": "2021-10-28T07:06:45Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "65ec23fc4de4ea896a229755be8aeff0b4fb1076"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vGauE",
          "commit": {
            "abbreviatedOid": "19a58c6"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-27T06:45:18Z",
          "updatedAt": "2021-10-27T06:45:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vGc4V",
          "commit": {
            "abbreviatedOid": "19a58c6"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-27T06:56:29Z",
          "updatedAt": "2021-10-27T06:56:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vK65O",
          "commit": {
            "abbreviatedOid": "19a58c6"
          },
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good to me. Thanks.",
          "createdAt": "2021-10-28T05:40:10Z",
          "updatedAt": "2021-10-28T05:40:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vLI4i",
          "commit": {
            "abbreviatedOid": "19a58c6"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-28T07:06:33Z",
          "updatedAt": "2021-10-28T07:06:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 69,
      "id": "PR_kwDOGNtpaM4tyEqL",
      "title": "[~] replace QUIC v1 with QUIC version 1",
      "url": "https://github.com/quicwg/multipath/pull/69",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Be consistent with RFC9000",
      "createdAt": "2021-10-28T08:22:02Z",
      "updatedAt": "2021-11-03T03:52:32Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "65ec23fc4de4ea896a229755be8aeff0b4fb1076",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/quic_v1",
      "headRefOid": "0e357e9b02c55264a38d7be8299b0e8cb6d21be9",
      "closedAt": "2021-10-28T13:16:17Z",
      "mergedAt": "2021-10-28T13:16:17Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "99fbdfbd34c4ee98f783c954fea366a20e2c2be8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vMc-1",
          "commit": {
            "abbreviatedOid": "0e357e9"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-28T12:27:38Z",
          "updatedAt": "2021-10-28T12:27:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vMeB2",
          "commit": {
            "abbreviatedOid": "0e357e9"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-28T12:31:40Z",
          "updatedAt": "2021-10-28T12:31:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 70,
      "id": "PR_kwDOGNtpaM4ty8sJ",
      "title": "[~] Use structured references to section of other documents",
      "url": "https://github.com/quicwg/multipath/pull/70",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #58 ",
      "createdAt": "2021-10-28T13:07:37Z",
      "updatedAt": "2021-11-03T03:52:30Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "99fbdfbd34c4ee98f783c954fea366a20e2c2be8",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/section_ref",
      "headRefOid": "c805d33ac0a19eb247a65af43136a78486776ce6",
      "closedAt": "2021-10-29T15:00:05Z",
      "mergedAt": "2021-10-29T15:00:05Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "d4511eb97b3d1b3955b5e5dcd9099f234af0a5ab"
      },
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I went ahead and replaced the references to RFC9000 by QUIC-TRANSPORT, and RFC9001 by QUIC-TLS. I have checked that this produced the expected XML V3.",
          "createdAt": "2021-10-28T14:00:35Z",
          "updatedAt": "2021-10-28T14:00:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vMy7a",
          "commit": {
            "abbreviatedOid": "d827305"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "There is an issue of duplicate references. The modified text refers directly to RFC 9000; this leads to duplicate references to both [QUIC-TRANSPORT] and [RFC9000] in the reference section. We should try to only keep the \"QUIC-TRANSPORT\" form.",
          "createdAt": "2021-10-28T13:40:03Z",
          "updatedAt": "2021-10-28T13:40:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vM6g5",
          "commit": {
            "abbreviatedOid": "c805d33"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "With the fixed references, it works now...",
          "createdAt": "2021-10-28T14:01:52Z",
          "updatedAt": "2021-10-28T14:01:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vNABl",
          "commit": {
            "abbreviatedOid": "c805d33"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-28T14:15:50Z",
          "updatedAt": "2021-10-28T14:15:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 71,
      "id": "PR_kwDOGNtpaM4t5Ewz",
      "title": "[~] break long lines, no other modifications",
      "url": "https://github.com/quicwg/multipath/pull/71",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Each line is limited to 72 characters.",
      "createdAt": "2021-10-31T14:09:45Z",
      "updatedAt": "2021-11-05T07:48:42Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "d4511eb97b3d1b3955b5e5dcd9099f234af0a5ab",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/short_lines",
      "headRefOid": "7e2030aee318a7d5377aab96dd25e5684c30182c",
      "closedAt": "2021-11-02T12:32:11Z",
      "mergedAt": "2021-11-02T12:32:11Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "be62a93c8882aad30d399c1a77c9dd91bfe7ab88"
      },
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I verified that this PR produces the draft that we expect. I did one small change: remove spaces at the end of lines.",
          "createdAt": "2021-11-02T06:22:15Z",
          "updatedAt": "2021-11-02T06:22:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vYWn5",
          "commit": {
            "abbreviatedOid": "7e2030a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-02T06:22:31Z",
          "updatedAt": "2021-11-02T06:22:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vZslw",
          "commit": {
            "abbreviatedOid": "7e2030a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-02T12:32:04Z",
          "updatedAt": "2021-11-02T12:32:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOGNtpaM4uA9n_",
      "title": "[~] replace multi-path with multipath",
      "url": "https://github.com/quicwg/multipath/pull/72",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Be consistent with title.",
      "createdAt": "2021-11-03T04:02:20Z",
      "updatedAt": "2021-11-05T07:48:08Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "be62a93c8882aad30d399c1a77c9dd91bfe7ab88",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/multipath",
      "headRefOid": "94037fde7c2c9ee4f1cfb97020e6b6f801fc60c8",
      "closedAt": "2021-11-04T05:55:53Z",
      "mergedAt": "2021-11-04T05:55:53Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "2fb158afe5b8faeb492ac92ce561815e32c72614"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vdo9B",
          "commit": {
            "abbreviatedOid": "94037fd"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-03T09:46:43Z",
          "updatedAt": "2021-11-03T09:46:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ve9Br",
          "commit": {
            "abbreviatedOid": "94037fd"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-03T14:36:05Z",
          "updatedAt": "2021-11-03T14:36:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 73,
      "id": "PR_kwDOGNtpaM4uBGPy",
      "title": "[~] adjust the discussion for pros/cons of pn spaces to Section 7",
      "url": "https://github.com/quicwg/multipath/pull/73",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-03T05:34:45Z",
      "updatedAt": "2021-11-05T07:48:06Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "be62a93c8882aad30d399c1a77c9dd91bfe7ab88",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/pn_space",
      "headRefOid": "4419674dc75349c525e3d0aa5fe202ca47a6a3bc",
      "closedAt": "2021-11-04T15:39:42Z",
      "mergedAt": "2021-11-04T15:39:42Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "d23e5c1fa53f122b952052a311c804b35e26a640"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vdomj",
          "commit": {
            "abbreviatedOid": "2fe551a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-03T09:46:12Z",
          "updatedAt": "2021-11-03T09:46:13Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nconnection ID for less overhead, e.g., in highly constrained networks\r\n```",
              "createdAt": "2021-11-03T09:46:12Z",
              "updatedAt": "2021-11-03T09:46:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4vdoq2",
          "commit": {
            "abbreviatedOid": "2fe551a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-03T09:46:18Z",
          "updatedAt": "2021-11-03T09:46:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ve-91",
          "commit": {
            "abbreviatedOid": "9b05261"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-03T14:41:35Z",
          "updatedAt": "2021-11-03T14:46:06Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I would drop the example in the last sentence. It implies that overhead is only an issue in \"highly constrained\" networks, while in practice Chrome does it to minimize aggregated overhead regardless of network constraints. Dropping the text from \", e.g., \" to the final dot avoids speculation on why people do not like overhead.",
              "createdAt": "2021-11-03T14:41:35Z",
              "updatedAt": "2021-11-03T14:46:06Z"
            },
            {
              "originalPosition": 30,
              "body": "Note that there are really 2 arguments for the single space approach. Overhead is one, but \"fewer code changes\" is another. So I would say \"this approach requires the use of a connection ID and also more changes from QUIC version 1.\"",
              "createdAt": "2021-11-03T14:44:45Z",
              "updatedAt": "2021-11-03T14:46:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4vhwi0",
          "commit": {
            "abbreviatedOid": "4419674"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-04T06:15:01Z",
          "updatedAt": "2021-11-04T06:15:01Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I deleted the example after \"e.g.\". \r\n\r\n\"more changes from QUIC version 1\" depends on the specific implementation, as multiple PN spaces could keep the loss detect and ack arrangement part unchanged.\r\nSo maybe we can learn from more implementations and I prefer not to draw the conclusion too early.",
              "createdAt": "2021-11-04T06:15:01Z",
              "updatedAt": "2021-11-04T06:15:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4vjxRa",
          "commit": {
            "abbreviatedOid": "4419674"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-04T15:32:29Z",
          "updatedAt": "2021-11-04T15:32:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOGNtpaM4uBnCu",
      "title": "[~] avoid idle timeout of paths",
      "url": "https://github.com/quicwg/multipath/pull/74",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To fix #51 ",
      "createdAt": "2021-11-03T09:40:28Z",
      "updatedAt": "2021-11-05T07:48:04Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "be62a93c8882aad30d399c1a77c9dd91bfe7ab88",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_timeout",
      "headRefOid": "677a7c3578546dfa79fddf9dbe9d52086847d9de",
      "closedAt": "2021-11-05T06:30:23Z",
      "mergedAt": "2021-11-05T06:30:22Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "186af37cbe04db4db291df319a4daef2f7cde92d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vdn56",
          "commit": {
            "abbreviatedOid": "40ddba8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-03T09:44:43Z",
          "updatedAt": "2021-11-03T09:44:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vjyx2",
          "commit": {
            "abbreviatedOid": "677a7c3"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-04T15:37:12Z",
          "updatedAt": "2021-11-04T15:37:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOGNtpaM4uKUnH",
      "title": "Do not assume real time formatting of server TP",
      "url": "https://github.com/quicwg/multipath/pull/76",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current text assumes that the server transport parameters are composed after seeing the client's proposal. As pointed out in issue #75, this is a deviation from standard QUIC practice. The proposed text fixes that and specifies what happens if both endpoints select option 3, \"support both\". In that case, option 2 \"multiple number spaces\" is selected.\r\n\r\nClose #75",
      "createdAt": "2021-11-05T17:46:20Z",
      "updatedAt": "2021-11-06T08:30:49Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "186af37cbe04db4db291df319a4daef2f7cde92d",
      "headRepository": "quicwg/multipath",
      "headRefName": "tp-nego-uni",
      "headRefOid": "48ef911bf175c8a108b165e9848b0d0714716329",
      "closedAt": "2021-11-06T08:30:49Z",
      "mergedAt": "2021-11-06T08:30:48Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "1c0722d3b2dc99d0af02281203a19fb8147bcb03"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4voqh_",
          "commit": {
            "abbreviatedOid": "0dc4939"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LTGTM just 2 nits",
          "createdAt": "2021-11-05T18:02:25Z",
          "updatedAt": "2021-11-05T18:03:01Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nIf for any one of the endpoints the parameter is absent or set to 0,\r\nor if the two endpoints select incompatible values,\r\n```",
              "createdAt": "2021-11-05T18:02:26Z",
              "updatedAt": "2021-11-05T18:03:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4vo9Dw",
          "commit": {
            "abbreviatedOid": "48ef911"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-05T19:39:36Z",
          "updatedAt": "2021-11-05T19:39:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOGNtpaM4uMok2",
      "title": "type - \"None\" for \"nonce\"",
      "url": "https://github.com/quicwg/multipath/pull/78",
      "state": "MERGED",
      "author": "SpencerDawkins",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(OK, so it's not the biggest contribution I've ever made, but I DID notice it, while reading the master branch ...",
      "createdAt": "2021-11-07T22:37:51Z",
      "updatedAt": "2021-11-08T05:16:41Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "1c0722d3b2dc99d0af02281203a19fb8147bcb03",
      "headRepository": "SpencerDawkins/draft-lmbdhk-quic-multipath",
      "headRefName": "typo",
      "headRefOid": "518663c6f87a6d7649f713647cad7707fcb667d3",
      "closedAt": "2021-11-08T05:16:41Z",
      "mergedAt": "2021-11-08T05:16:41Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "ee830a8febe80218cbb7e8009a38c7cd30c61dcb"
      },
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This relates to only one typo, so I merge this PR.",
          "createdAt": "2021-11-08T05:15:59Z",
          "updatedAt": "2021-11-08T05:15:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vqmL6",
          "commit": {
            "abbreviatedOid": "518663c"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks for correcting this!",
          "createdAt": "2021-11-08T05:13:39Z",
          "updatedAt": "2021-11-08T05:13:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOGNtpaM4uk9N8",
      "title": "Fix typo in section \"path close\"",
      "url": "https://github.com/quicwg/multipath/pull/80",
      "state": "MERGED",
      "author": "iyangsj",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-16T08:35:39Z",
      "updatedAt": "2021-11-16T09:02:19Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "ee830a8febe80218cbb7e8009a38c7cd30c61dcb",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "d1bfe9cff87c5ce31d042d924f0c1d0a0884ecb7",
      "closedAt": "2021-11-16T09:02:18Z",
      "mergedAt": "2021-11-16T09:02:18Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "87fdcb000389417f56c909c5d6a1412204712d28"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4wGaGe",
          "commit": {
            "abbreviatedOid": "d1bfe9c"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "That indeed should be \"path\".",
          "createdAt": "2021-11-16T08:43:51Z",
          "updatedAt": "2021-11-16T08:43:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4wGecq",
          "commit": {
            "abbreviatedOid": "d1bfe9c"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-16T08:59:56Z",
          "updatedAt": "2021-11-16T08:59:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDOGNtpaM4wDec6",
      "title": "Fix some TYPOs in Examples section",
      "url": "https://github.com/quicwg/multipath/pull/82",
      "state": "MERGED",
      "author": "iyangsj",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-20T02:37:46Z",
      "updatedAt": "2021-12-21T20:38:46Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "87fdcb000389417f56c909c5d6a1412204712d28",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "b569d888c4c1e590eeb53453a15e47b19cf2c9da",
      "closedAt": "2021-12-21T20:38:46Z",
      "mergedAt": "2021-12-21T20:38:46Z",
      "mergedBy": "huitema",
      "mergeCommit": {
        "oid": "a60138ca509343f6c5495235006c34575d13856b"
      },
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the fixes, @iyangsj !",
          "createdAt": "2021-12-21T20:38:39Z",
          "updatedAt": "2021-12-21T20:38:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4x8Ji4",
          "commit": {
            "abbreviatedOid": "b569d88"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-21T20:37:50Z",
          "updatedAt": "2021-12-21T20:37:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOGNtpaM4wy4PY",
      "title": "Define path",
      "url": "https://github.com/quicwg/multipath/pull/83",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes issue #63",
      "createdAt": "2022-01-11T12:25:38Z",
      "updatedAt": "2024-03-12T16:19:15Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "a60138ca509343f6c5495235006c34575d13856b",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-4",
      "headRefOid": "54bd4ecb670bb294c5f8141f405f5d2d9be568b2",
      "closedAt": "2022-01-12T08:12:23Z",
      "mergedAt": "2022-01-12T08:12:23Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "f4bea859aca4d56e31d634ab671040f721bda543"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Good point but I guess this definition is inline with what's already specified for QUIC given NATs...",
          "createdAt": "2022-01-11T18:38:30Z",
          "updatedAt": "2022-01-11T18:38:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4yn8AK",
          "commit": {
            "abbreviatedOid": "54bd4ec"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-11T15:21:05Z",
          "updatedAt": "2022-01-11T15:21:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4yoR2J",
          "commit": {
            "abbreviatedOid": "54bd4ec"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Note that this definition is different from RFC6182 that required the utilization of at least one different addresses for different subflows. In practice, there were deployments where this requirement was not respected and it was overly conservative.",
          "createdAt": "2022-01-11T16:16:58Z",
          "updatedAt": "2022-01-11T16:16:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4yp6gV",
          "commit": {
            "abbreviatedOid": "54bd4ec"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-11T23:59:55Z",
          "updatedAt": "2022-01-11T23:59:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 84,
      "id": "PR_kwDOGNtpaM4wy7oO",
      "title": "add Yanmei and Quentin as editors",
      "url": "https://github.com/quicwg/multipath/pull/84",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-11T12:42:01Z",
      "updatedAt": "2024-03-12T16:19:15Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "a60138ca509343f6c5495235006c34575d13856b",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-5",
      "headRefOid": "fcb2232b1a485896cc711a3bbcd0c45d5fc330ac",
      "closedAt": "2022-01-11T23:17:45Z",
      "mergedAt": "2022-01-11T23:17:45Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "4ad903ddfd2e5f4303648028d798d3465567028e"
      },
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Confirmed, so I merge this PR.",
          "createdAt": "2022-01-11T23:17:41Z",
          "updatedAt": "2022-01-11T23:17:41Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4yoKpK",
          "commit": {
            "abbreviatedOid": "fcb2232"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-11T15:55:13Z",
          "updatedAt": "2022-01-11T15:55:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4yoR-h",
          "commit": {
            "abbreviatedOid": "fcb2232"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-11T16:17:23Z",
          "updatedAt": "2022-01-11T16:17:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4yp0fy",
          "commit": {
            "abbreviatedOid": "fcb2232"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-11T23:12:39Z",
          "updatedAt": "2022-01-11T23:12:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 85,
      "id": "PR_kwDOGNtpaM4wzr0l",
      "title": "SPNS: Ack delay considerations",
      "url": "https://github.com/quicwg/multipath/pull/85",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #79.",
      "createdAt": "2022-01-11T15:51:24Z",
      "updatedAt": "2022-01-19T11:20:53Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "a60138ca509343f6c5495235006c34575d13856b",
      "headRepository": "quicwg/multipath",
      "headRefName": "qdeconinck-fix-79",
      "headRefOid": "18c14847b2cb8ec415601e262807ea4978f9de04",
      "closedAt": "2022-01-19T11:20:53Z",
      "mergedAt": "2022-01-19T11:20:53Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "d7fee145bc6374b886a40909539f55796899d164"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ypjSA",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2022-01-11T21:36:26Z",
          "updatedAt": "2022-01-11T21:36:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4yrNEu",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T09:18:50Z",
          "updatedAt": "2022-01-12T09:18:50Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Maybe I'm missing something but why will it _mostly_ relate to the shortest path? Isn't it kind of random which path the highest ack'ed packet belongs to?",
              "createdAt": "2022-01-12T09:18:50Z",
              "updatedAt": "2022-01-12T09:18:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4yrXOM",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T09:45:57Z",
          "updatedAt": "2022-01-12T09:45:58Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Consider a scenario with two paths, A and B, where the latency of A is larger than the B's one. The sender wants to send two packets, spread on both paths. We have two cases.\r\n\r\n1. 1 sent on B, 2 sent on A\r\n\r\nThere are two sub-cases here.\r\n\r\n- The receiver sends an ACK before having received 2. `ACK(largest=1)` contains the ACK delay relative to path B. Then it receives 2, and sends `ACK(largest=2)` with ACK delay relative to path A. In this case, we have ACK delay for both paths.\r\n\r\n- The receiver waited for 2 before sending its ACK. Then, the ACK delay of `ACK(largest=2)` relates to path A, and we don't have the host delay of path B.\r\n\r\n2. 1 sent on A, 2 sent on B\r\n\r\nWhile we still have the two sub-cases, they both lead to the same result: `ACK(largest=2, missing=1)` and `ACK(largest=2)` have their ACK delay relative to the host delay of path B and not to the path A.\r\n\r\nIn general, if the largest packet number has been sent on the lowest latency path, it will prevent the receiver from advertising the host delay of higher latency paths. Note that the \"ideal case\" (where both paths have estimates) only works if the sender does not transmit further packets on the fast path, in which case we fall into case 2. As the fast path will get its packets acknowledged quicker, the sender will likely send further packets on fast path first. It might still be possible to get host delay estimates of slower paths, but most of the ACK delays will relate to the fast one.",
              "createdAt": "2022-01-12T09:45:58Z",
              "updatedAt": "2022-01-12T09:45:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4yrch0",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T10:02:58Z",
          "updatedAt": "2022-01-12T10:02:58Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Ah okay, the assumption is that you would basically receive all packets on the slow path \"out-of-order\". Got it now. Thanks!",
              "createdAt": "2022-01-12T10:02:58Z",
              "updatedAt": "2022-01-12T10:02:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4yvUab",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-13T05:33:30Z",
          "updatedAt": "2022-01-13T05:33:31Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I think the word \"mostly\" is a bit confusing. It could be that when someone uses a round-robin scheduler, unfortunately, it always measures the delay of the high latency path. ",
              "createdAt": "2022-01-13T05:33:31Z",
              "updatedAt": "2022-01-13T05:33:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4yvoYO",
          "commit": {
            "abbreviatedOid": "699f83b"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-13T07:42:43Z",
          "updatedAt": "2022-01-13T07:42:43Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Would replacing \"mostly\" by \"most of the time\" be better?",
              "createdAt": "2022-01-13T07:42:43Z",
              "updatedAt": "2022-01-13T07:42:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDOGNtpaM4w3rOU",
      "title": "High level overview",
      "url": "https://github.com/quicwg/multipath/pull/88",
      "state": "CLOSED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Here is an attempt to provide a high level overview that summarizes the main principles of multipath QUIC. This should be expanded as we improve the text to align it with the full extension.",
      "createdAt": "2022-01-12T16:59:21Z",
      "updatedAt": "2022-03-07T09:21:48Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "f4bea859aca4d56e31d634ab671040f721bda543",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "overview",
      "headRefOid": "7f5005822ab673f323f237c01edf4ae1276501c5",
      "closedAt": "2022-03-07T09:21:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Followed up by #108.",
          "createdAt": "2022-03-07T09:21:47Z",
          "updatedAt": "2022-03-07T09:21:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4zIvN4",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This overview puts a lot of emphasis on the algorithm side. I understand those algorithms eventually are integral parts if we want to make multipath quic work. But I feel this is a bit out of the scope of this very first draft. Maybe we should revisit this later on. ",
          "createdAt": "2022-01-20T08:44:58Z",
          "updatedAt": "2022-01-20T08:44:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41mNYv",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T16:50:31Z",
          "updatedAt": "2022-03-03T16:50:32Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nA multipath QUIC connection starts with a QUIC handshake as a regular QUIC connection.\r\nSee further Section {{nego}}.\r\n```",
              "createdAt": "2022-03-03T16:50:31Z",
              "updatedAt": "2022-03-03T16:50:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41mNwx",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T16:51:34Z",
          "updatedAt": "2022-03-03T16:51:34Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nthe chosen path, as further described in Section {{setup}}.\r\nIn this version of the document, a QUIC server does not initiate the creation\r\n```",
              "createdAt": "2022-03-03T16:51:34Z",
              "updatedAt": "2022-03-03T16:51:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41mOix",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T16:53:35Z",
          "updatedAt": "2022-03-03T16:53:35Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I think the above parts are fine as an overview. However, the later parts are to detailed and could rather go later in the doc. Can we break these out into new PRs?",
              "createdAt": "2022-03-03T16:53:35Z",
              "updatedAt": "2022-03-03T16:53:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41m2xf",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Please make it shorter...",
          "createdAt": "2022-03-03T18:48:24Z",
          "updatedAt": "2022-03-03T18:55:12Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "The active_connection_id_limit transport parameter *binds* the maximum number of paths",
              "createdAt": "2022-03-03T18:48:24Z",
              "updatedAt": "2022-03-03T18:55:12Z"
            },
            {
              "originalPosition": 16,
              "body": "The active CID limits binds the number of simultaneous paths. Or in fact, the number of simultaneous number spaces. It does not bind the total number of paths. When a path is abandoned, the CID is retired, the peer provides a new CID, and that new CID can be used on a new path.",
              "createdAt": "2022-03-03T18:51:01Z",
              "updatedAt": "2022-03-03T18:55:12Z"
            },
            {
              "originalPosition": 63,
              "body": "I agree with Mirja that this is a bit too detailed, probably too long. The path creation and packet scheduling functions are local functions defined by the implementation. We cannot really standardize what implementations do, so the best is to just have a mention that these functions exist, and leave it at that.",
              "createdAt": "2022-03-03T18:54:29Z",
              "updatedAt": "2022-03-03T18:55:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41mPCP",
          "commit": {
            "abbreviatedOid": "717d0c2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-03-03T16:55:01Z",
          "updatedAt": "2022-03-03T19:14:03Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "It actually seems to me that path management might be out of scope for this document and maybe that all we need to say?",
              "createdAt": "2022-03-03T16:55:01Z",
              "updatedAt": "2022-03-03T19:14:03Z"
            },
            {
              "originalPosition": 54,
              "body": "I think the above text should many go in to the Packet Scheduling section and there is probably already some overlap. Also I think we should note that packet scheduling for a multi-stream protocol like QUIC additionally might to consider stream dependancies, e.g. sending all packets of one stream on the same paths.\r\n\r\nCan we move this to a separate PR?",
              "createdAt": "2022-03-03T16:58:44Z",
              "updatedAt": "2022-03-03T19:14:03Z"
            },
            {
              "originalPosition": 63,
              "body": "Can we also move this further down in an own section on recovery considerations (and an own PR)? Or maybe this is a subsection in the Implementation Considerations section?",
              "createdAt": "2022-03-03T17:00:33Z",
              "updatedAt": "2022-03-03T19:14:03Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nThe active_connection_id_limit transport parameter limits the maximum number of active paths\r\n```",
              "createdAt": "2022-03-03T19:12:25Z",
              "updatedAt": "2022-03-03T19:14:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41qQv8",
          "commit": {
            "abbreviatedOid": "f6a2d43"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "While the first part of the overview looks good, the second one is probably too detailed. I made some suggestions to simplify it.",
          "createdAt": "2022-03-04T14:10:30Z",
          "updatedAt": "2022-03-04T14:18:36Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "I agree. I will try to rephrase this.",
              "createdAt": "2022-03-04T14:10:31Z",
              "updatedAt": "2022-03-04T14:18:36Z"
            },
            {
              "originalPosition": 38,
              "body": "```suggestion\r\nIn addition to these core features, an application using Multipath QUIC will typically\r\nneed additional algorithms to handle the number of active paths and how they are used to\r\nsend packets. As these differ depending on the application's requirements, their\r\nspecification is out of scope of this document.\r\n```",
              "createdAt": "2022-03-04T14:13:20Z",
              "updatedAt": "2022-03-04T14:18:36Z"
            },
            {
              "originalPosition": 54,
              "body": "With the shortened version, I think the above paragraph can be moved in another PR that could indeed be placed in the scheduling section.",
              "createdAt": "2022-03-04T14:15:03Z",
              "updatedAt": "2022-03-04T14:18:36Z"
            },
            {
              "originalPosition": 56,
              "body": "```suggestion\r\nMultipath QUIC uses acknowledgments like regular QUIC. More details about these acknowledgments\r\n```",
              "createdAt": "2022-03-04T14:15:34Z",
              "updatedAt": "2022-03-04T14:18:36Z"
            },
            {
              "originalPosition": 63,
              "body": "There should be some recovery consideration too somewhere, although probably not in the overview.",
              "createdAt": "2022-03-04T14:17:04Z",
              "updatedAt": "2022-03-04T14:18:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41qio9",
          "commit": {
            "abbreviatedOid": "f6a2d43"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T15:09:28Z",
          "updatedAt": "2022-03-04T15:09:28Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "@qdeconinck can you create a new PR?",
              "createdAt": "2022-03-04T15:09:28Z",
              "updatedAt": "2022-03-04T15:09:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOGNtpaM4xvRE1",
      "title": "Rename I-D post WG adoption",
      "url": "https://github.com/quicwg/multipath/pull/93",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Renames the markdown document and updates the README. The new links in the README that point to github-hosted pages might be dead for a while during the process.",
      "createdAt": "2022-01-28T13:55:34Z",
      "updatedAt": "2022-02-14T14:02:16Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "master",
      "baseRefOid": "d7fee145bc6374b886a40909539f55796899d164",
      "headRepository": "quicwg/multipath",
      "headRefName": "lucas/rename-draft",
      "headRefOid": "f4614881e8f5cd54ed82e3e65bf06739b8e3b71c",
      "closedAt": "2022-01-31T07:52:36Z",
      "mergedAt": "2022-01-31T07:52:36Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "3852c066d044326aac5f59fc6f9b4b34729a881b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4zoNlL",
          "commit": {
            "abbreviatedOid": "f461488"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-28T14:01:20Z",
          "updatedAt": "2022-01-28T14:01:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4zoNyh",
          "commit": {
            "abbreviatedOid": "f461488"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-28T14:01:43Z",
          "updatedAt": "2022-01-28T14:01:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4zpRFU",
          "commit": {
            "abbreviatedOid": "f461488"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2022-01-28T17:29:20Z",
          "updatedAt": "2022-01-28T17:29:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4zrGuj",
          "commit": {
            "abbreviatedOid": "f461488"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-29T10:16:50Z",
          "updatedAt": "2022-01-29T10:16:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 94,
      "id": "PR_kwDOGNtpaM4x9vEY",
      "title": "Text from Olivier about active paths",
      "url": "https://github.com/quicwg/multipath/pull/94",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #90",
      "createdAt": "2022-02-02T12:46:26Z",
      "updatedAt": "2022-03-07T07:55:19Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "3852c066d044326aac5f59fc6f9b4b34729a881b",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-6",
      "headRefOid": "a90283f5e4790e26c66130545d5e8a80ac9aeade",
      "closedAt": "2022-03-07T04:40:22Z",
      "mergedAt": "2022-03-07T04:40:22Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "cc7beaa88cbaf877374d684342c002640ee3fb55"
      },
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The old text was stating \"do not send if no non-probing packet received over 3 RTT\". The new text essentially adds \"do not send if no non-probing packet received or acknowledged over 3 RTT.\" At first sight it looks right, but there is a tension. Suppose that, as a receiver, I wish the sender would stop sending on a path. With the old rule, I can simply stop sending on that path. With the new rule, I would have to also stop acknowledging packets, even if those packets were received correctly. That's not natural, a tension between signalling path preference and creating artificial losses. All considered, I would rather keep the old text.\r\n\r\nMy understanding is that if I am a receiver that wants to proactively cause a sender to stop sending, I should use the explicit way of sending a path abandon frame. The idle timeout handles the case when a receiver is unaware of a path change that leads to communication failure. If that is the purpose, as long as the receiver can receive packets in the sender-to-receiver direction and acknowledge on another path, it looks to me that we should still allow the sender to use that path. But I feel if we do that, we are diverging from the bidirectional nature of a path described in the draft, which worths more discussion.",
          "createdAt": "2022-02-03T00:57:57Z",
          "updatedAt": "2022-02-03T00:57:57Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @yfmascgy that if you want to close a path, you should use the abandon frame. This sentence covers the case where a path was idle for a while and therefore should be closed silently as it might not work anymore anyway. However, if you have received packet on the path or have an indication that packets you've sent on the path were received by the other end, the path is clearly not idle and working. I also agree with @yfmascgy that that means you only know for sure that the path is still working in one direction and that might need further discussion.",
          "createdAt": "2022-02-03T09:46:28Z",
          "updatedAt": "2022-02-03T09:46:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4z6q7Q",
          "commit": {
            "abbreviatedOid": "70d29b4"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "The old text was stating \"do not send if no non-probing packet received over 3 RTT\". The new text essentially adds \"do not send if no non-probing packet received or acknowledged over 3 RTT.\" At first sight it looks right, but there is a tension. Suppose that, as a receiver, I wish the sender would stop sending on a path. With the old rule, I can simply stop sending on that path. With the new rule, I would have to also stop acknowledging packets, even if those packets were received correctly. That's not natural, a tension between signalling path preference and creating artificial losses. All considered, I would rather keep the old text.",
          "createdAt": "2022-02-02T19:36:07Z",
          "updatedAt": "2022-02-02T19:36:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4z81qY",
          "commit": {
            "abbreviatedOid": "70d29b4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T09:41:38Z",
          "updatedAt": "2022-02-03T09:41:39Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nin the last 3 path RTTs or (b) no non-probing packet sent over this\r\n```",
              "createdAt": "2022-02-03T09:41:38Z",
              "updatedAt": "2022-02-03T09:41:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4z-u8K",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T16:18:59Z",
          "updatedAt": "2022-02-03T16:19:00Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "The use of \"or\" is ambiguous. We want to say that receiving data in one direction proves that the receiving direction works, and receiving acknowledgements proves that the sending direction works. Stop sending should logically be tied to the sending direction. If packets sent on a path are not acked, then the node should stop sending because the path is probably broken. But isn't that already covered? \r\n\r\nI think the text mixes two issues: stop sending because the path is broken; and, stop sending because the peer would rather not use it anymore. The peer not sending \"non probing\" data on the path may be an indication that it does not want to use it anymore. Or it may be an indication that it has nothing to send right now. Which means the signal is ambiguous, and using ambiguous signals is a bad idea. I think we should come down to two simple ideas:\r\n\r\n* nodes should monitor the quality of paths. If packets sent on the path are not acked, that means the quality is bad and the path should probably not be used.\r\n* nodes that want they peer to stop using a specific path should signal it using \"abandon path\" frame.",
              "createdAt": "2022-02-03T16:19:00Z",
              "updatedAt": "2022-02-03T16:19:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40BIPd",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T06:26:51Z",
          "updatedAt": "2022-02-04T06:26:51Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I agree with the two simple ideas described above, I think it makes things much more clear.",
              "createdAt": "2022-02-04T06:26:51Z",
              "updatedAt": "2022-02-04T06:26:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40C-gJ",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T14:59:10Z",
          "updatedAt": "2022-02-04T14:59:11Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I also agree with the simpler ideas. The host should stop sending packets on a path if a) it experiences too many losses (i.e., they never got acknowledged), or b) a ABANDON_PATH frame has been sent/received concerning that path.",
              "createdAt": "2022-02-04T14:59:10Z",
              "updatedAt": "2022-02-04T14:59:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40DANN",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T15:04:28Z",
          "updatedAt": "2022-02-04T15:04:29Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "@qdeconinck @huitema are you saying a node should not consider a path a closed if it was idle for RTTs? This was the original intent of the text.",
              "createdAt": "2022-02-04T15:04:29Z",
              "updatedAt": "2022-02-04T15:04:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40DCkk",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T15:12:05Z",
          "updatedAt": "2022-02-04T15:12:05Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "My point here is to have clear signals. I think we could leave an \"idle timer\" per path, but idle means \"no sent packets acknowledged not received packets\" on that path, and the duration of the (local) path idle timer should have been advertised (e.g., we could reuse the max_idle_timeout transport parameter per path, or define a new one if needed).",
              "createdAt": "2022-02-04T15:12:05Z",
              "updatedAt": "2022-02-04T15:13:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40EB7h",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T19:04:02Z",
          "updatedAt": "2022-02-04T19:04:03Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Reusing the negotiated idle timer is the simpler solution for now.",
              "createdAt": "2022-02-04T19:04:03Z",
              "updatedAt": "2022-02-04T19:04:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40Ftt4",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-05T08:08:36Z",
          "updatedAt": "2022-02-05T08:08:36Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "This is linked to a previous discussion on issue #51 . At that time, we were wondering whether to we should use max_idle_timeout or define something like max_path_idle_timeout. The max_idle_timeout in RFC9000 is used to close the whole connection, so maybe we want something per-path?",
              "createdAt": "2022-02-05T08:08:36Z",
              "updatedAt": "2022-02-05T08:08:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40F45C",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-05T18:29:33Z",
          "updatedAt": "2022-02-05T18:29:34Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Defining an idle timer per path would make control more precise. It would also be one more parameter that administrators will have to worry about. How do you set up this new parameter? Should it be the same for every path? How would it relate to the globally negotiated idle timer? I am not sure that the complexity is worth it. If a node wants to abandon a path before the globally defined timer expires, they can always explicitly abandon the path before the timer expires. I would rather keep it simple and have just one timer.",
              "createdAt": "2022-02-05T18:29:34Z",
              "updatedAt": "2022-02-05T18:29:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40JJMJ",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-07T15:02:39Z",
          "updatedAt": "2022-02-07T15:02:39Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Okay, we can have more discussion on issues #51. For now and for this PR, is the proposal to replace \"in the last 3 path RTTs\" with \"for at least max_idle_timeout milliseconds\" or do we want some entirely different text? If so, please propose a new PR!",
              "createdAt": "2022-02-07T15:02:39Z",
              "updatedAt": "2022-02-07T15:02:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40RHIH",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T04:03:42Z",
          "updatedAt": "2022-02-09T04:03:43Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I think, for now, we can replace the 3-RTT with the max_idle_timeout as Mirja @mirjak proposed. Regarding whether we want something per-path, if the timeout value is large enough, I prefer what Christian @huitema suggested that we have one timer. However, if we want a shorter timeout (something like 3 times RTT), then we might want to have a per-path timer because of path heterogeneity (For example, a 5G path's RTT could be much smaller than that of the other paths).",
              "createdAt": "2022-02-09T04:03:43Z",
              "updatedAt": "2022-02-09T04:03:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40SCfe",
          "commit": {
            "abbreviatedOid": "25d46e1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T09:14:15Z",
          "updatedAt": "2022-02-09T09:14:15Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nin {{QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2022-02-09T09:14:15Z",
              "updatedAt": "2022-02-09T09:14:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40SDVo",
          "commit": {
            "abbreviatedOid": "c8bbfb4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T09:16:59Z",
          "updatedAt": "2022-02-09T09:17:02Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nWhen more than one path is available, hosts shall monitor the arrival\r\nof non-probing packets and the acknowledgements \r\nfor the packets sent over each path. Hosts SHOULD stop\r\nsending traffic on a path if for at least max_idle_timeout milliseconds \r\n(a) no non-probing packet was received or (b) no non-probing\r\npacket sent over this path was acknowledged, but MAY ignore that\r\nrule if it would disqualify\r\n```",
              "createdAt": "2022-02-09T09:17:00Z",
              "updatedAt": "2022-02-09T09:17:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM40ScW8",
          "commit": {
            "abbreviatedOid": "c8bbfb4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T10:31:19Z",
          "updatedAt": "2022-02-09T10:31:19Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "We can keep most of the max_idle_timeout definition, just provide an suggested version for the replacement of the origin paragraph without : \r\n\r\n\"Endpoints use the max_idle_timeout transport parameter to advertise \r\nthe idle timeout of each paths. When more than one path is available, \r\nendpoints shall monitor the arrival of non-probing packets on \r\nthe available paths. Endpoints SHOULD set the idle timers per path. \r\nAn endpoint restarts its path idle timer when a packet from its peer\r\nis received and processed successfully on this path, and endpoint also \r\nrestarts its idle timer when sending an ack-aliciting packet if no other\r\nack-eliciting packets have been sent since last receiving and processing \r\na packet on the current path. Endpoints SHOULD stop sending traffic \r\non the path if the path is idle timeout, but MAY ignore that rule \r\nif it would disqualify all available paths. \r\n\r\nTo avoid idle timeout of a path, endpoints can\r\nsend ack-eliciting packets such as packets containing PING frames\r\n{{Section 19.2 of QUIC-TRANSPORT}} on that path to keep it alive.\r\nSending periodic PING frames also helps prevent middlebox timeout,\r\nas discussed in {{Section 10.1.2 of QUIC-TRANSPORT}}.\r\n\r\nNotice that one path may become unavailable before the path idle timeout, \r\nendpoints can send a PING or other ack-eliciting frame to test a path \r\nfor liveness following {{QUIC-TRANSPORT}}. An endpoint SHOULD send \r\nPATH_ABANDON frame if it wants to stop using the path immediately, \r\ninstead of waiting for the path idle timeout.\"\r\n",
              "createdAt": "2022-02-09T10:31:19Z",
              "updatedAt": "2022-02-09T10:31:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41mXgV",
          "commit": {
            "abbreviatedOid": "a90283f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T17:18:14Z",
          "updatedAt": "2022-03-03T17:18:15Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "@Yanmei-Liu not sure where you propose to add this text. Can you create a PR?",
              "createdAt": "2022-03-03T17:18:15Z",
              "updatedAt": "2022-03-03T17:18:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41m8jB",
          "commit": {
            "abbreviatedOid": "a90283f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "The modified text looks good.",
          "createdAt": "2022-03-03T19:09:46Z",
          "updatedAt": "2022-03-03T19:09:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41nyst",
          "commit": {
            "abbreviatedOid": "a90283f"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The text looks good to me.",
          "createdAt": "2022-03-03T23:05:15Z",
          "updatedAt": "2022-03-03T23:05:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41p7j5",
          "commit": {
            "abbreviatedOid": "a90283f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T12:47:30Z",
          "updatedAt": "2022-03-04T12:47:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41t6bo",
          "commit": {
            "abbreviatedOid": "a90283f"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good to me",
          "createdAt": "2022-03-07T04:40:12Z",
          "updatedAt": "2022-03-07T04:40:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 97,
      "id": "PR_kwDOGNtpaM4z6NTw",
      "title": "New text on ECN handling with single PNS",
      "url": "https://github.com/quicwg/multipath/pull/97",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #87",
      "createdAt": "2022-03-03T18:29:44Z",
      "updatedAt": "2024-03-12T16:19:14Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-7",
      "headRefOid": "1dc888ad669c1d51ebf2537521968e50a718001d",
      "closedAt": "2022-07-06T13:02:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This is included in PR #103, so closing this PR instead.",
          "createdAt": "2022-07-06T13:02:13Z",
          "updatedAt": "2022-07-06T13:02:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41m6_T",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-03-03T19:03:59Z",
          "updatedAt": "2022-03-03T19:07:21Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I would change to:\r\n\r\nRespectively, if an ACK frames acknowledges multiple\r\npackets from different paths, the ECN counters provide the sum of all signals received on those paths.",
              "createdAt": "2022-03-03T19:03:59Z",
              "updatedAt": "2022-03-03T19:07:21Z"
            },
            {
              "originalPosition": 23,
              "body": "Yes. There are many cases in which an aggregate counter is just fine -- this is indeed what we have in QUIC V1, in which ECN counters count the marks received on successive paths, or even the marks received in response to probe packets. We want to say that implementers should be cautious when using this kind of ECN feedback. But there are many scenarios in which this is just fine, e.g., when the bulk of traffic is sent on a single path and the other path is used for ACKs.",
              "createdAt": "2022-03-03T19:07:14Z",
              "updatedAt": "2022-03-03T19:07:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41m-bn",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:17:17Z",
          "updatedAt": "2022-03-03T19:17:17Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "not sure if that is better, because the problem is that you don't know anymore to which path the CE belong when you received the ACK. I think your text proposal makes that point less clear.",
              "createdAt": "2022-03-03T19:17:17Z",
              "updatedAt": "2022-03-03T19:17:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41m-lU",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:17:55Z",
          "updatedAt": "2022-03-03T19:17:55Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I agree but not sure what this mean for this PR. Do you think the text is okay as it is, or do we need to add additional notes. If so, what?",
              "createdAt": "2022-03-03T19:17:55Z",
              "updatedAt": "2022-03-03T19:17:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41nGSP",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:49:03Z",
          "updatedAt": "2022-03-03T19:49:04Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I think the acknowledgement process should be completely straightforward:\r\n\r\n* when ECN mark received, increment the counters for the number space of the packet\r\n* when sending ACK ECN, send the ECN for the number space of the ACK\r\n\r\nYes, in the case of single number space, that does mean single counter for all paths, and that makes the signal harder to use in congestion control. Implementers should be warned about that. But notice that the ACK-ECN are sent by the receiver, and the congestion control decisions are made by the sender. The sender does not have the option of \"not receiving ACK-ECN\" -- there is no parameter negotiation for that. The sender has different options:\r\n\r\n* just not use ECN, i.e., send all packets with ECN flags \"00\".\r\n* use ECN on only some path, e.g., the one path on which most data is sent, mark packets on this path with ECT-0 or ECT-1, mark packets on the other paths as \"00\".\r\n* use ECT-0 on one path, ECT-1 on the other, and use some logic to attribute ECN counts to either ECT-0 or ECT-1.\r\n* use ECT-0 or ECT-1 on all paths, and use correlation with other factors (e.g., losses, delays) to allocate the ECN marks to different paths.\r\n\r\nI would not preclude any of these options.",
              "createdAt": "2022-03-03T19:49:04Z",
              "updatedAt": "2022-03-03T19:49:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41pbUp",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T10:22:57Z",
          "updatedAt": "2022-03-04T10:22:57Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I think it would be better to discuss this in the issue #87 and not this PR but let me reply directly to a couple of points from you:\r\n\r\nFirst, as you note this problem only exists for the single PNS solution. Therefore please note that this PR proposes to add this text to the respective section for single PNS considerations. We can add more text about general ECN but that shouldn't be much different from normal QUIC operation and would be a separate PR for a different section of the document.  \r\n\r\n> Yes, in the case of single number space, that does mean single counter for all paths, and that makes the signal harder to use in congestion control.\r\n\r\nI don't think \"harder to use\" is right. If multiple packets from different paths are ack'ed in the same frame it's simply impossible to assign the signal to one path. As you never should just ignore a congestion signal, the most conservative but probably only correct reaction is unfortunately to reduce your cwnd on all paths where packet got ack'ed. \r\n\r\n> just not use ECN, i.e., send all packets with ECN flags \"00\".\r\n\r\nYes, that is an option and I can add this. This was actually my first thought (see my reply in issue #87). However, for me that would be a strong argument against the single PNS solution. But then I thought that if the receiver would send separate ACKs per path that could also address the problem and keeping ACKs separated per path (at least if the sender sends blocks of PNs on each path) might be beneficial anyway. I think that also something that Ian had in mind.\r\n\r\n> use ECN on only some path, e.g., the one path on which most data is sent, mark packets on this path with ECT-0 or ECT-1, mark packets on the other paths as \"00\".\r\n\r\nThat means you could only see ECN on one path. I don't think this an appropriate solution and again would be reason for me to not go for the single PNS solution.\r\n\r\n> use ECT-0 on one path, ECT-1 on the other, and use some logic to attribute ECN counts to either ECT-0 or ECT-1.\r\n\r\nI think this is out of scope for this document as it makes a different use of ECT1 against the recommendation in RFC8311 (and in conflict with L4S). So if you want to propose this, you have to go to tsvwg.\r\n\r\n> use ECT-0 or ECT-1 on all paths, and use correlation with other factors (e.g., losses, delays) to allocate the ECN marks to different paths.\r\n\r\nI don't think this could work. You don't have per packet delay information in the ACK, so that exactly the same ambiguity. And ideally loss should not be correlated with ECN - hopefully you have ECN instead of loss but that also not guaranteed as you might have multiple bottlenecks or other reason for loss.",
              "createdAt": "2022-03-04T10:22:57Z",
              "updatedAt": "2022-03-04T10:22:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41pbyz",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T10:24:49Z",
          "updatedAt": "2022-03-04T10:24:50Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n\r\nAlternatively, a sender MAY decide to disable ECN entirely when a single\r\npacket number space is used by marking all sent packets as Not-ECN capable.\r\n\r\n```",
              "createdAt": "2022-03-04T10:24:49Z",
              "updatedAt": "2022-03-04T10:25:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41p_pU",
          "commit": {
            "abbreviatedOid": "a4c403c"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The proposed text looks fine to me (with some minor rephrasing and typo suggestions).",
          "createdAt": "2022-03-04T13:05:20Z",
          "updatedAt": "2022-03-04T13:12:44Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nindication for all paths with packets that have been acknowledged in that\r\n```",
              "createdAt": "2022-03-04T13:05:20Z",
              "updatedAt": "2022-03-04T13:12:44Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nACK frame. An host that receives an ACK with an ECN counter increase\r\nacknowledging packets from different paths MAY disable ECN marking and\r\n```",
              "createdAt": "2022-03-04T13:05:56Z",
              "updatedAt": "2022-03-04T13:12:44Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\ncounter, hosts SHOULD only acknowledge packets from the same path where\r\n```",
              "createdAt": "2022-03-04T13:07:06Z",
              "updatedAt": "2022-03-04T13:12:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42u1dS",
          "commit": {
            "abbreviatedOid": "f76d47f"
          },
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-23T06:29:33Z",
          "updatedAt": "2022-03-23T06:29:34Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "There is no explanation about why a host MAY disable ECN when an ACK acknowledges packets from different paths. It would be good to add some reasoning for that.",
              "createdAt": "2022-03-23T06:29:34Z",
              "updatedAt": "2022-03-23T06:29:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42u2gy",
          "commit": {
            "abbreviatedOid": "f76d47f"
          },
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-23T06:34:47Z",
          "updatedAt": "2022-03-23T06:34:47Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This text seems to be addressing the generation of ECN counters at the data receiver. How about, \"Generating ACK with ECN feedback\"?",
              "createdAt": "2022-03-23T06:34:47Z",
              "updatedAt": "2022-03-23T06:34:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42xRxD",
          "commit": {
            "abbreviatedOid": "f76d47f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-23T14:35:14Z",
          "updatedAt": "2022-03-23T14:35:14Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nACK frame. Reducing the sending rate of all paths, even if congestion\r\npresumably occurred only one of the paths, will likely impact\r\nperformance negatively.  Alternatively to avoid this performance\r\npenalty, a host that receives an ACK with an ECN counter increase\r\nacknowledging packets from different paths MAY disable ECN marking and\r\nsend all subsequent packets as Not-ECN capable.\r\n```",
              "createdAt": "2022-03-23T14:35:14Z",
              "updatedAt": "2022-03-23T14:35:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49VELA",
          "commit": {
            "abbreviatedOid": "f76d47f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-05T16:50:04Z",
          "updatedAt": "2022-07-05T16:50:04Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n### Handling ECN Feedback {#ecn-handling}\r\n```",
              "createdAt": "2022-07-05T16:50:04Z",
              "updatedAt": "2022-07-05T16:50:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 98,
      "id": "PR_kwDOGNtpaM4z6PGj",
      "title": "cc must be per path",
      "url": "https://github.com/quicwg/multipath/pull/98",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #89",
      "createdAt": "2022-03-03T18:38:42Z",
      "updatedAt": "2022-03-07T07:54:57Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-8",
      "headRefOid": "54bc40b7bf2b0a069240a3e42ab132b254bdd9d1",
      "closedAt": "2022-03-07T07:54:53Z",
      "mergedAt": "2022-03-07T07:54:53Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "208653ee9c2ff81ad03399c4aafc56d5ee3b55a1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41m_Lj",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Please remove unnecessary text.",
          "createdAt": "2022-03-03T19:20:11Z",
          "updatedAt": "2022-03-03T19:20:38Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I would remove \"however, the minimum PMTU of all paths may be used on each paths\". Implementations can always send packets shorter than the path MTU, so we are not saying much here. Also, there is a minimum path MTU for QUIC, and implementations that don't do PMTUD can always use that, so again, no need to be too specific.",
              "createdAt": "2022-03-03T19:20:12Z",
              "updatedAt": "2022-03-03T19:20:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41nBf_",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:29:29Z",
          "updatedAt": "2022-03-03T19:29:30Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n  *  PMTU discovery should be performed per-path\r\n```",
              "createdAt": "2022-03-03T19:29:29Z",
              "updatedAt": "2022-03-03T19:29:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41n61h",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T23:48:40Z",
          "updatedAt": "2022-03-03T23:48:40Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "If I remember correctly, the purpose of the sentence, \"minimum PMTU of all paths may used ...\" is to say when forming a packet before inserting it in the send_queue, it's better to constrain the size of the packet so that it can be scheduled to any of the paths for the sake of flexibility in scheduling. For example, when we want to use re-injection in our packet scheduling, we need to make sure that a packet sent on path 1 can also be reinjected on path 2. Therefore, what we did was to use per-path PMTU discovery and the use the minimum PMTU of all paths for each individual path. But indeed, this choice may vary in a different implementation.",
              "createdAt": "2022-03-03T23:48:40Z",
              "updatedAt": "2022-03-03T23:48:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41oTry",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T03:01:30Z",
          "updatedAt": "2022-03-04T03:01:31Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "That's completely implementation specific. Picoquic, for example, schedules the path first and then formats the packet. There is no need to go to that level of detail in the specification.",
              "createdAt": "2022-03-04T03:01:30Z",
              "updatedAt": "2022-03-04T03:01:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41pdkk",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T10:32:03Z",
          "updatedAt": "2022-03-04T10:32:03Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "@yfmascgy yes the intention of adding this what to give a hit towards the implementation option you mentioned. However, as you both say this is implementation specific and doesn't need to be in the intro part. So I'm fine removing this and already create a change request for this where I only need to push \"commit\".\r\n\r\nIf we want to discussion these implementation options more, we could add text in the \"implementation consideration\" section. @yfmascgy feel free to prose a PR for that or we could open a new issue to address this later.",
              "createdAt": "2022-03-04T10:32:03Z",
              "updatedAt": "2022-03-04T10:32:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41qCJP",
          "commit": {
            "abbreviatedOid": "fa8cabf"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T13:16:05Z",
          "updatedAt": "2022-03-04T13:16:17Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n  * PMTU discovery should be performed per-path\r\n```",
              "createdAt": "2022-03-04T13:16:06Z",
              "updatedAt": "2022-03-04T13:16:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rH_Q",
          "commit": {
            "abbreviatedOid": "54bc40b"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T17:18:10Z",
          "updatedAt": "2022-03-04T17:18:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41rd_C",
          "commit": {
            "abbreviatedOid": "54bc40b"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T18:48:29Z",
          "updatedAt": "2022-03-04T18:48:29Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yes. I agree removing this from the intro and we can discuss this in the implementation consideration.",
              "createdAt": "2022-03-04T18:48:29Z",
              "updatedAt": "2022-03-04T18:48:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rePp",
          "commit": {
            "abbreviatedOid": "54bc40b"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T18:49:42Z",
          "updatedAt": "2022-03-04T18:49:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41tK5f",
          "commit": {
            "abbreviatedOid": "6f417df"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-06T05:32:15Z",
          "updatedAt": "2022-03-06T05:32:15Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "@mirjak I have submitted PR #105 for the PMTU implementation considerations.",
              "createdAt": "2022-03-06T05:32:15Z",
              "updatedAt": "2022-03-06T05:32:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41t5SZ",
          "commit": {
            "abbreviatedOid": "54bc40b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T04:27:44Z",
          "updatedAt": "2022-03-07T04:27:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 99,
      "id": "PR_kwDOGNtpaM4z6TOz",
      "title": "transport parameters in RFC9000 are unchanged",
      "url": "https://github.com/quicwg/multipath/pull/99",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #91",
      "createdAt": "2022-03-03T18:58:00Z",
      "updatedAt": "2022-03-07T07:53:13Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-9",
      "headRefOid": "2ccbd3670862a451dbd8bf3c3ba27faba13c787b",
      "closedAt": "2022-03-07T04:25:25Z",
      "mergedAt": "2022-03-07T04:25:25Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "2c219170d494c05d2a1bdc7ff570614a999f1ae3"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@obonaventure you wrote:\r\n\r\n> When preferred address is not used, then the client can only establish multipath flows to the server address\r\n> When preferred address is used, then if a client migrates to one of the preferred addresses according to 9.6 of RFC9000, then it must consider this address as the endpoint of all multipath flows\r\n\r\nThat sounds like you want to restrict the multipath extension to only one server address (but potentially different paths from different clients address)...?\r\n\r\nI think this restriction is unnecessary. Yes we don't specify a way to learn server addresses but that doesn't means that the client doesn't know (e.g. based on higher layer information) multiple addresses of the server. What should we restrict that?",
          "createdAt": "2022-03-04T11:07:42Z",
          "updatedAt": "2022-03-04T11:07:42Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "However, can we maybe merge this PR as it is for now and you open a separate issue for your additional point @obonaventure ?    ",
          "createdAt": "2022-03-04T11:08:56Z",
          "updatedAt": "2022-03-04T11:08:56Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mirja,\r\n\r\n> > When preferred address is not used, then the client can only establish multipath flows to the server address\r\n> > When preferred address is used, then if a client migrates to one of the preferred addresses according to 9.6 of RFC9000, then it must consider this address as the endpoint of all multipath flows\r\n> \r\n> That sounds like you want to restrict the multipath extension to only one server address (but potentially different paths from different clients address)...?\r\n\r\nThat was my understanding of the sentences in the PR. Maybe I got it wrong.\r\n\r\n> \r\n> I think this restriction is unnecessary. Yes we don't specify a way to learn server addresses but that doesn't means that the client doesn't know (e.g. based on higher layer information) multiple addresses of the server. What should we restrict that?\r\n\r\nI think that we should discuss the role of preferred address in section 3 where we explain how paths can be opened. \r\n",
          "createdAt": "2022-03-04T17:03:56Z",
          "updatedAt": "2022-03-04T17:03:56Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> However, can we maybe merge this PR as it is for now and you open a separate issue for your additional point @obonaventure ?\r\n\r\nFine, let's do it this way.",
          "createdAt": "2022-03-04T17:04:52Z",
          "updatedAt": "2022-03-04T17:04:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41nBaJ",
          "commit": {
            "abbreviatedOid": "67c94b5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-03T19:29:06Z",
          "updatedAt": "2022-03-03T19:29:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41pjum",
          "commit": {
            "abbreviatedOid": "67c94b5"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "There are two parts in this PR.\r\n\r\nFirst, the following sentences:\r\n\r\nThis extension does not change the definition of any transport parameter\r\ndefined in {{Section 18.2. of QUIC-TRANSPORT}}. \r\nInline with the definition in {{QUIC-TRANSPORT}} disable_active_migration\r\nalso disables multipath support, except \"after a client has acted on a\r\npreferred_address transport parameter\" {{Section 18.2. of QUIC-TRANSPORT}}.\r\n\r\nThese sentences are at the right place. I would replace \"any\" by \"all the\" but that's a detail.\r\n\r\nFor the second part, I think that we should solve this problem differently. The current text is the following:\r\n\r\nFurther, it is out of scope for\r\nthis document if the old address can also be used for multipath\r\nafter a client has migrated to the address provided in the preferred_address\r\ntransport parameter. However, it SHOULD NOT be assumed that it is\r\npossible to use both addresses simultaneously without further confirmation\r\nfrom the other host.\r\n\r\nI would suggest to discuss somewhere in the document how the client learns the server address and how preferred address is used. Since we do not have a way for the server to convey the list of \"multipath-capable\" addresses in this document, I would suggest a simple approach:\r\n- When preferred address is not used, then the client can only establish multipath flows to the server address\r\n- When preferred address is used, then if a client migrates to one of the preferred addresses according to 9.6 of RFC9000, then it must consider this address as the endpoint of all multipath flows\r\n\r\nI guess that we'll need to define later a transport parameter that provides the list of \"multipath-capable\" addresses of a given server. In the mean time, we should opt for a simple solution.",
          "createdAt": "2022-03-04T10:57:56Z",
          "updatedAt": "2022-03-04T10:57:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41p619",
          "commit": {
            "abbreviatedOid": "67c94b5"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The proposed PR sounds good to me, with the slight addition I mentioned.",
          "createdAt": "2022-03-04T12:44:09Z",
          "updatedAt": "2022-03-04T12:45:01Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nthis document to specify if the old address can also be used for multipath\r\n```",
              "createdAt": "2022-03-04T12:44:09Z",
              "updatedAt": "2022-03-04T12:45:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41p9j8",
          "commit": {
            "abbreviatedOid": "67c94b5"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T12:56:29Z",
          "updatedAt": "2022-03-04T12:56:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41rDxB",
          "commit": {
            "abbreviatedOid": "2ccbd36"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T17:05:20Z",
          "updatedAt": "2022-03-04T17:05:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41tJ85",
          "commit": {
            "abbreviatedOid": "2ccbd36"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-06T04:06:00Z",
          "updatedAt": "2022-03-06T04:06:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 100,
      "id": "PR_kwDOGNtpaM4z9gaV",
      "title": "new text on recovery",
      "url": "https://github.com/quicwg/multipath/pull/100",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This text is mostly taken from PR #88 but with some edits",
      "createdAt": "2022-03-04T15:19:03Z",
      "updatedAt": "2022-03-07T08:18:59Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-10",
      "headRefOid": "8a1d33255bc632963f43c082520344733d368c7a",
      "closedAt": "2022-03-07T07:04:04Z",
      "mergedAt": "2022-03-07T07:04:04Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "b05b5cf826bbff849dbfb8b2926c338775ab8138"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41qr3v",
          "commit": {
            "abbreviatedOid": "8bc640b"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I found the text quite hard to read when describing strategies. I made some suggestions but feel free to merge the ones that you prefer.",
          "createdAt": "2022-03-04T15:40:27Z",
          "updatedAt": "2022-03-04T15:54:37Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nSimultaneous use of multiple paths enables new techniques to cope with packet losses.\r\n```",
              "createdAt": "2022-03-04T15:40:28Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nIn {{QUIC-TRANSPORT}}, a lost packet can either be abandoned or retransmitted over the\r\nsame path. However, when multiple paths are available QUIC implementation can use\r\ndifferent retransmission strategies to cope with losses.\r\n```",
              "createdAt": "2022-03-04T15:43:22Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\napplication needs another strategy could also be to simultaneously\r\n```",
              "createdAt": "2022-03-04T15:44:06Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nthe overhead but could be particularly beneficial for certain kind\r\n```",
              "createdAt": "2022-03-04T15:45:07Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nAnother strategy would be to use the best path, e.g. in terms of latency,\r\n```",
              "createdAt": "2022-03-04T15:45:27Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nhowever, more detailed specification of any such strategy is out of scope.\r\n```",
              "createdAt": "2022-03-04T15:46:12Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            },
            {
              "originalPosition": 18,
              "body": "I think this might make the text more easy to read.\r\n```suggestion\r\nPossible strategies include: a) retransmitting lost frames over the\r\nsame path, b) retransmitting lost frames on a different or\r\ndedicated path, and c) duplicate lost frames on several paths (not\r\nrecommended for general purpose use due to the network\r\noverhead). While this document does not preclude a specific\r\nstrategy, more detailed specification is out of scope.\r\n```",
              "createdAt": "2022-03-04T15:53:00Z",
              "updatedAt": "2022-03-04T15:54:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rAv7",
          "commit": {
            "abbreviatedOid": "8461ce8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T16:54:11Z",
          "updatedAt": "2022-03-04T16:54:13Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n\r\nPossible strategies include: a) retransmitting lost frames over the\r\nsame path, b) retransmitting lost frames on a different or\r\ndedicated path, and c) duplicate lost frames on several paths (not\r\nrecommended for general purpose use due to the network\r\noverhead). While this document does not preclude a specific\r\nstrategy, more detailed specification is out of scope.\r\n```",
              "createdAt": "2022-03-04T16:54:12Z",
              "updatedAt": "2022-03-04T16:54:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rBoG",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-04T16:57:13Z",
          "updatedAt": "2022-03-04T16:57:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41rGAG",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "obonaventure",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "At this stage, we know that the best strategy will be a function of the application and of its traffic pattern and requirements, but we cannot specify it. ",
          "createdAt": "2022-03-04T17:13:01Z",
          "updatedAt": "2022-03-04T17:13:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41rhuj",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2022-03-04T19:05:50Z",
          "updatedAt": "2022-03-04T19:05:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41rsWF",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I agree with the intent, but please simplify the heading text and avoid making debatable statements about QUIC-TRANSPORT.",
          "createdAt": "2022-03-04T19:50:19Z",
          "updatedAt": "2022-03-04T19:51:36Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "That's not actually true. In {{QUIC-TRANSPORT}}, packets sent on a path before a migration can be resent on the new path after migration. Or, actually, \"frames of packets sent on an old path and presumed lost may be resent in new packets on a new path after migration.\" I think that rather than making comments on QUIc-TRANSPORT, we should just keep the last sentence, \"When multiple paths are available QUIC implementation can use\r\ndifferent retransmission strategies to cope with losses.\"",
              "createdAt": "2022-03-04T19:50:19Z",
              "updatedAt": "2022-03-04T19:51:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rzOl",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T20:08:27Z",
          "updatedAt": "2022-03-04T20:08:27Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Agreed.",
              "createdAt": "2022-03-04T20:08:27Z",
              "updatedAt": "2022-03-04T20:08:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41rzVU",
          "commit": {
            "abbreviatedOid": "837187c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T20:08:59Z",
          "updatedAt": "2022-03-04T20:08:59Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nWhen multiple paths are available, QUIC implementation can use\r\ndifferent retransmission strategies to cope with losses.\r\n```",
              "createdAt": "2022-03-04T20:08:59Z",
              "updatedAt": "2022-03-04T20:08:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41r0Jd",
          "commit": {
            "abbreviatedOid": "6f58cd3"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-04T20:13:08Z",
          "updatedAt": "2022-03-04T20:13:09Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nSimultaneous use of multiple paths enables different \r\nretransmission strategies to cope with losses such as:\r\na) retransmitting lost frames over the\r\n```",
              "createdAt": "2022-03-04T20:13:08Z",
              "updatedAt": "2022-03-04T20:13:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41t50u",
          "commit": {
            "abbreviatedOid": "8a1d332"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T04:33:45Z",
          "updatedAt": "2022-03-07T04:33:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 102,
      "id": "PR_kwDOGNtpaM4z-HbP",
      "title": "Moving second part of PR#99 to section 3",
      "url": "https://github.com/quicwg/multipath/pull/102",
      "state": "MERGED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Attempt at moving \r\n\r\nFurther, it is out of scope for\r\nthis document if the old address can also be used for multipath\r\nafter a client has migrated to the address provided in the preferred_address\r\ntransport parameter. However, it SHOULD NOT be assumed that it is\r\npossible to use both addresses simultaneously without further confirmation\r\nfrom the other host.\r\n\r\nIn the beginning of section where I think it would be more appropriate.\r\n",
      "createdAt": "2022-03-04T18:50:40Z",
      "updatedAt": "2022-03-07T09:12:53Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-1",
      "headRefOid": "1ad987a65dd8fdbfa5886f91b6b290eb536793f0",
      "closedAt": "2022-03-07T09:12:53Z",
      "mergedAt": "2022-03-07T09:12:53Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "29a9fb4f9e871a8ad8fcf534ab1a4baafb59275a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41t9a0",
          "commit": {
            "abbreviatedOid": "661f70f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good, except for the typo.",
          "createdAt": "2022-03-07T05:10:31Z",
          "updatedAt": "2022-03-07T05:11:09Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "addresses -> addresses",
              "createdAt": "2022-03-07T05:10:31Z",
              "updatedAt": "2022-03-07T05:11:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uBhg",
          "commit": {
            "abbreviatedOid": "661f70f"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T05:47:23Z",
          "updatedAt": "2022-03-07T05:47:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41uVJw",
          "commit": {
            "abbreviatedOid": "661f70f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T07:56:39Z",
          "updatedAt": "2022-03-07T07:57:23Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nSHOULD NOT assume that the initial server address and the addresses \r\n```",
              "createdAt": "2022-03-07T07:56:39Z",
              "updatedAt": "2022-03-07T07:57:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 103,
      "id": "PR_kwDOGNtpaM4z-o0v",
      "title": "First shot at a unified proposal",
      "url": "https://github.com/quicwg/multipath/pull/103",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This derives from the discussions on issue #96 ",
      "createdAt": "2022-03-04T22:24:40Z",
      "updatedAt": "2023-04-06T00:43:02Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "huitema/multipath",
      "headRefName": "unified",
      "headRefOid": "0aec409c6f118515b6c8f1b547eba51570417407",
      "closedAt": "2022-07-07T09:19:18Z",
      "mergedAt": "2022-07-07T09:19:17Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "71de7b625e2d1faac4329d2b6dee7ec404288123"
      },
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The commit [a230bc1](https://github.com/quicwg/multipath/pull/103/commits/a230bc17db0eabf78dffb6e0d02224ad851197da) applies the changes suggested in the previous reviews. With those changes, I think we have a good basis for discussing a unified solution in the working group.",
          "createdAt": "2022-03-17T18:38:52Z",
          "updatedAt": "2022-03-17T18:38:52Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks @boucadair for the review. I have applied the editorial changes. You are asking for something more regarding the \"specific logic\" required when supporting zero-length CID. There are in fact two pieces to that: logic at the receiver, i.e., the node that chose to receive packets with zero-length CID; and logic at the sender, i.e., the node that accepts to send data on multiple paths towards a node that uses zero-length CID. This is explained in details in the section \"Using Zero-Length connection ID\", so I guess what we need is a reference to that section.",
          "createdAt": "2022-06-09T16:00:45Z",
          "updatedAt": "2022-06-09T16:00:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41uKTW",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2022-03-07T06:53:50Z",
          "updatedAt": "2022-03-07T07:01:22Z",
          "comments": [
            {
              "originalPosition": 150,
              "body": "... The _senders_ MUST use that information to ...",
              "createdAt": "2022-03-07T06:53:50Z",
              "updatedAt": "2022-03-07T07:01:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uWlc",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I believe this PR is a good first proposal for such a unified solution. If such a solution can fit all the use cases, I'm happy to further work on this.",
          "createdAt": "2022-03-07T08:03:37Z",
          "updatedAt": "2022-03-07T08:17:11Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "This seems more related to the discussion in #101, not sure if it should be part of this PR.",
              "createdAt": "2022-03-07T08:03:37Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            },
            {
              "originalPosition": 141,
              "body": "I don't think per-path congestion control is specific to NULL CID case.",
              "createdAt": "2022-03-07T08:05:32Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            },
            {
              "originalPosition": 146,
              "body": "Actually, the beginning of this paragraph is not specific to the NULL CID case.",
              "createdAt": "2022-03-07T08:07:04Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            },
            {
              "originalPosition": 150,
              "body": "```suggestion\r\nwhich packet was sent to what path. The sender MUST use that information to\r\n```",
              "createdAt": "2022-03-07T08:07:29Z",
              "updatedAt": "2022-03-17T16:31:46Z"
            },
            {
              "originalPosition": 180,
              "body": "```suggestion\r\nto a number space. When sending to NULL CID receivers, the same number space is\r\n```",
              "createdAt": "2022-03-07T08:11:00Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            },
            {
              "originalPosition": 204,
              "body": "why \"mostly\"?",
              "createdAt": "2022-03-07T08:13:01Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            },
            {
              "originalPosition": 139,
              "body": "```suggestion\r\n### Congestion Control, Loss Recovery and NULL CID Considerations\r\n```",
              "createdAt": "2022-03-07T08:16:14Z",
              "updatedAt": "2022-03-07T08:17:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cGEj",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T16:29:08Z",
          "updatedAt": "2022-03-17T16:29:09Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nSome deployments of QUIC use zero-length connection ID.\r\nWhen a node elects to use zero-length connection IDs, it is not\r\n```\r\nI believe we call it \"zero-length\" everywhere else...",
              "createdAt": "2022-03-17T16:29:08Z",
              "updatedAt": "2022-03-17T16:29:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cpz4",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T17:58:10Z",
          "updatedAt": "2022-03-17T17:58:10Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Correct. I wanted to have a complete view of the finished text once #101 was checked in, but that's probably not useful.",
              "createdAt": "2022-03-17T17:58:10Z",
              "updatedAt": "2022-03-17T17:58:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cqV7",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T17:59:54Z",
          "updatedAt": "2022-03-17T17:59:54Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "Correct. Need to state that correctly. The point is, in the absence of CID, implementations must track the path over which the packet loss or the RTT measurement occurred, because the number space is shared.",
              "createdAt": "2022-03-17T17:59:54Z",
              "updatedAt": "2022-03-17T17:59:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cqd4",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:00:18Z",
          "updatedAt": "2022-03-17T18:00:18Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "Yes.",
              "createdAt": "2022-03-17T18:00:18Z",
              "updatedAt": "2022-03-17T18:00:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cq2C",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:01:34Z",
          "updatedAt": "2022-03-17T18:01:34Z",
          "comments": [
            {
              "originalPosition": 204,
              "body": ":-)\r\nneed to find another way of saying that without a number space per path this is harder to get right.",
              "createdAt": "2022-03-17T18:01:34Z",
              "updatedAt": "2022-03-17T18:01:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42crIf",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:02:35Z",
          "updatedAt": "2022-03-17T18:02:36Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "Let's first apply @mirjak's suggestion to replace NULL by zero-length...",
              "createdAt": "2022-03-17T18:02:36Z",
              "updatedAt": "2022-03-17T18:02:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cz3-",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:28:38Z",
          "updatedAt": "2022-03-17T18:28:38Z",
          "comments": [
            {
              "originalPosition": 204,
              "body": "Removed \"mostly\"",
              "createdAt": "2022-03-17T18:28:38Z",
              "updatedAt": "2022-03-17T18:28:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42cz7U",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:28:51Z",
          "updatedAt": "2022-03-17T18:28:51Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "Fixed.",
              "createdAt": "2022-03-17T18:28:51Z",
              "updatedAt": "2022-03-17T18:28:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42c0F2",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:29:27Z",
          "updatedAt": "2022-03-17T18:29:27Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "Fixed, per next comment.",
              "createdAt": "2022-03-17T18:29:27Z",
              "updatedAt": "2022-03-17T18:29:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42c0JF",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:29:37Z",
          "updatedAt": "2022-03-17T18:29:38Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Reverted.",
              "createdAt": "2022-03-17T18:29:37Z",
              "updatedAt": "2022-03-17T18:29:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42c0Ou",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T18:29:56Z",
          "updatedAt": "2022-03-17T18:29:56Z",
          "comments": [
            {
              "originalPosition": 150,
              "body": "Fixed",
              "createdAt": "2022-03-17T18:29:56Z",
              "updatedAt": "2022-03-17T18:29:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42efFr",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-18T05:35:16Z",
          "updatedAt": "2022-03-18T05:35:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM42fx3j",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Some suggestions to remove NULL CID mentions, but overall this seems a good basis for further discussion.",
          "createdAt": "2022-03-18T12:32:24Z",
          "updatedAt": "2022-03-18T12:40:13Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nsent to that node over different paths. All packets sent to a zero-length\r\n```",
              "createdAt": "2022-03-18T12:32:24Z",
              "updatedAt": "2022-03-18T12:40:13Z"
            },
            {
              "originalPosition": 37,
              "body": "```suggestion\r\nuse multiple paths when sending to a node using zero-length CID will\r\n```",
              "createdAt": "2022-03-18T12:32:51Z",
              "updatedAt": "2022-03-18T12:40:13Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\ndelivery on loss detection and congestion controller. If the receiver\r\n```",
              "createdAt": "2022-03-18T12:33:49Z",
              "updatedAt": "2022-03-18T12:40:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47rJ7Q",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Some very minor comments. ",
          "createdAt": "2022-06-09T11:33:17Z",
          "updatedAt": "2022-06-09T12:04:15Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\nSome deployments of QUIC use zero-length connection IDs.\r\n```",
              "createdAt": "2022-06-09T11:33:18Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\npossible to use different connection IDs for distinguishing packets\r\n```",
              "createdAt": "2022-06-09T11:33:36Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 38,
              "body": "is that \"special logic\" hinted somewhere or this is left as implementation-specific? I would be explicit about the intent here. Thanks. ",
              "createdAt": "2022-06-09T11:37:23Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\ndelivery on loss detection and congestion control. If the receiver\r\n```",
              "createdAt": "2022-06-09T11:38:19Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 52,
              "body": "```suggestion\r\n0x1      | supports multipath as defined in this document\r\n```",
              "createdAt": "2022-06-09T11:39:09Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 109,
              "body": "```suggestion\r\nIf a node elects to use zero-length connection IDs, it MUST implement the\r\n```",
              "createdAt": "2022-06-09T11:39:45Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 111,
              "body": "```suggestion\r\nThe peer node using zero-length connection IDs SHOULD implement a\r\n```",
              "createdAt": "2022-06-09T11:40:19Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 149,
              "body": "Can a pointer be provided for \"getting good results\"? Thanks",
              "createdAt": "2022-06-09T11:44:20Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 29,
              "body": "RFC9000 says the following:\r\n\r\n```\r\n  An endpoint SHOULD NOT initiate migration with a peer that has\r\n   requested a zero-length connection ID, because traffic over the new\r\n   path might be trivially linkable to traffic over the old one.\r\n```\r\n\r\nI wonder if the above behavior has implications on maintaining multiple paths when  zero-length connection IDs are in used.",
              "createdAt": "2022-06-09T12:01:09Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 41,
              "body": "Again, the \"specific\" thing is worth be exemplified.",
              "createdAt": "2022-06-09T12:02:17Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nreports ECN counters, they will contain the sum of markings received on all\r\n```",
              "createdAt": "2022-06-09T12:02:33Z",
              "updatedAt": "2022-06-09T12:04:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47tC74",
          "commit": {
            "abbreviatedOid": "05199f8"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-09T16:34:24Z",
          "updatedAt": "2022-06-09T16:34:25Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "This lines were added to address review by @boucadair ",
              "createdAt": "2022-06-09T16:34:25Z",
              "updatedAt": "2022-06-09T16:34:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47tDpj",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-09T16:36:47Z",
          "updatedAt": "2022-06-09T16:36:48Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I added a forward reference to the section describing that logic. I hope it addresses the concerns of  @boucadair .",
              "createdAt": "2022-06-09T16:36:48Z",
              "updatedAt": "2022-06-09T16:36:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47tGqI",
          "commit": {
            "abbreviatedOid": "38c72f5"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-09T16:46:46Z",
          "updatedAt": "2022-06-09T16:46:46Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "The new title is \"Loss and Congestion Handling With Zero-Length CID\". I hope it works.",
              "createdAt": "2022-06-09T16:46:46Z",
              "updatedAt": "2022-06-09T16:46:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47tMKT",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-09T17:05:22Z",
          "updatedAt": "2022-06-09T17:05:22Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "The RFC 9000 text suggests that only the node that is choosing to use zero length CID will initiate a new path -- typically a client. That seems fine. Third parties will be able to observe packets flowing between client and server as follow:\r\n\r\n* path 1: between address 1 and port 1 on client, and server address and server port on server.\r\n* path 2: between address 2 and port 2 on client, and server address and server port on server.\r\n\r\nThe addresses and ports will be visible whether the client uses null-length CID or not. We may want to say to point out that using different port numbers for each path may remove 16 bits of possible correlation data, but that applies to RFC 9000 just as well.\r\n",
              "createdAt": "2022-06-09T17:05:22Z",
              "updatedAt": "2022-06-09T17:05:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47vq1D",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-10T07:22:46Z",
          "updatedAt": "2022-06-10T07:22:46Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "I agree this is OK in typical scenarios. \r\n\r\nI leave it up to you to decide if it is worth to include a mention about this in the draft. Thanks, @huitema.\r\n\r\n\r\n",
              "createdAt": "2022-06-10T07:22:46Z",
              "updatedAt": "2022-06-10T07:22:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM47x3wD",
          "commit": {
            "abbreviatedOid": "177b643"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Small typo; for the remaining, LGTM.",
          "createdAt": "2022-06-10T15:00:41Z",
          "updatedAt": "2022-06-10T15:05:33Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nthe size of ACK frames. This proposal specifies algorithms for\r\n```",
              "createdAt": "2022-06-10T15:00:42Z",
              "updatedAt": "2022-06-10T15:05:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49VBYi",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I made an editorial pass but am not done yet. @huitema maybe you can merge (or reject) already these changes and I finish my review tomorrow.",
          "createdAt": "2022-07-05T16:39:49Z",
          "updatedAt": "2022-07-05T17:04:55Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nThis extension uses multiple packet number spaces.\r\n```",
              "createdAt": "2022-07-05T16:39:49Z",
              "updatedAt": "2022-07-06T12:46:46Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nWhen a node selects to use zero-length connection IDs, it is not\r\n```",
              "createdAt": "2022-07-05T16:40:20Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nsent to that node over different paths. All packets sent with a zero-length\r\n```",
              "createdAt": "2022-07-05T16:41:09Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nCID are numbered in the same number space. When using the same packet number space\r\non multiple paths, out of order delivery is likely. This causes inflation of the number of \r\nacknowledgement ranges and therefore of the\r\n```",
              "createdAt": "2022-07-05T16:43:00Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\nthe size of ACK frames. Senders that accept to use a single number\r\nspace on multiple paths when sending to a node using zero-length CID need\r\nto take special care to minimize the impact of multipath\r\ndelivery on loss detection, congestion control, and ECN handling. \r\nThis proposal specifies algorithms for\r\ncontrolling the size of acknowledgement packets and ECN handling in\r\nSection {{using-zero-length}} and {{ecn-handling}}.\r\n```",
              "createdAt": "2022-07-05T16:50:28Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 126,
              "body": "```suggestion\r\n### Sending Acknowledgements and Handling Ranges {#sending-acknowledgements-and-handling-ranges}\r\n```",
              "createdAt": "2022-07-05T16:52:43Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 136,
              "body": "```suggestion\r\nreceiver, senders may receive acknowledgements that combine packet\r\n```",
              "createdAt": "2022-07-05T16:54:49Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            },
            {
              "originalPosition": 123,
              "body": "I don't think the MUST and SHOULD here make a lot of sense, given there are more/other normative language later in this section. Also ice think your removed too much.... here is an alternative proposal for this section intro part:\r\n```suggestion\r\nIf a zero-length connection ID is used, one packet number space\r\n for all paths. That means the packet sequence numbers are allocated\r\n from the common\r\n number space, so that, for example, packet number N could be sent\r\n on one path and packet number N+1 on another.\r\n \r\n In this case, ACK frames report the numbers of packets that have been\r\n received so far,\r\n regardless of the path on which they have been received. That means\r\n the senders needs to maintain an association between sent packet numbers\r\n and the path over which these packets were sent. This is necessary\r\n to implement per path congestion control, as explained\r\nin {{zero-length-cid-loss-and-congestion}}.\r\n\r\nFurther, the receiver of packets with zero-length connection IDs should\r\nimplement handling of acknowledgements as defined in\r\n{{sending-acknowledgements-and-handling-ranges}}.\r\n\r\nECN handing is specified in {{ecn-handling}}, and\r\nmitigation of the RTT measurement is further explained\r\nin {{ack-delay-and-zero-length-cid-considerations}}. \r\n\r\nIf a node\r\ndoes not want to implement this logic, it MAY instead limit its use of multiple paths\r\nas explained in {{restricted-sending-to-zero-length-cid-peer}}.\r\n```",
              "createdAt": "2022-07-05T17:02:13Z",
              "updatedAt": "2022-07-06T13:33:06Z"
            },
            {
              "originalPosition": 165,
              "body": "```suggestion\r\n### ECN and Zero-Length CID Considerations {#ecn-handing}\r\n```",
              "createdAt": "2022-07-05T17:03:33Z",
              "updatedAt": "2022-07-05T17:04:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZTLN",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T12:52:41Z",
          "updatedAt": "2022-07-06T12:52:42Z",
          "comments": [
            {
              "originalPosition": 171,
              "body": "```suggestion\r\nECN feedback in QUIC is provided based on counters in the ACK frame\r\n(see {{Section  19.3.2. of QUIC-TRANSPORT}}). That means if an ACK\r\n frame acknowledges multiple packets, the ECN feedback cannot be accounted\r\n to a specific packet.\r\n\r\nThere are separate counters for each packet number space. However, sending\r\nto zero-length CID receivers, the same number space is used for multiple paths.\r\nRespectively, if an ACK frames acknowledges multiple packets from different paths,\r\nthe ECN feedback cannot unambiguously be assigned to a path.\r\n```",
              "createdAt": "2022-07-06T12:52:42Z",
              "updatedAt": "2022-07-06T12:53:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZUGR",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T12:55:19Z",
          "updatedAt": "2022-07-06T12:55:20Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "```suggestion\r\ntransmission on the sending path. If zero-length CID is used, \r\nthe sending path is however ambiguous. Therefore, the sender MUST\r\ntreat a CE marking as a congestion signal on all sending paths that\r\nhave been by a packet that was acknowledged in the ACK frame signaling\r\nthe CE counter increase.\r\n```",
              "createdAt": "2022-07-06T12:55:19Z",
              "updatedAt": "2022-07-06T12:57:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZVx0",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T12:59:46Z",
          "updatedAt": "2022-07-06T12:59:46Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "Note that this change is not only editorial as I added the clause that you only MUST decrease those paths where you actually got a packet acknowledged. This is slightly more complicated but you should have saved the information where which packet was sent anyway and this allows for optimisation in the ACK creation. Given this is a MUST, I think we need this clause.",
              "createdAt": "2022-07-06T12:59:46Z",
              "updatedAt": "2022-07-06T12:59:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZW89",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:02:55Z",
          "updatedAt": "2022-07-06T13:02:55Z",
          "comments": [
            {
              "originalPosition": 187,
              "body": "```suggestion\r\na peer using zero-length CID. The simplest posture is to only send\r\n```",
              "createdAt": "2022-07-06T13:02:55Z",
              "updatedAt": "2022-07-06T13:02:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZXMX",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:03:35Z",
          "updatedAt": "2022-07-06T13:03:35Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "Why vast majority? Isn't it all?",
              "createdAt": "2022-07-06T13:03:35Z",
              "updatedAt": "2022-07-06T13:03:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZaVh",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:12:07Z",
          "updatedAt": "2022-07-06T13:12:08Z",
          "comments": [
            {
              "originalPosition": 138,
              "body": "```suggestion\r\nnumbers received over multiple paths. \r\nHowever, even if one packet number space is used on multiple path\r\nthe sender MUST maintain separate congestion control state for each\r\npath. Therefore, senders MUST be able to infer the\r\nsending path from the acknowledged packet numbers, for example by remembering\r\n```",
              "createdAt": "2022-07-06T13:12:08Z",
              "updatedAt": "2022-07-06T13:12:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZcL9",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:17:04Z",
          "updatedAt": "2022-07-06T13:17:04Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "```suggestion\r\n\r\nIf zero-length CID and therefore also a single packet number space\r\nis used by the sender, the receiver MAY send ACK frames instead\r\nof ACK_MPframes to reduce overhead as the additional path ID field\r\nwill anyway always carry the same value.\r\n\r\n```",
              "createdAt": "2022-07-06T13:17:04Z",
              "updatedAt": "2022-07-06T13:18:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZggH",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:28:14Z",
          "updatedAt": "2022-07-06T13:28:15Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "```suggestion\r\nbased on timers and on sequence numbers. When packets are sent over\r\nmultiple paths, loss detection must be adapted to allow for different RTTs\r\non different paths. When sending to zero-length CID receivers, packets sent\r\non different paths may not be received in order. Therefore senders cannot\r\ndirectly use the packet sequence numbers to\r\n```",
              "createdAt": "2022-07-06T13:28:14Z",
              "updatedAt": "2022-07-06T13:28:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49Zg_R",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:29:23Z",
          "updatedAt": "2022-07-06T13:29:23Z",
          "comments": [
            {
              "originalPosition": 155,
              "body": "I don't think I fully understand these last couple of sentences. Can you clarify?",
              "createdAt": "2022-07-06T13:29:23Z",
              "updatedAt": "2022-07-06T13:29:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ZlPL",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:40:21Z",
          "updatedAt": "2022-07-06T13:40:22Z",
          "comments": [
            {
              "originalPosition": 202,
              "body": "```suggestion\r\n## Using non-zero length CID and Multiple Packet Number Spaces\r\n\r\nIf packets contain a non-zero CID, each path has\r\n```",
              "createdAt": "2022-07-06T13:40:21Z",
              "updatedAt": "2022-07-06T13:40:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49Z6xX",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T14:31:43Z",
          "updatedAt": "2022-07-06T14:31:43Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "The \"may not be received in order\" in your text is a bit too negative. Can you change that to \"may be received out of order\"?",
              "createdAt": "2022-07-06T14:31:43Z",
              "updatedAt": "2022-07-06T14:31:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49Z7Rl",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T14:32:54Z",
          "updatedAt": "2022-07-06T14:32:55Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "This is outdated.",
              "createdAt": "2022-07-06T14:32:54Z",
              "updatedAt": "2022-07-06T14:32:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aIZh",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:03:29Z",
          "updatedAt": "2022-07-06T15:03:29Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "There is always the occasional probe, etc.",
              "createdAt": "2022-07-06T15:03:29Z",
              "updatedAt": "2022-07-06T15:03:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49af1J",
          "commit": {
            "abbreviatedOid": "928710a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:06:56Z",
          "updatedAt": "2022-07-06T16:06:57Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "```suggestion\r\non different paths may be received out of order. Therefore senders cannot\r\n```",
              "createdAt": "2022-07-06T16:06:57Z",
              "updatedAt": "2022-07-06T16:06:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ahsx",
          "commit": {
            "abbreviatedOid": "928710a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:12:38Z",
          "updatedAt": "2022-07-06T16:12:39Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\nsent to that node over different paths. This extension also specifies a way to use\r\nzero-length CID by using the same packet number space on all paths. \r\nHowever, when using the same packet number space\r\n```",
              "createdAt": "2022-07-06T16:12:38Z",
              "updatedAt": "2022-07-06T16:12:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ajVQ",
          "commit": {
            "abbreviatedOid": "928710a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:17:53Z",
          "updatedAt": "2022-07-06T16:17:54Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\non multiple paths, out of order delivery is likely. This causes inflation of the number of\r\n```",
              "createdAt": "2022-07-06T16:17:53Z",
              "updatedAt": "2022-07-06T16:17:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49ajbB",
          "commit": {
            "abbreviatedOid": "928710a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:18:10Z",
          "updatedAt": "2022-07-06T16:18:11Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\ndelivery on loss detection, congestion control, and ECN handling.\r\n```",
              "createdAt": "2022-07-06T16:18:10Z",
              "updatedAt": "2022-07-06T16:18:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49alDM",
          "commit": {
            "abbreviatedOid": "4c08976"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:23:15Z",
          "updatedAt": "2022-07-06T16:23:15Z",
          "comments": [
            {
              "originalPosition": 192,
              "body": "```suggestion\r\n### ECN and Zero-Length CID Considerations {#ecn-handling}\r\n```",
              "createdAt": "2022-07-06T16:23:15Z",
              "updatedAt": "2022-07-06T16:23:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49alKF",
          "commit": {
            "abbreviatedOid": "4c08976"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:23:36Z",
          "updatedAt": "2022-07-06T16:23:36Z",
          "comments": [
            {
              "originalPosition": 168,
              "body": "```suggestion\r\n{{ecn-handling}} for issues on using ECN marks.)\r\n```",
              "createdAt": "2022-07-06T16:23:36Z",
              "updatedAt": "2022-07-06T16:23:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49alMI",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:23:42Z",
          "updatedAt": "2022-07-06T16:23:42Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "Fixed.",
              "createdAt": "2022-07-06T16:23:42Z",
              "updatedAt": "2022-07-06T16:23:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49alQT",
          "commit": {
            "abbreviatedOid": "a566ad8"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:23:55Z",
          "updatedAt": "2022-07-06T16:23:56Z",
          "comments": [
            {
              "originalPosition": 155,
              "body": "Fixed.",
              "createdAt": "2022-07-06T16:23:56Z",
              "updatedAt": "2022-07-06T16:23:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49altu",
          "commit": {
            "abbreviatedOid": "622ec9b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:25:23Z",
          "updatedAt": "2022-07-06T16:25:24Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "Closing, comments are outdated.",
              "createdAt": "2022-07-06T16:25:24Z",
              "updatedAt": "2022-07-06T16:25:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49apYV",
          "commit": {
            "abbreviatedOid": "cc7c4c7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T16:32:57Z",
          "updatedAt": "2022-07-06T16:32:57Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\nzero-length CID by using the same packet number space on all paths.\r\n```",
              "createdAt": "2022-07-06T16:32:57Z",
              "updatedAt": "2022-07-06T16:32:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM42iW0u",
          "commit": {
            "abbreviatedOid": "0aec409"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-19T06:43:53Z",
          "updatedAt": "2022-07-07T07:11:19Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "To be clear, assuming that peer A only supports multiple PN while peer B sends packets with zero-length CID, do you mean B elects to send packets on all available paths but A chooses only one path to send packets or reply ACKs? ",
              "createdAt": "2022-03-19T06:43:53Z",
              "updatedAt": "2022-07-07T07:11:19Z"
            },
            {
              "originalPosition": 163,
              "body": "I think we should expand this section a bit as we found getting the delay right was non-trivial. QUIC time-stamp would work for sure. But if one decides not to use QUIC timestamp, we probably want to explain what is needed to be done here.",
              "createdAt": "2022-06-13T07:24:08Z",
              "updatedAt": "2022-07-07T07:11:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49dq0H",
          "commit": {
            "abbreviatedOid": "0aec409"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T08:27:54Z",
          "updatedAt": "2022-07-07T08:27:55Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "That is what I understand from the current text, yes.",
              "createdAt": "2022-07-07T08:27:54Z",
              "updatedAt": "2022-07-07T08:27:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49drJE",
          "commit": {
            "abbreviatedOid": "0aec409"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T08:28:49Z",
          "updatedAt": "2022-07-07T08:28:49Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "Maybe should we create an issue referencing this and create a specific PR afterwards?",
              "createdAt": "2022-07-07T08:28:49Z",
              "updatedAt": "2022-07-07T08:28:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49d6Uv",
          "commit": {
            "abbreviatedOid": "0aec409"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T09:14:09Z",
          "updatedAt": "2022-07-07T09:14:09Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "Created issue #125 ",
              "createdAt": "2022-07-07T09:14:09Z",
              "updatedAt": "2022-07-07T09:14:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49d726",
          "commit": {
            "abbreviatedOid": "0aec409"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T09:18:50Z",
          "updatedAt": "2022-07-07T09:18:50Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "Yes, that's the meaning. For me the text is clear. I will merge the PR now, however, if you think further clarification is needed please propose a separate PR.",
              "createdAt": "2022-07-07T09:18:50Z",
              "updatedAt": "2022-07-07T09:18:50Z"
            }
          ]
        }
      ]
    },
    {
      "number": 104,
      "id": "PR_kwDOGNtpaM4z_Obu",
      "title": "update path closure figure and add one case for single PN",
      "url": "https://github.com/quicwg/multipath/pull/104",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR is to resolve issue #1. The description of the path-closing figure is rephrased for better clarity. The path_id_type field in the PATH_ABANDON frame is also added in the figure to give an idea how the type is used. Moreover, one case for single PN is added (where the client receives zero-length CID while the server receives long CID). According to previous discussion, in the single PN case, only the client needs to send out a PATH_ABANDON. The server SHOULD stop sending new data on the path indicated by the PATH_ABANDON frame after receiving it. However, The client may want to repeat the\r\nPATH_ABANDON frame if it sees the server continuing to send data. It is optional for the server to respond with a PATH_ABANDON after it receives a PATH_ABANDON frame from the client. ",
      "createdAt": "2022-03-05T08:39:22Z",
      "updatedAt": "2022-03-07T09:54:31Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/path-close-figure-update",
      "headRefOid": "84c82e5f5dfc8ed771579799797cc8596f76505a",
      "closedAt": "2022-03-07T09:54:31Z",
      "mergedAt": "2022-03-07T09:54:31Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "35d07499a4d1e6ae715ba973b1124cc4354f7ed7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41ucUQ",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think there is still a mismatch between the proposed examples and the definition of the path_id_type in Section 11.1 (definition of PATH_ABANDON frame).",
          "createdAt": "2022-03-07T08:29:10Z",
          "updatedAt": "2022-03-07T08:45:53Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nof 3. Note that the paths use different packet number spaces. In this case, the\r\n```",
              "createdAt": "2022-03-07T08:29:10Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n0x00), hence using the path_id 1. In reply, the server confirms the path using\r\n```",
              "createdAt": "2022-03-07T08:31:21Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nidentifier type 0x00), which corresponds to the path_id 2. Both the client and\r\n```",
              "createdAt": "2022-03-07T08:31:39Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 55,
              "body": "Just highlighting this in case the \"unified proposal\" makes further progress.",
              "createdAt": "2022-03-07T08:33:38Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nnumber of 2; the client's 1-RTT packets use DCID S3, which has a sequence number\r\n```",
              "createdAt": "2022-03-07T08:36:24Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 36,
              "body": "I'm still puzzled by this example. If I read the definition of the path_id_type in the frame definition, it says\r\n\r\n```\r\nType 0: Refer to the connection identifier used by the sender of the control frame when sending\r\ndata over the specified path. This method SHOULD be used if this connection identifier is\r\nnon-zero length. This method MUST NOT be used if this connection identifier is zero-length.\r\n```\r\nAs the sender of the frame is the client, it should thus refer to the connection identifier used by the client to send packets on the first path (DCID S2), thus the path_id should be 2.",
              "createdAt": "2022-03-07T08:41:02Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            },
            {
              "originalPosition": 61,
              "body": "Similarly, Section 11.1 currently states\r\n\r\n```\r\nType 1: Refer to the connection identifier used by the receiver of the control frame\r\nwhen sending data over the specified path. This method MUST NOT be used if this\r\nconnection identifier is zero-length.\r\n```\r\n\r\nAs I understand this, the example should use type 0, no?",
              "createdAt": "2022-03-07T08:44:19Z",
              "updatedAt": "2022-03-07T08:45:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41ugkQ",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T08:46:05Z",
          "updatedAt": "2022-03-07T08:46:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41uhuy",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T08:50:48Z",
          "updatedAt": "2022-03-07T08:50:48Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Yes, I think the text says it correctly, only the figure is wrong. Good catch!",
              "createdAt": "2022-03-07T08:50:48Z",
              "updatedAt": "2022-03-07T08:50:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uh-j",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T08:51:43Z",
          "updatedAt": "2022-03-07T08:51:44Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=0, path_id=2]->\r\n```",
              "createdAt": "2022-03-07T08:51:43Z",
              "updatedAt": "2022-03-07T08:51:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uitJ",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T08:54:36Z",
          "updatedAt": "2022-03-07T08:54:36Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "I think this question was already there in the original PR: The PATH_ABONDON frame from the server is optional. I think we should either remove this step or mention in the text that this is optional.",
              "createdAt": "2022-03-07T08:54:36Z",
              "updatedAt": "2022-03-07T08:54:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uiyI",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T08:54:54Z",
          "updatedAt": "2022-03-07T08:54:55Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "In this case, the path_id is the sequence number of the CID issued by the client for this path and thus, it is 1.",
              "createdAt": "2022-03-07T08:54:55Z",
              "updatedAt": "2022-03-07T08:54:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41ukFs",
          "commit": {
            "abbreviatedOid": "59bf5a3"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T08:59:52Z",
          "updatedAt": "2022-03-07T08:59:52Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Yes. We should add a sentence for that.",
              "createdAt": "2022-03-07T08:59:52Z",
              "updatedAt": "2022-03-07T08:59:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uyVh",
          "commit": {
            "abbreviatedOid": "9ef2c91"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:50:37Z",
          "updatedAt": "2022-03-07T09:50:38Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n0x00), hence using the path_id 1. Optionally, the server confirms the path closure \r\nby sending an PATH_ABANDON frame using\r\n```",
              "createdAt": "2022-03-07T09:50:37Z",
              "updatedAt": "2022-03-07T09:52:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uyvI",
          "commit": {
            "abbreviatedOid": "9ef2c91"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:52:00Z",
          "updatedAt": "2022-03-07T09:52:00Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nidentifier type 0x00) as path identifier, which corresponds to the path_id 2. Both the client and\r\n```",
              "createdAt": "2022-03-07T09:52:00Z",
              "updatedAt": "2022-03-07T09:52:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 105,
      "id": "PR_kwDOGNtpaM4z_6Mt",
      "title": "Add implementation considerations to handle different PMTU sizes",
      "url": "https://github.com/quicwg/multipath/pull/105",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add some implementation considerations to handle different PMTU sizes following the discussion on #98 . Feel free to add different implementation options here. ",
      "createdAt": "2022-03-06T05:29:52Z",
      "updatedAt": "2022-03-07T09:33:32Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "232072927fdabba366f7c331eb57963a0d26385a",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/pmtu-implementation-consideration",
      "headRefOid": "1c74c1508a0eb13e30d66723fee763080f83c65a",
      "closedAt": "2022-03-07T09:33:32Z",
      "mergedAt": "2022-03-07T09:33:32Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "97fa88e72ff116e7c70ec04a4e2119fc75c0058d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41uT1c",
          "commit": {
            "abbreviatedOid": "4e0482d"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks ok to me, just a small suggestion to avoid talking about packet retransmission.",
          "createdAt": "2022-03-07T07:49:50Z",
          "updatedAt": "2022-03-07T07:51:01Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nprocessing as the content of lost packets initially sent on one path can be sent\r\non another path without further frame scheduling adaptations.\r\n```",
              "createdAt": "2022-03-07T07:49:50Z",
              "updatedAt": "2022-03-07T07:51:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41ufwy",
          "commit": {
            "abbreviatedOid": "48b4cbf"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T08:42:59Z",
          "updatedAt": "2022-03-07T08:42:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41uh2_",
          "commit": {
            "abbreviatedOid": "48b4cbf"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T08:51:16Z",
          "updatedAt": "2022-03-07T08:51:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41ushk",
          "commit": {
            "abbreviatedOid": "48b4cbf"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:30:13Z",
          "updatedAt": "2022-03-07T09:30:14Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n\r\n## Handling different PMTU sizes\r\n```",
              "createdAt": "2022-03-07T09:30:13Z",
              "updatedAt": "2022-03-07T09:30:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41us3Z",
          "commit": {
            "abbreviatedOid": "48b4cbf"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:31:22Z",
          "updatedAt": "2022-03-07T09:31:23Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nmultiple paths. One simple option if the PMTUs are relatively similar is to apply the minimum PMTU of all paths to\r\neach path. The benefit of such an approach is to simplify retransmission\r\nprocessing as the content of lost packets initially sent on one path can be sent\r\non another path without further frame scheduling adaptations.\r\n```",
              "createdAt": "2022-03-07T09:31:22Z",
              "updatedAt": "2022-03-07T09:31:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 106,
      "id": "PR_kwDOGNtpaM40Bo4r",
      "title": "Removing text about preferred_address",
      "url": "https://github.com/quicwg/multipath/pull/106",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This text will be moved to the next section in PR #102. Therefore this PR needs to be merged together with PR #102.",
      "createdAt": "2022-03-07T08:41:03Z",
      "updatedAt": "2024-03-12T16:19:15Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "208653ee9c2ff81ad03399c4aafc56d5ee3b55a1",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-6",
      "headRefOid": "61b2f8734b07c07f32b4b3ec7f7faf8df1f522f1",
      "closedAt": "2022-03-07T09:13:25Z",
      "mergedAt": "2022-03-07T09:13:25Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "5daa2a0d1dd01700dbc403a222fe1bb3dddb2f25"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41uhBT",
          "commit": {
            "abbreviatedOid": "61b2f87"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T08:47:58Z",
          "updatedAt": "2022-03-07T08:47:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM41uhe0",
          "commit": {
            "abbreviatedOid": "61b2f87"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-07T08:49:46Z",
          "updatedAt": "2022-03-07T08:49:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 108,
      "id": "PR_kwDOGNtpaM40ByIM",
      "title": "Overview section",
      "url": "https://github.com/quicwg/multipath/pull/108",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-07T09:21:19Z",
      "updatedAt": "2022-03-07T09:31:54Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "5daa2a0d1dd01700dbc403a222fe1bb3dddb2f25",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-8",
      "headRefOid": "fe326a26a51cbe5811e96784eb0b06263d891311",
      "closedAt": "2022-03-07T09:31:50Z",
      "mergedAt": "2022-03-07T09:31:50Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "07e2a13436606c492b928db69480fcfdccfbdae2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 109,
      "id": "PR_kwDOGNtpaM40B09p",
      "title": "[+] fix path_abandon type statement",
      "url": "https://github.com/quicwg/multipath/pull/109",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-07T09:33:11Z",
      "updatedAt": "2022-03-09T07:25:19Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07e2a13436606c492b928db69480fcfdccfbdae2",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/type",
      "headRefOid": "27d7f0e9807b43803764896d725e9b79379cde71",
      "closedAt": "2022-03-07T09:54:48Z",
      "mergedAt": "2022-03-07T09:54:48Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "fe95d4f752f44f8ab99feff9049265af9bf5bbe2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM41uw81",
          "commit": {
            "abbreviatedOid": "478d7c7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:45:50Z",
          "updatedAt": "2022-03-07T09:45:50Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n    the control frame. \r\n    Note that this is the connection identifier used by the peer \r\n    when sending packets on the to-be-closed path.\r\n```",
              "createdAt": "2022-03-07T09:45:50Z",
              "updatedAt": "2022-03-07T09:47:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM41uxEF",
          "commit": {
            "abbreviatedOid": "478d7c7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T09:46:11Z",
          "updatedAt": "2022-03-07T09:46:11Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n    the control frame.\r\n    Note that this is the connection identifier used by the sender \r\n    when sending packets on the to-be-closed path.\r\n```",
              "createdAt": "2022-03-07T09:46:11Z",
              "updatedAt": "2022-03-07T09:46:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 110,
      "id": "PR_kwDOGNtpaM40NjCS",
      "title": "[~] fix server MUST validate paths before using them",
      "url": "https://github.com/quicwg/multipath/pull/110",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #101 ",
      "createdAt": "2022-03-10T03:40:36Z",
      "updatedAt": "2024-03-12T16:19:11Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "3d367b87caaa2f3c047ddfc96c0933b68278fd2f",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_validation",
      "headRefOid": "4ce365aeacbfe1c0b256272c5244c48bcedc99f6",
      "closedAt": "2022-07-06T15:50:14Z",
      "mergedAt": "2022-07-06T15:50:14Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "71174a3b45d3d83c6b5e87999a340b4e63465a71"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM42FkE5",
          "commit": {
            "abbreviatedOid": "e7f1ecb"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-11T16:10:15Z",
          "updatedAt": "2022-03-11T16:10:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM42boo9",
          "commit": {
            "abbreviatedOid": "e7f1ecb"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-17T14:37:01Z",
          "updatedAt": "2022-03-17T14:37:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM42iXTS",
          "commit": {
            "abbreviatedOid": "e7f1ecb"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-19T07:18:01Z",
          "updatedAt": "2022-03-19T07:18:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49aQNI",
          "commit": {
            "abbreviatedOid": "ad48d27"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:24:00Z",
          "updatedAt": "2022-07-06T15:24:01Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nunless it has previously validated that address.\r\n```",
              "createdAt": "2022-07-06T15:24:00Z",
              "updatedAt": "2022-07-06T15:24:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aQw7",
          "commit": {
            "abbreviatedOid": "ad48d27"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-06T15:25:29Z",
          "updatedAt": "2022-07-06T15:25:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 113,
      "id": "PR_kwDOGNtpaM40fwuj",
      "title": "Add in-solidarity-bot config",
      "url": "https://github.com/quicwg/multipath/pull/113",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This will fix the CI issues",
      "createdAt": "2022-03-15T21:59:16Z",
      "updatedAt": "2022-03-16T07:38:52Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "fe95d4f752f44f8ab99feff9049265af9bf5bbe2",
      "headRepository": "quicwg/multipath",
      "headRefName": "solidarity-fix",
      "headRefOid": "b5fe13a3a483175065b969d251ad114b330a4b57",
      "closedAt": "2022-03-16T07:38:51Z",
      "mergedAt": "2022-03-16T07:38:51Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "3d367b87caaa2f3c047ddfc96c0933b68278fd2f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM42Tvb4",
          "commit": {
            "abbreviatedOid": "b5fe13a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-16T06:24:09Z",
          "updatedAt": "2022-03-16T06:24:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM42T8rn",
          "commit": {
            "abbreviatedOid": "b5fe13a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-16T07:38:32Z",
          "updatedAt": "2022-03-16T07:38:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 116,
      "id": "PR_kwDOGNtpaM40uX8w",
      "title": "[~] modification for path states in Section 4.3",
      "url": "https://github.com/quicwg/multipath/pull/116",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #112 and #115 ",
      "createdAt": "2022-03-21T09:09:27Z",
      "updatedAt": "2024-03-27T05:28:03Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71de7b625e2d1faac4329d2b6dee7ec404288123",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_state",
      "headRefOid": "59673b35c0b789a5630026dae6d4f9d005fad6dc",
      "closedAt": "2022-07-08T08:27:37Z",
      "mergedAt": "2022-07-08T08:27:37Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "99bd044dd4c3e249bcd04ad5fe8cebd9e5c07469"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49aRV-",
          "commit": {
            "abbreviatedOid": "e9137d9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:27:01Z",
          "updatedAt": "2022-07-06T15:27:02Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nof new data on a path. Note that if a path became idle due to a timeout, \r\n```",
              "createdAt": "2022-07-06T15:27:01Z",
              "updatedAt": "2022-07-06T15:27:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aRlQ",
          "commit": {
            "abbreviatedOid": "e9137d9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:27:37Z",
          "updatedAt": "2022-07-06T15:27:38Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nEndpoints SHOULD send RETIRE_CONNECTION_ID frames before releasing the\r\n```",
              "createdAt": "2022-07-06T15:27:38Z",
              "updatedAt": "2022-07-06T15:27:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aSiX",
          "commit": {
            "abbreviatedOid": "e9137d9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:30:12Z",
          "updatedAt": "2022-07-06T15:30:12Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nassociated Connection IDs following {{Section 19.16. of QUIC-TRANSPORT}}. Considering \r\n```",
              "createdAt": "2022-07-06T15:30:12Z",
              "updatedAt": "2022-07-06T15:30:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aS7v",
          "commit": {
            "abbreviatedOid": "e9137d9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T15:31:17Z",
          "updatedAt": "2022-07-06T15:31:18Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\nendpoints are not intended to send packets on the current path in the \"Closed\" \r\nstate, endpoints SHOULD send RETIRE_CONNECTION_ID frames on other \r\n```",
              "createdAt": "2022-07-06T15:31:17Z",
              "updatedAt": "2022-07-06T15:31:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49aTBR",
          "commit": {
            "abbreviatedOid": "e9137d9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-06T15:31:31Z",
          "updatedAt": "2022-07-06T15:31:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49f6k_",
          "commit": {
            "abbreviatedOid": "e2c6d05"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T15:30:40Z",
          "updatedAt": "2022-07-07T15:30:45Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Is this a SHOULD NOT or a MUST NOT?",
              "createdAt": "2022-07-07T15:30:41Z",
              "updatedAt": "2022-07-07T15:30:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49gTPN",
          "commit": {
            "abbreviatedOid": "e2c6d05"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T16:42:39Z",
          "updatedAt": "2022-07-07T16:42:39Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Actually this should not be normative here as this is just the reasoning. So maybe s/SHOULD NOT/are not expected to/",
              "createdAt": "2022-07-07T16:42:39Z",
              "updatedAt": "2022-07-07T16:42:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49gTdr",
          "commit": {
            "abbreviatedOid": "e2c6d05"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T16:43:23Z",
          "updatedAt": "2022-07-07T16:43:24Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nendpoints are not expected to send packets on the current path in the \"Closed\"\r\n```",
              "createdAt": "2022-07-07T16:43:24Z",
              "updatedAt": "2022-07-07T16:43:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49i8-b",
          "commit": {
            "abbreviatedOid": "59673b3"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T08:27:15Z",
          "updatedAt": "2022-07-08T08:27:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 117,
      "id": "PR_kwDOGNtpaM41s45M",
      "title": "[+] add stand-by status for path management",
      "url": "https://github.com/quicwg/multipath/pull/117",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For issue #22",
      "createdAt": "2022-04-06T04:12:48Z",
      "updatedAt": "2024-03-27T05:28:03Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b692f4bae6381c23fca051a0cf7026609a7d2c",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_standby",
      "headRefOid": "5abb88200431967913b69606969d3b11efb28464",
      "closedAt": "2022-07-11T12:19:39Z",
      "mergedAt": "2022-07-11T12:19:38Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "269195b3d1dbefcc87b45ae009b2633eeea9622a"
      },
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I think this is nearly ready. I just wonder what should be the behaviour of the PATH_STATUS receiver if all the existing paths are marked as Standby. Should we add something regarding this?\r\n\r\nI agree with this point. For the receiver side, endpoint MAY ignore this frame if it would cause all the paths unavailable.\r\nI updated the description. ",
          "createdAt": "2022-07-08T14:00:28Z",
          "updatedAt": "2022-07-08T14:00:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49ZrgT",
          "commit": {
            "abbreviatedOid": "d725ce4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:55:17Z",
          "updatedAt": "2022-07-06T13:55:17Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Actually I don't think we need to maintain the sequence number per path on the sender side. As long as the sequence number is larger than the last received for that path, you should apply it.",
              "createdAt": "2022-07-06T13:55:17Z",
              "updatedAt": "2022-07-06T13:55:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49Zro3",
          "commit": {
            "abbreviatedOid": "d725ce4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T13:55:35Z",
          "updatedAt": "2022-07-06T13:55:36Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "```suggestion\r\nEndpoints use PATH_STATUS frame to inform the peer whether it prefers to \r\n```",
              "createdAt": "2022-07-06T13:55:35Z",
              "updatedAt": "2022-07-06T13:55:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49fpAS",
          "commit": {
            "abbreviatedOid": "a19a414"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T14:45:21Z",
          "updatedAt": "2022-07-07T14:45:22Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "It's ok that we maintain only one monotonically increasing sequence number for all the Path Status frame under the same connection.",
              "createdAt": "2022-07-07T14:45:22Z",
              "updatedAt": "2022-07-07T14:45:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49fxlw",
          "commit": {
            "abbreviatedOid": "d725ce4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T15:06:40Z",
          "updatedAt": "2022-07-07T15:06:41Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Updated the definition of sequence number.",
              "createdAt": "2022-07-07T15:06:41Z",
              "updatedAt": "2022-07-07T15:06:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49f7JK",
          "commit": {
            "abbreviatedOid": "cc9fdef"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-07T15:32:18Z",
          "updatedAt": "2022-07-07T15:40:58Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nPATH_STATUS frames are used by endpoints to inform the peer of the current\r\n```",
              "createdAt": "2022-07-07T15:32:18Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 8,
              "body": "I think I would be useful to explicitly state that these are indications, i.e., the peer might not follow the endhost advertisements.",
              "createdAt": "2022-07-07T15:35:21Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 59,
              "body": "```suggestion\r\n  the definition of Path Identifier in {{path-abandon-frame}}.\r\n```",
              "createdAt": "2022-07-07T15:36:05Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 64,
              "body": "Maybe we should state that the scope of the sequence number is relative to the Path Identifier? Having a single space for the whole connection might cause issues if we have different paths with different latencies.",
              "createdAt": "2022-07-07T15:38:08Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 74,
              "body": "```suggestion\r\non the corresponding path, until it receives a new PATH_STATUS frame\r\n```",
              "createdAt": "2022-07-07T15:38:40Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 64,
              "body": "Actually later this is explained, but I think it could be useful to explicitly state that here.",
              "createdAt": "2022-07-07T15:39:58Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            },
            {
              "originalPosition": 83,
              "body": "Do we want to state that PATH_STATUS is ack-eliciting?",
              "createdAt": "2022-07-07T15:40:45Z",
              "updatedAt": "2022-07-07T15:40:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49iNiP",
          "commit": {
            "abbreviatedOid": "cc9fdef"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T04:07:11Z",
          "updatedAt": "2022-07-08T04:07:11Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Actually the receiver should maintain the largest received sequence number for each path. The receiver should accept the Path Status Frame if and only if its sequence number is larger than the largest received sequence number of the Path Identifier. The latencies of different paths doesn't matter, because the receiver can distinguish Status Frames for different paths with Path Identifier field, and compares the sequence numbers independently.",
              "createdAt": "2022-07-08T04:07:11Z",
              "updatedAt": "2022-07-08T04:07:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49iNrr",
          "commit": {
            "abbreviatedOid": "cc9fdef"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T04:08:41Z",
          "updatedAt": "2022-07-08T04:08:41Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "The acknowledgement of PATH_STATUS frame is important for the sender to check whether the receiver got the path status change or not.",
              "createdAt": "2022-07-08T04:08:41Z",
              "updatedAt": "2022-07-08T04:08:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jPeJ",
          "commit": {
            "abbreviatedOid": "7d68d77"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T09:28:22Z",
          "updatedAt": "2022-07-08T09:28:23Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "I fully agree with your description, I just suggested to make it clearer here.\r\n```suggestion\r\n  the sequence number assigned for this PATH_STATUS frame. The sequence\r\n  number is relative to the Path Identifier and MUST be monotonically increasing\r\n  for the sender of the Path Status frame in the same connection.\r\n```",
              "createdAt": "2022-07-08T09:28:22Z",
              "updatedAt": "2022-07-08T09:28:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jQow",
          "commit": {
            "abbreviatedOid": "7d68d77"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T09:30:42Z",
          "updatedAt": "2022-07-08T09:30:43Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "```suggestion\r\nPATH_STATUS frames are ack-eliciting. If a packet containing\r\n```",
              "createdAt": "2022-07-08T09:30:42Z",
              "updatedAt": "2022-07-08T09:30:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jc7b",
          "commit": {
            "abbreviatedOid": "cc9fdef"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T10:13:07Z",
          "updatedAt": "2022-07-08T10:13:08Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "I updated the description to make it clearer, and it's different for the sender and receiver side. ",
              "createdAt": "2022-07-08T10:13:08Z",
              "updatedAt": "2022-07-08T10:13:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jer9",
          "commit": {
            "abbreviatedOid": "c463880"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T10:19:30Z",
          "updatedAt": "2022-07-08T10:19:30Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Added note for that.",
              "createdAt": "2022-07-08T10:19:30Z",
              "updatedAt": "2022-07-08T10:19:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49kBK7",
          "commit": {
            "abbreviatedOid": "c463880"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I think this is nearly ready. I just wonder what should be the behaviour of the PATH_STATUS receiver if all the existing paths are marked as Standby. Should we add something regarding this?",
          "createdAt": "2022-07-08T12:36:41Z",
          "updatedAt": "2022-07-08T12:36:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49khYs",
          "commit": {
            "abbreviatedOid": "5abb882"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2022-07-08T14:20:03Z",
          "updatedAt": "2022-07-08T14:20:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49kjSW",
          "commit": {
            "abbreviatedOid": "5abb882"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Sounds good to me.",
          "createdAt": "2022-07-08T14:25:53Z",
          "updatedAt": "2022-07-08T14:25:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 121,
      "id": "PR_kwDOGNtpaM45inSp",
      "title": "fix grammar error as suggested by Kulsk in issue 119",
      "url": "https://github.com/quicwg/multipath/pull/121",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It's a grammar error fix in the aead section.",
      "createdAt": "2022-06-13T07:36:22Z",
      "updatedAt": "2022-07-05T11:32:50Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "3d367b87caaa2f3c047ddfc96c0933b68278fd2f",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/fix-grammar-in-aead",
      "headRefOid": "e674f386551fafac842129cbf8206ada045ec9b5",
      "closedAt": "2022-07-05T11:32:50Z",
      "mergedAt": "2022-07-05T11:32:50Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "1db1bd16afc79cfbf18de06782c5e167a09de7d9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 124,
      "id": "PR_kwDOGNtpaM47AJMm",
      "title": "fix max_idle_timeout issue in issue #95",
      "url": "https://github.com/quicwg/multipath/pull/124",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Replace \"max_idle_timeout\" with \"a path's idle_period\" in the Idle_Timeout Section and make sure that the idle_period is larger than 3 times the path's PTO.\r\n",
      "createdAt": "2022-07-07T09:00:58Z",
      "updatedAt": "2022-07-08T09:18:54Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "f3a20915bd5b326918bfadf9dc6f304d3b009c37",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/fix-max-idle-timeout",
      "headRefOid": "abd6d16f7569670857138d048997f12489e369ce",
      "closedAt": "2022-07-08T09:18:54Z",
      "mergedAt": "2022-07-08T09:18:54Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "a4283cf44ce7ee1e832b680b3440610936d15cdc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49eCCz",
          "commit": {
            "abbreviatedOid": "bf2a0d2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T09:37:25Z",
          "updatedAt": "2022-07-07T09:37:26Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\npath. Hosts SHOULD stop sending traffic on a path if for at least the period of the\r\nidle timeout as specified in {{Section 10.1. of QUIC-TRANSPORT}} \r\n(a) no non-probing packet was received or (b) no\r\nnon-probing packet sent over this path was acknowledged, but MAY ignore that\r\nrule if it would disqualify all available paths. To avoid idle timeout of a path, endpoints\r\n```",
              "createdAt": "2022-07-07T09:37:25Z",
              "updatedAt": "2022-07-07T09:37:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49eCdo",
          "commit": {
            "abbreviatedOid": "bf2a0d2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Proposing to rather reference to RFC9000 instead of specifying this here separate again.",
          "createdAt": "2022-07-07T09:38:42Z",
          "updatedAt": "2022-07-07T09:38:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49ibpX",
          "commit": {
            "abbreviatedOid": "abd6d16"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Just modified \"...at least _max_idle_timeout milliseconds_ (a)...\" \r\ninto \"... at least _the period of the idle timeout_  as specified in {{Section 10.1 of QUIC-TRANSPORT}} (a)...\"\r\n\r\nIt's better to just modify the corresponding 2 lines, but it's ok for me.",
          "createdAt": "2022-07-08T06:02:55Z",
          "updatedAt": "2022-07-08T06:02:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49jGpU",
          "commit": {
            "abbreviatedOid": "abd6d16"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T09:00:24Z",
          "updatedAt": "2022-07-08T09:00:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49jLwo",
          "commit": {
            "abbreviatedOid": "abd6d16"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T09:18:45Z",
          "updatedAt": "2022-07-08T09:18:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 126,
      "id": "PR_kwDOGNtpaM47AOHD",
      "title": "Clarify path closure and stateless reset reception",
      "url": "https://github.com/quicwg/multipath/pull/126",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #107, #118.",
      "createdAt": "2022-07-07T09:20:16Z",
      "updatedAt": "2022-07-08T14:05:06Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71de7b625e2d1faac4329d2b6dee7ec404288123",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-118",
      "headRefOid": "99ca8a2ad04816b19ad6788059c627e41268f53f",
      "closedAt": "2022-07-08T11:10:15Z",
      "mergedAt": "2022-07-08T11:10:14Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "4e7695b8f3eaeec8883d786b2b7d5ce8a2e969c0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49eC11",
          "commit": {
            "abbreviatedOid": "99ca8a2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T09:39:55Z",
          "updatedAt": "2022-07-07T09:39:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49jsWN",
          "commit": {
            "abbreviatedOid": "99ca8a2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-07-08T11:10:01Z",
          "updatedAt": "2022-07-08T11:10:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49kcTB",
          "commit": {
            "abbreviatedOid": "99ca8a2"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Careful with implicit actions!",
          "createdAt": "2022-07-08T14:04:42Z",
          "updatedAt": "2022-07-08T14:05:06Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I would not suggest that ABANDON \"implies\" CID retirement. It is true that after ABANDON the CID SHOULD be retired, but I don't think the spec states that the effect is mechanical or implicit. Or if it is, then we should clearly say so in the description of the abandon frame.",
              "createdAt": "2022-07-08T14:04:42Z",
              "updatedAt": "2022-07-08T14:05:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 127,
      "id": "PR_kwDOGNtpaM47BIVw",
      "title": "Add discussion about retiring DCID when there are still in-flight packets",
      "url": "https://github.com/quicwg/multipath/pull/127",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #122.",
      "createdAt": "2022-07-07T12:26:43Z",
      "updatedAt": "2022-07-08T11:40:00Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71de7b625e2d1faac4329d2b6dee7ec404288123",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-122",
      "headRefOid": "e5feb80d6916dfb918d66dc5621f1c8b3aabe174",
      "closedAt": "2022-07-08T11:40:00Z",
      "mergedAt": "2022-07-08T11:40:00Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "07b692f4bae6381c23fca051a0cf7026609a7d2c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49e1kt",
          "commit": {
            "abbreviatedOid": "9c2faa5"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T12:32:11Z",
          "updatedAt": "2022-07-07T12:32:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49jCIo",
          "commit": {
            "abbreviatedOid": "9c2faa5"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Just little gramma fix",
          "createdAt": "2022-07-08T08:44:54Z",
          "updatedAt": "2022-07-08T09:02:26Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nConnection ID, then wait for all in-flight packets to be either\r\n```",
              "createdAt": "2022-07-08T08:44:54Z",
              "updatedAt": "2022-07-08T09:02:26Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nendpoint should first stop sending packets with the to-be-retired\r\n```",
              "createdAt": "2022-07-08T08:46:05Z",
              "updatedAt": "2022-07-08T09:02:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jsrb",
          "commit": {
            "abbreviatedOid": "e5feb80"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T11:11:29Z",
          "updatedAt": "2022-07-08T11:11:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 129,
      "id": "PR_kwDOGNtpaM47Bbkb",
      "title": "Add some guidance for ACK scheduling",
      "url": "https://github.com/quicwg/multipath/pull/129",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #123.",
      "createdAt": "2022-07-07T13:21:21Z",
      "updatedAt": "2022-07-11T12:30:49Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71de7b625e2d1faac4329d2b6dee7ec404288123",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-123",
      "headRefOid": "e374c495696bd6ebdcf24bc5d4d79d399bb9b047",
      "closedAt": "2022-07-11T12:30:49Z",
      "mergedAt": "2022-07-11T12:30:48Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "dad1f457fb66fcb8dfc4e8937b621cba103e3c0b"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe we can merge this now as it is. If we want to add more guidance later we should open a separate issue and another PR.",
          "createdAt": "2022-07-11T12:24:55Z",
          "updatedAt": "2022-07-11T12:24:55Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49jxmP",
          "commit": {
            "abbreviatedOid": "4943796"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T11:33:18Z",
          "updatedAt": "2022-07-08T11:33:18Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Sending ACK_(MP) frames on the fastest path is one of the ACK scheduling strategies, but IMO the most common strategy is sending ACK_(MP) frames on the same path of the packet was sent. By the way, as QUIC-TRANSPORT doesn't contain a mechanism to calculate one-way-delay on a certain path, it's very important that we need to add some guidance for one-way-delay calculation(e.g. [QUIC-Timestamp]) with the fastest path ACK scheduling strategy, and some guidance for the potential impact on congestion control.",
              "createdAt": "2022-07-08T11:33:18Z",
              "updatedAt": "2022-07-08T11:33:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49jyIQ",
          "commit": {
            "abbreviatedOid": "4943796"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Need to add guidance for one-way-delay calculation and impact on congestion control, if we want to recommend the fastest path ACK scheduling strategy.",
          "createdAt": "2022-07-08T11:35:43Z",
          "updatedAt": "2022-07-08T11:35:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49o9DS",
          "commit": {
            "abbreviatedOid": "e374c49"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T10:48:12Z",
          "updatedAt": "2022-07-11T10:48:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 130,
      "id": "PR_kwDOGNtpaM47F46r",
      "title": "Minor editorial changes",
      "url": "https://github.com/quicwg/multipath/pull/130",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Mostly fixing some English spellings and sentences, \"Figure Figure\"\r\nand \"Section Section\" occurrences. There is no content change here.",
      "createdAt": "2022-07-08T09:13:35Z",
      "updatedAt": "2022-07-08T11:37:50Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "99bd044dd4c3e249bcd04ad5fe8cebd9e5c07469",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-english",
      "headRefOid": "197f61df3407783c6f9ff044e96e04020ee93c8c",
      "closedAt": "2022-07-08T11:37:50Z",
      "mergedAt": "2022-07-08T11:37:49Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "daae7450544329fe0f44653e7deae0122d030141"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49jRKo",
          "commit": {
            "abbreviatedOid": "197f61d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T09:31:42Z",
          "updatedAt": "2022-07-08T09:31:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49jyix",
          "commit": {
            "abbreviatedOid": "197f61d"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T11:37:39Z",
          "updatedAt": "2022-07-08T11:37:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 131,
      "id": "PR_kwDOGNtpaM47GEgm",
      "title": "Add more explanation on ACK delay, RTT computation for single PNS",
      "url": "https://github.com/quicwg/multipath/pull/131",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For issue #125 , add some considerations for RTT computation in our single pns implementation. Not sure if it is easy enough to understand. Please feel free to change.",
      "createdAt": "2022-07-08T09:49:57Z",
      "updatedAt": "2022-10-24T11:19:50Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "a4283cf44ce7ee1e832b680b3440610936d15cdc",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/rtt-spns-consideration",
      "headRefOid": "a208472a402b25e972599305777b99d7368f952e",
      "closedAt": "2022-10-24T11:19:50Z",
      "mergedAt": "2022-10-24T11:19:50Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "c5fb91a22e318cc1465b0e4d531830c76cd47c31"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, this needs more discussion. Also maybe we want to move this text rather in the \"Implementation Considerations\" section?",
          "createdAt": "2022-07-11T12:30:48Z",
          "updatedAt": "2022-07-11T12:30:48Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema, @yfmascgy updated this PR. Can we merge it?\r\n\r\nNote that this PR is only for SPNS and part of that respective section. Based on his report, the strategy seems reasonable.\r\n\r\nFor ACK_MP we have the following text in the packet scheduling section (7.):\r\n\r\n> Note that the receiver could use a different scheduling strategy to send ACK(_MP) frames. The recommended default behaviour consists in sending ACK(_MP) frames on the path they acknowledge packets.",
          "createdAt": "2022-10-24T07:40:00Z",
          "updatedAt": "2022-10-24T07:40:00Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49j3TQ",
          "commit": {
            "abbreviatedOid": "2e9433e"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "The mechanism is ok, but we need to make it a little clearer by distinguishing actions for the sender and receiver side.",
          "createdAt": "2022-07-08T11:58:24Z",
          "updatedAt": "2022-07-08T12:06:47Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n* The sender also keeps track of a list of sent packets for each path that are acknowledged by\r\n```",
              "createdAt": "2022-07-08T11:58:24Z",
              "updatedAt": "2022-07-08T12:06:47Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  ACKs received from the same path. A path's RTT sample is generated on receving ACK\r\n```",
              "createdAt": "2022-07-08T11:59:52Z",
              "updatedAt": "2022-07-08T12:06:47Z"
            },
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n* The receiver side counts the number of ACK-eliciting packets received for each paths,\r\n```",
              "createdAt": "2022-07-08T12:01:38Z",
              "updatedAt": "2022-07-08T12:06:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49moyE",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2022-07-09T13:57:06Z",
          "updatedAt": "2022-07-09T13:57:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49nmjX",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T04:49:50Z",
          "updatedAt": "2022-07-11T04:49:50Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I am trying to understand your algorithm. I guess it sums up as:\r\n\r\n* For each path, the sender maintains knowledge of the largest PN acknowledged on path.\r\n* The sender also keeps track of a list of sent packets for each path that are not yet acknowledged by\r\n  ACKs received from the same path.\r\n  \r\nWhen a same path ACK is received:\r\n\r\n* process the acknowledged ranges until finding a packet that:\r\n      1) Was sent on the path\r\n      2) Has a packet number larger than the largest PN acknowledged on path\r\n* if several packets match the criteria above, retain only the one with the largest PN\r\n* the remaining list may be empty, in which case do nothing\r\n* if one packet matches the criteria above:\r\n      1) Compute the RTT sample as the difference between the ACK received time and the packet sent time.\r\n      2) Update RTT average, etc.\r\n      3) Set the largest PN acknowledged on path to the PN that was just processed\r\n      3) Remove all packets with PN lower or equal than this largest acknowledged PN from the list of sent packets for each path that are not yet acknowledged by ACKs received from the same path\r\n\r\nThe downside of that method is that the RTT sample may include some or all of the ACK Delay of the ACK frame. The possible rule is:\r\n\r\n* if the largest acknowledged number in the ACK frame matches the largest acknowledged number on path, remove the ACK Delay from the RTT sample.\r\n* if not, accept that the measurement may be imprecise.\r\n\r\nDo I understand correctly?",
              "createdAt": "2022-07-11T04:49:50Z",
              "updatedAt": "2022-07-11T04:49:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49nn8g",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T05:01:32Z",
          "updatedAt": "2022-07-11T05:01:32Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Of course, we need to also specify the receiver behavior. Specifying that behavior may help deal with the \"ACK Delay\" issue. I assume that this why you write:\r\n\r\n* The receiver counts the number of ACK-eliciting packets received for each paths,\r\n  and keeps a per-path ACK timer. An ACK from that path is triggered when the\r\n  number of ACK-eliciting packets received on that path surpasses the path's\r\n  ACK-eliciting threshold or the path's ACK-timer expires.\r\n\r\nI am not too sure about that, because the net effect of that rule is to get at least one new ACK **for each path** per ACK Timer. If the goal is to provide accurate measurement of RTT, we don't need that many \"on path ACK\". One per RTT would be enough. Maybe 2 per RTT to be safe. Or the max value of \"ACK Timer\" and \"Path RTT / 2\". Reset that timer for each path after sending an on path RTT. Then, trigger an on path ACK as soon as (1) the timer has expired and (2) a packet has been received. (Ack eliciting or not does not matter.)\r\n\r\nThat way, the sender can assume that for the on-path packet, the ACK delay is set to zero.",
              "createdAt": "2022-07-11T05:01:32Z",
              "updatedAt": "2022-07-11T05:01:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49nrao",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T05:29:03Z",
          "updatedAt": "2022-07-11T05:29:03Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Correction. My concern about ACK Delay is misplaced. We are speaking about ACK_(MP), so the largest packet acknowledged is always a packet sent on that same path. See the modification that I propose on PR #129, a simple guidance for always sending at least some ACK on the same path. If we accept that guidance, then the text becomes simpler -- no need to specify a receiver side strategy. So the entire addition becomes:\r\n\r\n\r\n* For each path, the sender maintains knowledge of the largest PN acknowledged on path.\r\n\r\n* The sender also keeps track of a list of sent packets for each path that are not yet acknowledged by ACKs received from the same path.\r\n\r\n* When a same path ACK is received, the sender checks whether the largest packet acknowledged is larger than the largest PN acknowledged on path. If it is, the sender will:\r\n\r\n    - Compute a new path RTT sample using the ACK arrival time, the ACK delay indication, and the time at which the packet with this largest PN was sent.\r\n    - Set the largest PN acknowledged on path to the PN that was just processed\r\n    - Remove all packets with PN lower or equal than this largest acknowledged PN from the list of packets sent on this path that are not yet acknowledged by ACKs received from the same path.\r\n\r\n\r\n ",
              "createdAt": "2022-07-11T05:29:03Z",
              "updatedAt": "2022-07-11T05:29:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49nr42",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T05:32:30Z",
          "updatedAt": "2022-07-11T05:32:30Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Of course, there is the issue of packets sent with zero-length CID. In that case, the simple algorithm above does not work very well. The ACK_(MP) will contain ack ranges received on many paths. Instead of using the largest number in the ACK_(MP) frame, the sender needs to filter the ACK ranges and retrieve the largest number acknowledged for the path.",
              "createdAt": "2022-07-11T05:32:30Z",
              "updatedAt": "2022-07-11T05:32:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49oGFh",
          "commit": {
            "abbreviatedOid": "df87c8f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T07:41:51Z",
          "updatedAt": "2022-07-11T08:23:51Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n  and keeps a per-path ACK timer. An ACK from that path is triggered when either\r\n  a) the number of ACK-eliciting packets received on that path surpasses the path's\r\n  ACK-eliciting threshold or b) the path's ACK-timer expires.\r\n```",
              "createdAt": "2022-07-11T07:41:51Z",
              "updatedAt": "2022-07-11T08:23:51Z"
            },
            {
              "originalPosition": 22,
              "body": "Which parts of the \"largest packet (number ?) received\" should be recorded in addition to the reception time?",
              "createdAt": "2022-07-11T07:42:41Z",
              "updatedAt": "2022-07-11T08:23:51Z"
            },
            {
              "originalPosition": 24,
              "body": "It sounds odd to me to change the meaning of the ACK Delay field for a particular use case...",
              "createdAt": "2022-07-11T08:21:24Z",
              "updatedAt": "2022-07-11T08:23:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49o-jW",
          "commit": {
            "abbreviatedOid": "1e5852b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Need more discussion about the mechanism.",
          "createdAt": "2022-07-11T10:54:03Z",
          "updatedAt": "2022-07-11T10:54:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5EsyWc",
          "commit": {
            "abbreviatedOid": "2a6cbe2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I'm ok with the current version, just a few editorial hints.",
          "createdAt": "2022-10-24T06:34:19Z",
          "updatedAt": "2022-10-24T06:56:24Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "... and the resulted RTT sample may be the sum of _the one way delay of two different paths._",
              "createdAt": "2022-10-24T06:34:19Z",
              "updatedAt": "2022-10-24T06:56:24Z"
            },
            {
              "originalPosition": 34,
              "body": "A path should send an ACK _frame_ when it receives ack-eliciting threshold number of ack-eliciting\r\npackets (e.g., two) _on the current path_.",
              "createdAt": "2022-10-24T06:37:57Z",
              "updatedAt": "2022-10-24T06:56:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EtDdz",
          "commit": {
            "abbreviatedOid": "a208472"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Seems like a reasonable tradeoff, easy to implement.",
          "createdAt": "2022-10-24T07:46:23Z",
          "updatedAt": "2022-10-24T07:46:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 133,
      "id": "PR_kwDOGNtpaM47GtJs",
      "title": "add some text to refuse path initiation",
      "url": "https://github.com/quicwg/multipath/pull/133",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Should fix #120.",
      "createdAt": "2022-07-08T12:32:43Z",
      "updatedAt": "2022-07-11T12:23:05Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b692f4bae6381c23fca051a0cf7026609a7d2c",
      "headRepository": "quicwg/multipath",
      "headRefName": "refuse-path",
      "headRefOid": "f081e77d44c52eea1cacac7ad808c5845f3bb0c2",
      "closedAt": "2022-07-11T12:23:05Z",
      "mergedAt": "2022-07-11T12:23:05Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "f54fe39a7b7a98dfe2cfbec7985312acde79428a"
      },
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I rewrote the text based on the suggestion from @huitema to discuss the case of zero-length CIDs.",
          "createdAt": "2022-07-11T07:38:04Z",
          "updatedAt": "2022-07-11T07:38:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49mckX",
          "commit": {
            "abbreviatedOid": "ff0471f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Yes, good idea. Specifying \"on another path\" is indeed the key, because otherwise the responder needs to consume a CID. \r\n\r\nThere is a corner case when the Path Challenge arrives with a NULL CID. What happens then?",
          "createdAt": "2022-07-09T07:06:58Z",
          "updatedAt": "2022-07-09T07:06:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49nC7-",
          "commit": {
            "abbreviatedOid": "ff0471f"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I'm ok with the new text, but I agree with Christian that we need to explain what would happen when endpoints use NULL CID.",
          "createdAt": "2022-07-10T14:38:51Z",
          "updatedAt": "2022-07-10T14:38:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49nFoM",
          "commit": {
            "abbreviatedOid": "ff0471f"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-10T16:34:46Z",
          "updatedAt": "2022-07-10T16:34:46Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Hw about the following text:\r\n\r\nThe standard way to deny the establishment of a path, according to {{RFC9000}}, is\r\nto not send a PATH_RESPONSE  in response to the peer's\r\nPATH_CHALLENGE. An endpoint that has negotiated use of multipath can\r\nuse a more direct method, but only if the PATH_CHALLENGE arrives with\r\na non-zero length CID. This endpoint MAY send  on another active path\r\na PATH_ABANDON frame containing the Path Identifier of the refused path.\r\n\r\n",
              "createdAt": "2022-07-10T16:34:46Z",
              "updatedAt": "2022-07-10T16:36:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49o8mk",
          "commit": {
            "abbreviatedOid": "f081e77"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good to me.",
          "createdAt": "2022-07-11T10:46:27Z",
          "updatedAt": "2022-07-11T10:46:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49pV6F",
          "commit": {
            "abbreviatedOid": "f081e77"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T12:22:46Z",
          "updatedAt": "2022-07-11T12:22:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 134,
      "id": "PR_kwDOGNtpaM47HHW6",
      "title": "Do not imply",
      "url": "https://github.com/quicwg/multipath/pull/134",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Minor tweak. The text says that a path abandon \"implies\" retirement of the CID. Readers could be mislead and assume that they don't need to send a retire frame after sending abandon, when in fact they do.",
      "createdAt": "2022-07-08T14:16:31Z",
      "updatedAt": "2022-07-08T16:34:32Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b692f4bae6381c23fca051a0cf7026609a7d2c",
      "headRepository": "huitema/multipath",
      "headRefName": "do-not-imply",
      "headRefOid": "e523da51315a7ae9ceb48a00aeec2b15e0e1ff90",
      "closedAt": "2022-07-08T14:26:35Z",
      "mergedAt": "2022-07-08T14:26:35Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "a6126f4ab1e3df1deca8c5517fbe974ffaf29e5d"
      },
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@Yanmei-Liu , @qdeconinck, @mirjak please review.",
          "createdAt": "2022-07-08T14:21:09Z",
          "updatedAt": "2022-07-08T14:21:09Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This Github setting is pretty annoying. @LPardue I understand why only the selected authors would be able to merge a pull request, but as it stands I am also blocked from requesting reviews of a PR that I just created.",
          "createdAt": "2022-07-08T14:25:01Z",
          "updatedAt": "2022-07-08T14:25:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49kiV9",
          "commit": {
            "abbreviatedOid": "e523da5"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-07-08T14:22:58Z",
          "updatedAt": "2022-07-08T14:22:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49kifJ",
          "commit": {
            "abbreviatedOid": "e523da5"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The proposed text is indeed clearer.",
          "createdAt": "2022-07-08T14:23:26Z",
          "updatedAt": "2022-07-08T14:23:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM49kivI",
          "commit": {
            "abbreviatedOid": "e523da5"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-08T14:24:13Z",
          "updatedAt": "2022-07-08T14:24:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 135,
      "id": "PR_kwDOGNtpaM47HITr",
      "title": "[~] Receiving old packet number space identifier in ACK_MP",
      "url": "https://github.com/quicwg/multipath/pull/135",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #128 ",
      "createdAt": "2022-07-08T14:20:15Z",
      "updatedAt": "2023-10-25T08:03:45Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b692f4bae6381c23fca051a0cf7026609a7d2c",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/proto_violation",
      "headRefOid": "57700dc1d34f7c9435c72e6d358f7c965629e172",
      "closedAt": "2022-07-11T12:57:37Z",
      "mergedAt": "2022-07-11T12:57:37Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "68e5e02c4cca6057c8181a22e8fc9f3084791de0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM49kj8Y",
          "commit": {
            "abbreviatedOid": "ffa3afd"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Minor English nit.",
          "createdAt": "2022-07-08T14:27:55Z",
          "updatedAt": "2022-07-08T14:29:08Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nspace ID which was never issued by endpoints, it MUST treat this as\r\n```",
              "createdAt": "2022-07-08T14:27:55Z",
              "updatedAt": "2022-07-08T14:29:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49mcms",
          "commit": {
            "abbreviatedOid": "ffa3afd"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-09T07:08:59Z",
          "updatedAt": "2022-07-09T07:09:05Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Why SHOULD? Is there an exception? What else could the receiver do?",
              "createdAt": "2022-07-09T07:08:59Z",
              "updatedAt": "2022-07-09T07:09:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49mo9I",
          "commit": {
            "abbreviatedOid": "cf794b2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-09T14:04:45Z",
          "updatedAt": "2022-07-09T14:04:46Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Replaced with _MUST_",
              "createdAt": "2022-07-09T14:04:45Z",
              "updatedAt": "2022-07-09T14:04:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM49pfid",
          "commit": {
            "abbreviatedOid": "cf794b2"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T12:54:10Z",
          "updatedAt": "2022-07-11T12:54:15Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nIf an endpoint receives an ACK_MP frame with a packet number\r\nspace ID which was never issued by endpoints (i.e., with a Connection ID\r\nsequence number larger than the largest one advertised), it MUST treat\r\nthis as a connection error of type MP_PROTOCOL_VIOLATION and close\r\nthe connection. If an endpoint receives an ACK_MP frame with a packet\r\nnumber space ID which is no more active (e.g., retired by a\r\nRETIRE_CONNECTION_ID frame or belonging to closed paths), it MUST\r\nignore the ACK_MP frame without causing a connection error.\r\n```",
              "createdAt": "2022-07-11T12:54:10Z",
              "updatedAt": "2022-07-11T12:55:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 141,
      "id": "PR_kwDOGNtpaM4_Vm2S",
      "title": "[~] replace MP_CONNECTION_ERROR with TRANSPORT_PARAMETER_ERROR",
      "url": "https://github.com/quicwg/multipath/pull/141",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #136 ",
      "createdAt": "2022-09-21T10:00:17Z",
      "updatedAt": "2024-03-27T05:27:59Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "68e5e02c4cca6057c8181a22e8fc9f3084791de0",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/error_code",
      "headRefOid": "cfb679c3dca5b23cff8ecad51375b70cda04323e",
      "closedAt": "2022-09-23T09:27:19Z",
      "mergedAt": "2022-09-23T09:27:19Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "2f11fdb410dc1ab46eb15be309b07cd0be6f5d99"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5CfKSU",
          "commit": {
            "abbreviatedOid": "bfac69d"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Minor modification, otherwise LGTM.",
          "createdAt": "2022-09-21T13:50:10Z",
          "updatedAt": "2022-09-21T13:51:55Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nTRANSPORT_PARAMETER_ERROR (specified in {{Section 20.1 of QUIC-TRANSPORT}})\r\nand close the connection.\r\n```",
              "createdAt": "2022-09-21T13:50:10Z",
              "updatedAt": "2022-09-21T13:51:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5CpZ0w",
          "commit": {
            "abbreviatedOid": "cfb679c"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-23T09:15:33Z",
          "updatedAt": "2022-09-23T09:15:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Cpcb9",
          "commit": {
            "abbreviatedOid": "cfb679c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-23T09:24:34Z",
          "updatedAt": "2022-09-23T09:24:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 143,
      "id": "PR_kwDOGNtpaM4_m0aw",
      "title": "Fix enable_multipath values",
      "url": "https://github.com/quicwg/multipath/pull/143",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #142.",
      "createdAt": "2022-09-26T13:20:45Z",
      "updatedAt": "2022-10-21T10:21:21Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "2f11fdb410dc1ab46eb15be309b07cd0be6f5d99",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-enable_multipath-values",
      "headRefOid": "1d4f0a8e8945c6cdf72ba2cf2a135788ff3826fc",
      "closedAt": "2022-10-21T10:21:21Z",
      "mergedAt": "2022-10-21T10:21:21Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "8e37e4706d2806bc073fce1096eae351a122c012"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5C2P1J",
          "commit": {
            "abbreviatedOid": "88f5359"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-27T08:23:56Z",
          "updatedAt": "2022-09-27T08:23:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 145,
      "id": "PR_kwDOGNtpaM5BAZmM",
      "title": "Update of affiliation",
      "url": "https://github.com/quicwg/multipath/pull/145",
      "state": "MERGED",
      "author": "obonaventure",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-18T11:12:35Z",
      "updatedAt": "2022-10-18T11:13:51Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "2f11fdb410dc1ab46eb15be309b07cd0be6f5d99",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-2",
      "headRefOid": "c9050325c7df566eac559c337f4fb54673563c64",
      "closedAt": "2022-10-18T11:13:51Z",
      "mergedAt": "2022-10-18T11:13:51Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "07b315c04991840a1bf5171e5779f4ca123c88cf"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 146,
      "id": "PR_kwDOGNtpaM5BQBOR",
      "title": "Add Alibaba SPNS implementation and experiment report",
      "url": "https://github.com/quicwg/multipath/pull/146",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-21T03:13:53Z",
      "updatedAt": "2022-10-21T21:25:02Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b315c04991840a1bf5171e5779f4ca123c88cf",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/alibaba-spns-report",
      "headRefOid": "28495256d6f55b4a87b3532c4e81a12726ff5d5c",
      "closedAt": "2022-10-21T21:25:02Z",
      "mergedAt": "2022-10-21T21:25:02Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "95f787bde9207c86946a7a8b6a2d9972a6a0f747"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 147,
      "id": "PR_kwDOGNtpaM5BQ_10",
      "title": "Add entry for the PATH_STATUS frame in IANA",
      "url": "https://github.com/quicwg/multipath/pull/147",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #138.",
      "createdAt": "2022-10-21T08:08:28Z",
      "updatedAt": "2022-10-21T08:55:56Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "07b315c04991840a1bf5171e5779f4ca123c88cf",
      "headRepository": "quicwg/multipath",
      "headRefName": "qdeconinck-fix-138",
      "headRefOid": "bb081aa9e4304e901bd5fc3cce2e97cac60110c0",
      "closedAt": "2022-10-21T08:55:56Z",
      "mergedAt": "2022-10-21T08:55:56Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "2f7cfb3bddda1d35d20d0370ebb9973d53827027"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 148,
      "id": "PR_kwDOGNtpaM5BRpTN",
      "title": "New implementation consideration on keep alives",
      "url": "https://github.com/quicwg/multipath/pull/148",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #144",
      "createdAt": "2022-10-21T10:37:41Z",
      "updatedAt": "2024-03-12T16:19:11Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "8e37e4706d2806bc073fce1096eae351a122c012",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-8",
      "headRefOid": "a717fc7bfc966d96fb631ad95ad6d5de1757ebc6",
      "closedAt": "2022-10-24T12:45:31Z",
      "mergedAt": "2022-10-24T12:45:31Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "749aa03ec09471f0ba5b533ac540bfdec7ab8e6b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Emq1G",
          "commit": {
            "abbreviatedOid": "5f18489"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T13:44:33Z",
          "updatedAt": "2022-10-21T13:44:34Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nThe QUIC specification defines an optional keep alive process, see {{Section 5.3 of QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2022-10-21T13:44:33Z",
              "updatedAt": "2022-10-21T13:44:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Enc_C",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I'm fine with the proposed addition.",
          "createdAt": "2022-10-21T15:50:32Z",
          "updatedAt": "2022-10-21T15:50:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5EtJh9",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Looks good. A bit redundant with other parts, but does not hurt.",
          "createdAt": "2022-10-24T08:03:47Z",
          "updatedAt": "2022-10-24T08:03:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5EtKAm",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T08:04:11Z",
          "updatedAt": "2022-10-24T08:04:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5EtPYC",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T08:14:06Z",
          "updatedAt": "2022-10-24T08:14:07Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "> Implementations should jitter their timers to avoid sending Ping frames at the same time over different paths.\r\n\r\nDo we really need this last sentence or can we remove it?",
              "createdAt": "2022-10-24T08:14:07Z",
              "updatedAt": "2022-10-24T08:14:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Et1Mc",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T09:54:26Z",
          "updatedAt": "2022-10-24T09:54:26Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I'm ok with the previous parts.  We could remove the last sentence as it depends on the implementation.",
              "createdAt": "2022-10-24T09:54:26Z",
              "updatedAt": "2022-10-24T09:54:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EuQsQ",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T11:20:21Z",
          "updatedAt": "2022-10-24T11:20:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Eumu6",
          "commit": {
            "abbreviatedOid": "162595b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T12:37:54Z",
          "updatedAt": "2022-10-24T12:37:55Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\non each of these paths before the idle timeout expires.\r\n```",
              "createdAt": "2022-10-24T12:37:54Z",
              "updatedAt": "2022-10-24T12:37:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 149,
      "id": "PR_kwDOGNtpaM5BTAft",
      "title": "First proposal to \"remove\" single packet number space option",
      "url": "https://github.com/quicwg/multipath/pull/149",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR removes the use of a single packet number space on multiple paths as a fully supported option. However, it currently doesn't remove it entirely.\r\nSpecifically, it moves the respective text for now into the appendix but still allows the reception of packets without a Connection ID on multiple validated paths, similarly as path migration is not strictly forbidden without connection ID.",
      "createdAt": "2022-10-21T15:46:36Z",
      "updatedAt": "2024-03-12T16:19:09Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "749aa03ec09471f0ba5b533ac540bfdec7ab8e6b",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-rm-spns",
      "headRefOid": "ebb1a36453eeda6c04d378c2b2b7d5878e756a06",
      "closedAt": "2023-01-22T12:20:20Z",
      "mergedAt": "2023-01-22T12:20:20Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "7ae9ca752468438613029fdb4d30d6197de13cb4"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema yes I also opened issue #152 for discussion!",
          "createdAt": "2022-10-24T08:21:51Z",
          "updatedAt": "2022-10-24T08:21:51Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I updated the PR and removed the appendix for SPNP. Further this PR threats the use of the multipath extension without CID as an error new text is the following:\r\n\r\n```\r\nIf the parameter is set to 1, both endpoints MUST use non-zero connection\r\nIDs. If an enable_multipath parameter set to 1 is received and the carrying packet\r\ndoes not contain a non-zero legnth connection, the receiver MUST treat this as a connection error of type\r\nTRANSPORT_PARAMETER_ERROR (specified in {{Section 20.1 of QUIC-TRANSPORT}})\r\nand close the connection.\r\n```",
          "createdAt": "2022-11-21T18:59:06Z",
          "updatedAt": "2022-11-21T18:59:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Enm-H",
          "commit": {
            "abbreviatedOid": "9b1efae"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:21:33Z",
          "updatedAt": "2022-10-21T16:21:33Z",
          "comments": [
            {
              "originalPosition": 291,
              "body": "```suggestion\r\n# Sending packets on multiple paths with zero length connection ID {#using-zero-length}\r\n```",
              "createdAt": "2022-10-21T16:21:33Z",
              "updatedAt": "2022-10-21T16:22:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EnnT7",
          "commit": {
            "abbreviatedOid": "9b1efae"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:22:43Z",
          "updatedAt": "2022-10-21T16:22:44Z",
          "comments": [
            {
              "originalPosition": 308,
              "body": "```suggestion\r\n{{ecn-handling}}.\r\n```",
              "createdAt": "2022-10-21T16:22:43Z",
              "updatedAt": "2022-10-21T16:22:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Ennze",
          "commit": {
            "abbreviatedOid": "4bb13a8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:24:16Z",
          "updatedAt": "2022-10-21T16:24:17Z",
          "comments": [
            {
              "originalPosition": 235,
              "body": "```suggestion\r\nthese packets MUST either be acknowledged using ACK_MP frames with packet number space ID 0,\r\n```",
              "createdAt": "2022-10-21T16:24:17Z",
              "updatedAt": "2022-10-21T16:24:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Enn9R",
          "commit": {
            "abbreviatedOid": "ba1146b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:24:50Z",
          "updatedAt": "2022-10-21T16:24:51Z",
          "comments": [
            {
              "originalPosition": 248,
              "body": "```suggestion\r\nHowever, even if packets without a Connection ID are successfully received\r\n```",
              "createdAt": "2022-10-21T16:24:50Z",
              "updatedAt": "2022-10-21T16:24:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EnoMS",
          "commit": {
            "abbreviatedOid": "dffb5e9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:25:35Z",
          "updatedAt": "2022-10-21T16:25:35Z",
          "comments": [
            {
              "originalPosition": 251,
              "body": "```suggestion\r\navoids large ACK frames and ambiguity in loss detection and RTT estimation\r\n```",
              "createdAt": "2022-10-21T16:25:35Z",
              "updatedAt": "2022-10-21T16:25:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EnqM1",
          "commit": {
            "abbreviatedOid": "dadca89"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:32:32Z",
          "updatedAt": "2022-10-21T16:32:32Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "```suggestion\r\nif only the source address or port are different or if a specific\r\n```",
              "createdAt": "2022-10-21T16:32:32Z",
              "updatedAt": "2022-10-21T16:32:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EnqVy",
          "commit": {
            "abbreviatedOid": "dadca89"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:33:01Z",
          "updatedAt": "2022-10-21T16:33:01Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "```suggestion\r\nThe path ID for 1-RTT packets is the sequence number of the Connection ID\r\n```",
              "createdAt": "2022-10-21T16:33:01Z",
              "updatedAt": "2022-10-21T16:33:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EnqbX",
          "commit": {
            "abbreviatedOid": "dadca89"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-21T16:33:19Z",
          "updatedAt": "2022-10-21T16:33:20Z",
          "comments": [
            {
              "originalPosition": 362,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2022-10-21T16:33:19Z",
              "updatedAt": "2022-10-21T16:33:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5EtPTc",
          "commit": {
            "abbreviatedOid": "ab1cc20"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I don't think this is ready yet. We may need to agree on the broad lines first.",
          "createdAt": "2022-10-24T08:13:56Z",
          "updatedAt": "2022-10-24T08:13:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5G252x",
          "commit": {
            "abbreviatedOid": "1e719cb"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T18:57:19Z",
          "updatedAt": "2022-11-21T18:57:20Z",
          "comments": [
            {
              "originalPosition": 288,
              "body": "```suggestion\r\nas identified by the Path Identifier. However, an ACK_MP frame can be returned via either a\r\n```",
              "createdAt": "2022-11-21T18:57:20Z",
              "updatedAt": "2022-11-21T18:57:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5G27n_",
          "commit": {
            "abbreviatedOid": "849025f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T19:03:52Z",
          "updatedAt": "2022-11-21T19:03:52Z",
          "comments": [
            {
              "originalPosition": 287,
              "body": "```suggestion\r\nACK_MP frame (defined in {{ack-mp-frame}}) SHOULD be send on the same path\r\n```",
              "createdAt": "2022-11-21T19:03:52Z",
              "updatedAt": "2022-11-21T19:03:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5G273v",
          "commit": {
            "abbreviatedOid": "cde2cbc"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T19:04:49Z",
          "updatedAt": "2022-11-21T19:04:49Z",
          "comments": [
            {
              "originalPosition": 289,
              "body": "```suggestion\r\nas identified by the Path Identifier. However, an ACK_MP frame can be returned via a\r\ndifferent path, based on different strategies of sending ACK_MP frames.\r\n```",
              "createdAt": "2022-11-21T19:04:49Z",
              "updatedAt": "2022-11-21T19:04:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5G2-nm",
          "commit": {
            "abbreviatedOid": "eda6ba1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T19:14:58Z",
          "updatedAt": "2022-11-21T19:14:59Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "```suggestion\r\n  particular path.\r\n```",
              "createdAt": "2022-11-21T19:14:58Z",
              "updatedAt": "2022-11-21T19:14:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5KSaoj",
          "commit": {
            "abbreviatedOid": "d728ddb"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-12T19:19:41Z",
          "updatedAt": "2023-01-12T19:19:41Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "```suggestion\r\ndoes not contain a non-zero length connection ID, the receiver MUST treat this as a connection error of type\r\n```",
              "createdAt": "2023-01-12T19:19:41Z",
              "updatedAt": "2023-01-12T19:19:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5KVidg",
          "commit": {
            "abbreviatedOid": "1cb4df8"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Globally good to go, a few nits to fix before merging. Also, given the interoperability changes it involves, I suggest to already change the transport parameter value in this PR (see my specific comment below).",
          "createdAt": "2023-01-13T09:03:19Z",
          "updatedAt": "2023-01-13T09:48:57Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\ndue to a NAT rebinding), this is considered as a migration event and not\r\nas a new path.\r\n```",
              "createdAt": "2023-01-13T09:03:19Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 67,
              "body": "Maybe it can be addressed later, but given that the Path Identifier and the PNS ID are now always the same, we may simplify this section and only introduce one concept (i.e., the Path Identifier).",
              "createdAt": "2023-01-13T09:09:40Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 73,
              "body": "Given that we drop support for single packet number space and zero-length CID, we need to change the value of `enable_multipath`. Running a random generator gave me `0x0f739bbc1b666db9`, but we can of course choose another value (for instance, `0x0f739bbc1b666dXX` where `XX` is the draft version; the next version 04 of this document could use  `0x0f739bbc1b666d04`). The IANA table should be updated as well.",
              "createdAt": "2023-01-13T09:21:31Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 294,
              "body": "The added text conflicts with the latter one saying \"endpoints SHOULD use ACK_MP frames instead of ACK\", and I don't think receiving ACK frames to acknowledge path 0 is actually an issue. Maybe this would be better?\r\n```suggestion\r\nThe ACK_MP frame, as specified in {{ack-mp-frame}}, is used to\r\nacknowledge 1-RTT packets.\r\n```",
              "createdAt": "2023-01-13T09:27:01Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 306,
              "body": "Maybe clearer?\r\n```suggestion\r\nendpoints SHOULD use ACK_MP frames instead of ACK frames to acknowledge application\r\ndata packets, including 0-RTT packets, received on path ID 0 after the handshake concluded.\r\n```",
              "createdAt": "2023-01-13T09:34:01Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 318,
              "body": "No strong opinion here, but should the \"an ACK_MP frame can be returned\" be instead \"an ACK_MP frame MAY be returned\"?",
              "createdAt": "2023-01-13T09:35:42Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 337,
              "body": "```suggestion\r\nas specified in {{QUIC-TRANSPORT}}.  {{Section 19 of QUIC-TRANSPORT}}\r\n```",
              "createdAt": "2023-01-13T09:36:16Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            },
            {
              "originalPosition": 412,
              "body": "We can of course delegate this on a subsequent PR, but I think we should get rid of the `Identifier Type` for the PATH_ABANDON and PATH_STATUS frames. Also, I wonder it the value 1 should rather be the default (given #137).",
              "createdAt": "2023-01-13T09:38:21Z",
              "updatedAt": "2023-01-13T09:48:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5KbpsX",
          "commit": {
            "abbreviatedOid": "1cb4df8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-14T12:53:01Z",
          "updatedAt": "2023-01-14T12:53:02Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Yes, I was planning to raise a separate issue and PR after this one is merged. I think that would be cleaner.",
              "createdAt": "2023-01-14T12:53:02Z",
              "updatedAt": "2023-01-14T12:53:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Kbptz",
          "commit": {
            "abbreviatedOid": "1cb4df8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-14T12:53:40Z",
          "updatedAt": "2023-01-14T12:53:41Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "Yes, I agree that we need to change. Just need to decide which number.",
              "createdAt": "2023-01-14T12:53:41Z",
              "updatedAt": "2023-01-18T14:31:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5KbpyN",
          "commit": {
            "abbreviatedOid": "1cb4df8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-14T12:55:40Z",
          "updatedAt": "2023-01-14T12:55:41Z",
          "comments": [
            {
              "originalPosition": 318,
              "body": "No, the normative part is the active part (\"SHOULD send\"). This other sentence should not be normative because it's just explaining that this can happen and needs to be considered.",
              "createdAt": "2023-01-14T12:55:41Z",
              "updatedAt": "2023-01-14T12:55:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Kbpz4",
          "commit": {
            "abbreviatedOid": "1cb4df8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-14T12:56:28Z",
          "updatedAt": "2023-01-14T12:56:29Z",
          "comments": [
            {
              "originalPosition": 412,
              "body": "Yes, I was also planning to raise a separate issue and PR on this one after the merge.",
              "createdAt": "2023-01-14T12:56:28Z",
              "updatedAt": "2023-01-14T12:56:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5LLtCd",
          "commit": {
            "abbreviatedOid": "13e6610"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-19T09:00:04Z",
          "updatedAt": "2023-01-19T09:00:04Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "Just committed 13e6610576 to address this.",
              "createdAt": "2023-01-19T09:00:04Z",
              "updatedAt": "2023-01-19T09:00:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5LLtQz",
          "commit": {
            "abbreviatedOid": "13e6610"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "With my added commit (13e661057), LGTM. @mirjak, could you just double-check it? If this is ok, I think we can merge.",
          "createdAt": "2023-01-19T09:00:41Z",
          "updatedAt": "2023-01-19T09:03:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5LKt3X",
          "commit": {
            "abbreviatedOid": "13e6610"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-19T04:30:01Z",
          "updatedAt": "2023-01-20T04:35:55Z",
          "comments": [
            {
              "originalPosition": 356,
              "body": "The figure needs to be modified. Now we only have one path ID type, which I think is cleaner. I will submit another PR to update the figure accordingly once this PR is merged",
              "createdAt": "2023-01-19T04:30:01Z",
              "updatedAt": "2023-01-20T04:35:55Z"
            },
            {
              "originalPosition": 50,
              "body": "I agree. Now we remove zero-length CID and the path ID's definition is more clear and we don't need to consider alternative definitions.",
              "createdAt": "2023-01-19T04:34:26Z",
              "updatedAt": "2023-01-20T04:35:55Z"
            },
            {
              "originalPosition": 67,
              "body": "> Maybe it can be addressed later, but given that the Path Identifier and the PNS ID are now always the same, we may simplify this section and only introduce one concept (i.e., the Path Identifier).\r\n\r\nI agree. This will further simplify the concepts people need to digest.",
              "createdAt": "2023-01-19T04:35:39Z",
              "updatedAt": "2023-01-20T04:35:55Z"
            },
            {
              "originalPosition": 317,
              "body": "SHOULD be send -> SHOULD be sent",
              "createdAt": "2023-01-19T04:40:35Z",
              "updatedAt": "2023-01-20T04:35:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5LYDAM",
          "commit": {
            "abbreviatedOid": "ebb1a36"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Yes, I approve. It looks very much like I remember of my first review of this PR, with nice fixes.",
          "createdAt": "2023-01-21T06:39:19Z",
          "updatedAt": "2023-01-21T06:39:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 156,
      "id": "PR_kwDOGNtpaM5IRppS",
      "title": "Remove identifier type",
      "url": "https://github.com/quicwg/multipath/pull/156",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #155",
      "createdAt": "2023-01-22T12:37:53Z",
      "updatedAt": "2024-03-12T16:19:09Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "7ae9ca752468438613029fdb4d30d6197de13cb4",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-9",
      "headRefOid": "a663f5acf6a396f12811ca3fd4c625f62c3cd161",
      "closedAt": "2023-01-31T03:16:53Z",
      "mergedAt": "2023-01-31T03:16:53Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9e53ad51ce2762555bb18f0f73f93a310b4947fb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5LYr2d",
          "commit": {
            "abbreviatedOid": "62f3452"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-22T12:39:41Z",
          "updatedAt": "2023-01-22T12:39:42Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "```suggestion\r\nPath Identifier:\r\n```",
              "createdAt": "2023-01-22T12:39:41Z",
              "updatedAt": "2023-01-22T12:39:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5LYr24",
          "commit": {
            "abbreviatedOid": "62f3452"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-22T12:39:53Z",
          "updatedAt": "2023-01-22T12:39:53Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "```suggestion\r\non any path, not only the path identified by the Packet Number Space\r\n```",
              "createdAt": "2023-01-22T12:39:53Z",
              "updatedAt": "2023-01-22T12:39:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Lam1N",
          "commit": {
            "abbreviatedOid": "f493cc8"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I agree that we could simplify the Path Identifier field and remove the type of it, but it's a little confusing using both Path Identifier and PNS Identifier in the PATH_STATUS / PATH_ABANDON Frame format.\r\n\r\nI suggest using Path Identifier(i) in PATH_STATUS / PATH_ABANDON Frame, using Packet Number Space Identifier in ACK_MP and 1-RTT packets.",
          "createdAt": "2023-01-23T09:43:40Z",
          "updatedAt": "2023-01-23T10:11:21Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "_Path Identifier (i),_ ",
              "createdAt": "2023-01-23T10:00:35Z",
              "updatedAt": "2023-01-23T10:11:21Z"
            },
            {
              "originalPosition": 98,
              "body": "_Path Identifier (i),_",
              "createdAt": "2023-01-23T10:00:52Z",
              "updatedAt": "2023-01-23T10:11:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5La3LP",
          "commit": {
            "abbreviatedOid": "f493cc8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T10:26:05Z",
          "updatedAt": "2023-01-23T10:26:05Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "That was an oversight. Fixed now! Thanks!",
              "createdAt": "2023-01-23T10:26:05Z",
              "updatedAt": "2023-01-23T10:26:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5LbQrF",
          "commit": {
            "abbreviatedOid": "a663f5a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good to me",
          "createdAt": "2023-01-23T11:39:06Z",
          "updatedAt": "2023-01-23T11:39:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 161,
      "id": "PR_kwDOGNtpaM5I1LcG",
      "title": "Move most text of former PNS/CID section to where it belongs",
      "url": "https://github.com/quicwg/multipath/pull/161",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is the first PR of 3-4 editorial passes I'm planning to do. This first PR only move existing text into the right place. I did not change anything in the text (except the section heading).\r\n\r\nThe next round will move some sections entirely (e.g. section on congestion control, RTT calculation, packet scheduling could maybe go into the implementation considerations) and then I'm planning to do a full edit pass at the end to check consistency. Would be great if we could review and merge this one soon, so I can move on with the next one. I'm keeping those PRs separately so it is easier to follow the changes.",
      "createdAt": "2023-01-30T16:12:24Z",
      "updatedAt": "2024-03-12T16:19:08Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "7ae9ca752468438613029fdb4d30d6197de13cb4",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-10",
      "headRefOid": "90ca3345a1c3b93abe7f2c796285c81b53c6fa64",
      "closedAt": "2023-02-01T09:24:26Z",
      "mergedAt": "2023-02-01T09:24:25Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "528e7f076203f05db2be891a6fa026b478e91bb4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5MNA6S",
          "commit": {
            "abbreviatedOid": "90ca334"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Basically very useful restructure. Looks good to me. ",
          "createdAt": "2023-02-01T06:08:29Z",
          "updatedAt": "2023-02-01T06:15:56Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I'd suggest that we only keep Line 192 to 194, it's useful for readers to understand the initial path identifier.\r\nLine 195 to 197 is very similar with the definition of Path Identifier in Line 175 to 177.\r\n",
              "createdAt": "2023-02-01T06:08:30Z",
              "updatedAt": "2023-02-01T06:15:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5MNv_5",
          "commit": {
            "abbreviatedOid": "90ca334"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Loos good to me:)",
          "createdAt": "2023-02-01T08:56:45Z",
          "updatedAt": "2023-02-01T08:56:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5MN1sp",
          "commit": {
            "abbreviatedOid": "90ca334"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T09:11:13Z",
          "updatedAt": "2023-02-01T09:11:14Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I'm planning to do that in a separate PR when we also remove the PNS ID (and only have path ID).",
              "createdAt": "2023-02-01T09:11:13Z",
              "updatedAt": "2023-02-01T09:11:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5MN6cS",
          "commit": {
            "abbreviatedOid": "90ca334"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T09:22:54Z",
          "updatedAt": "2023-02-01T09:22:54Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "That's ok.",
              "createdAt": "2023-02-01T09:22:54Z",
              "updatedAt": "2023-02-01T09:22:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 163,
      "id": "PR_kwDOGNtpaM5JMg88",
      "title": "Move sections to impl consideration and new section heading on MPNSes",
      "url": "https://github.com/quicwg/multipath/pull/163",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Restructuring part II:\r\n- This moves section on congestion control, packet scheduling, RTT calculation, and retransmission into the implementation guidance. These section don't contain normative language but only guidance (expect the congestion control one but that should probably be removed or potentially moved, see issue #162). None of the text is changed.\r\n- Add a new section heading on \"multipath operation with MPNSes\" that clusters the sections on ack handling and protection as those things are impacted (normatively) by the introduction of MPNSes. No changes in the text accept some intro sentences to this new section heading.",
      "createdAt": "2023-02-03T11:39:09Z",
      "updatedAt": "2024-03-12T16:19:08Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "528e7f076203f05db2be891a6fa026b478e91bb4",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-11",
      "headRefOid": "e61dbe79caa2692872e1396e5d982646b5872bf0",
      "closedAt": "2023-02-07T15:57:25Z",
      "mergedAt": "2023-02-07T15:57:25Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5MnRUY",
          "commit": {
            "abbreviatedOid": "2fa205f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Minor typos, otherwise LGTM.",
          "createdAt": "2023-02-06T14:55:39Z",
          "updatedAt": "2023-02-06T14:58:02Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nThe QUIC multipath extension uses different packet number spaces for each path.\r\n```",
              "createdAt": "2023-02-06T14:55:39Z",
              "updatedAt": "2023-02-06T14:58:03Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nthe ACK frame as well as packet protection as described in the following subsections.\r\n```",
              "createdAt": "2023-02-06T14:56:08Z",
              "updatedAt": "2023-02-06T14:58:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5MnSsR",
          "commit": {
            "abbreviatedOid": "2fa205f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-06T14:58:30Z",
          "updatedAt": "2023-02-06T14:58:31Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n- PATH_STATUS frame to express a preference in path usage\r\n```",
              "createdAt": "2023-02-06T14:58:30Z",
              "updatedAt": "2023-02-06T14:58:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 165,
      "id": "PR_kwDOGNtpaM5J83z0",
      "title": "Fix path closure example with path ID",
      "url": "https://github.com/quicwg/multipath/pull/165",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #164",
      "createdAt": "2023-02-14T14:39:57Z",
      "updatedAt": "2024-03-12T16:19:06Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-12",
      "headRefOid": "74a1e54d828779a9a5a4a245ed50d7be0cd8d48d",
      "closedAt": "2023-02-22T03:07:37Z",
      "mergedAt": "2023-02-22T03:07:37Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "35be46139cae685f894ae57aa054725ed87977bc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5NbWRE",
          "commit": {
            "abbreviatedOid": "35c5cc8"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I would also suggest to slightly update the text related to the `Path ID` field of the PATH_ABANDON and PATH_STATUS frames to indicate it refers to the sender's Path ID.",
          "createdAt": "2023-02-15T08:30:40Z",
          "updatedAt": "2023-02-15T08:32:34Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nnumber of the DCID it uses for sending packets over that path,\r\n```",
              "createdAt": "2023-02-15T08:30:40Z",
              "updatedAt": "2023-02-15T08:32:34Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nthe sequence number of the DCID it uses to send over that path as path\r\n```",
              "createdAt": "2023-02-15T08:31:07Z",
              "updatedAt": "2023-02-15T08:32:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5NwK9U",
          "commit": {
            "abbreviatedOid": "35c5cc8"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-02-18T04:06:27Z",
          "updatedAt": "2023-02-18T04:09:14Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\n1-RTT[U]: DCID=S3 RETIRE_CONNECTION_ID[2], ACK_MP[Seq=1, PN=Y] ->\r\n```\r\nClient wants to retire DCID S2, so the sequence number field in the retire_connection_ID should be 2.",
              "createdAt": "2023-02-18T04:06:27Z",
              "updatedAt": "2023-02-18T04:09:14Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n <- 1-RTT[V]: DCID=C2 RETIRE_CONNECTION_ID[1], ACK_MP[Seq=3, PN=U]\r\n```\r\nServer wants to retire DCID C1, so the sequence number field in the retire_connection_ID should be 1.",
              "createdAt": "2023-02-18T04:09:03Z",
              "updatedAt": "2023-02-18T04:09:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N7IJ_",
          "commit": {
            "abbreviatedOid": "35c5cc8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T12:50:57Z",
          "updatedAt": "2023-02-21T12:50:57Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Yes, I guess that was wrong in the example.",
              "createdAt": "2023-02-21T12:50:57Z",
              "updatedAt": "2023-02-21T12:50:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N_WYp",
          "commit": {
            "abbreviatedOid": "74a1e54"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-02-22T03:03:55Z",
          "updatedAt": "2023-02-22T03:03:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 166,
      "id": "PR_kwDOGNtpaM5J87SE",
      "title": "Do not use normative language for congestion control",
      "url": "https://github.com/quicwg/multipath/pull/166",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "as this is already stated normatively in RFC900.\r\n\r\nfixes #162",
      "createdAt": "2023-02-14T14:50:01Z",
      "updatedAt": "2024-03-12T16:19:07Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-13",
      "headRefOid": "1d27014ebbb83e391a4a620030d4dcdcf6074b69",
      "closedAt": "2023-02-22T03:07:49Z",
      "mergedAt": "2023-02-22T03:07:49Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "d518bf502455639efa82cfacd239b63f9c845602"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5NWqeY",
          "commit": {
            "abbreviatedOid": "e6cef4f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-14T15:03:42Z",
          "updatedAt": "2023-02-14T15:03:42Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nWhen the QUIC multipath extension is used, senders manage per-path\r\n```",
              "createdAt": "2023-02-14T15:03:42Z",
              "updatedAt": "2023-02-14T15:03:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5NWqiO",
          "commit": {
            "abbreviatedOid": "e6cef4f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-14T15:03:49Z",
          "updatedAt": "2023-02-14T15:03:50Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nThis means a sender is not allowed to send more data on a given path\r\n```",
              "createdAt": "2023-02-14T15:03:49Z",
              "updatedAt": "2023-02-14T15:03:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5NbX7S",
          "commit": {
            "abbreviatedOid": "d5abd04"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-02-15T08:35:05Z",
          "updatedAt": "2023-02-15T08:35:12Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nThis means a sender is not allowed sending more data on a given path\r\n```",
              "createdAt": "2023-02-15T08:35:05Z",
              "updatedAt": "2023-02-15T08:35:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N7Gbd",
          "commit": {
            "abbreviatedOid": "71117bc"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T12:45:57Z",
          "updatedAt": "2023-02-21T12:45:58Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nThis means a sender is not allowed to send more data on a given path\r\n```",
              "createdAt": "2023-02-21T12:45:58Z",
              "updatedAt": "2023-02-21T12:45:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N_WyY",
          "commit": {
            "abbreviatedOid": "1d27014"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-02-22T03:06:49Z",
          "updatedAt": "2023-02-22T03:06:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 167,
      "id": "PR_kwDOGNtpaM5J9H9d",
      "title": "Remove PNS ID",
      "url": "https://github.com/quicwg/multipath/pull/167",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #154",
      "createdAt": "2023-02-14T15:22:02Z",
      "updatedAt": "2024-03-12T16:19:05Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "d518bf502455639efa82cfacd239b63f9c845602",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-14",
      "headRefOid": "c6acdac98bef3bd346be5df344ab2d8d85a9b745",
      "closedAt": "2023-02-22T07:57:16Z",
      "mergedAt": "2023-02-22T07:57:16Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "19559ddc93c93503e6d22ab8a98d482ae01df547"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5NW1Zz",
          "commit": {
            "abbreviatedOid": "1d86e24"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-14T15:24:21Z",
          "updatedAt": "2023-02-14T15:24:22Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n  processed with the path ID 0. For 1-RTT packets, the path ID is the\r\n```",
              "createdAt": "2023-02-14T15:24:21Z",
              "updatedAt": "2023-02-14T15:24:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5NbYbF",
          "commit": {
            "abbreviatedOid": "9d5d455"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Sounds good.",
          "createdAt": "2023-02-15T08:36:27Z",
          "updatedAt": "2023-02-15T08:40:11Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\n  in multipath control frames (e.g., PATH_ABANDON frame) to identify\r\n```",
              "createdAt": "2023-02-15T08:36:27Z",
              "updatedAt": "2023-02-15T08:40:12Z"
            },
            {
              "originalPosition": 63,
              "body": "```suggestion\r\nThe Path ID is used to distinguish packet number spaces for different\r\n```",
              "createdAt": "2023-02-15T08:37:41Z",
              "updatedAt": "2023-02-15T08:40:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N_obK",
          "commit": {
            "abbreviatedOid": "c6acdac"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The conflict was solved. LGTM.",
          "createdAt": "2023-02-22T04:56:37Z",
          "updatedAt": "2023-02-22T04:56:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 168,
      "id": "PR_kwDOGNtpaM5KU-iM",
      "title": "Clarify supported scenarios",
      "url": "https://github.com/quicwg/multipath/pull/168",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #159.",
      "createdAt": "2023-02-20T10:02:44Z",
      "updatedAt": "2023-02-22T05:02:31Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "ip-addresses",
      "headRefOid": "c8fb94520569292e0e6be171442a8bb938bbcc01",
      "closedAt": "2023-02-22T05:02:30Z",
      "mergedAt": "2023-02-22T05:02:30Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "5be2002035635fc6b021ebc3cf90b0267aef3fb0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5N7EAS",
          "commit": {
            "abbreviatedOid": "c8fb945"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-21T12:38:46Z",
          "updatedAt": "2023-02-21T12:38:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5N_mg2",
          "commit": {
            "abbreviatedOid": "c8fb945"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-22T04:43:19Z",
          "updatedAt": "2023-02-22T04:43:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5N_pVT",
          "commit": {
            "abbreviatedOid": "c8fb945"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-02-22T05:02:25Z",
          "updatedAt": "2023-02-22T05:02:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 171,
      "id": "PR_kwDOGNtpaM5Kbjcy",
      "title": "What happens when a CID is retired and no new CID is available anymore",
      "url": "https://github.com/quicwg/multipath/pull/171",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-02-21T13:33:52Z",
      "updatedAt": "2024-03-12T16:18:48Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-15",
      "headRefOid": "856e09ed21aefb9de055229ffa1e4996ee8c7f30",
      "closedAt": "2023-03-10T12:23:00Z",
      "mergedAt": "2023-03-10T12:23:00Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "b167a40457ebcdb48b0b0d28c37af3a291a81932"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "After author discussion: we need to also add a sentence about control frames",
          "createdAt": "2023-03-03T16:13:29Z",
          "updatedAt": "2023-03-03T16:13:29Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems ready to merge. Plan is to merge end of tomorrow (Friday).",
          "createdAt": "2023-03-09T11:22:06Z",
          "updatedAt": "2023-03-09T11:22:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5N8CDw",
          "commit": {
            "abbreviatedOid": "cd1c6ac"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T14:49:29Z",
          "updatedAt": "2023-02-21T14:49:30Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nE.g this can happen if the Connection ID issuer requests retirement of a\r\n```",
              "createdAt": "2023-02-21T14:49:29Z",
              "updatedAt": "2023-02-21T14:49:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N_qTC",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-22T05:08:45Z",
          "updatedAt": "2023-02-22T05:08:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5OATbw",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "We definitely need to add some text to better explain what happens in such cases, but I think we need to be a bit clearer on the implicit path closure case (as we may want to explicitly close an available path before idle timeout).",
          "createdAt": "2023-02-22T08:04:22Z",
          "updatedAt": "2023-02-22T08:11:56Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nThis can happen if, e.g., the Connection ID issuer requests retirement of a\r\n```",
              "createdAt": "2023-02-22T08:04:22Z",
              "updatedAt": "2023-02-22T08:11:56Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nConnection ID using the Retire Prior To field in the NEW_CONNECTION_ID frame.\r\n```",
              "createdAt": "2023-02-22T08:04:34Z",
              "updatedAt": "2023-02-22T08:11:56Z"
            },
            {
              "originalPosition": 15,
              "body": "I'm not sure that the endpoint \"has to wait\" the idle timeout to close the path. I could also send a PATH_ABANDON to explicitly close the path, right? Instead, do we want to state here that an inactivity larger than the idle timeout implies an implicit path closure?",
              "createdAt": "2023-02-22T08:08:35Z",
              "updatedAt": "2023-02-22T08:11:56Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nthe path. If another active path is available, the enpoint can re-activate\r\n```",
              "createdAt": "2023-02-22T08:08:46Z",
              "updatedAt": "2023-02-22T08:11:56Z"
            },
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nthe path before the timer expires if a new Connection ID gets issued\r\n```",
              "createdAt": "2023-02-22T08:08:56Z",
              "updatedAt": "2023-02-22T08:11:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OAYBR",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-22T08:17:09Z",
          "updatedAt": "2023-02-22T08:17:09Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Currently it can't send an PATH_ABANDON because if we don't have a CID we don't have a valid path ID.",
              "createdAt": "2023-02-22T08:17:09Z",
              "updatedAt": "2023-02-22T08:17:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OAZuP",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-22T08:21:18Z",
          "updatedAt": "2023-02-22T08:21:19Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Oh indeed, I went too quick on this one :-)",
              "createdAt": "2023-02-22T08:21:18Z",
              "updatedAt": "2023-02-22T08:21:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OAZ75",
          "commit": {
            "abbreviatedOid": "3ce3fdd"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-22T08:21:54Z",
          "updatedAt": "2023-02-22T08:21:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5OAbfE",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-22T08:26:08Z",
          "updatedAt": "2023-02-22T08:26:09Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I do mention this issue in #169",
              "createdAt": "2023-02-22T08:26:09Z",
              "updatedAt": "2023-02-22T08:26:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OA2m3",
          "commit": {
            "abbreviatedOid": "5f6f2f7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-22T09:31:40Z",
          "updatedAt": "2023-02-22T09:31:41Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Actually we could say that the endpoint should first send the path abandoned frame and then the retire CID frame. However, those frames probably don't have to be processed in order and we need to address issue #137 properly. Or alternative you have to wait until the path abandoned frame is ack'ed and then send the retire CID frame but that would introduce a delay. Not sure how bad that is.",
              "createdAt": "2023-02-22T09:31:40Z",
              "updatedAt": "2023-02-22T09:31:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEdf7",
          "commit": {
            "abbreviatedOid": "3ce3fdd"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:32:54Z",
          "updatedAt": "2023-03-06T15:32:55Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nthis path and is not able to send control frames associated to this path anymore.\r\nHowever, it can still acknowledge packets received on the path, by sending ACK_MP frames \r\non another path, if available. If no data is received on this path, the idle time-out will close\r\nthe path. The endpoint can re-activate the path if a new Connection ID gets issued\r\nby its peer over another path before the idle timer expires.\r\n```",
              "createdAt": "2023-03-06T15:32:54Z",
              "updatedAt": "2023-03-06T15:32:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PKAoT",
          "commit": {
            "abbreviatedOid": "f09feef"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T09:56:27Z",
          "updatedAt": "2023-03-07T10:08:48Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Trailing whitespace\r\n```suggestion\r\nHowever, it can still acknowledge packets received on the path, by sending ACK_MP frames\r\n```",
              "createdAt": "2023-03-07T09:56:27Z",
              "updatedAt": "2023-03-07T10:08:48Z"
            },
            {
              "originalPosition": 15,
              "body": "Given the clarification in #185, Multipath control frames include the DCID sequence number used by their peer. So if an endpoint sends a RETIRE_CONNECTION_ID, it cannot send on that path anymore if it does not have spare CIDs anymore. But when the receiver receives the RETIRE_CONNECTION_ID (which may have issued the NEW_CONNECTION_ID with the increased Retire Prior To beforehand), it cannot send control frames related to that path anymore. I think there is a difference here w.r.t. the current text.",
              "createdAt": "2023-03-07T10:06:01Z",
              "updatedAt": "2023-03-07T10:08:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PV5E9",
          "commit": {
            "abbreviatedOid": "1665915"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T17:35:20Z",
          "updatedAt": "2023-03-08T17:35:21Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "This paragraph is still correct but doesn't fit perfectly anymore. I guess we could try to reword now or later...",
              "createdAt": "2023-03-08T17:35:21Z",
              "updatedAt": "2023-03-08T17:35:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PaXNZ",
          "commit": {
            "abbreviatedOid": "1665915"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I think we are nearly good, I just suggest to remove a (maybe wrong) precision.",
          "createdAt": "2023-03-09T09:12:54Z",
          "updatedAt": "2023-03-09T09:20:22Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nshould not use the sequence number of the retired Connection ID anymore in\r\n```",
              "createdAt": "2023-03-09T09:12:54Z",
              "updatedAt": "2023-03-09T09:20:22Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\na path and will therefore ignore them. This means an endpoint is also not required\r\n```",
              "createdAt": "2023-03-09T09:15:15Z",
              "updatedAt": "2023-03-09T09:20:22Z"
            },
            {
              "originalPosition": 38,
              "body": "Actually, the peer could still be able to send packets on the path the endpoint does not have DCID anymore. The \"over another path\" is hence not necessarily true.\r\n\r\n```suggestion\r\nby its peer, the endpoint can re-activate the path by\r\n```",
              "createdAt": "2023-03-09T09:19:16Z",
              "updatedAt": "2023-03-09T09:20:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pb7Cl",
          "commit": {
            "abbreviatedOid": "856e09e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-09T12:35:49Z",
          "updatedAt": "2023-03-09T12:35:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5PdpLy",
          "commit": {
            "abbreviatedOid": "856e09e"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Yes, this looks good. ",
          "createdAt": "2023-03-09T16:00:43Z",
          "updatedAt": "2023-03-09T16:00:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 172,
      "id": "PR_kwDOGNtpaM5Kb8XD",
      "title": "Clarifications on connection migration",
      "url": "https://github.com/quicwg/multipath/pull/172",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #160\r\n\r\nAs I added this text into the implementation consideration section, I on purpose did not use normative language. However, we might want to double check that the normative language we used elsewhere in the document is covering this appropriately.",
      "createdAt": "2023-02-21T14:46:54Z",
      "updatedAt": "2024-03-12T16:18:47Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-16",
      "headRefOid": "766a7dd2c5917d13e275cab1515174d2e3765225",
      "closedAt": "2023-03-10T14:16:43Z",
      "mergedAt": "2023-03-10T14:16:43Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "16584b2d63a0d867cf8efd6d5f768f1a18138363"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The current text is ready to merge. There is a remaining question about proposed additional text. If we don't conclude until end of tomorrow (Friday), we will merge as is (without the addition) and create a new PR/issue for that addition instead.",
          "createdAt": "2023-03-09T11:28:02Z",
          "updatedAt": "2023-03-09T11:28:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5OcD4R",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I don't think that I agree.",
          "createdAt": "2023-02-27T16:37:51Z",
          "updatedAt": "2023-02-27T16:38:14Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "I don't think we need this. I would like to ensure that the handling of paths is pretty much the same as RFC 9000, at least when we have only one path. NAT rebinding is a key scenario in RFC 9000, and we should keep it as is. In particular, if we see a packet arrives with a CID already in use on path N but a different 4 tuple, we should absolutely treat that as NAT rebinding.",
              "createdAt": "2023-02-27T16:37:51Z",
              "updatedAt": "2023-02-27T16:38:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OcUoM",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T17:16:50Z",
          "updatedAt": "2023-02-27T17:16:50Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "First, I don't think it is true that this is not aligned with RFC9000 because there is always just one path in RFC9000. However, the problem is that in RFC9000 both ends don't need a common understanding of the path but now they do, so we need to address this. In our definition in this draft every 4-tuple is a different path and sticking to that makes it less complicated. The problem with NAT rebinding is that only one end see a new 4-tuple. As such we need an explicit signal to tell the other end to create a new path. I propose to simple use path validation for this (to keep change minimal).\r\n\r\nIf you are concerned about resetting the congestion window, we can say that the new path can be initialisierend with the cc values from the old path if only the source port changes.",
              "createdAt": "2023-02-27T17:16:50Z",
              "updatedAt": "2023-02-27T17:16:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OgINu",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't think the added text is right.",
          "createdAt": "2023-02-28T08:51:00Z",
          "updatedAt": "2023-02-28T09:20:59Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nIn this case the server performs path validation (see {{Section 9 of QUIC-TRANSPORT}})\r\n```",
              "createdAt": "2023-02-28T08:51:00Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            },
            {
              "originalPosition": 10,
              "body": "I'm not sure the client is always expected to change its CID when experiencing NAT rebinding, as by definition it does not observe any 4-tuple change (while the server does, of course). In particular, I'm not sure how the client could even notice that. Relying on the reception of a PATH_CHALLENGE after some time is probably too reactive, as a server may periodically probe its network paths (i.e., receiving a path challenge from the server does not necessarily indicates it saw a NAT rebinding).",
              "createdAt": "2023-02-28T08:55:18Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nEven is the path validation is caused by a migration event, when\r\n```",
              "createdAt": "2023-02-28T08:56:02Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            },
            {
              "originalPosition": 15,
              "body": "I don't think this is right. The reception of a new PATH_CHALLENGE should not create a new path, especially if the perceived 4-tuple remains the same.",
              "createdAt": "2023-02-28T08:57:53Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            },
            {
              "originalPosition": 17,
              "body": "I definitely agree with the common share view on the number of active paths, but I will relax this that \"within some time (ideally 1 RTT), end hosts should eventually have the same view\".\r\n\r\nDuring a NAT rebinding event, if the CID previously used remains the same, the server can consider this new 4-tuple as the updated 4-tuple of the previously used path. However, if both the 4-tuple and the CID change, the server will interpret this as a brand new path (while the client does not). The server would then maintain a no-more functioning path (the old 4-tuple), which is not desirable.",
              "createdAt": "2023-02-28T09:09:25Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            },
            {
              "originalPosition": 34,
              "body": "Also, I don't think we should consider two different CIDs using the same perceived 4-tuple as two different paths. This should just be considered as a CID rotation over a given path. We could specify at some place that \"the sequence number of the DCID used over a path MUST be greater or equal to the one currently in use\" to avoid flipping the CID on a path.\r\n\r\nAnd as mentioned in a previous comment, I don't think we should consider the reception of a PATH_CHALLENGE as an automatic path creation, as end hosts may probe existing paths. It also raises the concerns of an end hosts sending multiple PATH_CHALLENGEs over a path to cope with possible packet losses (these should not be considered as multiple paths).",
              "createdAt": "2023-02-28T09:19:54Z",
              "updatedAt": "2023-02-28T09:20:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OhKWr",
          "commit": {
            "abbreviatedOid": "2ee092d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-28T11:23:23Z",
          "updatedAt": "2023-02-28T11:23:23Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "My thinking was that if you receive a path challenge from the server, you should treat this as a \"request\" to open a new path and thus use a new CID even if the 4-tuple seem to correspond to an existing path.\r\n\r\nHowever, thinking further I guess you also have to close the existing path at the same time as you should not have two paths with the same 4-tuple. Thus the client MUST send a path abandon frame for the old path.",
              "createdAt": "2023-02-28T11:23:23Z",
              "updatedAt": "2023-02-28T11:23:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OhOAb",
          "commit": {
            "abbreviatedOid": "2ee092d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-28T11:34:08Z",
          "updatedAt": "2023-02-28T11:35:44Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I think this is something we need to decide.\r\n\r\nThe problem is that the server sees a new 4-tuple but the client not, so we need to make clear if this creates a new path or not in such a way that both ends come to the same conclusion.\r\n\r\nYou could also say it's not a new path if on server side the 4-tuple changes but not the CID and on client side a path challenge (with new CID) is received on an existing 4-tuple. However, you still need to reset congestion control in most cases, so I thought it was easier to just create a new path. ",
              "createdAt": "2023-02-28T11:34:08Z",
              "updatedAt": "2023-02-28T11:35:44Z"
            },
            {
              "originalPosition": 17,
              "body": "If both the 4-tuple and the CID changes, the client should send a path challenge in that packet to explicitly open a new path. Otherwise the server should probably ignore that packet as it can't associate it to an exiting path. Maybe something we should also spell out more clearly.",
              "createdAt": "2023-02-28T11:35:38Z",
              "updatedAt": "2023-02-28T11:35:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Op180",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T10:57:26Z",
          "updatedAt": "2023-03-01T10:57:26Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Actually ignoring might not be right to address this change where you restart after an idle period with a new CID and then also the NAT rebinding happens... however, it would be the same procedure as in the case when the CID not changes after a NAT rebinding: the server sends a path challenge frame and that would be the signal for the client to assign a new path and use a new CID + close the old path on the presumedly same 4-tuple from the client's point of view.",
              "createdAt": "2023-03-01T10:57:26Z",
              "updatedAt": "2023-03-01T10:57:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O5s2h",
          "commit": {
            "abbreviatedOid": "2ee092d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T12:50:59Z",
          "updatedAt": "2023-03-03T12:50:59Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "And you still need to address the case where both the CID and the 4-tuple changes. As you can't decide to which existing path you should assign this packet, I guess you have to assume it's a new path. Therefore it better if the client also opens a new path when it received the path challenge and explicitly closes the old path. ",
              "createdAt": "2023-03-03T12:50:59Z",
              "updatedAt": "2023-03-03T12:50:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PFNE1",
          "commit": {
            "abbreviatedOid": "13477ea"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:58:37Z",
          "updatedAt": "2023-03-06T16:58:37Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I updated the text but I'm not really happy here. The server has to assume a new path if it can't associate a packet with new CID and new 4-tuple to an existing path but it might still try to use the old path to send data. Those packets will then be lost and it takes a timeout to detect that this is a the case. Isn't there a way for the client to say: ups I received a path validation even though I din't know my address change, so please don't send data using this old CID anymore because it's actually the same path...?",
              "createdAt": "2023-03-06T16:58:37Z",
              "updatedAt": "2023-03-06T16:58:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PF3Qw",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T18:08:39Z",
          "updatedAt": "2023-03-06T18:08:39Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "We should not associate a state change with receiving a path challenge. Path challenges can be sent at any time to verify continuity.",
              "createdAt": "2023-03-06T18:08:39Z",
              "updatedAt": "2023-03-06T18:08:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PF5a0",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T18:12:45Z",
          "updatedAt": "2023-03-06T18:12:45Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "The node that renewed the CID will deduce the path change from invoming traffic on same (incoming) CID and new 4-tuple. It can at any point abandon the old path or retire the old CID.",
              "createdAt": "2023-03-06T18:12:45Z",
              "updatedAt": "2023-03-06T18:12:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGC_x",
          "commit": {
            "abbreviatedOid": "6d5168e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T18:36:49Z",
          "updatedAt": "2023-03-06T18:36:50Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "The problem is that after removing the type we used the sender\u2019s cid in the abandon frame and then this doesn\u2019t work as the client only sees one path. However I think we need to fix that an then recommend to send an abandon frame for the old received cid.",
              "createdAt": "2023-03-06T18:36:49Z",
              "updatedAt": "2023-03-06T18:36:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGXeF",
          "commit": {
            "abbreviatedOid": "13477ea"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I don't think that this is ready. I would suggest to not have a migration section, but instead have two sections for NAT Rebinding and CID renewal.",
          "createdAt": "2023-03-06T19:36:24Z",
          "updatedAt": "2023-03-06T20:06:10Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "I don't understand what is meant by \"As such a sole change of the Connection\r\nID without any change in the address does indiacte a path.\" Maybe remove that part.",
              "createdAt": "2023-03-06T19:36:24Z",
              "updatedAt": "2023-03-06T20:06:11Z"
            },
            {
              "originalPosition": 15,
              "body": "Migration in RFC 9000 means \"move from sending and receiving on path 1 to sending and receiving on path 2\". I think that multipath implementation just replaces the RFC 9000 concept to \"migration\", replacing it by a multiphase process in which path 2 is explicitly tried and validated, and then path 1 might be kept going, or might be explicitly abandoned if not useful any more.\r\n\r\nWe are discussing here two exceptions to that process: NAT Rebinding, and CID renewal. Mabe we should make that into two sections, instead of a single migration section.",
              "createdAt": "2023-03-06T20:04:38Z",
              "updatedAt": "2023-03-06T20:06:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PUIKq",
          "commit": {
            "abbreviatedOid": "13477ea"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T13:32:50Z",
          "updatedAt": "2023-03-08T13:33:04Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "I wonder if the following would make it more clear by avoiding the notion of \"migration\".\r\n\r\nNote that I think we could have a better behaviour in the case \"both 4-tuple and CID change\", but I would prefer delegating this to a later issue.\r\n```suggestion\r\n## NAT Rebinding {nat-rebinding}\r\n\r\nWhile endpoints assign a Connection ID to a specific sending 4-tuple,\r\nnetworks events such as NAT rebinding may make the packet's receiver\r\nperceives a different 4-tuple. Servers observing 4-tuple changes must\r\ninitiate path validation. If the path validation process succeeds, the\r\nendpoint follows considerations of {{Section 9.4 of QUIC-TRANSPORT}}.\r\n\r\n## CID Renewal\r\n\r\nAt any time, endpoints may change the Connection ID they use to send\r\npackets on a path. Such a path can keep the same congestion control\r\nstate and RTT measurements.\r\n\r\nIf an endpoint uses a new Connection ID after an idle period\r\nand a NAT rebinding leads to a 4-tuple changes on the same packet,\r\nthe receiving endpoint may not be able to associate the packet to\r\nan existing path and will therefore consider this as a new path.\r\nThis leads to an inconsistent view of open paths at both peers,\r\nhowever, as the \"old\" path will not work anymore, it will be silently\r\nclosed after the idle timeout expires.\r\n\r\n```",
              "createdAt": "2023-03-08T13:32:50Z",
              "updatedAt": "2023-03-08T13:33:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PVnVx",
          "commit": {
            "abbreviatedOid": "13477ea"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T16:51:24Z",
          "updatedAt": "2023-03-08T16:51:25Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "sorry missing words... \"does not indicate a path change.\"",
              "createdAt": "2023-03-08T16:51:24Z",
              "updatedAt": "2023-03-08T16:51:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PVnuG",
          "commit": {
            "abbreviatedOid": "13477ea"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T16:52:17Z",
          "updatedAt": "2023-03-08T16:52:17Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nID without any change in the address does not indicate a new change. \r\n```",
              "createdAt": "2023-03-08T16:52:17Z",
              "updatedAt": "2023-03-08T16:52:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PVooq",
          "commit": {
            "abbreviatedOid": "13477ea"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T16:54:28Z",
          "updatedAt": "2023-03-08T16:54:29Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Sorry I did another change and lost you proposal but will edit the PR directly now accordingly. Thx!",
              "createdAt": "2023-03-08T16:54:28Z",
              "updatedAt": "2023-03-08T16:54:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PVteR",
          "commit": {
            "abbreviatedOid": "9c64bb1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T17:06:08Z",
          "updatedAt": "2023-03-08T17:06:08Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I kept it in one section but am not talking about migration anymore but CID changes and NAT rebinding instead. Better?",
              "createdAt": "2023-03-08T17:06:08Z",
              "updatedAt": "2023-03-08T17:06:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PVucZ",
          "commit": {
            "abbreviatedOid": "9c64bb1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T17:07:59Z",
          "updatedAt": "2023-03-08T17:08:00Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\nclosed after the idle timeout expires.\r\n```",
              "createdAt": "2023-03-08T17:07:59Z",
              "updatedAt": "2023-03-08T17:08:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PWkDS",
          "commit": {
            "abbreviatedOid": "bf1e652"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The updated text works for me.",
          "createdAt": "2023-03-08T19:34:29Z",
          "updatedAt": "2023-03-08T19:34:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5PXI2Z",
          "commit": {
            "abbreviatedOid": "bf1e652"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T21:18:24Z",
          "updatedAt": "2023-03-08T21:18:24Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\ntheir congestion controller and round-trip time estimator for the new\r\n```",
              "createdAt": "2023-03-08T21:18:24Z",
              "updatedAt": "2023-03-08T21:18:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PXJJH",
          "commit": {
            "abbreviatedOid": "acc1196"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T21:19:00Z",
          "updatedAt": "2023-03-08T21:19:00Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\ncan change the Connection ID it uses for to another available one\r\n```",
              "createdAt": "2023-03-08T21:19:00Z",
              "updatedAt": "2023-03-08T21:19:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PXOqP",
          "commit": {
            "abbreviatedOid": "2617e1a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T21:29:42Z",
          "updatedAt": "2023-03-08T21:29:43Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I actually forgot one point. Do we want to add the following?\r\n```suggestion\r\nIf an endpoint receives a PATH_CHALLENGE frame with a new CID on a existing path\r\nand did not receive a RETIRED_CONNECTION_ID frame for the old CID yet,\r\nit can send an PATH_ABANDON frame for that CID in order to indicate\r\nthat the \"old\" path is not usable anymore.\r\n\r\n```\r\nOr it that too much guess-work? It would at least help to avoid that the server sends additional packets on\r\nthe old paths and needs to wait for a time-out for retransmits.",
              "createdAt": "2023-03-08T21:29:43Z",
              "updatedAt": "2023-03-08T21:30:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PYt7p",
          "commit": {
            "abbreviatedOid": "2617e1a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T02:08:06Z",
          "updatedAt": "2023-03-09T02:08:07Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I think overloading the meaning of PATH_CHALLENGE is a bad idea, see comments on #188. But sending a \"RETIRE_CONNECTION_ID\" too soon is also a bad idea, because the peer needs some time to send acknowledgements. Maybe the peer doing the CID renewal could send PATH_ABANDON(old_path, reason_code = CID_replaced), with a clear statement explaining that the 4-tuple is still valid, but the CID is not?",
              "createdAt": "2023-03-09T02:08:06Z",
              "updatedAt": "2023-03-09T02:08:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Paiw5",
          "commit": {
            "abbreviatedOid": "2617e1a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T09:39:48Z",
          "updatedAt": "2023-03-09T09:39:49Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I really like this idea of the PATH_ABANDON with a specific reason_code, but given we need to define such a reason_code, it should deserve its own issue and PR.",
              "createdAt": "2023-03-09T09:39:48Z",
              "updatedAt": "2023-03-09T09:39:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PakgX",
          "commit": {
            "abbreviatedOid": "2617e1a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Two comments, but then I think the text will be ready.",
          "createdAt": "2023-03-09T09:43:52Z",
          "updatedAt": "2023-03-09T09:49:47Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Given that we give implementation considerations, we should not restrict the behaviour too much IMHO.\r\n\r\n```suggestion\r\nthe endpoint can keep the same congestion control and RTT measurement state.\r\n```",
              "createdAt": "2023-03-09T09:43:52Z",
              "updatedAt": "2023-03-09T09:49:47Z"
            },
            {
              "originalPosition": 28,
              "body": "Why not simply refers to that section directly, that also states that servers may keep their current state if they suspect the event to be a NAT rebinding?\r\n```suggestion\r\nIf the path validation process succeeds, the endpoint\r\nfollows considerations of {{Section 9.4 of QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2023-03-09T09:47:29Z",
              "updatedAt": "2023-03-09T09:49:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PbT7Z",
          "commit": {
            "abbreviatedOid": "2617e1a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T11:23:57Z",
          "updatedAt": "2023-03-09T11:23:58Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I would prefer to keep this because I find it annoying to provide a vague reference without giving an indication what this reference is for. Why do you think the current text is not good?  ",
              "createdAt": "2023-03-09T11:23:57Z",
              "updatedAt": "2023-03-09T11:23:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PbVJW",
          "commit": {
            "abbreviatedOid": "2617e1a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T11:26:12Z",
          "updatedAt": "2023-03-09T11:26:12Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Let's open an issue to add a reason code, or a replaced by field, or both. Maybe we should also rename path_abandon to cid_abandon?\r\n\r\nQuestion is should we merge this text for now or also open a new issue instead? I think we can merge because it shouldn't hurt to send a path_abandon frame, right?",
              "createdAt": "2023-03-09T11:26:12Z",
              "updatedAt": "2023-03-09T11:26:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pb-Xk",
          "commit": {
            "abbreviatedOid": "2617e1a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T12:44:34Z",
          "updatedAt": "2023-03-09T12:44:34Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Because it somewhat contradicts what Section 9.4 states.\r\n\r\n> On confirming a peer's ownership of its new address, an endpoint MUST immediately reset the congestion controller and round-trip time estimator for the new path to initial values (see Appendices [A.3](https://www.rfc-editor.org/rfc/rfc9002#appendix-A.3) and [B.3](https://www.rfc-editor.org/rfc/rfc9002#appendix-B.3) of [[QUIC-RECOVERY](https://www.rfc-editor.org/rfc/rfc9000.html#QUIC-RECOVERY)]) unless the only change in the peer's address is its port number. Because port-only changes are commonly the result of NAT rebinding or other middlebox activity, the endpoint MAY instead retain its congestion control state and round-trip estimate in those cases instead of reverting to initial values.\r\n\r\nWe could just adapt the text to be like \"the endpoint updates the path's congestion controller and round-trip time estimator according to {{Section 9.4 of QUIC-TRANSPORT}}\".",
              "createdAt": "2023-03-09T12:44:34Z",
              "updatedAt": "2023-03-09T12:44:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pb-pi",
          "commit": {
            "abbreviatedOid": "2617e1a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T12:45:20Z",
          "updatedAt": "2023-03-09T12:45:21Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I think this issue is somewhat orthogonal, and discussed in #188.",
              "createdAt": "2023-03-09T12:45:21Z",
              "updatedAt": "2023-03-09T12:45:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PdiOZ",
          "commit": {
            "abbreviatedOid": "2617e1a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T15:47:51Z",
          "updatedAt": "2023-03-09T15:47:51Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "We do have an issue with the server continuing sending data on the old path, now a dead end. I am concerned that we will not have an agreement before Monday. I left comments in issue #188. If we resolve that issue before Friday 3/10, let's incorporate the agreed solution in this PR. If we do not, let's check in the PR as is, without the extra text.",
              "createdAt": "2023-03-09T15:47:51Z",
              "updatedAt": "2023-03-09T15:47:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PkYVj",
          "commit": {
            "abbreviatedOid": "2617e1a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T14:12:29Z",
          "updatedAt": "2023-03-10T14:12:30Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nIf path validation process succeeds, the endpoints set\r\nthe path's congestion controller and round-trip time\r\nestimator according to {{Section 9.4 of QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2023-03-10T14:12:29Z",
              "updatedAt": "2023-03-10T14:12:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PkYzv",
          "commit": {
            "abbreviatedOid": "766a7dd"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T14:13:41Z",
          "updatedAt": "2023-03-10T14:13:42Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Okay, I will put this into a separate PR and we can keep working there!",
              "createdAt": "2023-03-10T14:13:41Z",
              "updatedAt": "2023-03-10T14:13:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PkZlp",
          "commit": {
            "abbreviatedOid": "766a7dd"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-10T14:15:37Z",
          "updatedAt": "2023-03-10T14:15:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 173,
      "id": "PR_kwDOGNtpaM5KcCTJ",
      "title": "Clarify path close and waiting for at least 3 PTOs",
      "url": "https://github.com/quicwg/multipath/pull/173",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current text says that one has to wait for a the retire frame or 3 PTOs. However (as also indicated in the states figure) this should be at least 3 PTOs. This PR fixes this inconsistency. Further is add a reference to the definition to PTO and replaces RTO with PTO where the wrong term is used. I believe all these fixes address straightforward mistakes, however, if discussion is needed, we can of course also open an issue.",
      "createdAt": "2023-02-21T15:03:53Z",
      "updatedAt": "2024-03-12T16:18:42Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "b320d91fb15cb7f9551d2fa606f9af23ab5089f1",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-17",
      "headRefOid": "0ea57efbb918c564a8514a8f215f51fd493e2577",
      "closedAt": "2023-03-13T09:02:08Z",
      "mergedAt": "2023-03-13T09:02:08Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "086d244ab337e4586ed91d663c57f299ccf7678b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5N8Zg_",
          "commit": {
            "abbreviatedOid": "d4494be"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T15:37:01Z",
          "updatedAt": "2023-02-21T15:37:01Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nThis is inline with the requirement of {{Section 10.2 of QUIC-TRANSPORT}}\r\n```",
              "createdAt": "2023-02-21T15:37:01Z",
              "updatedAt": "2023-02-21T15:37:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5N9yge",
          "commit": {
            "abbreviatedOid": "fab7d7d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T19:26:57Z",
          "updatedAt": "2023-02-21T19:26:58Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nframe for the used connection IDs but at least three times the current\r\n```",
              "createdAt": "2023-02-21T19:26:58Z",
              "updatedAt": "2023-02-21T19:26:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OPYWf",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good to me.",
          "createdAt": "2023-02-24T07:26:19Z",
          "updatedAt": "2023-02-24T07:26:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5OXQJ7",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-02-26T19:35:17Z",
          "updatedAt": "2023-02-26T19:35:52Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "This does not read very well: \"SHOULD wait for the reception of the RETIRE_CONNECTION_ID\r\nframe for the used connection IDs but at least three times the current\r\nProbe Timeout (PTO) interval as defined in {{Section 6.2. of QUIC-RECOVERY}}.\" I don't know how to interpret it.\r\n\r\nI think what you mean is: \"the receiver of a PATH_ABANDON frame SHOULD NOT release its resources\r\nimmediately, but SHOULD wait for at least 3 RTOs after the last time a packet was sent using the corresponding CID or until it receives a RETIRE_CONNECTION_ID frame for that CID, whichever happens sooner.\"\r\n\r\nThen there is the separate question of the sender behavior. I think we should says something like: \"Nodes that Abandon a PATH SHOULD wait for 3 RTOs before sending a RETIRE_CONNECTION_ID frame for the corresponding CID. However, they MAY issue the RETIRE_CONNECTION_ID frame sooner, for example because of resource constraints or because the peer asked to retire all connection identifier before a specific sequence number. This may cause the peer node to conclude that no acknowledgement will be received for packets sent with that CID.\"\r\n\r\n",
              "createdAt": "2023-02-26T19:35:17Z",
              "updatedAt": "2023-02-26T19:35:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OZrLc",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T10:59:14Z",
          "updatedAt": "2023-02-27T10:59:14Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "What you propose in your text is exactly what we need to clarify. I think based on {{Section 6.2. of QUIC-RECOVERY}} you always need to wait for at least 3 PTO. If we say it that way, I don't think there is a need to add the second part you propose to wait with the sending of RETIRE_CONNECTION_ID frame . That would be another solution but more complex.",
              "createdAt": "2023-02-27T10:59:14Z",
              "updatedAt": "2023-02-27T10:59:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OboCb",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T15:45:34Z",
          "updatedAt": "2023-02-27T15:45:35Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "In any case, the text needs to be fixed. \"The receiver SHOUD (do something), but (something else) but (something else again)...\" -- that's a very confusing syntax.",
              "createdAt": "2023-02-27T15:45:34Z",
              "updatedAt": "2023-02-27T15:46:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Obskl",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T15:54:39Z",
          "updatedAt": "2023-02-27T15:54:40Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Yes, agree. I'll give it a try. But we do agree that's the right thing?",
              "createdAt": "2023-02-27T15:54:39Z",
              "updatedAt": "2023-02-27T15:54:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OgddA",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think the meaning is right, but I think we can clarify it (suggestion provided).",
          "createdAt": "2023-02-28T09:40:55Z",
          "updatedAt": "2023-02-28T09:41:58Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I think we agree on the meaning, but we should indeed improve the presentation. What about replacing the first (very) long sentence by this?\r\n\r\n```\r\nUpon the reception of a PATH_ABANDON, the endpoint SHOULD delay the release\r\nof the associated path resource until either a) the peer has retired the\r\nConnection ID it used on the abandoned path, or b) at least three times the\r\ncurrent Probe Timeout (PTO) interval as defined in {{Section 6.2. of QUIC-RECOVERY}}.\r\n```",
              "createdAt": "2023-02-28T09:40:56Z",
              "updatedAt": "2023-02-28T09:41:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OhFAF",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-28T11:08:54Z",
          "updatedAt": "2023-02-28T11:08:55Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Okay this means we do not agree. I believe you always have to wait at least threes PTOs because of re-ordered packets. I guess if you receive the retired CID frame that means that the peer will not send any new packets but you can only be sure that there is no reordering if you received all packets before the packet with the retired CID frame, however, you don't really know how far back you have to look or there could be gaps introduced by the sender. So checking that is not really practical and always waiting for 3 PTOs is therefore just simpler. Or is there is strong reason why it would be needed to release resources on receipt of the retired CID frame already?\r\n\r\nI note that this discussion is also related to the question if we change the path ID with the CID or not. If we retire the path ID together with the CID, it makes more sense to act on the retired CID frame because in this case even if you receive reordered packets, you would not be able to process them as you don't have a valid path ID.",
              "createdAt": "2023-02-28T11:08:54Z",
              "updatedAt": "2023-02-28T11:08:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Oz9mT",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-03-02T16:57:02Z",
          "updatedAt": "2023-03-02T16:57:19Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I agree that endpoint should always wait at least three PTOs before it releases resources of the corresponding path, but the sentence need to be fixed. Maybe we need 2 states \"Closing Path State\" and \"Draining Path State\": \r\n- After the endpoint sends the PATH_ABANDON frame, it enters into the \"Closing Path State\", and needs to wait for at least three PTOs before releasing the CID resource of the corresponding path. \r\n- The \"Draining Path State\" is entered once an endpoint receives a PATH_ABANDON frame, which indicates that its peer is closing or draining on this path. \"Draining Path State\" last for at least three PTOs, before it ends, the endpoint SHOULD NOT release the corresponding CID resouce, until it receives a RETIRE_CONNECTION_ID frame for that CID.",
              "createdAt": "2023-03-02T16:57:02Z",
              "updatedAt": "2023-03-02T16:57:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O5muO",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T12:31:20Z",
          "updatedAt": "2023-03-03T12:31:20Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "This PR is actually also connects to the question on path  ID.\r\n\r\nFirst of all it is not clear to me what an endpoints need to do if it first receives a retired CID frame and then a (re-order) packet with that CID. In order word is an endpoint supposed to retire/forget the CID immediately when it received the retire CID frame and discard any packets with the old CID or might it also what 1-3 PTOs for re-order packet? I didn't find anything in RFC9000 but maybe somebody else that is better in finding this has a pointer to right part...?\r\n\r\nIf the former, meaning you remove it immediately and ignore old packets, that would also mean that you don't have a valid path ID anymore and can't process any ACKs or other control frame with the old path ID anymore. As such you also don't have to wait for 3 PTOs as you might receive packet/frames but can process them anymore. In this case (assuming that the path ID is connected to the CID), one solution could be to recommend to wait 3PTOs before you send the retired CID frame (or just accepting that this might happens and you have time retransmit some packets unnecessarily if you change the CID).\r\n\r\nIf you have a stable path ID, you can retire immediately and ignore packets with the old CID but still process any control frames that are received in packets with the new CID, and respectively have to wait 3 PTO before you can also remove the path id/close the path entirely.\r\n\r\nOr alternatively, you always have to 3 PTOs after the abandon frame before you remove any state including the last used CID but that also means that the retired CID frames doesn't have any impact. And it also means whenever you received a retired CID frame during an active path use, you also need to wait 3 PTOs before you remove it.\r\n\r\n\r\n",
              "createdAt": "2023-03-03T12:31:20Z",
              "updatedAt": "2023-03-03T12:54:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PWEJ3",
          "commit": {
            "abbreviatedOid": "3ea8e71"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T18:05:45Z",
          "updatedAt": "2023-03-08T18:05:46Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "not sure we need this sentence at all...",
              "createdAt": "2023-03-08T18:05:45Z",
              "updatedAt": "2023-03-08T18:05:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PWEtX",
          "commit": {
            "abbreviatedOid": "3ea8e71"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T18:07:24Z",
          "updatedAt": "2023-03-08T18:07:25Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nafter receive of the PATH_ABANDON frame or until it receives\r\n```",
              "createdAt": "2023-03-08T18:07:24Z",
              "updatedAt": "2023-03-08T18:07:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PWI7F",
          "commit": {
            "abbreviatedOid": "13f0014"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T18:18:55Z",
          "updatedAt": "2023-03-08T18:18:56Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "This is a new normative requirement now but I think this is what is actually meant by \"releasing resources\". Particularly you should only retire your CID if you are sure you don't need it anymore. Hence the new normative requirement is to wait 3 PTOs before you sent the retired CID frame after receiving the abandon frame. ",
              "createdAt": "2023-03-08T18:18:55Z",
              "updatedAt": "2023-03-09T11:29:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PWJIK",
          "commit": {
            "abbreviatedOid": "13f0014"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T18:19:33Z",
          "updatedAt": "2023-03-08T18:19:34Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "I didn't change this first sentence because that already covered in PR #185 (which we should probably merge first)",
              "createdAt": "2023-03-08T18:19:33Z",
              "updatedAt": "2023-03-08T18:19:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PaeQP",
          "commit": {
            "abbreviatedOid": "13f0014"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T09:29:17Z",
          "updatedAt": "2023-03-09T09:29:17Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Agree.",
              "createdAt": "2023-03-09T09:29:17Z",
              "updatedAt": "2023-03-09T09:29:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PahLE",
          "commit": {
            "abbreviatedOid": "13f0014"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Text is fine, but we should merge #185 before this one IMHO.",
          "createdAt": "2023-03-09T09:36:06Z",
          "updatedAt": "2023-03-09T09:37:35Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "The RETIRE_CONNECTION_ID frame is not an indication, it is stronger.\r\n```suggestion\r\nthat the sender will not send any packets associated to the\r\n```",
              "createdAt": "2023-03-09T09:36:06Z",
              "updatedAt": "2023-03-09T09:37:35Z"
            },
            {
              "originalPosition": 62,
              "body": "```suggestion\r\nThe receiver of a PATH_ABANDON frame MAY also send\r\n```",
              "createdAt": "2023-03-09T09:36:19Z",
              "updatedAt": "2023-03-09T09:37:35Z"
            },
            {
              "originalPosition": 63,
              "body": "```suggestion\r\na PATH_ABANDON frame to indicate its own unwillingness to receive\r\n```",
              "createdAt": "2023-03-09T09:36:32Z",
              "updatedAt": "2023-03-09T09:37:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PbWz6",
          "commit": {
            "abbreviatedOid": "13f0014"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T11:29:06Z",
          "updatedAt": "2023-03-09T11:29:07Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-03-09T11:29:07Z",
              "updatedAt": "2023-03-09T11:29:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PbW8C",
          "commit": {
            "abbreviatedOid": "13f0014"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T11:29:20Z",
          "updatedAt": "2023-03-09T11:29:20Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-03-09T11:29:20Z",
              "updatedAt": "2023-03-09T11:29:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PbXir",
          "commit": {
            "abbreviatedOid": "13f0014"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T11:30:22Z",
          "updatedAt": "2023-03-09T11:30:22Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "agreed",
              "createdAt": "2023-03-09T11:30:22Z",
              "updatedAt": "2023-03-09T11:30:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PdlhJ",
          "commit": {
            "abbreviatedOid": "881d5cb"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2023-03-09T15:53:50Z",
          "updatedAt": "2023-03-09T15:54:50Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "Yes, this is good. There are two big motivations: packets may be delivered out of order, with packets in transit arriving after the PATH_ABANDON; and, acknowledgements still need to be sent. Waiting 3 PTO is the standard mitigation for such issues.",
              "createdAt": "2023-03-09T15:53:50Z",
              "updatedAt": "2023-03-09T15:54:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PiVZZ",
          "commit": {
            "abbreviatedOid": "cff4325"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "By fixing the conflict, I also fixed #194.",
          "createdAt": "2023-03-10T08:56:14Z",
          "updatedAt": "2023-03-10T08:56:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5PnyoT",
          "commit": {
            "abbreviatedOid": "483499a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-11T07:02:57Z",
          "updatedAt": "2023-03-11T07:02:57Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "The question about \"what to do with packets where DCID is retired\" is not specific to multipath. The same \"out of order delivery issues\" could happen with QUIC as well. After a CID is retired, we expect the issuer of the CID to \"forget about it\". If that CID is forgotten, the load balancer or the QUIC server will not be able to associate it with a QUIC connection context. The QUIC connection will never have to process these packets.\r\n\r\nThe QUIC server will assume that the client is trying to use a connection that does not exist anymore and could issue a \"stateless reset\" packet, but since the CID has been retired the token in the stateless reset will not match any valid CID for the connection and will have no effect.\r\n\r\nWhich is a long winded way to say that packets arriving after the DCID has been retired will be automatically ignored. There is no need to specify a processing for them, because they will never be processed at all.",
              "createdAt": "2023-03-11T07:02:57Z",
              "updatedAt": "2023-03-11T07:02:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pnyzu",
          "commit": {
            "abbreviatedOid": "cff4325"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-11T07:12:23Z",
          "updatedAt": "2023-03-11T07:12:24Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "~~~suggestion\r\nThe sender and the receiver of a PATH_ABANDON frame should not release their resources\r\n~~~",
              "createdAt": "2023-03-11T07:12:23Z",
              "updatedAt": "2023-03-11T07:12:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pny2C",
          "commit": {
            "abbreviatedOid": "cff4325"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-11T07:13:59Z",
          "updatedAt": "2023-03-11T07:14:00Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "The suggestion above should address the point raised by @Yanmei-Liu in the resolved conversation below.",
              "createdAt": "2023-03-11T07:13:59Z",
              "updatedAt": "2023-03-11T07:14:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PqIaF",
          "commit": {
            "abbreviatedOid": "cff4325"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T08:22:38Z",
          "updatedAt": "2023-03-13T08:22:38Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "```suggestion\r\nThe sender and receiver of a PATH_ABANDON frame should not release its resources\r\n```",
              "createdAt": "2023-03-13T08:22:38Z",
              "updatedAt": "2023-03-13T08:22:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 174,
      "id": "PR_kwDOGNtpaM5KcGsT",
      "title": "Clarify path usage for PATH_ABANDON frame",
      "url": "https://github.com/quicwg/multipath/pull/174",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-02-21T15:15:46Z",
      "updatedAt": "2024-03-12T16:19:04Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-18",
      "headRefOid": "c260691bfee7c2b289be079e70420e86d4b7cdd2",
      "closedAt": "2023-03-03T15:14:30Z",
      "mergedAt": "2023-03-03T15:14:30Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "6e279069cf117af0b6bee17d0248ba726ed4bbbe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5N8Yw_",
          "commit": {
            "abbreviatedOid": "38d51e6"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-21T15:35:56Z",
          "updatedAt": "2023-02-21T15:35:57Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nendpoint respectively might consider to retransmit on another path.\r\n```",
              "createdAt": "2023-02-21T15:35:56Z",
              "updatedAt": "2023-02-21T15:35:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5OgWAi",
          "commit": {
            "abbreviatedOid": "6b78252"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Minor editorial suggestion.",
          "createdAt": "2023-02-28T09:23:56Z",
          "updatedAt": "2023-02-28T09:24:24Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nthis might be an indication that the sending path is not usable anymore and the\r\nendpoint might consider to retransmit the frame on another path.\r\n```",
              "createdAt": "2023-02-28T09:23:56Z",
              "updatedAt": "2023-02-28T09:24:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O0Del",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-02T17:10:04Z",
          "updatedAt": "2023-03-02T17:10:09Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "How about: \"If the PATH_ABANDON frame is considered lost in the current path, the endpoint might choose to retransmit the frame on another path if it indicates the path is not usable anymore.\"\r\n\r\nThe keypoint is the expiration of the PTO might not be an indication of path blackhole in most cases, but the endpoint could choose to use another path if it indicates the path is unavailable.",
              "createdAt": "2023-03-02T17:10:04Z",
              "updatedAt": "2023-03-02T17:10:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O5SZs",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T11:40:18Z",
          "updatedAt": "2023-03-03T11:40:18Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "The reason why I mention PTO here is because if you, receives ACK that indicate a lost, that means the path is probably still usable. It's only if the PTO expires. However, maybe it better to says this more generically like:\r\n\r\n\"If the PATH_ABANDON frame is considered lost in the current path and another other packet has been received on that path indication that the past is still usable, the endpoint might choose to retransmit the frame on another path.\"\r\n\r\nOr should we even say something stronger than \"might\"?",
              "createdAt": "2023-03-03T11:40:18Z",
              "updatedAt": "2023-03-03T11:40:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O6dbS",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T14:41:13Z",
          "updatedAt": "2023-03-03T14:41:13Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I think retransmitting PATH_ABANDON on another path when PTO happens is reasonable.",
              "createdAt": "2023-03-03T14:41:13Z",
              "updatedAt": "2023-03-03T14:41:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O6gNG",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-03T14:45:52Z",
          "updatedAt": "2023-03-03T14:45:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5O6s_4",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T15:06:52Z",
          "updatedAt": "2023-03-03T15:06:52Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nIf the PATH_ABANDON frame is considered lost in the current path and \r\nanother other packet has been received on that path indication that the \r\npast is still usable, the endpoint might choose to retransmit the frame on another path.\r\n```",
              "createdAt": "2023-03-03T15:06:52Z",
              "updatedAt": "2023-03-03T15:06:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5O6w0n",
          "commit": {
            "abbreviatedOid": "00f85de"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T15:13:11Z",
          "updatedAt": "2023-03-03T15:13:12Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-03-03T15:13:11Z",
              "updatedAt": "2023-03-03T15:13:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 178,
      "id": "PR_kwDOGNtpaM5KcKZ9",
      "title": "Add ref to definition of non-probing packets",
      "url": "https://github.com/quicwg/multipath/pull/178",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2023-02-21T15:26:51Z",
      "updatedAt": "2024-03-12T16:19:05Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9f1d4e26e1df03c0af74e8fdc1978cb6ffb25f3e",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-19",
      "headRefOid": "d316ff44907fc1945eb72e63f0de33cb8fbea6e0",
      "closedAt": "2023-03-03T11:40:49Z",
      "mergedAt": "2023-03-03T11:40:49Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "8dcee71e18c66d1be063ea79709c2920d65f599f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5OgVZ_",
          "commit": {
            "abbreviatedOid": "d316ff4"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-28T09:22:33Z",
          "updatedAt": "2023-02-28T09:22:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5O0Duc",
          "commit": {
            "abbreviatedOid": "d316ff4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-02T17:10:41Z",
          "updatedAt": "2023-03-02T17:10:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 185,
      "id": "PR_kwDOGNtpaM5LPuLi",
      "title": "Remove mentions of the \"Path Identifier\"",
      "url": "https://github.com/quicwg/multipath/pull/185",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In lot of places in the draft, we mention the \"Path Identifier\", which we define as the Destination Connection ID sequence number used over that path. It seems that maintaining the notion of \"Path Identifier\" causes a lot of confusion, so better keep things simple and mention CID sequence numbers directly.\r\n\r\nNote that this implies that the related fields in\r\nmultipath-specific have been renamed to their \"explicit\" form. Some of these names are maybe a bit long, so we may shorten them if this does not introduce ambiguity.\r\n\r\nFix #169. Rewriting related section may also answer #181.",
      "createdAt": "2023-03-03T17:25:53Z",
      "updatedAt": "2023-03-10T02:58:56Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "6e279069cf117af0b6bee17d0248ba726ed4bbbe",
      "headRepository": "quicwg/multipath",
      "headRefName": "remove-path-id",
      "headRefOid": "6ff005d3b228775dd0ee7c72a3c7569c832c0156",
      "closedAt": "2023-03-10T02:58:56Z",
      "mergedAt": "2023-03-10T02:58:56Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "a15f4084bf20485846152ac836a5516cf91a28ac"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this PR is ready to merge. Let's wait until end of today to give others another change to review. However would be good to merge to, as we need to merge this one before we can merge the others!",
          "createdAt": "2023-03-09T11:19:42Z",
          "updatedAt": "2023-03-09T11:19:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5PESf5",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:10:34Z",
          "updatedAt": "2023-03-06T15:10:35Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\nA new path can only be used once it has been validated. The Destination\r\nConnection ID is used to associate a packet to a valid path. Further, the\r\nsequence number of Destination Connection ID is used as numerical identifier\r\nin control frames. E.g. an endpoint sends a PATH_ABANDON frame to request its peer to\r\nabandon the path on which the sender uses the Destination Connection ID\r\nwith the sequence number contained in the PATH_ABANDON frame.\r\n```",
              "createdAt": "2023-03-06T15:10:35Z",
              "updatedAt": "2023-03-06T15:10:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PESwQ",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:10:59Z",
          "updatedAt": "2023-03-06T15:10:59Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Maybe we can also move the text about the status frame here.",
              "createdAt": "2023-03-06T15:10:59Z",
              "updatedAt": "2023-03-06T15:10:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEUK6",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:13:38Z",
          "updatedAt": "2023-03-06T15:13:39Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "I don't think we need this additional text.\r\n\r\nYou don't need the sequence number to identify the packet space; you can also just use the CID directly. You only need the sequence number really in control frames.\r\n\r\nAlso what consideration in RFC9000 do you want to point to?",
              "createdAt": "2023-03-06T15:13:38Z",
              "updatedAt": "2023-03-06T15:13:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEU9p",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:15:19Z",
          "updatedAt": "2023-03-06T15:15:20Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "```suggestion\r\npackets over the path. The endpoint relies on its sequence number to\r\nsend path control information and specifically acknowledge packets belonging to that Connection ID-specific\r\npacket number space.\r\n```",
              "createdAt": "2023-03-06T15:15:19Z",
              "updatedAt": "2023-03-06T16:04:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEVmu",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:16:41Z",
          "updatedAt": "2023-03-06T15:16:41Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "```suggestion\r\nto distinguish the Connection ID-specific packet number space.\r\n```",
              "createdAt": "2023-03-06T15:16:41Z",
              "updatedAt": "2023-03-06T15:16:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEXmK",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:20:46Z",
          "updatedAt": "2023-03-06T15:20:47Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "```suggestion\r\nConnection ID Sequence Number field. If multipath has been successfully\r\nnegotiated, ACK frames in 1-RTT packets MUST be interpreted as acknowledging\r\npackets on the path they the packet with the ACK frames been received.\r\n```",
              "createdAt": "2023-03-06T15:20:47Z",
              "updatedAt": "2023-03-06T15:20:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEYbB",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:22:24Z",
          "updatedAt": "2023-03-06T15:22:25Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "```suggestion\r\ndata packets, including 0-RTT packets, using the initial Connection ID with\r\n```",
              "createdAt": "2023-03-06T15:22:25Z",
              "updatedAt": "2023-03-06T15:22:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEY_J",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:23:33Z",
          "updatedAt": "2023-03-06T15:23:34Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "```suggestion\r\nACK_MP frame (defined in {{ack-mp-frame}}) SHOULD be sent on same the path\r\nas the data was sent that it acknowledged.\r\n```",
              "createdAt": "2023-03-06T15:23:33Z",
              "updatedAt": "2023-03-06T15:23:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEZwg",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:25:08Z",
          "updatedAt": "2023-03-06T15:25:08Z",
          "comments": [
            {
              "originalPosition": 233,
              "body": "```suggestion\r\n  corresponds to.\r\n```",
              "createdAt": "2023-03-06T15:25:08Z",
              "updatedAt": "2023-03-06T15:25:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEaKp",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:25:56Z",
          "updatedAt": "2023-03-06T15:25:56Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "+1 Mirja",
              "createdAt": "2023-03-06T15:25:56Z",
              "updatedAt": "2023-03-06T15:25:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEao5",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "A few nits, but this PR does improve the draft!",
          "createdAt": "2023-03-06T15:26:55Z",
          "updatedAt": "2023-03-06T15:51:30Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "Typo in suggested change: oath -> path",
              "createdAt": "2023-03-06T15:26:55Z",
              "updatedAt": "2023-03-06T15:51:30Z"
            },
            {
              "originalPosition": 128,
              "body": "No, please do not apply this change. This PR is editorial in nature, and should not change the consensus so far, i.e., the old ACK frame acknowledges CID number 0. Quentin's original text is fine.",
              "createdAt": "2023-03-06T15:29:50Z",
              "updatedAt": "2023-03-06T15:51:30Z"
            },
            {
              "originalPosition": 286,
              "body": "I think we have an issue of consistency. In the Abandon and Path Status frames, the DCID field is called \"Sender's DCID\". Here, it is called \"Receiver's DCID\". Yet, they refer to exactly the same value. My suggestion:\r\n\r\n* Remove \"Sender's\" from the DCID descriptions in PATH_ABANDON and PATH_STATUS\r\n* Remove \"Receiver's\" from the DCID descriptions in ACK_MP\r\n* Otherwise, keep the text as is, because the text is correct.",
              "createdAt": "2023-03-06T15:42:10Z",
              "updatedAt": "2023-03-06T15:51:30Z"
            },
            {
              "originalPosition": 299,
              "body": "The reference to \"closed paths\" is a bit ambiguous, because it is in fact OK to send an ACK_MP after and ABANDON_PATH -- or even in the same packet, but QUIC does not specify the order of processing of frames in a packet. And it is also OK to process it, rather than spuriously repeat data that has been actually received. I would be tempted to just strike out \"or belonging to closed paths\". Or maybe strike out the whole parenthesis. Or maybe strike out the whole paragraph about not active anymore. For comparison, Section 19.16 of RFC 9000 just says:\r\n\r\nReceipt of a RETIRE_CONNECTION_ID frame containing a sequence number greater than any previously sent to the peer MUST be treated as a connection error of type PROTOCOL_VIOLATION.",
              "createdAt": "2023-03-06T15:50:56Z",
              "updatedAt": "2023-03-06T15:51:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEtQN",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:04:08Z",
          "updatedAt": "2023-03-06T16:04:08Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "fixed",
              "createdAt": "2023-03-06T16:04:08Z",
              "updatedAt": "2023-03-06T16:04:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEt_F",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:05:42Z",
          "updatedAt": "2023-03-06T16:05:42Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "Indeed, let's remove that added text.",
              "createdAt": "2023-03-06T16:05:42Z",
              "updatedAt": "2023-03-06T16:05:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEuu7",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:07:19Z",
          "updatedAt": "2023-03-06T16:07:20Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "Yes, this changes goes maybe a bit far for this PR but Quentin's text is not right because he removed the \"If for any reason  ACK frames are received in 1-RTT packets while the state of multipath negotiation is ambiguous\" part. In this ambiguous state all acks are mapped to the seq number 0. However, this is not true later. My proposal is not to change the consensus but rather say the more general thing.",
              "createdAt": "2023-03-06T16:07:19Z",
              "updatedAt": "2023-03-06T16:07:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEvZ7",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:08:48Z",
          "updatedAt": "2023-03-06T16:08:49Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "No they do not refer to the same value. The Sender's CID is the one used when you sent a packet. The Receivers's CID is the one used by the other end to send - hence when you receive packets.",
              "createdAt": "2023-03-06T16:08:48Z",
              "updatedAt": "2023-03-06T16:08:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEvgW",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:08:59Z",
          "updatedAt": "2023-03-06T16:09:00Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "Yes, let's avoid introducing design changes here. Also, I think relying on the reception 4-tuple may lead to ambiguous state at the receiver.",
              "createdAt": "2023-03-06T16:09:00Z",
              "updatedAt": "2023-03-06T16:09:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEwix",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:11:18Z",
          "updatedAt": "2023-03-06T16:11:19Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "While I understand the suggestion, I'm not sure this makes the text clearer, though I don't have strong opposition here.",
              "createdAt": "2023-03-06T16:11:19Z",
              "updatedAt": "2023-03-06T16:11:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEx6Y",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:14:17Z",
          "updatedAt": "2023-03-06T16:14:18Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "Actually the PATH_ABANDON and PATH_STATUS frame includes the sequence number of the DCID of the sender of the frame, while in ACK_MP the sequence number corresponds to the DCID used by its peer, hence the (verbose) name convention. But if this introduces confusion, I can remove \"Sender's\" and \"Receiver's\" mentions.",
              "createdAt": "2023-03-06T16:14:18Z",
              "updatedAt": "2023-03-06T16:14:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PE4C6",
          "commit": {
            "abbreviatedOid": "bb9bb5e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:27:12Z",
          "updatedAt": "2023-03-06T16:27:13Z",
          "comments": [
            {
              "originalPosition": 299,
              "body": "I think your point about the whole parenthesis is right. Also, this issue about seeing retired DCID also applies in PATH_ABANDON and PATH_STATUS (i.e., just ignore the frame), so we may just want to add a sentence at the beginning of the presentation of the multi path-specific frames?",
              "createdAt": "2023-03-06T16:27:13Z",
              "updatedAt": "2023-03-06T16:27:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PFBIC",
          "commit": {
            "abbreviatedOid": "bb9bb5e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T16:39:48Z",
          "updatedAt": "2023-03-06T16:39:48Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "For the ambiguous part, I'm not sure to understand when the negotiation of multi path could be ambiguous. But so far the less ambiguous approach (as I understood so far) is that ACK frames (always) relate to CID number 0.",
              "createdAt": "2023-03-06T16:39:48Z",
              "updatedAt": "2023-03-06T16:39:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PFO2a",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T17:02:08Z",
          "updatedAt": "2023-03-06T17:02:08Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "I was assuming an ACK frame always corresponds to the path it was sent on. However, it seem this is simply not defined in the draft and we probably need to open an issue to clarify this.",
              "createdAt": "2023-03-06T17:02:08Z",
              "updatedAt": "2023-03-06T17:02:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGBlL",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T18:32:24Z",
          "updatedAt": "2023-03-06T18:32:24Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "Actually we did a mistake here when I remove the type field. The path abandon frame should also have the receivers cid as you tell the other end to not use this for sending data anymore. Same is probably true for the path status frame.",
              "createdAt": "2023-03-06T18:32:24Z",
              "updatedAt": "2023-03-07T10:19:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGNJE",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T19:04:49Z",
          "updatedAt": "2023-03-06T19:04:50Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "No, we specifically do not want implementations to continue sending ACK frames after negotiating multipath. The notion of \"current path\" is ambiguous -- for example, it does change in case of NAT rebinding. Adding the CID-sequence-number in the ACK_MP guarantee that there is no such ambiguity. As for nake ACK, the equivalence to \"cid-number=0\" is straightforward. ",
              "createdAt": "2023-03-06T19:04:49Z",
              "updatedAt": "2023-03-06T19:04:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGSWv",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T19:20:32Z",
          "updatedAt": "2023-03-06T19:20:32Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "I am OK with a soft guidance to send ACK_MP on the \"same path\", but I am opposed to any mandate to always do that. In particular, there is well established practice of combining a high bandwidth long delay path through Geo satellite and a short delay low bandwidth terrestrial path, sending data on the wide path and sending ACK on the short path. Having a shorter control loop does improve performance, for example allowing the congestion window to ramp up twice faster during slow start. Similarly, sending ACK_MP on a reliable path results in better control than sending them on a lossy path results in more reliable control.\r\n\r\nI understand that the \"same path\" practice makes RTT computation easier, but that's only one aspect of the issue, IMHO not the most dominant aspect. In QUIC, most packet losses are detected by noticing that packets sent later on the path are already acknowledged, not by waiting on timers. Sending ACK_MP on a short path will enable faster detection of packet losses by acked number holes, while sending only on the \"return\" path only improve the computation of RTT, which may or may not improve timer-based recovery. (If ACK_MP are *always* sent on the shortest path, then measuring average and deviation of  ACK delays actually provide good input for loss detection timeout.)\r\n\r\nI think we do have an issue with getting good RTT estimates while not using time stamps. This could be fixed by requiring to also replicate some of the ACK_MP on the \"return\" path when possible, and by having implementation keep track of the progress of same path ACK.\r\n\r\nBut trying to mandate same path ACK just won't help, because implementation seeking better congestion control and better loss detection will just ignore the requirement. ",
              "createdAt": "2023-03-06T19:20:32Z",
              "updatedAt": "2023-03-06T19:22:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PGUmK",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T19:27:22Z",
          "updatedAt": "2023-03-06T19:27:23Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "I think aligning ACK, ABANDON and STATUS makes sense. ABANDON is in many respects just the symmetric of the ACK. For example, a node receives data on a cellular path that charges per byte when a \"free\" path is available. The node will send the ABANDON immediately, telling its peer to \"stop doing that.\" Using the DCID \"used by the peer to send 1-RTT packets\" makes a lot of sense.",
              "createdAt": "2023-03-06T19:27:22Z",
              "updatedAt": "2023-03-06T19:27:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PJVv3",
          "commit": {
            "abbreviatedOid": "bb9bb5e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T08:14:04Z",
          "updatedAt": "2023-03-07T08:14:04Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "I think if we decide that ACK frames always relate to CID number 0, their processing is straightforward and although  endpoints should prefer using ACK_MP, they can still send ACK frames to acknowledge packets in CID space 0 (this is actually the next paragraph). The current PR text looks fine for me, but please shout if you disagree.",
              "createdAt": "2023-03-07T08:14:04Z",
              "updatedAt": "2023-03-07T08:14:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PJZlr",
          "commit": {
            "abbreviatedOid": "bb9bb5e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T08:24:36Z",
          "updatedAt": "2023-03-07T08:24:36Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "I fully agree here. Sending the ACK_MP on the same path is a reasonable default behaviour, but in some network configurations, this is clearly suboptimal and there is no point forcing endpoints to do that. I think having a  \"SHOULD\" is fine, but not a \"MUST\".\r\n\r\nRethinking further, I'm wondering if this paragraph could even be removed based on discussions in #183. We already discuss the ACK_MP scheduling in implementation considerations, and that should be enough. Maybe add at some place that frames can effectively be sent and received on any valid/active path.",
              "createdAt": "2023-03-07T08:24:36Z",
              "updatedAt": "2023-03-07T08:24:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PJaTj",
          "commit": {
            "abbreviatedOid": "bb9bb5e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T08:26:26Z",
          "updatedAt": "2023-03-07T08:26:26Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "Yeah, this would make sense. Let me update the text and the examples accordingly.",
              "createdAt": "2023-03-07T08:26:26Z",
              "updatedAt": "2023-03-07T08:26:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PUnxn",
          "commit": {
            "abbreviatedOid": "f8d13a0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T14:38:40Z",
          "updatedAt": "2023-03-08T14:38:41Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Actually I think this is still a bit confusing. First we say it refer to the 4-tuple and then we say it only depends on the CID. Maybe we can just remove the whole definition at this point?",
              "createdAt": "2023-03-08T14:38:40Z",
              "updatedAt": "2023-03-08T14:38:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PUqNc",
          "commit": {
            "abbreviatedOid": "f8d13a0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T14:43:50Z",
          "updatedAt": "2023-03-08T14:43:51Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nA new path can only be used once the associated 4-tuple has been validated\r\nby ensuring that the peer is able to receive packets at that address\r\n(see {{Section 8 of RFC9000}}). The Destination Connection ID is used\r\nto associate a packet to a packet number space that is used on a valid path. Further, the\r\n```",
              "createdAt": "2023-03-08T14:43:51Z",
              "updatedAt": "2023-03-08T14:43:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PUrFP",
          "commit": {
            "abbreviatedOid": "f8d13a0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T14:45:44Z",
          "updatedAt": "2023-03-08T14:45:45Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nwhich requests the peer to stop sending packets with the corresponding Destination Connection ID.\r\n```",
              "createdAt": "2023-03-08T14:45:45Z",
              "updatedAt": "2023-03-08T15:01:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PUrXR",
          "commit": {
            "abbreviatedOid": "f8d13a0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T14:46:22Z",
          "updatedAt": "2023-03-08T14:46:22Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "```suggestion\r\nBoth endpoints, namely the client and the server, can initiate path closure,\r\n```",
              "createdAt": "2023-03-08T14:46:22Z",
              "updatedAt": "2023-03-08T14:46:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PUrqz",
          "commit": {
            "abbreviatedOid": "f8d13a0"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T14:47:04Z",
          "updatedAt": "2023-03-08T14:47:05Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "While the path actually refers to the (perceived) 4-tuple, not sure we say the path only depends on the CID. The CID (sequence number) is used between endpoints to identify a path in PATH_ABANDON/PATH_STATUS frames. However, we can remove this definition if this brings confusion.",
              "createdAt": "2023-03-08T14:47:04Z",
              "updatedAt": "2023-03-08T14:47:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PUsxs",
          "commit": {
            "abbreviatedOid": "f8d13a0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T14:49:06Z",
          "updatedAt": "2023-03-08T14:49:07Z",
          "comments": [
            {
              "originalPosition": 140,
              "body": "```suggestion\r\nSequence Number field to identify the packet number space.\r\nIf the multipath extension has been successfully\r\n```",
              "createdAt": "2023-03-08T14:49:06Z",
              "updatedAt": "2023-03-08T14:49:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PUtsu",
          "commit": {
            "abbreviatedOid": "f8d13a0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T14:51:02Z",
          "updatedAt": "2023-03-08T14:51:03Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "```suggestion\r\nACK_MP frame (defined in {{ack-mp-frame}}) SHOULD be sent on the path\r\nit received packet with the Connection ID of the packet number space it acknowledges.\r\n```",
              "createdAt": "2023-03-08T14:51:02Z",
              "updatedAt": "2023-03-08T14:51:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PUu9x",
          "commit": {
            "abbreviatedOid": "f8d13a0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T14:53:42Z",
          "updatedAt": "2023-03-08T14:53:42Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "On the editorial part: I think \"perceives\" is just the wrong word. I was also trying to make it shorter but feel free to take any of the two suggestions.\r\n\r\nOn the text itself, if we use normative language it should stay here and not move to the implementation guidance section. let keep this for now and maybe open a separate issue in case we need more discussion or actually want to change it.\r\n\r\nMy view is: I think we need some normative guidance because of the RTT calculation issue. However, there might be room for refining it or provide further explanation in the implementation guidance scheduling section.",
              "createdAt": "2023-03-08T14:53:42Z",
              "updatedAt": "2023-03-08T14:53:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PUwVC",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T14:56:33Z",
          "updatedAt": "2023-03-08T14:56:33Z",
          "comments": [
            {
              "originalPosition": 299,
              "body": "I see that this text was removed, which is fine. But was it re-added somewhere else?",
              "createdAt": "2023-03-08T14:56:33Z",
              "updatedAt": "2023-03-08T21:05:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PU0VB",
          "commit": {
            "abbreviatedOid": "f8d13a0"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T15:04:48Z",
          "updatedAt": "2023-03-08T15:04:49Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "Ok, let's take one of the suggestions.\r\n\r\nFor the content, we can follow up on both #181 and maybe #183.",
              "createdAt": "2023-03-08T15:04:48Z",
              "updatedAt": "2023-03-08T15:04:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PVc38",
          "commit": {
            "abbreviatedOid": "b4295e6"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T16:27:55Z",
          "updatedAt": "2023-03-08T16:27:56Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I think it would be more correct to say that a path is identified by the 4-tuple and each path has one or more associated CIDs to identify the packet number space that is used over the path. However, maybe just easier to remove it as I don't think we necessarily need a definition of path anymore.\r\n\r\nNote that the introduction also says this:\r\n\r\n> A path is determined by the 4-tuple of source and destination IP address as well as source and destination port. Therefore, there can be at most one active paths/connection ID per 4-tuple.[\u00b6](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#section-1-3.6)\r\n\r\n",
              "createdAt": "2023-03-08T16:27:56Z",
              "updatedAt": "2023-03-08T16:27:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PVdeS",
          "commit": {
            "abbreviatedOid": "b4295e6"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T16:29:15Z",
          "updatedAt": "2023-03-08T16:29:16Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "```suggestion\r\nrequests the peer to stop sending packets with the corresponding Destination Connection ID.\r\n```",
              "createdAt": "2023-03-08T16:29:15Z",
              "updatedAt": "2023-03-08T16:29:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PVo9f",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T16:55:16Z",
          "updatedAt": "2023-03-08T16:55:17Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "\"receive packet with\" is a better text than \"perceived\".\r\n\r\nAnd yes, let's merge this PR as is, and discuss path affinity of MP_ACK separately.",
              "createdAt": "2023-03-08T16:55:16Z",
              "updatedAt": "2023-03-08T16:55:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PV-xw",
          "commit": {
            "abbreviatedOid": "0db9fbb"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T17:51:04Z",
          "updatedAt": "2023-03-08T17:51:05Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "```suggestion\r\nby sending a PATH_ABANDON frame (see {{path-abandon-frame}}) which\r\n```",
              "createdAt": "2023-03-08T17:51:04Z",
              "updatedAt": "2023-03-08T17:51:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PWKfa",
          "commit": {
            "abbreviatedOid": "0db9fbb"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T18:23:20Z",
          "updatedAt": "2023-03-08T18:23:21Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "This is entirely my fault with PR #174 but this is actually specified already later in the text and therefore redundant here. However, we can also just leave this for now and make another editorial pass later.",
              "createdAt": "2023-03-08T18:23:20Z",
              "updatedAt": "2023-03-08T18:23:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PWiLq",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T19:28:39Z",
          "updatedAt": "2023-03-08T19:28:40Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "I started a discussion of the \"ACK on same path\" in issue #190 ",
              "createdAt": "2023-03-08T19:28:39Z",
              "updatedAt": "2023-03-08T19:28:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PaHN2",
          "commit": {
            "abbreviatedOid": "0db9fbb"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T08:35:03Z",
          "updatedAt": "2023-03-09T08:35:03Z",
          "comments": [
            {
              "originalPosition": 299,
              "body": "Not yet. We may add a sentence to clarify that we should just ignore Multipath frames related to retired DCIDs, but I would suggest to add such a sentence at the beginning of the section introducing these frames, as this applies to all of them.",
              "createdAt": "2023-03-09T08:35:03Z",
              "updatedAt": "2023-03-09T08:35:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PaVnj",
          "commit": {
            "abbreviatedOid": "0db9fbb"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T09:09:05Z",
          "updatedAt": "2023-03-09T09:09:05Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Let's fix that in another PR then.",
              "createdAt": "2023-03-09T09:09:05Z",
              "updatedAt": "2023-03-09T09:09:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PaWgu",
          "commit": {
            "abbreviatedOid": "f8d13a0"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T09:11:12Z",
          "updatedAt": "2023-03-09T09:11:13Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Alright, let's remove this definition and just add a note that when we say \"path\", it's the same as a \"network path\" in RFC9000.",
              "createdAt": "2023-03-09T09:11:12Z",
              "updatedAt": "2023-03-09T09:11:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PbRnD",
          "commit": {
            "abbreviatedOid": "6ff005d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T11:17:20Z",
          "updatedAt": "2023-03-09T11:17:20Z",
          "comments": [
            {
              "originalPosition": 299,
              "body": "Okay, maybe let's open an issue, so we don't forget!",
              "createdAt": "2023-03-09T11:17:20Z",
              "updatedAt": "2023-03-09T11:17:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PbR9v",
          "commit": {
            "abbreviatedOid": "6ff005d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T11:18:19Z",
          "updatedAt": "2023-03-09T11:18:19Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Okay, should we open an (editorial) issue, so we don't forget? Or we can create a new PR right after this one is merged (without an issue).",
              "createdAt": "2023-03-09T11:18:19Z",
              "updatedAt": "2023-03-09T11:18:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pb4xm",
          "commit": {
            "abbreviatedOid": "7a9c103"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T12:29:29Z",
          "updatedAt": "2023-03-09T12:29:30Z",
          "comments": [
            {
              "originalPosition": 299,
              "body": "Filled #193.",
              "createdAt": "2023-03-09T12:29:29Z",
              "updatedAt": "2023-03-09T12:29:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pb6jA",
          "commit": {
            "abbreviatedOid": "0db9fbb"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T12:34:27Z",
          "updatedAt": "2023-03-09T12:34:27Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Filled #194.",
              "createdAt": "2023-03-09T12:34:27Z",
              "updatedAt": "2023-03-09T12:34:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PhL4q",
          "commit": {
            "abbreviatedOid": "6ff005d"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good to me. ",
          "createdAt": "2023-03-10T02:58:33Z",
          "updatedAt": "2023-03-10T02:58:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 187,
      "id": "PR_kwDOGNtpaM5LVML7",
      "title": "Explain number spaces",
      "url": "https://github.com/quicwg/multipath/pull/187",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This explanation of how to implement number spaces addresses issue #184.",
      "createdAt": "2023-03-06T05:38:04Z",
      "updatedAt": "2023-04-06T04:35:58Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "6e279069cf117af0b6bee17d0248ba726ed4bbbe",
      "headRepository": "huitema/multipath",
      "headRefName": "explain-numbers",
      "headRefOid": "0b55b332adc9aec408102c88cd6166d1b4b954be",
      "closedAt": "2023-03-10T08:40:05Z",
      "mergedAt": "2023-03-10T08:40:05Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "b320d91fb15cb7f9551d2fa606f9af23ab5089f1"
      },
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that I still have some diffs when running `make fix-lint`.",
          "createdAt": "2023-03-06T09:14:25Z",
          "updatedAt": "2023-03-06T09:14:25Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this text is fine and is ready to merge.\r\n\r\nHowever, I still have one question: what's about loss detection? if you only change the CID but not the 4-tuple/path, you don't reset congestion control but as you reset your packet number space this might make loss detection more complicated. Do we need to provide some implementation guidance about this?\r\n\r\nWe can just merge this now and I can open an issue. Or there is anything we can/should add right now to this PR?",
          "createdAt": "2023-03-09T19:44:47Z",
          "updatedAt": "2023-03-09T19:44:47Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak I am a bit concerned that developing how and when variables like the RTT are updated will at best replicates the prescriptive text in the previous section, or worse conflicts with it. If we say anything, it will have to be \"the processing and update of the per path variables is specified in section so and so\", but I am not sure that helps. I would rather check in as is.\r\n\r\nOf course, there is also a longer answer. If the path did not change, the acknowledgement based loss detection (section 6.1 of RFC 9002) could take into account not just the number of \"posterior\" packets acknowledged with that old CID, but also the number of packets acknowledged in the \"new\" number space. That seems logical, but it implies that the acks for the \"old\" CID are not sent later than the acks for the \"new\" CID. This depends on implementation choices, and thus may not be reliable. We could have a discussion.\r\n\r\nSo yes, leave it as is.",
          "createdAt": "2023-03-10T00:25:21Z",
          "updatedAt": "2023-03-10T00:25:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5PBXa7",
          "commit": {
            "abbreviatedOid": "e329f72"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The added text greatly clarifies the relation between CIDs and paths IMHO. Some suggestions to make naming coherence across the document + typos.",
          "createdAt": "2023-03-06T08:57:45Z",
          "updatedAt": "2023-03-06T09:11:43Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nDestination Connection ID is linked to a separate packet number space.\r\n```",
              "createdAt": "2023-03-06T08:57:45Z",
              "updatedAt": "2023-03-06T09:11:43Z"
            },
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nRFC 9000, which only have to manage three number spaces for Initial,\r\n```",
              "createdAt": "2023-03-06T08:58:16Z",
              "updatedAt": "2023-03-06T09:11:43Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nmodel the relations between paths and number spaces, as shown\r\nin {{fig-number-spaces}}.\r\n```",
              "createdAt": "2023-03-06T09:00:13Z",
              "updatedAt": "2023-03-06T09:11:43Z"
            },
            {
              "originalPosition": 47,
              "body": "Just for name coherence across the remaining of the document.\r\n\r\n```suggestion\r\nThe path is defined by the 4-tuple through which packets are\r\n```",
              "createdAt": "2023-03-06T09:02:54Z",
              "updatedAt": "2023-03-06T09:11:43Z"
            },
            {
              "originalPosition": 56,
              "body": "Given that there are sending and receiving CIDs, maybe clarify a bit?\r\n\r\n```suggestion\r\nThe relation between CIDs and paths is not fixed. A node may\r\ndecide to rotate the Destination CID it uses, a NAT may decide\r\nto change the 4-tuple over which packets from that path will be\r\nreceived.\r\n```",
              "createdAt": "2023-03-06T09:06:28Z",
              "updatedAt": "2023-03-06T09:11:44Z"
            },
            {
              "originalPosition": 64,
              "body": "```suggestion\r\n  with the 4-tuple. They will remain unchanged if data starts\r\n```",
              "createdAt": "2023-03-06T09:07:14Z",
              "updatedAt": "2023-03-06T09:11:44Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n  being received or sent through the same 4-tuple using new CIDs.\r\n```",
              "createdAt": "2023-03-06T09:07:24Z",
              "updatedAt": "2023-03-06T09:11:44Z"
            },
            {
              "originalPosition": 81,
              "body": "```suggestion\r\nreceiver number space could still be used to send ACK_MP frames\r\n```",
              "createdAt": "2023-03-06T09:09:32Z",
              "updatedAt": "2023-03-06T09:11:44Z"
            },
            {
              "originalPosition": 84,
              "body": "```suggestion\r\nwhen processing incoming ACK_MP frames for that number space. Such\r\n```",
              "createdAt": "2023-03-06T09:09:50Z",
              "updatedAt": "2023-03-06T09:11:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PENYM",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:02:31Z",
          "updatedAt": "2023-03-06T15:02:32Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n   | Receiver Number Space   |\r\n```",
              "createdAt": "2023-03-06T15:02:31Z",
              "updatedAt": "2023-03-06T15:02:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PENda",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:02:41Z",
          "updatedAt": "2023-03-06T15:02:42Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n   | CID received from peer: |\r\n```",
              "createdAt": "2023-03-06T15:02:41Z",
              "updatedAt": "2023-03-06T15:02:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PENnk",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:03:01Z",
          "updatedAt": "2023-03-06T15:03:02Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n   | Space                   |\r\n```",
              "createdAt": "2023-03-06T15:03:02Z",
              "updatedAt": "2023-03-06T15:03:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEN4D",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:03:26Z",
          "updatedAt": "2023-03-06T15:03:27Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n~~~\r\n```",
              "createdAt": "2023-03-06T15:03:26Z",
              "updatedAt": "2023-03-06T15:03:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEN_E",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:03:36Z",
          "updatedAt": "2023-03-06T15:03:37Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\n   | CID previously used by  |\r\n```",
              "createdAt": "2023-03-06T15:03:37Z",
              "updatedAt": "2023-03-06T15:03:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEOhO",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:04:26Z",
          "updatedAt": "2023-03-06T15:04:27Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2023-03-06T15:04:26Z",
              "updatedAt": "2023-03-06T15:04:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PEOnu",
          "commit": {
            "abbreviatedOid": "4e69545"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T15:04:36Z",
          "updatedAt": "2023-03-06T15:04:37Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2023-03-06T15:04:36Z",
              "updatedAt": "2023-03-06T15:04:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PiOqK",
          "commit": {
            "abbreviatedOid": "f0a3dd8"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T08:38:04Z",
          "updatedAt": "2023-03-10T08:38:04Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Just adding markdown reference for RFC 9000, purely editorial.\r\n\r\n```suggestion\r\n{{QUIC-TRANSPORT}}, which only have to manage three number spaces for Initial,\r\n```",
              "createdAt": "2023-03-10T08:38:04Z",
              "updatedAt": "2023-03-10T08:38:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 189,
      "id": "PR_kwDOGNtpaM5LiyI1",
      "title": "Add descriptions on resetting packet number  when a new CID is used",
      "url": "https://github.com/quicwg/multipath/pull/189",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A new sentence is added to clarify that when a new CID is used, packet number space's largest_ack should be reset to None for the packet number encoding algorithm specified in RFC9000.",
      "createdAt": "2023-03-08T06:42:42Z",
      "updatedAt": "2023-03-10T14:17:42Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "6e279069cf117af0b6bee17d0248ba726ed4bbbe",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/pn_reset",
      "headRefOid": "efd08d26fc6cf408ff610f63ca26d9a6b76f4eeb",
      "closedAt": "2023-03-10T14:17:42Z",
      "mergedAt": "2023-03-10T14:17:42Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "1cf75916dd74fe81c5f2db5f8f617d3479f2a556"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5PSXKJ",
          "commit": {
            "abbreviatedOid": "aa43957"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I think we should not discuss the notion of path here.",
          "createdAt": "2023-03-08T09:09:09Z",
          "updatedAt": "2023-03-08T09:27:08Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\neach Destination Connection ID is linked to a separate packet number space.\r\n```",
              "createdAt": "2023-03-08T09:09:09Z",
              "updatedAt": "2023-03-08T09:27:08Z"
            },
            {
              "originalPosition": 9,
              "body": "I think discussing the notion of path here adds confusion. Packet number spaces are directly related to the CIDs. Maybe this would be clearer?\r\n```suggestion\r\nEach CID-specific packet number space starts at packet number 0. When following\r\nthe packet number encoding algorithm described in {{Section A.2 of QUIC-TRANSPORT}},\r\nthe largest packet number (largest_acked) that has been acknowledged by the\r\npeer in this new CID's packet number space is initially set to \"None\".\r\n```",
              "createdAt": "2023-03-08T09:26:30Z",
              "updatedAt": "2023-03-08T09:27:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PVPQO",
          "commit": {
            "abbreviatedOid": "aa43957"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Please use Quentin's text!",
          "createdAt": "2023-03-08T15:59:55Z",
          "updatedAt": "2023-03-08T16:00:22Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "+1 @qdeconinck . The word \"reset\" in the original PR suggests that the number space is \"per path\". It is not. It is per CID.",
              "createdAt": "2023-03-08T15:59:55Z",
              "updatedAt": "2023-03-08T16:00:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PVZdP",
          "commit": {
            "abbreviatedOid": "aa43957"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T16:20:30Z",
          "updatedAt": "2023-03-08T16:20:31Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yes, \"reset\" would be problematic as you still need to keep state also for any packet that you may receive with the old CID.\r\n\r\nHow does changing the CID on the same path actually impact loss detection? Do we also need to say something about that?",
              "createdAt": "2023-03-08T16:20:30Z",
              "updatedAt": "2023-03-08T16:20:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PVapw",
          "commit": {
            "abbreviatedOid": "aa43957"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-08T16:23:11Z",
          "updatedAt": "2023-03-08T16:23:12Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "@mirjak For the changing CID, I suggest to adapt the text in #172 (basically, if you change the CID on a path, you can keep your path's congestion control state and RTT measurements).",
              "createdAt": "2023-03-08T16:23:11Z",
              "updatedAt": "2023-03-08T16:23:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PZXW-",
          "commit": {
            "abbreviatedOid": "aa43957"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T05:44:38Z",
          "updatedAt": "2023-03-09T05:44:38Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yeah, my bad. The word \"reset\" has problems. I will adopt Quentin's suggestions.",
              "createdAt": "2023-03-09T05:44:38Z",
              "updatedAt": "2023-03-09T05:44:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pax_j",
          "commit": {
            "abbreviatedOid": "efd08d2"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-09T10:15:05Z",
          "updatedAt": "2023-03-09T10:15:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5PkaUu",
          "commit": {
            "abbreviatedOid": "efd08d2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-10T14:17:27Z",
          "updatedAt": "2023-03-10T14:17:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 191,
      "id": "PR_kwDOGNtpaM5Loor1",
      "title": "Add retire_cid in path status figure in section 4.4",
      "url": "https://github.com/quicwg/multipath/pull/191",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-09T06:00:29Z",
      "updatedAt": "2023-07-05T15:11:26Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "6e279069cf117af0b6bee17d0248ba726ed4bbbe",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/refine_fig_4_4",
      "headRefOid": "908dcaa7b13805cbecefff03e32c0cbaa3143bf7",
      "closedAt": "2023-07-05T15:11:25Z",
      "mergedAt": "2023-07-05T15:11:25Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "d83db366d870eeb3eba43787535192e70add8967"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this needs updating again, as we now say in the text that you wait for 3 PTOs after the Abandon frame before you send the retire_CID frame. Does that mean we need an additional state here?",
          "createdAt": "2023-06-30T10:16:37Z",
          "updatedAt": "2023-06-30T10:16:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5PazFO",
          "commit": {
            "abbreviatedOid": "eea0461"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T10:17:46Z",
          "updatedAt": "2023-03-09T10:17:53Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Why would receiving a RETIRE_CONNECTION_ID would close the path? It does not prevent sending on that path with your own DCID (which is different from the CID being retired).\r\n```suggestion\r\n       | RETIRE_CONNECTION_ID sent               |\r\n```",
              "createdAt": "2023-03-09T10:17:46Z",
              "updatedAt": "2023-03-09T10:17:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PkmCD",
          "commit": {
            "abbreviatedOid": "eea0461"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T14:44:26Z",
          "updatedAt": "2023-03-10T14:44:26Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "We just updated the text, do we need to update this as well. I guess you actually go into \"closed\" if we have both, received an retired CID farm and send your as well, or 3 PTOs after the abandon was sent.",
              "createdAt": "2023-03-10T14:44:26Z",
              "updatedAt": "2023-03-10T14:44:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pa4n0",
          "commit": {
            "abbreviatedOid": "eea0461"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T10:30:43Z",
          "updatedAt": "2023-03-13T14:18:46Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Even if you have sent a RETIRE_CONNECTION_ID, you are still capable of receiving packets from your peer until the peer also sends RETIRE_CONNECTION_ID so that you can release your receiver side resource. In other words, you need to make sure (1) you have told the peer that you would not use the CID of that path to send packets any further, and (2) you have got the RETIRE_CONNECTION_ID and thus, releasing your resource on the receiver side.",
              "createdAt": "2023-03-09T10:30:43Z",
              "updatedAt": "2023-03-13T14:18:46Z"
            },
            {
              "originalPosition": 4,
              "body": "As a path is bidirectional and it should be acknowledged by both ends to transfer to the next state.",
              "createdAt": "2023-03-09T10:34:04Z",
              "updatedAt": "2023-03-13T14:18:46Z"
            },
            {
              "originalPosition": 4,
              "body": "This is linked to issue #176 .",
              "createdAt": "2023-03-12T06:06:14Z",
              "updatedAt": "2023-03-13T14:18:46Z"
            },
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n       | RETIRE_CONNECTION_ID sent && received   |\r\n```",
              "createdAt": "2023-03-13T13:30:15Z",
              "updatedAt": "2023-03-13T14:18:46Z"
            },
            {
              "originalPosition": 4,
              "body": "Change \"|\" to \"&&\" as we actually need both \"send\" and \"receive\" to quickly close a path.",
              "createdAt": "2023-03-13T13:36:17Z",
              "updatedAt": "2023-03-13T14:18:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PtV7Q",
          "commit": {
            "abbreviatedOid": "908dcaa"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T15:01:02Z",
          "updatedAt": "2023-03-13T15:01:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Zz4PT",
          "commit": {
            "abbreviatedOid": "908dcaa"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-30T08:40:27Z",
          "updatedAt": "2023-06-30T08:40:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 192,
      "id": "PR_kwDOGNtpaM5LqKOS",
      "title": "update scheduling guidances",
      "url": "https://github.com/quicwg/multipath/pull/192",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Let's give the facts to the implementers, without providing too specific guidance neither.\r\n\r\nFix #183 and may also address #190.",
      "createdAt": "2023-03-09T10:41:32Z",
      "updatedAt": "2024-03-27T05:27:58Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "6e279069cf117af0b6bee17d0248ba726ed4bbbe",
      "headRepository": "quicwg/multipath",
      "headRefName": "scheduling",
      "headRefOid": "a1a99f0ce47b9f55a487121a6492c0fc34da6326",
      "closedAt": "2023-03-13T13:12:43Z",
      "mergedAt": "2023-03-13T13:12:43Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9d03afb941154ab4021690b17086fb22a0976291"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5PbAzu",
          "commit": {
            "abbreviatedOid": "40a745a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-09T10:44:15Z",
          "updatedAt": "2023-03-09T10:44:16Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Note that this text may supersede the one in Section 5.1:\r\n\r\n> ACK_MP frame (defined in [Section 8.3](https://quicwg.org/multipath/draft-ietf-quic-multipath.html#ack-mp-frame)) SHOULD be sent on the same path as identified by the Path Identifier. However, an ACK_MP frame can be returned via a different path, based on different strategies of sending ACK_MP frames.",
              "createdAt": "2023-03-09T10:44:15Z",
              "updatedAt": "2023-03-09T10:44:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pkjrj",
          "commit": {
            "abbreviatedOid": "40a745a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T14:39:25Z",
          "updatedAt": "2023-03-10T14:39:29Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "This is fine to have effect of this scheduling explained a bit more here but leave the normative things in other sections.\r\n\r\nHowever, you  removed a lot of text now. I think we should keep mentioning two things:\r\n\r\n1) if not ACK as sent over the sama path that can/will impact RTT estimation negatively.\r\n\r\n2) I found it catalo useful to provide a reference to {{I-D.bonaventure-iccrg-schedulers}} ",
              "createdAt": "2023-03-10T14:39:25Z",
              "updatedAt": "2023-03-10T14:39:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pk2Gx",
          "commit": {
            "abbreviatedOid": "40a745a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T15:15:51Z",
          "updatedAt": "2023-03-10T15:15:52Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "For the normative text, I was actually proposing to remove the text about endpoints that SHOULD send ACK_MP on the same path. But this would not be part of this PR.\r\n\r\nRegarding your first point, I'm not sure sending no ACK at all on the same path necessarily impact RTT estimation in a bad way. As long as you keep consistency in sending your ACKs, this should not be a big issue. Also note that with network paths having asymmetrical characteristics in forward or backward directions, it might be desirable from a performance viewpoint to send ACKs on some specific paths. See also #190. My main point is that we should not rely on specific scheduling from the peer to make Multipath QUIC work.\r\n\r\nRegarding your second point, I'm not against keeping the reference. However, this other draft is not adopted (and currently expired), not sure how this would be a problem in the publication process.",
              "createdAt": "2023-03-10T15:15:51Z",
              "updatedAt": "2023-03-10T15:15:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Plcri",
          "commit": {
            "abbreviatedOid": "40a745a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Looks good, but the description of congestion is imprecise. Either drop it or fix it.",
          "createdAt": "2023-03-10T16:44:01Z",
          "updatedAt": "2023-03-10T16:48:35Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Can we say this a little better? ACK frames, for example, are not subject to the congestion control. The proper statement would be:\r\n~~~suggestion\r\nQUIC packets that increase the number of bytes in flight can only be sent when the congestion window is open.\r\n~~~\r\nBut that's a bit tautological. One could just drop the whole sentence, because that's exactly what the word \"regulated\" above means.\r\n",
              "createdAt": "2023-03-10T16:44:01Z",
              "updatedAt": "2023-03-10T16:48:35Z"
            },
            {
              "originalPosition": 36,
              "body": "I agree with the proposal. It does remove text, but less text is better. And it says exactly what we want, i.e., scheduling of packets is up to the implementation.\r\n\r\nIn particular, I like the removal of the reference to time stamps. The draft is expiring, and despite efforts nobody is picking it up. Rather not have a reference to an expired draft in a proposed standard.",
              "createdAt": "2023-03-10T16:47:30Z",
              "updatedAt": "2023-03-10T16:48:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pl2Pi",
          "commit": {
            "abbreviatedOid": "40a745a"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T17:39:08Z",
          "updatedAt": "2023-03-10T17:39:09Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "You're right. Your suggestion above is good (committing now). But yeah, this sentence may not be necessary in the end...",
              "createdAt": "2023-03-10T17:39:08Z",
              "updatedAt": "2023-03-10T17:39:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PmB9m",
          "commit": {
            "abbreviatedOid": "9af24ca"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T18:05:30Z",
          "updatedAt": "2023-03-10T18:05:31Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nscheme. QUIC packets that increase the number of bytes in flight can only be sent\r\nwhen the congestion window allows it.\r\n```",
              "createdAt": "2023-03-10T18:05:30Z",
              "updatedAt": "2023-03-10T18:05:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PmDAw",
          "commit": {
            "abbreviatedOid": "9af24ca"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T18:09:07Z",
          "updatedAt": "2023-03-10T18:09:08Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Okay to not say much about RTT estimates now. We can revisit that later if anything needed. Might be good to review the text we have about RTT estimation first.\r\n\r\nAbout the reference, having a reference to an individual draft or even expired draft is no problem as long as it is informational. However, maybe we have a nice research paper we can refer instead? I can try to find something but @qdeconinck I'm sure you also have a good overview.",
              "createdAt": "2023-03-10T18:09:07Z",
              "updatedAt": "2023-03-10T18:09:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PqRyC",
          "commit": {
            "abbreviatedOid": "9af24ca"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T08:46:47Z",
          "updatedAt": "2023-03-13T08:46:47Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "To the best of my knowledge, I saw a lot of research works about Multipath TCP schedulers, mostly to achieve bandwidth aggregation in different network situations. There are only a few papers out discussing Multipath QUIC schedulers, but they are most of the time very focused on a specific case and often based on an old Multipath Google QUIC (2017) prototype -- XQUIC being one of the notable exceptions.\r\n\r\nIf there is no issue in keeping the informational draft about scheduling and if you still want to have a reference discussing different possible strategies, then let's do that.",
              "createdAt": "2023-03-13T08:46:47Z",
              "updatedAt": "2023-03-13T08:46:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PsOxz",
          "commit": {
            "abbreviatedOid": "2f1b13b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2023-03-13T12:57:20Z",
          "updatedAt": "2023-03-13T12:57:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5PsQWq",
          "commit": {
            "abbreviatedOid": "2f1b13b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:00:53Z",
          "updatedAt": "2023-03-13T13:00:54Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nis a local decision, based on the preferences of the application and the\r\n```",
              "createdAt": "2023-03-13T13:00:53Z",
              "updatedAt": "2023-03-13T13:00:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PtP88",
          "commit": {
            "abbreviatedOid": "a1a99f0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T14:52:04Z",
          "updatedAt": "2023-03-13T14:52:04Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "I know it is merged now, which is fine. However, having a reference to different scheduling strategies I think is still useful. Even if those papers are about TCP, the scheduling is usually not that much protocol dependent (except that in addition can/should consider streams in QUIC). But maybe the individual draft is still the best reference as it describes different approach in an protocol independent way.",
              "createdAt": "2023-03-13T14:52:04Z",
              "updatedAt": "2023-03-13T14:52:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 195,
      "id": "PR_kwDOGNtpaM5Lv5yY",
      "title": "Make DCID sequence number considerations common to all multipath-specific frames",
      "url": "https://github.com/quicwg/multipath/pull/195",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "More specifically, if the receiver cannot process an old DCID seq number, it MUST ignore it (i.e., no error).\r\n\r\nFix #193. Also fix #137.",
      "createdAt": "2023-03-10T09:12:13Z",
      "updatedAt": "2023-03-13T10:03:19Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "b320d91fb15cb7f9551d2fa606f9af23ab5089f1",
      "headRepository": "quicwg/multipath",
      "headRefName": "multipath-specific-old-dcid",
      "headRefOid": "61d7d8b50c40829832ee17f85e588d851943af16",
      "closedAt": "2023-03-13T10:03:19Z",
      "mergedAt": "2023-03-13T10:03:19Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "248bde1e7d74268bfc398c637a9f282ddabe7b74"
      },
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated the PR to also include the case of a DCID sequence number greater than any sent (connection error).",
          "createdAt": "2023-03-13T08:59:22Z",
          "updatedAt": "2023-03-13T08:59:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5PkcWp",
          "commit": {
            "abbreviatedOid": "4666bdc"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T14:22:23Z",
          "updatedAt": "2023-03-10T14:22:23Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nAll multipath-specific frames relate to a Destination Connection\r\n```",
              "createdAt": "2023-03-10T14:22:23Z",
              "updatedAt": "2023-03-10T14:22:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PkdkV",
          "commit": {
            "abbreviatedOid": "4666bdc"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T14:25:21Z",
          "updatedAt": "2023-03-10T14:25:21Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I think we should cover two cases here. If the seq number is smaller than the largest issued, you should ignore. If it's larger you have a connection error...?",
              "createdAt": "2023-03-10T14:25:21Z",
              "updatedAt": "2023-03-10T14:25:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5PkhNe",
          "commit": {
            "abbreviatedOid": "4666bdc"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T14:33:37Z",
          "updatedAt": "2023-03-10T14:33:37Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Yeah, this is related to #197 as well. Either we move the \"ACK_MP-specific\" text we currently have to this section in this PR, or instead delegate to a separate PR. Either option works for me.",
              "createdAt": "2023-03-10T14:33:37Z",
              "updatedAt": "2023-03-10T14:33:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Pqztt",
          "commit": {
            "abbreviatedOid": "61d7d8b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Look good to me",
          "createdAt": "2023-03-13T10:03:12Z",
          "updatedAt": "2023-03-13T10:03:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 198,
      "id": "PR_kwDOGNtpaM5Lxjfi",
      "title": "Send Abandon frame after NAT rebinding",
      "url": "https://github.com/quicwg/multipath/pull/198",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "needs-discussion"
      ],
      "body": "This is the proposed text more the other PR to start working this. The proposed solution in further discussion was to also extend the path abandon path with a specific reason code of this case.",
      "createdAt": "2023-03-10T14:57:27Z",
      "updatedAt": "2024-05-27T14:50:30Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "1cf75916dd74fe81c5f2db5f8f617d3479f2a556",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-20",
      "headRefOid": "6d94bc39d7433067bfeef451aa3f9cf0ff629f01",
      "closedAt": "2024-05-27T14:50:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "See issue #188 ",
          "createdAt": "2023-03-10T15:22:23Z",
          "updatedAt": "2023-03-10T15:22:23Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, this is not ready to merge and discuss should take place in the issue (#188). I just wanted to capture this text as a starting point before we lose it.",
          "createdAt": "2023-03-10T17:21:43Z",
          "updatedAt": "2023-03-10T17:21:43Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we need clarity on PR #292 before we progress this draft. We have an issue there, because the \"Natted\" path and the \"before-NAT\" path use the same number space. With PR #292, that gives us a strong constraint. I think I explained a plausible solution in https://github.com/quicwg/multipath/pull/292#discussion_r1493966132, but with that solution if rebinding is accepted the new (natted) path will have the same path_id as before NAT rebinding.",
          "createdAt": "2024-02-20T05:54:33Z",
          "updatedAt": "2024-02-20T05:54:33Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "OBE after merge of #292",
          "createdAt": "2024-05-27T14:50:29Z",
          "updatedAt": "2024-05-27T14:50:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Plj1u",
          "commit": {
            "abbreviatedOid": "6d94bc3"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "That PR is premature. We do not yet have consensus on how to solve issue #188, and we should keep the discussion there.",
          "createdAt": "2023-03-10T17:02:39Z",
          "updatedAt": "2023-03-10T17:03:36Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I am really not sure there. First, I think having side effects for PATH_CHALLENGE is a bad idea, as PATH_CHALLENGE is just a connectivity test. Second, I do not understand the mechanism. We understand that if a node only use heuristics, it will sometime fail to identify the old path. If it does identify it, it will send two path challenges per normal NAT rebinding guidance, only the one on the new path will succeeds, and everything will be fixed. But if it does not, it will only send a path challenge on the new path, to confirm continuity. Due to asymmetric knowledge, the peer sees only one path, so the challenge arrives on the existing path. There should be no other action than sending a path response. ",
              "createdAt": "2023-03-10T17:02:39Z",
              "updatedAt": "2023-03-10T17:03:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 199,
      "id": "PR_kwDOGNtpaM5L4IyN",
      "title": "editorial pass on frames section",
      "url": "https://github.com/quicwg/multipath/pull/199",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #196.",
      "createdAt": "2023-03-13T10:10:07Z",
      "updatedAt": "2023-03-13T15:06:58Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "248bde1e7d74268bfc398c637a9f282ddabe7b74",
      "headRepository": "quicwg/multipath",
      "headRefName": "frames-section",
      "headRefOid": "5dbfdc0cbc6fe32fe2e20e7e60b57f91e9def78b",
      "closedAt": "2023-03-13T15:06:58Z",
      "mergedAt": "2023-03-13T15:06:58Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "71d30fce58f87cafa37bb1e1694b4cc6bac644c4"
      },
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The ACK_MP text does not change, it just comes before PATH_ABANDON and PATH_STATUS. The rationale is that 1) the new order follows the encoding numbering (lowest to highest), and 2) the ACK_MP is a critical frame, the PATH_ABANDON is an important one yet still \"indicative\" (it suggests the peer to abandon this path) and the PATH_STATUS frame is an indicative one.",
          "createdAt": "2023-03-13T13:17:24Z",
          "updatedAt": "2023-03-13T13:17:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5PsT-X",
          "commit": {
            "abbreviatedOid": "5dbfdc0"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I prefer keep ACK_MP unchanged, but the left modification for issue #196 is ok.",
          "createdAt": "2023-03-13T13:08:59Z",
          "updatedAt": "2023-03-13T13:08:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5PsaDC",
          "commit": {
            "abbreviatedOid": "5dbfdc0"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "OK. It's reasonable.",
          "createdAt": "2023-03-13T13:22:16Z",
          "updatedAt": "2023-03-13T13:22:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5PtYq_",
          "commit": {
            "abbreviatedOid": "5dbfdc0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T15:05:34Z",
          "updatedAt": "2023-03-13T15:05:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 203,
      "id": "PR_kwDOGNtpaM5NOZiI",
      "title": "remove text that contradicts to the WG's effort trying to prevent ossification",
      "url": "https://github.com/quicwg/multipath/pull/203",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "As a working group, we are spending efforts to prevent ossification (see QUIC v2 draft as an example).\r\n\r\nI think it'd be inappropriate to have a statement that sounds as if we think that ossification is inevitable and that QUIC versions other than v1 is going to have lower penetration rate.",
      "createdAt": "2023-03-30T05:03:01Z",
      "updatedAt": "2023-07-05T15:12:12Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71d30fce58f87cafa37bb1e1694b4cc6bac644c4",
      "headRepository": "kazuho/quic-multipath",
      "headRefName": "kazuho/ossification",
      "headRefOid": "3d0a264c47b482ead29d7e3211ece2984ddeb07d",
      "closedAt": "2023-07-05T15:12:11Z",
      "mergedAt": "2023-07-05T15:12:11Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "1d00b40f196ea1b17bff3942ba0cc63bfcafaa90"
      },
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fully agree. I'd even go one step further and claim that if this was an opportunity to get middleboxes used to yet another QUIC version (other than v1 and v2), I'd see this as a feature, not a bug.",
          "createdAt": "2023-03-30T05:04:30Z",
          "updatedAt": "2023-03-30T05:04:49Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Agree with the PR. \r\n\r\nAs a higher order point, this intro can do with a good editorial pass to make it more appropriate for a finished RFC. Some of the points in the intro are very interesting fetaures of multipath QUIC or notable in the operation of the protocol. Others, such as the part Kazuho is removing, are historical baggage that is good to leave on the editing floor.",
          "createdAt": "2023-03-30T05:07:36Z",
          "updatedAt": "2023-03-30T05:07:36Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sure. There are plenty of good reasons to build on QUIC V1, e.g., code compatibility, tests, security analyses. But middleboxes is not one of them.",
          "createdAt": "2023-03-30T05:38:33Z",
          "updatedAt": "2023-03-30T05:38:33Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm fine to remove the part about middleboxes but I think we did design the extension with a requirement to not change the header (i.e. otherwise we could have considered to add a separate path ID in the header). I think we should acknowledge that requirement still.",
          "createdAt": "2023-06-30T10:19:07Z",
          "updatedAt": "2023-06-30T10:19:07Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm generally fine with this PR, however, I still think reusing path validation and not changing the header are to separate points/requirements. But I don't have a strong opinion.",
          "createdAt": "2023-07-04T09:59:39Z",
          "updatedAt": "2023-07-04T09:59:39Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@Yanmei-Liu The problem with such text is that it contradicts with WGs efforts to prevent ossification (see RFC 8999 and QUIC v2 for example). In fact, if only middlebox interference was the reason, then we should be using a different version number for Multipath in alignment with other efforts to prevent ossification.\r\n\r\nIf we want to state the reason that can have consensus, probably we want to call out the privary concern (of middleboxes bisecting multipath and non-multipath traffic).\r\n\r\nBut maybe we can stop short of explaining really why. I've update the text with following sentence: _Use the same packet header formats as QUIC version 1 to minimize the difference between multipath and non-multipath traffic being exposed on wire._\r\n\r\n@mirjak @Yanmei-Liu WDYT?",
          "createdAt": "2023-07-05T00:38:16Z",
          "updatedAt": "2023-07-05T00:38:16Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, that works well for me! Thanks!",
          "createdAt": "2023-07-05T10:35:42Z",
          "updatedAt": "2023-07-05T10:35:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5RUhd4",
          "commit": {
            "abbreviatedOid": "eefa7f8"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-30T05:04:40Z",
          "updatedAt": "2023-03-30T05:04:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Z1Lw5",
          "commit": {
            "abbreviatedOid": "eefa7f8"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "@mirjak That's a fair point. How about the change below?\r\n\r\nWe can discuss the benefits of the packet header format (e.g., raise the bar of dissecting multipath and non-multipath traffic), but considering that we do explain why we are reusing path validation and connection migration, maybe the proposed change below is sufficient?",
          "createdAt": "2023-06-30T12:37:46Z",
          "updatedAt": "2023-06-30T12:41:11Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "```suggestion\r\nparticular, this proposal uses packet headers and path validation as specified for QUIC\r\n```",
              "createdAt": "2023-06-30T12:37:46Z",
              "updatedAt": "2023-06-30T12:41:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aJm8w",
          "commit": {
            "abbreviatedOid": "fc0d874"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "With the slight committed suggestion, I'm fine with the PR.",
          "createdAt": "2023-07-04T09:23:57Z",
          "updatedAt": "2023-07-04T09:23:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aMV_7",
          "commit": {
            "abbreviatedOid": "fc0d874"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T16:36:45Z",
          "updatedAt": "2023-07-04T16:36:46Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I agree with Mirja that the reuse of packet headers and path validation is to distinguish between different needs, and I fully understand the purpose of this PR. So how about:\r\n\r\n_* Use the same packet header formats as QUIC version 1 to keep the same connectivity with QUIC version 1 through middleboxes._",
              "createdAt": "2023-07-04T16:36:45Z",
              "updatedAt": "2023-07-04T16:36:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aQPlL",
          "commit": {
            "abbreviatedOid": "3d0a264"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-05T10:36:13Z",
          "updatedAt": "2023-07-05T10:36:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 217,
      "id": "PR_kwDOGNtpaM5Nuvam",
      "title": "Proposed text for RTT computation and ACK_MP scheduling",
      "url": "https://github.com/quicwg/multipath/pull/217",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #132 \r\n\r\nThis proposed text updates the discussion of RTT computation and ACK_MP scheduling in the Example section, which is not normative. The proposed text reflects the discussion during the working group meeting in Yokohama, and aligns with the apparent consensus that emerged during the discussion.",
      "createdAt": "2023-04-06T04:38:58Z",
      "updatedAt": "2023-07-05T15:35:18Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71d30fce58f87cafa37bb1e1694b4cc6bac644c4",
      "headRepository": "huitema/multipath",
      "headRefName": "new-ack-test",
      "headRefOid": "bcad91054feece4902ea1a570776a404fc830fd0",
      "closedAt": "2023-07-05T15:35:17Z",
      "mergedAt": "2023-07-05T15:35:17Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "992591b9dc6bb0c1eabf5e781d3ef526142c41ab"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Zz5bN",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T08:43:41Z",
          "updatedAt": "2023-06-30T08:43:41Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "Isn't the PTO 3xRTT?",
              "createdAt": "2023-06-30T08:43:41Z",
              "updatedAt": "2023-06-30T08:43:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Zz6m3",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T08:46:36Z",
          "updatedAt": "2023-06-30T08:46:36Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "However, I'm not sure about this. In this examples you assume that the terrestrial path will used in a stable way for ACK. In the paragraph above you say if different path are used which is a different case. So if I send half my ACK over each pass, I will see an average RTT of 475ms which is too low for those ACKs that are sent over the satellite path.",
              "createdAt": "2023-06-30T08:46:36Z",
              "updatedAt": "2023-06-30T08:46:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Zz7Hh",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T08:48:00Z",
          "updatedAt": "2023-06-30T08:48:00Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "Which algorithm exactly?",
              "createdAt": "2023-06-30T08:48:00Z",
              "updatedAt": "2023-06-30T08:48:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aFCi3",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-03T14:06:53Z",
          "updatedAt": "2023-07-03T14:06:53Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "Commenting on this PR after the merge: in the example that you cite, the smoothed RTT will actually be very close to the RTT via the shortest path + maybe 1 ACK delay. ACK_MP frames are redondant. If you send ACK alternately on short and long path, the ACK on the short path will arrive before the one on the long path. When the ACK on the long path arrives, its \"highest\" packet will already have been acked as part of a range carried on the short path, so it will not contribute to RTT computation.",
              "createdAt": "2023-07-03T14:06:53Z",
              "updatedAt": "2023-07-03T14:07:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Zz7-n",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T08:50:13Z",
          "updatedAt": "2023-07-03T16:59:30Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "Not sure if convergence is the right term here. I think it might actually not work if you keep using multiple paths for ACKs.",
              "createdAt": "2023-06-30T08:50:13Z",
              "updatedAt": "2023-07-03T16:59:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aGF2m",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-03T17:06:03Z",
          "updatedAt": "2023-07-03T17:06:04Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "Only if you send ACKs multiple time per RTT and the latency difference between the path is large.\r\n\r\nSo maybe we should rather not make any default recommendations but just explain the problems and non-problems in different alternatives...?\r\n\r\n(btw. which merge are you talking about? This PR is not merged yet)",
              "createdAt": "2023-07-03T17:06:03Z",
              "updatedAt": "2023-07-03T17:06:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aLwya",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T14:39:12Z",
          "updatedAt": "2023-07-04T14:39:12Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "Merge: I was mislead by the PR search feature. Sorry.\r\n\r\nGeneral idea:\r\n\r\n1- loss detection will be mostly triggered by the ACK sent on the shortest return path, because with RACK most loss detection is triggered by packet number comparisons, not by timers. That means losses are detected faster if enough ACK travel on the shortest return path, which tends to improve performance quite a bit.\r\n\r\n2- ACKing packets faster leads to lower memory utilisation, as packets get out of the retransmit queue faster.\r\n\r\n3- Still, we need timer measurements to compute the PTO and deal with the loss of the \"last packet\".  Just feeding all RTT samples into the algorithms works, because the combination of `SmoothedRTT` and `RTTvar` will capture both the characteristics of the paths and whatever algorithm is implemented by the peer. The PTO formula incorporates both average and variance, and thus the PTO ends up making sense.",
              "createdAt": "2023-07-04T14:39:12Z",
              "updatedAt": "2023-07-04T14:39:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aLyPu",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T14:42:28Z",
          "updatedAt": "2023-07-04T14:42:28Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "From RFC 9002:\r\n```\r\nPTO = smoothed_rtt + max(4*rttvar, kGranularity) + max_ack_delay\r\n```",
              "createdAt": "2023-07-04T14:42:28Z",
              "updatedAt": "2023-07-04T14:42:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aL1lg",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T14:48:09Z",
          "updatedAt": "2023-07-04T14:48:10Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "Should probably say \"computing smoothedRTT and RTTvar per section 5.3 of RFC9002 regardless of the path on which MP_ACK are received\". But that's a handful, so maybe:\r\n\r\n\"The simplest implementation is to compute `smoothedRTT` and `RTTvar` per section 5.3 of RFC9002 regardless of the path on which MP_ACKs are received. This algorithm will provide good results,\"",
              "createdAt": "2023-07-04T14:48:09Z",
              "updatedAt": "2023-07-04T14:48:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aL2oz",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T14:51:03Z",
          "updatedAt": "2023-07-04T14:51:04Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "I think \"convergence\" generally means that the algorithm has produced results that reflect the current network state, and that the smoothed RTT and RTTvar values will reflect that.",
              "createdAt": "2023-07-04T14:51:04Z",
              "updatedAt": "2023-07-04T14:51:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aL7ki",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T15:04:28Z",
          "updatedAt": "2023-07-04T15:04:29Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "Latest commit fixes that, hopefully.",
              "createdAt": "2023-07-04T15:04:28Z",
              "updatedAt": "2023-07-04T15:04:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aL8Bf",
          "commit": {
            "abbreviatedOid": "828fa5b"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T15:05:38Z",
          "updatedAt": "2023-07-04T15:05:38Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "Just pushed a fix in the latest commit.",
              "createdAt": "2023-07-04T15:05:38Z",
              "updatedAt": "2023-07-04T15:05:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aSbF4",
          "commit": {
            "abbreviatedOid": "a3648e8"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-05T15:17:54Z",
          "updatedAt": "2023-07-05T15:17:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 223,
      "id": "PR_kwDOGNtpaM5TJZXJ",
      "title": "ACK_MP frames ack 0-RTT packets too",
      "url": "https://github.com/quicwg/multipath/pull/223",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #222.",
      "createdAt": "2023-06-16T01:48:05Z",
      "updatedAt": "2023-06-30T08:53:44Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71d30fce58f87cafa37bb1e1694b4cc6bac644c4",
      "headRepository": "kazuho/quic-multipath",
      "headRefName": "patch-1",
      "headRefOid": "4843853cc4a5c4382e82ff7c56d3cb26d2087970",
      "closedAt": "2023-06-30T08:53:43Z",
      "mergedAt": "2023-06-30T08:53:43Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "ec731dea1dd6247efe2f317273b73bf48d14cb63"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Y9cNL",
          "commit": {
            "abbreviatedOid": "4843853"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-22T07:02:34Z",
          "updatedAt": "2023-06-22T07:02:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5ZacTp",
          "commit": {
            "abbreviatedOid": "4843853"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-27T07:15:38Z",
          "updatedAt": "2023-06-27T07:15:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Zia3F",
          "commit": {
            "abbreviatedOid": "4843853"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-28T03:31:56Z",
          "updatedAt": "2023-06-28T03:31:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Zz9Jv",
          "commit": {
            "abbreviatedOid": "4843853"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-30T08:53:19Z",
          "updatedAt": "2023-06-30T08:53:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 225,
      "id": "PR_kwDOGNtpaM5TJaEq",
      "title": "remove stale statement regarding zero-length CIDs now that they are forbidden",
      "url": "https://github.com/quicwg/multipath/pull/225",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #224.",
      "createdAt": "2023-06-16T01:53:48Z",
      "updatedAt": "2023-06-30T08:55:13Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71d30fce58f87cafa37bb1e1694b4cc6bac644c4",
      "headRepository": "kazuho/quic-multipath",
      "headRefName": "patch-2",
      "headRefOid": "fdd15408d957a0e0e2816c6fc1aa4fe088fded0d",
      "closedAt": "2023-06-30T08:55:13Z",
      "mergedAt": "2023-06-30T08:55:13Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "cd78f209370d189e7c3c5a874ae0af61c9a2e907"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Zab5v",
          "commit": {
            "abbreviatedOid": "fdd1540"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-27T07:14:35Z",
          "updatedAt": "2023-06-27T07:14:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5ZibFk",
          "commit": {
            "abbreviatedOid": "fdd1540"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I\u2019m having trouble parsing the original sentence. The new text lgtm.",
          "createdAt": "2023-06-28T03:33:34Z",
          "updatedAt": "2023-06-28T03:33:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Zz-ns",
          "commit": {
            "abbreviatedOid": "fdd1540"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-30T08:55:05Z",
          "updatedAt": "2023-06-30T08:55:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 227,
      "id": "PR_kwDOGNtpaM5T__aB",
      "title": "enable_multipath as a zero-length transport parameter",
      "url": "https://github.com/quicwg/multipath/pull/227",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The value of the transport parameter is a legacy of previous versions. Given the multipath support can be summarized as a boolean value, let's use a zero-length value TP.\r\n\r\nAlso updated the wire value of the TP, given its processing differs from the draft-04 TP.",
      "createdAt": "2023-06-27T07:38:04Z",
      "updatedAt": "2023-07-05T15:20:13Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71d30fce58f87cafa37bb1e1694b4cc6bac644c4",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-204",
      "headRefOid": "83bde97dac7ae731a51ef31992b27fe61c8eb12a",
      "closedAt": "2023-07-05T15:20:12Z",
      "mergedAt": "2023-07-05T15:20:12Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "df087f7ee03b5ee066a622bbb9c8b6e46beca131"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Zcl_Z",
          "commit": {
            "abbreviatedOid": "1a75996"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-27T11:55:02Z",
          "updatedAt": "2023-06-27T11:55:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Ziaff",
          "commit": {
            "abbreviatedOid": "1a75996"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-28T03:28:59Z",
          "updatedAt": "2023-06-28T03:29:08Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Not introduced by this PR, but since the negotiation is happening in Long Header packets, this should probably specify if you\u2019re referring to source or destination CIDs.",
              "createdAt": "2023-06-28T03:28:59Z",
              "updatedAt": "2023-06-28T03:29:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Z0AuI",
          "commit": {
            "abbreviatedOid": "1a75996"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "We need to address Martin's comment but otherwise this is fine for me.",
          "createdAt": "2023-06-30T08:57:47Z",
          "updatedAt": "2023-06-30T08:58:14Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Good catch. Actually both need to be present!",
              "createdAt": "2023-06-30T08:57:47Z",
              "updatedAt": "2023-06-30T08:58:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aJoe-",
          "commit": {
            "abbreviatedOid": "1a75996"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T09:26:52Z",
          "updatedAt": "2023-07-04T09:26:52Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "@marten-seemann @mirjak Does the following would address your comments?\r\n```suggestion\r\nMUST use non-zero source and destination connection IDs.\r\nIf an enable_multipath transport\r\n```",
              "createdAt": "2023-07-04T09:26:52Z",
              "updatedAt": "2023-07-04T09:26:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aKt82",
          "commit": {
            "abbreviatedOid": "1a75996"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-07-04T12:11:07Z",
          "updatedAt": "2023-07-04T12:11:34Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nparameter, then the endpoints MUST NOT use any frame or\r\n```\r\n\r\nI think \"MUST NOT fallback to .. with a single active path\" might be excessive.\r\n\r\nConsider the case of having another extension that uses multiple active paths. With the absence of `enable_multipath` transport parameter on either side, do we want to prohibit use of such extension?\r\n\r\nI think we do not need to.",
              "createdAt": "2023-07-04T12:11:08Z",
              "updatedAt": "2023-07-04T12:11:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aLF_N",
          "commit": {
            "abbreviatedOid": "1a75996"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T13:07:11Z",
          "updatedAt": "2023-07-04T13:07:11Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Fair point.",
              "createdAt": "2023-07-04T13:07:11Z",
              "updatedAt": "2023-07-04T13:07:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aM0Ef",
          "commit": {
            "abbreviatedOid": "1a75996"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T19:08:19Z",
          "updatedAt": "2023-07-04T19:08:19Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "For all packets other than the client's first flight (for which RFC 9000 defines a minimum length for the DCID), the DCID is controlled by the peer. Maybe it's better to say:\r\n\r\n> The enable_multipath transport parameter MUST only be advertised if both the\r\nsource and the destination connection ID are not zero-length connection IDs.",
              "createdAt": "2023-07-04T19:08:19Z",
              "updatedAt": "2023-07-04T19:08:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aNgaL",
          "commit": {
            "abbreviatedOid": "83bde97"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-04T23:55:01Z",
          "updatedAt": "2023-07-04T23:55:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aScJO",
          "commit": {
            "abbreviatedOid": "83bde97"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-05T15:20:11Z",
          "updatedAt": "2023-07-05T15:20:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 228,
      "id": "PR_kwDOGNtpaM5UACbL",
      "title": "ECN counts are per-path, not per connection",
      "url": "https://github.com/quicwg/multipath/pull/228",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #216.",
      "createdAt": "2023-06-27T07:47:47Z",
      "updatedAt": "2023-06-30T08:59:36Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71d30fce58f87cafa37bb1e1694b4cc6bac644c4",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-216",
      "headRefOid": "b1cff91479f6a0870672548bb9a48c07566e3e8a",
      "closedAt": "2023-06-30T08:59:35Z",
      "mergedAt": "2023-06-30T08:59:35Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "71e4995c0d5a98e640c94f378dfd15c2406f8175"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5ZcpQx",
          "commit": {
            "abbreviatedOid": "0b86b7f"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-27T12:00:30Z",
          "updatedAt": "2023-06-27T12:00:35Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\non the acknowledged packet number space up to this point.\r\n```\r\n\r\n\"acknowledged path\" can be confusing, as it might imply all the packet number spaces  (i.e., that of Initial, Handshake and the first application space) that share the original path. It'd be less confusing to repeat the phrasing of QUIC v1, stating that ECN counters are per-packet number space.",
              "createdAt": "2023-06-27T12:00:30Z",
              "updatedAt": "2023-06-27T12:00:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ZiZjD",
          "commit": {
            "abbreviatedOid": "b1cff91"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-28T03:22:10Z",
          "updatedAt": "2023-06-28T03:22:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5ZiuIu",
          "commit": {
            "abbreviatedOid": "b1cff91"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-28T05:00:06Z",
          "updatedAt": "2023-06-28T05:00:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Z0BYT",
          "commit": {
            "abbreviatedOid": "b1cff91"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-30T08:59:29Z",
          "updatedAt": "2023-06-30T08:59:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 230,
      "id": "PR_kwDOGNtpaM5UNZjQ",
      "title": "PATH_ABANDON and PATH_STATUS are ack-eliciting",
      "url": "https://github.com/quicwg/multipath/pull/230",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #229.",
      "createdAt": "2023-06-29T06:27:14Z",
      "updatedAt": "2023-06-30T09:09:27Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71d30fce58f87cafa37bb1e1694b4cc6bac644c4",
      "headRepository": "kazuho/quic-multipath",
      "headRefName": "patch-3",
      "headRefOid": "5e4db148a8ed1cbf2d934cc80d5fcee6f267695c",
      "closedAt": "2023-06-30T09:09:27Z",
      "mergedAt": "2023-06-30T09:09:27Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "4db9b5cfad7b4943202563eb9011ef28412dfb47"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Zswz2",
          "commit": {
            "abbreviatedOid": "5e4db14"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-29T09:23:23Z",
          "updatedAt": "2023-06-29T09:23:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5ZwMXm",
          "commit": {
            "abbreviatedOid": "5e4db14"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2023-06-29T17:50:55Z",
          "updatedAt": "2023-06-29T17:50:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5ZzVIA",
          "commit": {
            "abbreviatedOid": "5e4db14"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-30T07:04:04Z",
          "updatedAt": "2023-06-30T07:04:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Z0FG2",
          "commit": {
            "abbreviatedOid": "5e4db14"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think this is want me meant but didn't use the terminology right.",
          "createdAt": "2023-06-30T09:09:19Z",
          "updatedAt": "2023-06-30T09:09:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 231,
      "id": "PR_kwDOGNtpaM5UNdgU",
      "title": "Don't use all CIDs unless rebinding is a nonconcern",
      "url": "https://github.com/quicwg/multipath/pull/231",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #221. As discussed in the issue, endpoints need to retain unused CIDs, otherwise they cannot respond to NAT rebinding.\r\n\r\nAlso removes a stale statement about zero-length CID.",
      "createdAt": "2023-06-29T06:46:13Z",
      "updatedAt": "2023-07-05T15:20:51Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "4db9b5cfad7b4943202563eb9011ef28412dfb47",
      "headRepository": "kazuho/quic-multipath",
      "headRefName": "patch-4",
      "headRefOid": "2c9b69b1d965cff8c6d29796aabd218bbbd94e83",
      "closedAt": "2023-07-05T15:20:50Z",
      "mergedAt": "2023-07-05T15:20:50Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "a886b2dc13b16a72ca653fa89e2f585da83e92c5"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I merged #225 already but resolved the conflict now",
          "createdAt": "2023-06-30T09:11:49Z",
          "updatedAt": "2023-06-30T09:11:49Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm actually not sure about this statement. \r\n\r\nFirst, I think the question if you should save any CIDs for NAT rebindings is independent of the multipath extension and more a general question for QUIC; yes, without multipath NAT is probably the main use case but still the sender could decide to use a new CID any time.\r\n\r\nSecond, given you have multiple paths in use, it might be less of a problem if one path breaks because of NAT. So I can well image that there might be cases where you rather use your last CID for a new path then save it for a potentially NAT rebinding on one of the existing path.\r\n\r\nTherefor I think it is okay to mention the fact that CIDs might also be needed for NAT rebindings on existing paths but I really wouldn't use normative language here.",
          "createdAt": "2023-06-30T09:17:07Z",
          "updatedAt": "2023-06-30T09:17:07Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak Thank you for resolving the conflicts. I forgot that I had a separate PR for that.\r\n\r\n> First, I think the question if you should save any CIDs for NAT rebindings is independent of the multipath extension and more a general question for QUIC; yes, without multipath NAT is probably the main use case but still the sender could decide to use a new CID any time.\r\n\r\nYes, this is a general problem. In RFC 9000, we have the following statement: _An endpoint that exhausts available connection IDs cannot probe new paths or initiate migration, nor can it respond to probes or attempts by its peer to migrate. To ensure that migration is possible and packets sent on different paths cannot be correlated, endpoints SHOULD provide new connection IDs before peers migrate_ ([section 9.5](https://www.rfc-editor.org/rfc/rfc9000#section-9.5-9)).\r\n\r\nMaybe we should add a reference.\r\n\r\n> Second, given you have multiple paths in use, it might be less of a problem if one path breaks because of NAT. So I can well image that there might be cases where you rather use your last CID for a new path then save it for a potentially NAT rebinding on one of the existing path.\r\n\r\nDepending on how Multipath is used, connections could become more susceptible to NAT rebindings. In QUIC v1, backup paths are expected to be established through different networks, meaning that there is low probability of multiple paths getting rebound at the same time. But in case of Multipath, one of the intended use case is to open multiple paths through the same network (so that the tunnel being built on top of QUIC serving multiple end-to-end flows can have a fair share of bandwidth against other flows). In such a use case, all paths would be affected by a single NAT device doing a rebind.\r\n\r\nThat said...\r\n\r\n> Therefor I think it is okay to mention the fact that CIDs might also be needed for NAT rebindings on existing paths but I really wouldn't use normative language here.\r\n\r\nI think I agree that we do not need a normative clause here. I will update the PR.",
          "createdAt": "2023-06-30T12:51:30Z",
          "updatedAt": "2023-06-30T13:05:10Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak Updated. PTAL.",
          "createdAt": "2023-06-30T13:03:22Z",
          "updatedAt": "2023-06-30T13:03:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5ZzU2g",
          "commit": {
            "abbreviatedOid": "4ab9cca"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This sounds reasonable to me. Note that this PR should probably close/supersede PR #225.",
          "createdAt": "2023-06-30T07:03:05Z",
          "updatedAt": "2023-06-30T07:03:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aScb3",
          "commit": {
            "abbreviatedOid": "2c9b69b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-05T15:20:49Z",
          "updatedAt": "2023-07-05T15:20:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 234,
      "id": "PR_kwDOGNtpaM5USol1",
      "title": "clarify the effect on transport machinery at PATH_ABANDON + 3PTO",
      "url": "https://github.com/quicwg/multipath/pull/234",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #232.\r\n\r\nThe only state that can be discarded at PATH_ABONDON + 3PTO is that used for sending packets, as the states for receiving and acknowledging packets arriving on the abandoned path are expected to be retained until the receipt of RETIRE_CONNECTION_ID.\r\n\r\nThis PR clarifies that from the viewpoint of state machinery.",
      "createdAt": "2023-06-30T02:21:09Z",
      "updatedAt": "2023-07-05T15:24:42Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "71d30fce58f87cafa37bb1e1694b4cc6bac644c4",
      "headRepository": "kazuho/quic-multipath",
      "headRefName": "patch-5",
      "headRefOid": "2db4b1a3532b5750a650833d7dc339985dda18f6",
      "closedAt": "2023-07-05T15:24:42Z",
      "mergedAt": "2023-07-05T15:24:42Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "c41d5d3f78220aad3a561aca16bdc49890c2d5e3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Z0d2z",
          "commit": {
            "abbreviatedOid": "4535d98"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T10:12:13Z",
          "updatedAt": "2023-06-30T10:12:14Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "This is implicit in the act of sending RETIRE_CONNECTION_ID. As soon as you have sent that frame, you can remove the CID. If you don't have the CID anymore, you can't recognised any multipath-specific frame anymore because all three frames (PATH_STATUS, ACK_MP, and PATH_ABANDON) contain the CID. Instead of specifically talking about \"ceasing to recognise acks\", maybe we can instead add a separate sentence to make that dependency more explicit...?",
              "createdAt": "2023-06-30T10:12:13Z",
              "updatedAt": "2023-06-30T10:13:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Z1Iwb",
          "commit": {
            "abbreviatedOid": "4535d98"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T12:28:37Z",
          "updatedAt": "2023-06-30T12:28:37Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I think your argument is against the original text rather than the what I tried to clarify here.\r\n\r\nThe original text says that resources can be discarded at PATH_ABANDON + 3 PTO, without specifying what those resource exactly are.\r\n\r\nMy interpretation is that loss recovery is the only thing that an endpoint could possibly discard, as it has to continue decrypting packets and sending acks until it receives RETIRE_CONNECTION_ID.\r\n\r\nHence the proposal to be clear on that fact.\r\n\r\nThat said, I think this advice on releasing some resources, whatever they may be, is merely an optimization. I would be equally fine with removing \"or ceasing to recognize late acknowledgements\" entirely, as loss recovery logic can be discarded anytime when acks aren't expected, it is not specific to this particular case.",
              "createdAt": "2023-06-30T12:28:37Z",
              "updatedAt": "2023-06-30T12:29:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aSdWU",
          "commit": {
            "abbreviatedOid": "4535d98"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-05T15:22:51Z",
          "updatedAt": "2023-07-05T15:22:52Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nID.\r\n```",
              "createdAt": "2023-07-05T15:22:51Z",
              "updatedAt": "2023-07-05T15:22:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aSdwW",
          "commit": {
            "abbreviatedOid": "242fec7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-05T15:23:44Z",
          "updatedAt": "2023-07-05T15:23:44Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nID. This is inline with the requirement of {{Section 10.2 of QUIC-TRANSPORT}}\r\n```",
              "createdAt": "2023-07-05T15:23:44Z",
              "updatedAt": "2023-07-05T15:23:45Z"
            }
          ]
        }
      ]
    },
    {
      "number": 236,
      "id": "PR_kwDOGNtpaM5UU_rr",
      "title": "Use FRAME_ENCODING_ERROR instead",
      "url": "https://github.com/quicwg/multipath/pull/236",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #207 ",
      "createdAt": "2023-06-30T12:38:52Z",
      "updatedAt": "2024-03-12T16:18:42Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "4db9b5cfad7b4943202563eb9011ef28412dfb47",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-21",
      "headRefOid": "c35b3cb35b406d0dea419c5ace476137672cbe81",
      "closedAt": "2023-07-05T15:25:50Z",
      "mergedAt": "2023-07-05T15:25:50Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "c811fc16a4f77a605a148a2944da8b8d98c00c83"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Z1aXa",
          "commit": {
            "abbreviatedOid": "c35b3cb"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T13:14:17Z",
          "updatedAt": "2023-06-30T13:14:26Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Maybe we should change \"packets of other encryption levels\" to \"types of packets.\"\r\n\r\nIn RFC 9000, we talk about \"type of packets\" when clarifying when the frames can be used; see [section 12.4](https://www.rfc-editor.org/rfc/rfc9000#name-frames-and-frame-types).\r\n\r\nWith the understanding that this is not the problem that the PR is trying to address, it might make sense to adjust the phrasing.\r\n\r\nThis applies to the paragraph right above as well. It would suffice to drop the MUST NOT there, just state \"All the new frames MUST only be sent in 1-RTT.\"",
              "createdAt": "2023-06-30T13:14:17Z",
              "updatedAt": "2023-06-30T13:15:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aJvdY",
          "commit": {
            "abbreviatedOid": "c35b3cb"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Opening #246 for the packet types comment.",
          "createdAt": "2023-07-04T09:40:21Z",
          "updatedAt": "2023-07-04T09:40:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aSenu",
          "commit": {
            "abbreviatedOid": "c35b3cb"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-05T15:25:34Z",
          "updatedAt": "2023-07-05T15:25:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 237,
      "id": "PR_kwDOGNtpaM5UVxe6",
      "title": "remove sentence an retransmittable table frames",
      "url": "https://github.com/quicwg/multipath/pull/237",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #211 \r\n\r\nThis PR proposed to remove this sentence entirely, as I don't think it's needed.",
      "createdAt": "2023-06-30T15:03:00Z",
      "updatedAt": "2024-03-12T16:18:40Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "4db9b5cfad7b4943202563eb9011ef28412dfb47",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-22",
      "headRefOid": "157596e32846a29d21e7afb68b1b1d41503f51cd",
      "closedAt": "2023-07-04T09:41:02Z",
      "mergedAt": "2023-07-04T09:41:01Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "9d4bd3844f237f3b3d68e83409cf319f3bb0eedc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Z2NCp",
          "commit": {
            "abbreviatedOid": "157596e"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-30T15:08:33Z",
          "updatedAt": "2023-06-30T15:08:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Z2nWm",
          "commit": {
            "abbreviatedOid": "157596e"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-30T16:06:10Z",
          "updatedAt": "2023-06-30T16:06:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aJvuc",
          "commit": {
            "abbreviatedOid": "157596e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-04T09:40:51Z",
          "updatedAt": "2023-07-04T09:40:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 238,
      "id": "PR_kwDOGNtpaM5UVzv3",
      "title": "what if all path are stand-by?",
      "url": "https://github.com/quicwg/multipath/pull/238",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #212 ",
      "createdAt": "2023-06-30T15:09:24Z",
      "updatedAt": "2024-03-12T16:18:37Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "4db9b5cfad7b4943202563eb9011ef28412dfb47",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-23",
      "headRefOid": "d78d3e3df23d791715b607abaa00761a1461f495",
      "closedAt": "2023-07-05T15:29:36Z",
      "mergedAt": "2023-07-05T15:29:36Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "c5fd5656915cc4c9b695be0455e3cb1edb0326b2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Z2Os2",
          "commit": {
            "abbreviatedOid": "c5ef8a0"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-30T15:12:56Z",
          "updatedAt": "2023-06-30T15:12:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5Z2-Bn",
          "commit": {
            "abbreviatedOid": "c5ef8a0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T17:14:13Z",
          "updatedAt": "2023-06-30T17:14:13Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\ncan be sent via a different path.\r\n```",
              "createdAt": "2023-06-30T17:14:13Z",
              "updatedAt": "2023-06-30T17:14:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aJxRE",
          "commit": {
            "abbreviatedOid": "feba140"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM, although some text may be dropped in my opinion.",
          "createdAt": "2023-07-04T09:44:18Z",
          "updatedAt": "2023-07-04T09:44:56Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I am unsure the second part of this sentence (starting from \"however\") is needed, and maybe badly phrased (as the minimum numbers of paths you could use is 0).",
              "createdAt": "2023-07-04T09:44:18Z",
              "updatedAt": "2023-07-04T09:45:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aLGZA",
          "commit": {
            "abbreviatedOid": "feba140"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T13:08:07Z",
          "updatedAt": "2023-07-04T13:08:07Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nwhich path should be used preferably.\r\n```",
              "createdAt": "2023-07-04T13:08:07Z",
              "updatedAt": "2023-07-04T13:08:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aMymg",
          "commit": {
            "abbreviatedOid": "feba140"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-04T18:58:11Z",
          "updatedAt": "2023-07-04T18:58:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aSgUf",
          "commit": {
            "abbreviatedOid": "d78d3e3"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-05T15:28:38Z",
          "updatedAt": "2023-07-05T15:28:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 239,
      "id": "PR_kwDOGNtpaM5UWTHH",
      "title": "bundle path_repsonse and ack_mp",
      "url": "https://github.com/quicwg/multipath/pull/239",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "needs-discussion"
      ],
      "body": "fixes #226",
      "createdAt": "2023-06-30T16:48:00Z",
      "updatedAt": "2024-03-12T16:18:33Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "4db9b5cfad7b4943202563eb9011ef28412dfb47",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-24",
      "headRefOid": "4f450a003f1ef7359a0652217d8497100e10d805",
      "closedAt": "2023-10-20T13:47:04Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "replace by PR #276 ",
          "createdAt": "2023-10-20T13:47:04Z",
          "updatedAt": "2023-10-20T13:47:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Z2934",
          "commit": {
            "abbreviatedOid": "54d924e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T17:13:38Z",
          "updatedAt": "2023-06-30T17:13:38Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nof the ACK_MP frame. An endhost MAY bundle the ACK_MP frame with the\r\n```",
              "createdAt": "2023-06-30T17:13:38Z",
              "updatedAt": "2023-06-30T17:13:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5Z4j5v",
          "commit": {
            "abbreviatedOid": "245ffbc"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-01T00:38:23Z",
          "updatedAt": "2023-07-01T00:39:20Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "IIUC, this text builds on the fact that ACK_MP is a non-probing frame (because ACK is a non-probing frame), and states that even though ACK_MP is a non-probing frame it can be sent in a probe packet.\r\n\r\nI wonder if it would be less confusing to simply state that ACK_MP is a probing frame?",
              "createdAt": "2023-07-01T00:38:23Z",
              "updatedAt": "2023-07-01T00:39:20Z"
            },
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nPATH_RESPONSE frame; in this case it is RECOMMENDED to consider\r\n```",
              "createdAt": "2023-07-01T00:38:57Z",
              "updatedAt": "2023-07-01T00:39:20Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nthe acknowledged packet ranges in the next ACK_MP frame.\r\n```",
              "createdAt": "2023-07-01T00:39:13Z",
              "updatedAt": "2023-07-01T00:39:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aMCrW",
          "commit": {
            "abbreviatedOid": "31f4326"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T15:25:27Z",
          "updatedAt": "2023-07-04T15:25:27Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "not sure what to do here but let's further discuss this in issue #226 (and #50)",
              "createdAt": "2023-07-04T15:25:27Z",
              "updatedAt": "2023-07-04T15:25:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aMya7",
          "commit": {
            "abbreviatedOid": "31f4326"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T18:57:00Z",
          "updatedAt": "2023-07-04T18:57:03Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Not sure if this needs to be called out explicitly. ACKs are always opportunistic in QUIC, as ACK frames are not ack-eliciting.\r\n\r\nSection 13.2.4 of RFC 9000 defines how to prune old ACK ranges, and I don't think we need to do anything special here.",
              "createdAt": "2023-07-04T18:57:00Z",
              "updatedAt": "2023-07-04T18:57:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5knzoD",
          "commit": {
            "abbreviatedOid": "245ffbc"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T16:13:56Z",
          "updatedAt": "2023-10-19T16:13:56Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "@kazuho I agree with you. I think making ACK_MP a probing frame is the easiest fix. ",
              "createdAt": "2023-10-19T16:13:56Z",
              "updatedAt": "2023-10-19T16:13:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ktGE8",
          "commit": {
            "abbreviatedOid": "31f4326"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-20T08:42:10Z",
          "updatedAt": "2023-10-20T08:42:11Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nAlternatively ACK_MP frames can be sent on any other active path.\r\n```",
              "createdAt": "2023-10-20T08:42:10Z",
              "updatedAt": "2023-10-20T08:42:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 240,
      "id": "PR_kwDOGNtpaM5UWUzB",
      "title": "MUST NOT store enable_multipath parameter",
      "url": "https://github.com/quicwg/multipath/pull/240",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #219 \r\n\r\nDo we need to use normative language here?",
      "createdAt": "2023-06-30T16:55:03Z",
      "updatedAt": "2024-03-12T16:18:36Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "4db9b5cfad7b4943202563eb9011ef28412dfb47",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-25",
      "headRefOid": "db7626d592394497465766870a0c79387a0142a2",
      "closedAt": "2023-07-05T15:32:13Z",
      "mergedAt": "2023-07-05T15:32:13Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "657b6a431159a3093c6dfddf441e495a387263be"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that before we merge this PR (which would close issue #219) that there is some additional discussion in the issue if this parameter should be remembered or not...",
          "createdAt": "2023-07-05T13:58:20Z",
          "updatedAt": "2023-07-05T13:58:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5Z4kLH",
          "commit": {
            "abbreviatedOid": "f7de742"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-01T00:43:14Z",
          "updatedAt": "2023-07-01T00:43:18Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Maybe something like:\r\n```suggestion\r\nThe enable_multipath parameter MUST NOT be remembered\r\n({{Section 7.4.1 of QUIC-TRANSPORT}}).\r\nNew paths can only be used after handshake completion.\r\n```\r\n\r\nI think it would be better to follow the term (\"remembered\") used in RFC 9000.",
              "createdAt": "2023-07-01T00:43:14Z",
              "updatedAt": "2023-07-01T00:43:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 242,
      "id": "PR_kwDOGNtpaM5Uhofj",
      "title": "Replace PATH_STATUS with PATH_AVAILABLE and PATH_STANDBY",
      "url": "https://github.com/quicwg/multipath/pull/242",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready-to-merge"
      ],
      "body": "fixes #186 \r\n\r\nHowever, this is not ready to merge. This is only a first starting point and needs more work. See issue #186 for further discussion!",
      "createdAt": "2023-07-03T13:15:29Z",
      "updatedAt": "2024-03-12T16:18:33Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "33de3e79c499b3150457525c15bffa9ff17ebffe",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-26",
      "headRefOid": "7ee10a5a27e6695f27bbaa77c2f39943fec95a7a",
      "closedAt": "2023-10-20T09:46:06Z",
      "mergedAt": "2023-10-20T09:46:06Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "5d1c29fdb79ecf01f6e32c4e08bd335794986547"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aRnDW",
          "commit": {
            "abbreviatedOid": "8e04a2e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-05T13:44:46Z",
          "updatedAt": "2023-07-05T13:44:46Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n- PATH_STANDBY and PATH_AVAILABLE frames to express a preference\r\n```",
              "createdAt": "2023-07-05T13:44:46Z",
              "updatedAt": "2023-07-05T13:44:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aRnNH",
          "commit": {
            "abbreviatedOid": "8e04a2e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-05T13:45:02Z",
          "updatedAt": "2023-07-05T13:45:03Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nPATH_AVAILABLE indiactes that a path as \"available\", i.e., allow\r\n```",
              "createdAt": "2023-07-05T13:45:02Z",
              "updatedAt": "2023-07-05T13:45:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aRncG",
          "commit": {
            "abbreviatedOid": "8e04a2e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-05T13:45:25Z",
          "updatedAt": "2023-07-05T13:45:25Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "```suggestion\r\nPATH_STANDBY Frames are used by endpoints to inform the peer\r\nabout its preference to not use the path associated to\r\n```",
              "createdAt": "2023-07-05T13:45:25Z",
              "updatedAt": "2023-07-05T13:45:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aRnoY",
          "commit": {
            "abbreviatedOid": "8e04a2e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-05T13:45:42Z",
          "updatedAt": "2023-07-05T13:45:42Z",
          "comments": [
            {
              "originalPosition": 120,
              "body": "```suggestion\r\nPATH_AVAILABLE Frames are used by endpoints to inform the peer\r\nthat the path associated to\r\n```",
              "createdAt": "2023-07-05T13:45:42Z",
              "updatedAt": "2023-07-05T13:45:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kkx8H",
          "commit": {
            "abbreviatedOid": "2f4289d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T11:02:01Z",
          "updatedAt": "2023-10-19T11:02:02Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nbut these frames are still a clear signal of suggestion\r\n```",
              "createdAt": "2023-10-19T11:02:01Z",
              "updatedAt": "2023-10-19T11:02:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kk0c7",
          "commit": {
            "abbreviatedOid": "e932fa2"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T11:07:34Z",
          "updatedAt": "2023-10-19T11:07:34Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "```suggestion\r\nand therefore might arrive in different orders.\r\nThe PATH_AVAILABLE and PATH_STANDBY frames share a common sequence number space to detect and ignore outdated information.\r\n```",
              "createdAt": "2023-10-19T11:07:34Z",
              "updatedAt": "2023-10-19T11:07:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kk1Qy",
          "commit": {
            "abbreviatedOid": "21527ae"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T11:09:35Z",
          "updatedAt": "2023-10-19T11:09:36Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "```suggestion\r\nPATH_STANDBY frame if it previously received another PATH_STANDBY frame\r\nor PATH_AVAILABLE \r\n```",
              "createdAt": "2023-10-19T11:09:36Z",
              "updatedAt": "2023-10-19T11:09:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kk2v3",
          "commit": {
            "abbreviatedOid": "1f43c83"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T11:13:23Z",
          "updatedAt": "2023-10-19T11:13:23Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "```suggestion\r\n  the sequence number assigned for this PATH_STANDBY frame. The sequence number space is shared with the PATH_AVAILABLE frame and\r\nthe sequence\r\n```",
              "createdAt": "2023-10-19T11:13:23Z",
              "updatedAt": "2023-10-19T11:13:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kk3hZ",
          "commit": {
            "abbreviatedOid": "9df3a4c"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T11:14:57Z",
          "updatedAt": "2023-10-19T11:14:57Z",
          "comments": [
            {
              "originalPosition": 153,
              "body": "```suggestion\r\n  the sequence number assigned for this PATH_AVAILABLE frame. The sequence number space is shared with the PATH_STANDBY frame and\r\nthe sequence\r\n```",
              "createdAt": "2023-10-19T11:14:57Z",
              "updatedAt": "2023-10-19T11:14:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kk4mQ",
          "commit": {
            "abbreviatedOid": "c169ec3"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T11:16:36Z",
          "updatedAt": "2023-10-19T11:16:36Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "```suggestion\r\nPATH_AVAILABLE frame if it previously received another PATH_AVAILABLE frame\r\nor PATH_STANDBY\r\n```",
              "createdAt": "2023-10-19T11:16:36Z",
              "updatedAt": "2023-10-19T11:16:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5klf0t",
          "commit": {
            "abbreviatedOid": "8822427"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T12:22:26Z",
          "updatedAt": "2023-10-19T12:22:26Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "```suggestion\r\nor PATH_AVAILABLE\r\n```",
              "createdAt": "2023-10-19T12:22:26Z",
              "updatedAt": "2023-10-19T12:22:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5klgZB",
          "commit": {
            "abbreviatedOid": "7e7cfb5"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T12:23:11Z",
          "updatedAt": "2023-10-19T12:23:11Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nAll new frames are sent in 1-RTT packets {{QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2023-10-19T12:23:11Z",
              "updatedAt": "2023-10-19T12:23:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5klb5F",
          "commit": {
            "abbreviatedOid": "8822427"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Some formatting and code point fixes, but once fixed this looks good.",
          "createdAt": "2023-10-19T12:16:36Z",
          "updatedAt": "2023-10-19T12:26:03Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nin path usage (see {{path-standby-frame}} and {{path-available-frame}}\r\n```",
              "createdAt": "2023-10-19T12:16:36Z",
              "updatedAt": "2023-10-19T12:26:03Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nPATH_AVAILABLE indicates that a path is \"available\", i.e., it suggests to\r\n```",
              "createdAt": "2023-10-19T12:17:06Z",
              "updatedAt": "2023-10-19T12:26:03Z"
            },
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nPATH_STANDBY marks a path as \"standby\", i.e., it suggests that no traffic\r\n```",
              "createdAt": "2023-10-19T12:18:16Z",
              "updatedAt": "2023-10-19T12:26:03Z"
            },
            {
              "originalPosition": 107,
              "body": "```suggestion\r\nor PATH_AVAILABLE frame\r\n```",
              "createdAt": "2023-10-19T12:19:58Z",
              "updatedAt": "2023-10-19T12:26:03Z"
            },
            {
              "originalPosition": 128,
              "body": "```suggestion\r\nPATH_AVAILABLE frames are used by endpoints to inform the peer\r\n```",
              "createdAt": "2023-10-19T12:22:06Z",
              "updatedAt": "2023-10-19T12:26:03Z"
            },
            {
              "originalPosition": 135,
              "body": "We should update the base value, and 07 is already taken (because 06 was the PATH_STATUS frame from draft 05)\r\n```suggestion\r\n    Type (i) = TBD-03 (experiments use 0x15228c08),\r\n```",
              "createdAt": "2023-10-19T12:23:30Z",
              "updatedAt": "2023-10-19T12:26:03Z"
            },
            {
              "originalPosition": 142,
              "body": "```suggestion\r\nPATH_AVAILABLE frames contain the following fields:\r\n```",
              "createdAt": "2023-10-19T12:23:43Z",
              "updatedAt": "2023-10-19T12:26:03Z"
            },
            {
              "originalPosition": 162,
              "body": "```suggestion\r\nor PATH_STANDBY frame\r\n```",
              "createdAt": "2023-10-19T12:24:54Z",
              "updatedAt": "2023-10-19T12:26:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ks8ys",
          "commit": {
            "abbreviatedOid": "2479c1f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-20T08:24:29Z",
          "updatedAt": "2023-10-20T08:24:30Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nshould be sent on that path if another path is available.\r\nIf no frame indicating a path usage preference was received for a certain path,\r\nthe preference of the peer is unknown and the sender needs to decide based on it\r\nown local logic if the path should be used.\r\n```",
              "createdAt": "2023-10-20T08:24:30Z",
              "updatedAt": "2023-10-20T08:24:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ks_1n",
          "commit": {
            "abbreviatedOid": "b7f87fe"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-20T08:29:15Z",
          "updatedAt": "2023-10-20T08:29:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5ks_9x",
          "commit": {
            "abbreviatedOid": "2479c1f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-20T08:29:33Z",
          "updatedAt": "2023-10-20T08:29:34Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nfor the preference of path usage by the peer.\r\nEach peer indicates it preference of path usage independently to the other peer.\r\nThat means path usage preferences of each peer for the same path can be different.\r\nA sender then needs to make a sending decision taking the peer's as well as its own\r\npreferences into account which may lead to usage of paths that have been indicated\r\nas \"standby\" by the peer or non-usage of some available paths.\r\n```\r\n",
              "createdAt": "2023-10-20T08:29:33Z",
              "updatedAt": "2023-10-20T08:29:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ktI-K",
          "commit": {
            "abbreviatedOid": "2479c1f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-20T08:48:54Z",
          "updatedAt": "2023-10-20T08:48:55Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nfor the preference of path usage by the peer.\r\nEach peer indicates its preference of path usage independently of the other peer.\r\nIt means that peers may have different usage preferences for the same path.\r\nDepending on the sender's decisions, this may lead to usage of paths that have been\r\nindicated as \"standby\" by the peer or non-usage of some locally available paths.\r\n```",
              "createdAt": "2023-10-20T08:48:54Z",
              "updatedAt": "2023-10-20T08:48:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 243,
      "id": "PR_kwDOGNtpaM5Uh5OC",
      "title": "Remove must check CIDs on both sides",
      "url": "https://github.com/quicwg/multipath/pull/243",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #205",
      "createdAt": "2023-07-03T13:58:36Z",
      "updatedAt": "2024-03-12T16:18:40Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "4db9b5cfad7b4943202563eb9011ef28412dfb47",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-27",
      "headRefOid": "90fb943fae5e11018e1f4097dd9afc7066bef030",
      "closedAt": "2023-07-05T15:29:17Z",
      "mergedAt": "2023-07-05T15:29:17Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "5efc0c3f5582fe292cc0693793d33ecb1de66015"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aFx1f",
          "commit": {
            "abbreviatedOid": "90fb943"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-03T16:00:03Z",
          "updatedAt": "2023-07-03T16:00:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aJ1ZN",
          "commit": {
            "abbreviatedOid": "90fb943"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-04T09:51:10Z",
          "updatedAt": "2023-07-04T09:51:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aKqtT",
          "commit": {
            "abbreviatedOid": "90fb943"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-04T12:03:09Z",
          "updatedAt": "2023-07-04T12:03:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 245,
      "id": "PR_kwDOGNtpaM5Ukrm-",
      "title": "clarify nonce usage",
      "url": "https://github.com/quicwg/multipath/pull/245",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Specifically,\r\n* forbid use of cipher suites with nonce below 12 bytes\r\n* nonce calculation uses lower 32 bites of CID sequence number\r\n* one packet protection key must not cover more than 2^32 CID sequence numbers\r\n\r\nCloses #213. Closes #244.",
      "createdAt": "2023-07-04T03:21:38Z",
      "updatedAt": "2023-07-05T15:32:51Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "4db9b5cfad7b4943202563eb9011ef28412dfb47",
      "headRepository": "kazuho/quic-multipath",
      "headRefName": "kazuho/nonce",
      "headRefOid": "1d56ce1b7bd0e0bf1e941a5d05f04ff3d79de811",
      "closedAt": "2023-07-05T15:32:50Z",
      "mergedAt": "2023-07-05T15:32:50Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "91ff6fd146e939c724863bd3db282df0869fd912"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aJ2LA",
          "commit": {
            "abbreviatedOid": "1d56ce1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-04T09:52:56Z",
          "updatedAt": "2023-07-04T09:52:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aJ2L9",
          "commit": {
            "abbreviatedOid": "1d56ce1"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-04T09:52:58Z",
          "updatedAt": "2023-07-04T09:52:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aMkzb",
          "commit": {
            "abbreviatedOid": "1d56ce1"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "It's a bit unfortunate that we have to say anything about cipher suites in this document. It would be nice if we could just use whatever RFC 9001 defines.\r\n\r\nNote that if we decide to introduce path IDs (#214), this would allow us to derive separate keys per path, leaving the nonce usage untouched (compared to RFC 9001). This is tracked by #215.",
          "createdAt": "2023-07-04T17:41:16Z",
          "updatedAt": "2023-07-04T17:54:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aMp7q",
          "commit": {
            "abbreviatedOid": "1d56ce1"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-04T18:04:44Z",
          "updatedAt": "2023-07-04T18:04:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aSiel",
          "commit": {
            "abbreviatedOid": "1d56ce1"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-05T15:32:48Z",
          "updatedAt": "2023-07-05T15:32:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 247,
      "id": "PR_kwDOGNtpaM5UmS_l",
      "title": "1-RTT packets are packet types, not encryption levels",
      "url": "https://github.com/quicwg/multipath/pull/247",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #246.",
      "createdAt": "2023-07-04T09:39:35Z",
      "updatedAt": "2024-03-12T16:18:37Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "c811fc16a4f77a605a148a2944da8b8d98c00c83",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-246",
      "headRefOid": "9404e7547e376a407cc9137ff425a4c882dd7657",
      "closedAt": "2023-07-05T15:29:51Z",
      "mergedAt": "2023-07-05T15:29:51Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "c854790de24720f4b3f559636890774be04f759d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aJ3Lp",
          "commit": {
            "abbreviatedOid": "f727234"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Note this might have a merge conflict with #236 (to be resolved later)",
          "createdAt": "2023-07-04T09:54:36Z",
          "updatedAt": "2023-07-04T09:54:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aMvi6",
          "commit": {
            "abbreviatedOid": "f727234"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-04T18:43:36Z",
          "updatedAt": "2023-07-04T18:43:41Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Unrelated to this PR, but this is not an RPC, and as such, \"returning an error\" might not be the best term to use.\r\n```suggestion\r\nIf an endpoint receives a multipath-specific frame in a different packet type,\r\nit MUST close the connection with an error of type MP_PROTOCOL_VIOLATION.\r\n```",
              "createdAt": "2023-07-04T18:43:36Z",
              "updatedAt": "2023-07-04T18:43:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aSft2",
          "commit": {
            "abbreviatedOid": "9404e75"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-05T15:27:21Z",
          "updatedAt": "2023-07-05T15:27:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 249,
      "id": "PR_kwDOGNtpaM5UoYv5",
      "title": "Add some acks",
      "url": "https://github.com/quicwg/multipath/pull/249",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We should at least name Marten and Kazuho in the acknowledgement section. Who else?",
      "createdAt": "2023-07-04T15:55:34Z",
      "updatedAt": "2024-03-12T16:18:38Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9d4bd3844f237f3b3d68e83409cf319f3bb0eedc",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-29",
      "headRefOid": "c19029f45681a6b219553127bd573a0a5d3bdd14",
      "closedAt": "2023-07-05T15:33:18Z",
      "mergedAt": "2023-07-05T15:33:18Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "f96bbfc110a4f75053aee49b1813612f3406b4d7"
      },
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "So am I. Thank you @mirjak!",
          "createdAt": "2023-07-05T00:40:14Z",
          "updatedAt": "2023-07-05T00:40:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aMutV",
          "commit": {
            "abbreviatedOid": "c19029f"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thank you @mirjak! Very happy about this PR \ud83d\ude0a",
          "createdAt": "2023-07-04T18:37:15Z",
          "updatedAt": "2023-07-04T18:37:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 250,
      "id": "PR_kwDOGNtpaM5UtTjj",
      "title": "Add Chinese names",
      "url": "https://github.com/quicwg/multipath/pull/250",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #201\r\n\r\nThis is what MT proposed. When I build this locally, it doesn't change the title page but it has this in the author information section\r\n\r\n```\r\n   Yanmei Liu (editor)\r\n   Alibaba Inc.\r\n   Email: miaoji.lym@alibaba-inc.com\r\n\r\n   Additional contact information:\r\n\r\n      \u9a6c\u4e91\u98de (editor)\r\n      Alibaba Inc.\r\n```\r\n\r\nThis is the right way to do this?\r\n",
      "createdAt": "2023-07-05T13:55:29Z",
      "updatedAt": "2024-03-12T16:18:35Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9d4bd3844f237f3b3d68e83409cf319f3bb0eedc",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-30",
      "headRefOid": "68a91fa47770c304c49139c80eddccb946aa54a2",
      "closedAt": "2023-07-05T15:35:30Z",
      "mergedAt": "2023-07-05T15:35:30Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "c1d42ebf65a0bcd3545b38b92209e6cc7f6053ed"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aR0qc",
          "commit": {
            "abbreviatedOid": "ec3e3e0"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-05T14:08:20Z",
          "updatedAt": "2023-07-05T14:08:20Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\n```\r\n\r\nIf you remove this line, the author names at the top of the document will properly render e.g.\r\n\r\n![image](https://github.com/quicwg/multipath/assets/6571445/c1e9d243-5deb-4a7c-ab8e-fbc194473913)\r\n",
              "createdAt": "2023-07-05T14:08:20Z",
              "updatedAt": "2023-07-05T14:09:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aSWwa",
          "commit": {
            "abbreviatedOid": "f90d459"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-05T15:09:46Z",
          "updatedAt": "2023-07-05T15:12:02Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n      :: :: \"\u5218\u5f66\u6885\"\r\n```",
              "createdAt": "2023-07-05T15:09:46Z",
              "updatedAt": "2023-07-05T15:12:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aSjRa",
          "commit": {
            "abbreviatedOid": "f8bee7a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-05T15:34:05Z",
          "updatedAt": "2023-07-05T15:34:06Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n      :: \"\u5218\u5f66\u6885\"\r\n```",
              "createdAt": "2023-07-05T15:34:05Z",
              "updatedAt": "2023-07-05T15:34:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aSjVw",
          "commit": {
            "abbreviatedOid": "f8bee7a"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-05T15:34:14Z",
          "updatedAt": "2023-07-05T15:34:15Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n     :: \"\u9a6c\u4e91\u98de\"\r\n```",
              "createdAt": "2023-07-05T15:34:14Z",
              "updatedAt": "2023-07-05T15:34:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aSjeL",
          "commit": {
            "abbreviatedOid": "f8bee7a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-05T15:34:30Z",
          "updatedAt": "2023-07-05T15:34:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aVl4_",
          "commit": {
            "abbreviatedOid": "68a91fa"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "There is a bug on line 48 still, but I'm glad to see this happen.  (As a rule, \"fullname\" is the only thing to use, but Quentin probably needs to specify some so that his surname doesn't get busted up by xml2rfc.)",
          "createdAt": "2023-07-06T01:50:58Z",
          "updatedAt": "2023-07-06T01:50:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 252,
      "id": "PR_kwDOGNtpaM5Ut_tR",
      "title": "Change handshake error type",
      "url": "https://github.com/quicwg/multipath/pull/252",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #157",
      "createdAt": "2023-07-05T15:40:42Z",
      "updatedAt": "2024-03-12T16:18:34Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "c1d42ebf65a0bcd3545b38b92209e6cc7f6053ed",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-31",
      "headRefOid": "abf00aec59627a408d757f1f8f51cc4cca48e308",
      "closedAt": "2023-07-05T15:43:03Z",
      "mergedAt": "2023-07-05T15:43:03Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "e53010ddb58d6ea3acdda0beb18186cbe6ef343e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aSngr",
          "commit": {
            "abbreviatedOid": "c2ac449"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-05T15:41:28Z",
          "updatedAt": "2023-07-05T15:41:28Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "```suggestion\r\nparameter is received and the carrying packet contains a zero\r\n```",
              "createdAt": "2023-07-05T15:41:28Z",
              "updatedAt": "2023-07-05T15:41:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 254,
      "id": "PR_kwDOGNtpaM5Uu_tJ",
      "title": "replace 0xbaba by random numbers.",
      "url": "https://github.com/quicwg/multipath/pull/254",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\r\nClose #202 \r\n\r\nFor frame types, this PR replaces the human generated prefix `0xbaba` by `0x15228c`, which is the most significant 24 bits of the MD5 hash of the string \"QUIC Multipath\" (`0x15228c615c39b7ecbe121d64958cd9ea`). The resulting codes become:\r\n\r\nValue                                              | Frame Name          \r\n---------------------------------------------------|--------------------\r\nTBD-00 - TBD-01 (experiments use 0x15228c00-0x15228c01) | ACK_MP    \r\nTBD-02 (experiments use 0x15228c05)                  | PATH_ABANDON   \r\nTBD-03 (experiments use 0x15228c06)                  | PATH_STATUS \r\n\r\nFor the error code, this PR replaces the human generated code `0xba00` by `0x1001d76d3ded42f3`, a 62 bit number that happens to match the first 64 bits of the MD5 hash of \"QUIC MP_PROTOCOL_VIOLATION\" (`0x1001d76d3ded42f39ec8a11a3d4734d9`).\r\n\r\nValue                       | Code                  | Description\r\n----------------------------|-----------------------|------------------------\r\nTBD (experiments use 0x1001d76d3ded42f3)| MP_PROTOCOL_VIOLATION | Multipath protocol violation \r\n\r\nThese new numbers conform with [Section 22.1.2. of RFC 9000, Selecting Codepoints](https://www.rfc-editor.org/rfc/rfc9000.html#name-selecting-codepoints). The varint encoding of the frame types is 32 bit long, which is the same as the encoding of the previous values and thus will not affect performance. The varing encoding of the error code is 64 bit long, which is more that the 16 bits previously used, but the size of a fatal error code is unlikely to affect performance significantly.",
      "createdAt": "2023-07-05T19:06:26Z",
      "updatedAt": "2023-07-07T03:28:29Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "3a7f3f134e312f7e32caf520bc4c50f65f9d8639",
      "headRepository": "huitema/multipath",
      "headRefName": "rnadom-frame-id",
      "headRefOid": "dd0c3ed41f6e9715df91b6a14233724741a7ac4a",
      "closedAt": "2023-07-07T03:28:29Z",
      "mergedAt": "2023-07-07T03:28:29Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "4e748a81c01ef4c767658d80d3b06e3e5337b533"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aWGXv",
          "commit": {
            "abbreviatedOid": "dd0c3ed"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good to me.",
          "createdAt": "2023-07-06T04:50:09Z",
          "updatedAt": "2023-07-06T04:50:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aWK2Y",
          "commit": {
            "abbreviatedOid": "dd0c3ed"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-06T05:09:07Z",
          "updatedAt": "2023-07-06T05:09:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aZvXq",
          "commit": {
            "abbreviatedOid": "dd0c3ed"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-06T14:33:45Z",
          "updatedAt": "2023-07-06T14:33:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aaM9m",
          "commit": {
            "abbreviatedOid": "dd0c3ed"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-06T15:33:06Z",
          "updatedAt": "2023-07-06T15:33:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 256,
      "id": "PR_kwDOGNtpaM5Uw7hB",
      "title": "editorial cralification around preferred_address",
      "url": "https://github.com/quicwg/multipath/pull/256",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #255. Specifically, this PR\r\n* Clarifies that multipath frames will be use on the original path when the server provides both preferred_address and disable_active_migration TP and that only path establishment is prohibited until switching to the preferred address.\r\n* Stops using normative clause for acknowledging what is specified in RFC 9000, adding a reference instead.",
      "createdAt": "2023-07-06T02:24:23Z",
      "updatedAt": "2023-07-10T02:36:43Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "3a7f3f134e312f7e32caf520bc4c50f65f9d8639",
      "headRepository": "kazuho/quic-multipath",
      "headRefName": "kazuho/1",
      "headRefOid": "e0296c037c01d29860e87a47e3a5bdd555e55d30",
      "closedAt": "2023-07-10T02:36:43Z",
      "mergedAt": "2023-07-10T02:36:43Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9c9e7a943d86e7cff237fac6f28efbd139c4fa35"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aZw7O",
          "commit": {
            "abbreviatedOid": "e0296c0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks! Yes, I think this is more clear. I believe normative language is not needed but I'm actually not fully sure. But I'm fine to merge it for now.",
          "createdAt": "2023-07-06T14:36:43Z",
          "updatedAt": "2023-07-06T14:36:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5afBtg",
          "commit": {
            "abbreviatedOid": "e0296c0"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I also like the removal of normative language introduced by this PR.",
          "createdAt": "2023-07-07T07:00:27Z",
          "updatedAt": "2023-07-07T07:00:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aqpjn",
          "commit": {
            "abbreviatedOid": "e0296c0"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-10T02:36:19Z",
          "updatedAt": "2023-07-10T02:36:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 257,
      "id": "PR_kwDOGNtpaM5UxZ9D",
      "title": "switch to using 3xmaxPTO between key updates",
      "url": "https://github.com/quicwg/multipath/pull/257",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #209.",
      "createdAt": "2023-07-06T05:05:52Z",
      "updatedAt": "2023-07-10T07:41:20Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "3a7f3f134e312f7e32caf520bc4c50f65f9d8639",
      "headRepository": "kazuho/quic-multipath",
      "headRefName": "kazuho/key-update",
      "headRefOid": "096d8f5f08337d9186970ca0dec45682f4a93570",
      "closedAt": "2023-07-10T07:41:20Z",
      "mergedAt": "2023-07-10T07:41:20Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "788d8d58ec3c1628856b2020b4b85008e1f22dd0"
      },
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@marten-seemann I do not think changing 3PTO to 3maxPTO is a great deal. For existing QUIC stacks using three keys and PN in conjunction, switching to two keys would be a simplification.\r\n\r\nCompared to that, it is my opinion that using different keys on each path and running key updates separately as proposed in #215 is an unnecessary complexity.",
          "createdAt": "2023-07-06T06:00:54Z",
          "updatedAt": "2023-07-06T06:00:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aWKjx",
          "commit": {
            "abbreviatedOid": "e744ba1"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-06T05:07:26Z",
          "updatedAt": "2023-07-06T05:07:33Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\narrive later than the packets protected with the new key. QUIC version 1 defines two\r\n```",
              "createdAt": "2023-07-06T05:07:26Z",
              "updatedAt": "2023-07-06T05:07:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aWOvL",
          "commit": {
            "abbreviatedOid": "ca448e1"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Please specify the \"PTO\" a bit more precisely.",
          "createdAt": "2023-07-06T05:24:16Z",
          "updatedAt": "2023-07-06T05:24:57Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Which PTO? We have several paths, with different PTO. I would rather say something like \"3 times the largest PTO of all available paths.\"",
              "createdAt": "2023-07-06T05:24:16Z",
              "updatedAt": "2023-07-06T05:25:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aWPGx",
          "commit": {
            "abbreviatedOid": "ca448e1"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This works, but it\u2019s additional complexity compared to RFC 9001. #215 proposes a different solution that doesn\u2019t require us to do anything differently.",
          "createdAt": "2023-07-06T05:26:09Z",
          "updatedAt": "2023-07-06T05:26:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aWXEq",
          "commit": {
            "abbreviatedOid": "ca448e1"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-06T05:58:15Z",
          "updatedAt": "2023-07-06T05:58:15Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "@huitema The text here is explaining what is defined in QUIC version 1.\r\n\r\nThe next paragraph explains how it is adjusted for Multipath, stating that the interval is \"extended to three times the largest PTO among all the paths.\"",
              "createdAt": "2023-07-06T05:58:15Z",
              "updatedAt": "2023-07-06T05:58:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aWYju",
          "commit": {
            "abbreviatedOid": "ca448e1"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-06T06:01:52Z",
          "updatedAt": "2023-07-06T06:01:53Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Oops. I was confused. But then, I would rather just state what we recommend for the multipath update, rather than first restate what QUIC v1 does.",
              "createdAt": "2023-07-06T06:01:52Z",
              "updatedAt": "2023-07-06T06:01:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aWcTF",
          "commit": {
            "abbreviatedOid": "ca448e1"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-06T06:17:03Z",
          "updatedAt": "2023-07-06T06:17:03Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Makes sense. Please see 8fe2d57.",
              "createdAt": "2023-07-06T06:17:03Z",
              "updatedAt": "2023-07-06T06:17:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aWdtV",
          "commit": {
            "abbreviatedOid": "8fe2d57"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Take it or leave it, but we might want to clarify that this value is different from the recommendation that we have in QUIC version 1.",
          "createdAt": "2023-07-06T06:22:29Z",
          "updatedAt": "2023-07-06T06:22:55Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nupdate. This interval is different from that of QUIC version 1 which used three times the PTO of the only one active path.\r\n```",
              "createdAt": "2023-07-06T06:22:29Z",
              "updatedAt": "2023-07-06T06:22:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aZkcF",
          "commit": {
            "abbreviatedOid": "8fe2d57"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I like the edited version, and I agree with the suggested change.",
          "createdAt": "2023-07-06T14:12:47Z",
          "updatedAt": "2023-07-06T14:13:26Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Yes, this is a good suggestion.",
              "createdAt": "2023-07-06T14:12:47Z",
              "updatedAt": "2023-07-06T14:13:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aZyE5",
          "commit": {
            "abbreviatedOid": "8fe2d57"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think it's simpler than the current text, therefore I think we should merge it for now (and potentially keep discussing further changes later).",
          "createdAt": "2023-07-06T14:38:57Z",
          "updatedAt": "2023-07-06T14:38:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aqp_g",
          "commit": {
            "abbreviatedOid": "096d8f5"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "It's very clear. Looks good to me.",
          "createdAt": "2023-07-10T02:39:43Z",
          "updatedAt": "2023-07-10T02:39:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5ar7GA",
          "commit": {
            "abbreviatedOid": "096d8f5"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-10T07:41:14Z",
          "updatedAt": "2023-07-10T07:41:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 258,
      "id": "PR_kwDOGNtpaM5U0LNM",
      "title": "[=] Delete unused reference",
      "url": "https://github.com/quicwg/multipath/pull/258",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fix #251 ",
      "createdAt": "2023-07-06T14:04:27Z",
      "updatedAt": "2024-03-27T05:27:54Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "3a7f3f134e312f7e32caf520bc4c50f65f9d8639",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/warn",
      "headRefOid": "113be086682c7158a8c32caf39a153b64ce661f7",
      "closedAt": "2023-07-07T07:02:12Z",
      "mergedAt": "2023-07-07T07:02:12Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "af097d2841bcb1c97b070a4ea9402f1334791e85"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aZunV",
          "commit": {
            "abbreviatedOid": "113be08"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-06T14:32:18Z",
          "updatedAt": "2023-07-06T14:32:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5aZyWF",
          "commit": {
            "abbreviatedOid": "113be08"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-06T14:39:29Z",
          "updatedAt": "2023-07-06T14:39:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5afCsp",
          "commit": {
            "abbreviatedOid": "113be08"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T07:02:04Z",
          "updatedAt": "2023-07-07T07:02:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 259,
      "id": "PR_kwDOGNtpaM5U_Kdn",
      "title": "Add reference to the token ambiguity issue",
      "url": "https://github.com/quicwg/multipath/pull/259",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Trying to fix issue #248 ",
      "createdAt": "2023-07-08T07:09:14Z",
      "updatedAt": "2023-07-08T07:20:07Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "af097d2841bcb1c97b070a4ea9402f1334791e85",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/token-issues",
      "headRefOid": "7a186660cbb0961d02e4cf345b8689ea8a0c5dd7",
      "closedAt": "2023-07-08T07:14:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 260,
      "id": "PR_kwDOGNtpaM5U_LjS",
      "title": "fix token ambiguity issues",
      "url": "https://github.com/quicwg/multipath/pull/260",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Trying to fix issue #248 ",
      "createdAt": "2023-07-08T07:29:31Z",
      "updatedAt": "2023-07-10T11:13:56Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "af097d2841bcb1c97b070a4ea9402f1334791e85",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/fix-token-issues",
      "headRefOid": "b36656285f20cae4adedea6b7f0d0fb66135e4bd",
      "closedAt": "2023-07-10T11:13:56Z",
      "mergedAt": "2023-07-10T11:13:56Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "c38d931c1d3d76ddcdefa8d5109a5b2a4e1933fb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5aqO7P",
          "commit": {
            "abbreviatedOid": "c7e7f75"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thank you for the PR.\r\n\r\nI think the problem statement is correct. Regarding the solution that we point out, as stated in the issue, I think my preference goes to writing down that servers can send a token carrying multiple addresses rather than framing this as an issue that has to be solved by the client.",
          "createdAt": "2023-07-10T00:24:50Z",
          "updatedAt": "2023-07-10T00:26:33Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nclient might have difficulty in determining which token validates which address.\r\nTo alleviate this difficulty, servers can issue a token that could be used for\r\nvalidating any of the validated addresses.\r\n```",
              "createdAt": "2023-07-10T00:24:50Z",
              "updatedAt": "2023-07-10T00:26:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aqmIi",
          "commit": {
            "abbreviatedOid": "c7e7f75"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T02:16:39Z",
          "updatedAt": "2023-07-10T02:16:39Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "A token that can be used for validating multiple address works for me. Looking at the discussion #248, it seems that there was still a different opinion. Do you have any comments on this @huitema ?",
              "createdAt": "2023-07-10T02:16:39Z",
              "updatedAt": "2023-07-10T02:17:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5aqvTB",
          "commit": {
            "abbreviatedOid": "c7e7f75"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T03:15:38Z",
          "updatedAt": "2023-07-10T03:15:39Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I think the \"token validates multiple addresses\" is probably the best approach. The hidden assumptions are:\r\n\r\n1- Most clients do not actually know their source address before contacting as server, because of mobility and NAT\r\n2- Clients are like to just keep the last token provided by the server and reuse it.\r\n\r\nIf a server sends tokens that validate the list of addresses seen so far and the client keeps the latest token for that server, then yes it works.",
              "createdAt": "2023-07-10T03:15:38Z",
              "updatedAt": "2023-07-10T03:15:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ar75W",
          "commit": {
            "abbreviatedOid": "fade37b"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-10T07:43:15Z",
          "updatedAt": "2023-07-10T07:43:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5asrh2",
          "commit": {
            "abbreviatedOid": "d8ad329"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-10T09:30:04Z",
          "updatedAt": "2023-07-10T09:30:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5atFoK",
          "commit": {
            "abbreviatedOid": "c7e7f75"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T10:32:04Z",
          "updatedAt": "2023-07-10T10:32:04Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "This is fine for me but there is still some ambiguity about which address the token applies to. Do we need any normative language here, like the client SHOULD only use the latest token ? I guess that would be divergence RFC9000.\r\n\r\n",
              "createdAt": "2023-07-10T10:32:04Z",
              "updatedAt": "2023-07-10T10:32:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5atGAu",
          "commit": {
            "abbreviatedOid": "c7e7f75"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T10:33:01Z",
          "updatedAt": "2023-07-10T10:33:02Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nAs specified in {{Section 9.3 of QUIC-TRANSPORT}}, the server is expected send a new\r\n```\r\nGiven there is already normative language in RFC9000 we should not repeat it here.",
              "createdAt": "2023-07-10T10:33:02Z",
              "updatedAt": "2023-07-10T10:33:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 263,
      "id": "PR_kwDOGNtpaM5VH5wR",
      "title": "ACK_MP: fix typo about experiments number",
      "url": "https://github.com/quicwg/multipath/pull/263",
      "state": "MERGED",
      "author": "alagoutte",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "remove last 0xbaba experimental number",
      "createdAt": "2023-07-10T19:49:19Z",
      "updatedAt": "2023-07-22T18:06:26Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "c38d931c1d3d76ddcdefa8d5109a5b2a4e1933fb",
      "headRepository": "alagoutte/multipath",
      "headRefName": "patch-1",
      "headRefOid": "1d162da76fe0ff30449bb807c8e279ebdc7ff145",
      "closedAt": "2023-07-22T18:06:25Z",
      "mergedAt": "2023-07-22T18:06:25Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "33de3e79c499b3150457525c15bffa9ff17ebffe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5axcIb",
          "commit": {
            "abbreviatedOid": "0d7e109"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T19:51:45Z",
          "updatedAt": "2023-07-10T19:51:48Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "It might make sense to only have a single point in the document that defines the code point.",
              "createdAt": "2023-07-10T19:51:45Z",
              "updatedAt": "2023-07-10T19:51:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ax-QI",
          "commit": {
            "abbreviatedOid": "0d7e109"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks for fixing that, @alagoutte. As @marten-seemann suggests, we could do something more radical, but merging that PR would at least fix the editor copy.",
          "createdAt": "2023-07-10T21:07:10Z",
          "updatedAt": "2023-07-10T21:08:36Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@marten-seemann Yes. Case in point: I thought I had fixed that everywhere, PR #254 was reviewed and approved 4 times, yet we missed that. Fix would be to replace all references to experimental types by a pointer to the IANA section. But we missed the IETF deadline for that.",
              "createdAt": "2023-07-10T21:07:10Z",
              "updatedAt": "2023-07-10T21:08:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5bDa7h",
          "commit": {
            "abbreviatedOid": "0d7e109"
          },
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-13T05:52:29Z",
          "updatedAt": "2023-07-13T05:52:29Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "need to update the commit for remove code point ?",
              "createdAt": "2023-07-13T05:52:29Z",
              "updatedAt": "2023-07-13T05:52:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5b6wF6",
          "commit": {
            "abbreviatedOid": "0d7e109"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-22T18:03:57Z",
          "updatedAt": "2023-07-22T18:03:57Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Let's be even more radical for now.\r\n```suggestion\r\nThe ACK_MP frame (types TBD-00 and TBD-01)\r\n```",
              "createdAt": "2023-07-22T18:03:57Z",
              "updatedAt": "2023-07-22T18:03:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5b6wGo",
          "commit": {
            "abbreviatedOid": "1d162da"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-22T18:04:24Z",
          "updatedAt": "2023-07-22T18:04:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 264,
      "id": "PR_kwDOGNtpaM5V7Zyt",
      "title": "Fix typo and enable multipath between only one client and only one server IP address",
      "url": "https://github.com/quicwg/multipath/pull/264",
      "state": "MERGED",
      "author": "muxamilian",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-19T19:36:59Z",
      "updatedAt": "2023-10-20T08:41:09Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "c38d931c1d3d76ddcdefa8d5109a5b2a4e1933fb",
      "headRepository": "muxamilian/multipath",
      "headRefName": "main",
      "headRefOid": "4976e7ac62f005c51fbaf06343f993cd1dcaa314",
      "closedAt": "2023-10-20T08:41:09Z",
      "mergedAt": "2023-10-20T08:41:08Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "59d957fd238553e225bb42253a1e837e1a9aa98d"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, it is true that multiple port number can be used and we should not that. However, the chance proposed some editorially not correct as the list is only focused on IP addresses.",
          "createdAt": "2023-08-10T12:41:37Z",
          "updatedAt": "2023-08-10T12:41:37Z"
        },
        {
          "author": "muxamilian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My idea was that both the client and the server can only use one IP address but multiple ports. Then it's still multi-path. In what way do you mean my suggestion is not about IP addresses? I'm not sure I understood. \r\n\r\nIf you think it's in the wrong section, a section could be added which states that also multiple ports per IP address are allowed. ",
          "createdAt": "2023-08-10T12:44:17Z",
          "updatedAt": "2023-08-10T12:53:39Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "The text before the list says\r\n\r\n```\r\nEach endhost may use several IP addresses to serve the connection. In\r\nparticular, the multipath extension supports the following scenarios.\r\n```\r\n\r\nSo I think the point that you added (is correct) but doesn't find editorially in that list. We could simply add this as  sentence after the list or make a slightly larger editorial change (to this sentence above) to make sure that is clear.",
          "createdAt": "2023-08-10T12:54:01Z",
          "updatedAt": "2023-08-10T12:54:01Z"
        },
        {
          "author": "muxamilian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak Tried to rephrase it according to your suggestion. ",
          "createdAt": "2023-08-14T20:40:42Z",
          "updatedAt": "2023-08-14T20:40:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5drbUL",
          "commit": {
            "abbreviatedOid": "a2d46e1"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I agree that there are scenarios which need to use multi-path with same IP address and different ports. BTW, this also help implementations test with each other when running on most devices without two or more IP addresses. ",
          "createdAt": "2023-08-10T11:26:41Z",
          "updatedAt": "2023-08-10T11:26:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5kloxi",
          "commit": {
            "abbreviatedOid": "ca12b48"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "In my opinion, explicitly adding a fourth scenario and explaining why multiple paths can be present there makes the idea clearer in my humble opinion.",
          "createdAt": "2023-10-19T12:33:07Z",
          "updatedAt": "2023-10-19T12:35:26Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n    * The client uses only one IP address and the server\r\n      listens on only one.\r\n\r\nNote that in the last scenario, it still remains possible to have\r\nmultiple paths over the connection, given that a path is not only\r\ndefined by the IP addresses being used, but also the port numbers.\r\nIn particular, the client can use one or several ports per IP\r\naddress and the server can listen on one or several ports per IP\r\naddress.\r\n```",
              "createdAt": "2023-10-19T12:33:07Z",
              "updatedAt": "2023-10-19T12:35:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5klxV3",
          "commit": {
            "abbreviatedOid": "ca12b48"
          },
          "author": "muxamilian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T12:42:35Z",
          "updatedAt": "2023-10-19T12:42:35Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I think your latter paragraph makes the concept clearer. ",
              "createdAt": "2023-10-19T12:42:35Z",
              "updatedAt": "2023-10-19T12:42:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kl0XX",
          "commit": {
            "abbreviatedOid": "ca12b48"
          },
          "author": "muxamilian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T12:46:25Z",
          "updatedAt": "2023-10-19T12:46:26Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "As additional context, which I forgot earlier, having multipath from the same IP but different ports is useful for congestion control algorithms that make use of fair queuing: https://github.com/muxamilian/fair-queuing-aware-congestion-control",
              "createdAt": "2023-10-19T12:46:26Z",
              "updatedAt": "2023-10-19T12:46:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 265,
      "id": "PR_kwDOGNtpaM5WJtGM",
      "title": "remove leftover baba codepoint",
      "url": "https://github.com/quicwg/multipath/pull/265",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-22T18:01:45Z",
      "updatedAt": "2023-07-22T18:02:47Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "c38d931c1d3d76ddcdefa8d5109a5b2a4e1933fb",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-baba",
      "headRefOid": "f121afb393391a30ad8a587f2e8b883372b1d51f",
      "closedAt": "2023-07-22T18:02:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 274,
      "id": "PR_kwDOGNtpaM5dUKPt",
      "title": "Update a new affiliation",
      "url": "https://github.com/quicwg/multipath/pull/274",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-19T20:40:53Z",
      "updatedAt": "2023-10-20T07:47:33Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "33de3e79c499b3150457525c15bffa9ff17ebffe",
      "headRepository": "yfmascgy/multipath",
      "headRefName": "dev/update-affiliation",
      "headRefOid": "ff1fa9edc69e4f3116d3aaada10f5aa4293dca2e",
      "closedAt": "2023-10-20T07:47:33Z",
      "mergedAt": "2023-10-20T07:47:33Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "f05020cbe1c9fdb95ce81fb92744d64b7d5dc611"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5kssYC",
          "commit": {
            "abbreviatedOid": "ff1fa9e"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-20T07:45:11Z",
          "updatedAt": "2023-10-20T07:45:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5kstQK",
          "commit": {
            "abbreviatedOid": "ff1fa9e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-20T07:47:24Z",
          "updatedAt": "2023-10-20T07:47:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 275,
      "id": "PR_kwDOGNtpaM5dW6BO",
      "title": "Fix typo in bulleted list regarding IP address scenarios",
      "url": "https://github.com/quicwg/multipath/pull/275",
      "state": "MERGED",
      "author": "muxamilian",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-20T08:49:23Z",
      "updatedAt": "2023-10-20T09:32:26Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "59d957fd238553e225bb42253a1e837e1a9aa98d",
      "headRepository": "muxamilian/multipath",
      "headRefName": "patch-1",
      "headRefOid": "6f6772f76ae0ba44304998e42a632453a3b94041",
      "closedAt": "2023-10-20T09:32:26Z",
      "mergedAt": "2023-10-20T09:32:26Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "78a03740d37b29e7f4238ec7a30ec4df01f2fe29"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 276,
      "id": "PR_kwDOGNtpaM5dXCnO",
      "title": "All non-probing frames on new paths",
      "url": "https://github.com/quicwg/multipath/pull/276",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #50 and #226",
      "createdAt": "2023-10-20T09:12:46Z",
      "updatedAt": "2023-10-22T10:56:58Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "59d957fd238553e225bb42253a1e837e1a9aa98d",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-32",
      "headRefOid": "5b2f914bb4022d74e25d6351bed0e86696e6d100",
      "closedAt": "2023-10-22T10:56:52Z",
      "mergedAt": "2023-10-22T10:56:52Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "38ec4b4461e1bc3d498560d5b5579b87145c6dd1"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I want to note that the concept on non-probing packets is still used at many places in the draft, e.g. for path closure. Not sure we want to revise that somehow as well...?",
          "createdAt": "2023-10-20T09:36:08Z",
          "updatedAt": "2023-10-20T09:36:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5ktVSQ",
          "commit": {
            "abbreviatedOid": "8a06b9f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-20T09:15:13Z",
          "updatedAt": "2023-10-20T09:15:13Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nas long as the congestion control limits are respected.\r\nSpecially, bundling the PATH_RESPONSE frame with an MP_ACK frames\r\ncan be beneficial.\r\n```\r\nDo we want to add that as well? Or maybe somewhere else in the text?",
              "createdAt": "2023-10-20T09:15:13Z",
              "updatedAt": "2023-10-20T09:15:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ktZum",
          "commit": {
            "abbreviatedOid": "8a06b9f"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-20T09:25:36Z",
          "updatedAt": "2023-10-20T09:25:36Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nreceiving non-probing packets on a new path with a new Connection ID\r\n```",
              "createdAt": "2023-10-20T09:25:36Z",
              "updatedAt": "2023-10-20T09:25:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ktXPq",
          "commit": {
            "abbreviatedOid": "91f4a95"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thank you for working on this!",
          "createdAt": "2023-10-20T09:19:43Z",
          "updatedAt": "2023-10-20T09:29:22Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nIf validation succeeds, the client can continue to use the path.\r\n```\r\nMaybe?",
              "createdAt": "2023-10-20T09:19:44Z",
              "updatedAt": "2023-10-20T09:29:22Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\npacket on a new path needs to be considered as an path initiation\r\n```",
              "createdAt": "2023-10-20T09:20:17Z",
              "updatedAt": "2023-10-20T09:29:22Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\npath. Therefore, any frame can be sent on a new path at any time\r\n```",
              "createdAt": "2023-10-20T09:20:45Z",
              "updatedAt": "2023-10-20T09:29:22Z"
            },
            {
              "originalPosition": 15,
              "body": "Re bundling MP_ACK with PATH_RESPONSE, I agree that it is worth pointing out, though it might be better to state at a place where we say that ACK for a path should be sent consistently from one path.",
              "createdAt": "2023-10-20T09:23:07Z",
              "updatedAt": "2023-10-20T09:30:38Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nas long as the anti-amplification limits ({{Section 21.1.1.1 of RFC9000}}) and the congestion control limits are respected.\r\n```",
              "createdAt": "2023-10-20T09:25:57Z",
              "updatedAt": "2023-10-20T09:29:22Z"
            },
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nfor transmission. Reception of QUIC packets on a new\r\n```\r\nI think it is considered migration when CID is the same, regardless of the types of the frames being conveyed?",
              "createdAt": "2023-10-20T09:28:54Z",
              "updatedAt": "2023-10-20T09:29:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ktiQE",
          "commit": {
            "abbreviatedOid": "c260911"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-20T09:46:03Z",
          "updatedAt": "2023-10-20T09:46:03Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nas long as the anti-amplification limits \r\n({{Section 21.1.1.1 of QUIC-TRANSPORT}}) and the congestion control limits are respected.\r\n```",
              "createdAt": "2023-10-20T09:46:03Z",
              "updatedAt": "2023-10-20T09:46:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ktkNi",
          "commit": {
            "abbreviatedOid": "8bbb10e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-20T09:50:41Z",
          "updatedAt": "2023-10-20T09:50:41Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nas long as the anti-amplification limits\r\n```",
              "createdAt": "2023-10-20T09:50:41Z",
              "updatedAt": "2023-10-20T09:50:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kufei",
          "commit": {
            "abbreviatedOid": "8efe008"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-20T12:16:47Z",
          "updatedAt": "2023-10-20T12:16:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5kvMjU",
          "commit": {
            "abbreviatedOid": "8efe008"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Some of the introduced text brings confusion to me.",
          "createdAt": "2023-10-20T13:52:35Z",
          "updatedAt": "2023-10-20T13:59:18Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nremove any status associated to the path initation attempt.\r\n```\r\nIn addition, I am not sure if we should refer to \"status\" or \"state\" here",
              "createdAt": "2023-10-20T13:52:35Z",
              "updatedAt": "2023-10-20T13:59:18Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n\"probing\" and \"non-probing\" frames. When the multipath extension\r\nis negotiated, the reception of \"non-probing\"\r\n```",
              "createdAt": "2023-10-20T13:52:57Z",
              "updatedAt": "2023-10-20T13:59:18Z"
            },
            {
              "originalPosition": 13,
              "body": "I am not sure to understand the mention of \"path status\" of existing paths when initiating a new path.",
              "createdAt": "2023-10-20T13:55:48Z",
              "updatedAt": "2023-10-20T13:59:18Z"
            },
            {
              "originalPosition": 16,
              "body": "The anti-amplification limit only apply on non-validated paths, right? Also, each of these limits are path-specific and probably deserves stating it.",
              "createdAt": "2023-10-20T13:57:38Z",
              "updatedAt": "2023-10-20T13:59:18Z"
            },
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nshould be considered as a path migration as further discussed in {{migration}}.\r\n```",
              "createdAt": "2023-10-20T13:58:24Z",
              "updatedAt": "2023-10-20T13:59:18Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\n## Connection ID Changes and NAT Rebindings {#migration}\r\n```",
              "createdAt": "2023-10-20T13:58:37Z",
              "updatedAt": "2023-10-20T13:59:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kzmOX",
          "commit": {
            "abbreviatedOid": "9068963"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-21T12:11:36Z",
          "updatedAt": "2023-10-21T12:11:37Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n({{Section 21.1.1.1 of QUIC-TRANSPORT}}) and the congestion control\r\nlimits for this path are respected.\r\n```\r\nAny better?",
              "createdAt": "2023-10-21T12:11:36Z",
              "updatedAt": "2023-10-21T12:11:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kzmQJ",
          "commit": {
            "abbreviatedOid": "9068963"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-21T12:12:58Z",
          "updatedAt": "2023-10-21T12:12:58Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "because with migration, you basically open a new path and effectively close the old path at the same path. But we can definitely simply remove the term \"path status\". Does that help?\r\n```suggestion\r\nattempt that does not impact any existing\r\n```",
              "createdAt": "2023-10-21T12:12:58Z",
              "updatedAt": "2023-10-21T12:12:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kz_oq",
          "commit": {
            "abbreviatedOid": "9068963"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I am OK with merging this PR, if possible after accepting Quentin's text suggestion. But we will need another PR to specify how the \"implicit\" path status derived from receiving non proving frames interacts with the \"explicit\" status expressed by PATH_AVAILABLE or PATH_STANDBY.",
          "createdAt": "2023-10-22T00:28:15Z",
          "updatedAt": "2023-10-22T00:35:20Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "+1 Quentin. Or maybe \"does not impact the status of any existing [path]\"",
              "createdAt": "2023-10-22T00:28:15Z",
              "updatedAt": "2023-10-22T00:35:20Z"
            },
            {
              "originalPosition": 29,
              "body": "Not a blocking comment, but there is a little issue of how this interacts with PATH_STANDBY and PATH_AVAILABLE. In another PR, we specify that status messages can be sent before a path is created. So we have the case where the peer has received a PATH_STANDBY, and then receives a path validating packet. I would think that the explicit status specified in path status frames always takes priority over the implicit status derived from monitoring the reception of non-probing packets. ",
              "createdAt": "2023-10-22T00:33:10Z",
              "updatedAt": "2023-10-22T00:35:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kz_uf",
          "commit": {
            "abbreviatedOid": "9068963"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-22T00:36:00Z",
          "updatedAt": "2023-10-22T00:36:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5k0IhC",
          "commit": {
            "abbreviatedOid": "9068963"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-22T07:51:39Z",
          "updatedAt": "2023-10-22T07:51:39Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "I don't think there is an issue. Path status relies to a DCID that the other end is using. So if you receive packets on a new path and you want to signal path status for that path, you should send a path status frame together with your path challenge. ",
              "createdAt": "2023-10-22T07:51:39Z",
              "updatedAt": "2023-10-22T07:51:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kzXlO",
          "commit": {
            "abbreviatedOid": "9068963"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-21T05:24:17Z",
          "updatedAt": "2023-10-22T08:05:38Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\npacket on a new path needs to be considered as a path initiation\r\n```",
              "createdAt": "2023-10-21T05:24:17Z",
              "updatedAt": "2023-10-22T08:05:38Z"
            },
            {
              "originalPosition": 8,
              "body": "My understanding is that \"status\" usually refers to the current operational condition of a path that include \"Active\", \"Idle\", etc. So \"states\" will be more proper here.",
              "createdAt": "2023-10-21T07:03:13Z",
              "updatedAt": "2023-10-22T08:05:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5k0Okw",
          "commit": {
            "abbreviatedOid": "5b2f914"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-22T10:55:46Z",
          "updatedAt": "2023-10-22T10:55:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 277,
      "id": "PR_kwDOGNtpaM5dXR-k",
      "title": "PATH_STANDBY/AVAILABLE can be sent for all issued DCIDs",
      "url": "https://github.com/quicwg/multipath/pull/277",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #272",
      "createdAt": "2023-10-20T09:56:33Z",
      "updatedAt": "2024-03-12T16:18:31Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "5d1c29fdb79ecf01f6e32c4e08bd335794986547",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-33",
      "headRefOid": "728187f2f5f5ef5b74be853e2c0ca1b67d9c057b",
      "closedAt": "2023-10-22T09:47:14Z",
      "mergedAt": "2023-10-22T09:47:14Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "1157389027669ba036e1ba199c0812540dea3385"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5ktm6n",
          "commit": {
            "abbreviatedOid": "26a0e82"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-20T09:57:18Z",
          "updatedAt": "2023-10-20T09:57:19Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nA PATH_STANDY MAY be bundled with a NEW_CONNECTION_ID frame or\r\n```",
              "createdAt": "2023-10-20T09:57:19Z",
              "updatedAt": "2023-10-20T09:57:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ktm-C",
          "commit": {
            "abbreviatedOid": "26a0e82"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-20T09:57:27Z",
          "updatedAt": "2023-10-20T09:57:27Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nA PATH_AVAILABLE MAY be bundled with a NEW_CONNECTION_ID frame or\r\n```",
              "createdAt": "2023-10-20T09:57:27Z",
              "updatedAt": "2023-10-20T09:57:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kudzC",
          "commit": {
            "abbreviatedOid": "5d6115f"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-20T12:12:46Z",
          "updatedAt": "2023-10-20T12:12:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5kvQvv",
          "commit": {
            "abbreviatedOid": "5d6115f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Mostly typos.",
          "createdAt": "2023-10-20T14:00:37Z",
          "updatedAt": "2023-10-20T14:02:24Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n  MAY be used even if it is not yet in use over a path.\r\n```",
              "createdAt": "2023-10-20T14:00:37Z",
              "updatedAt": "2023-10-20T14:02:36Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nA PATH_STANDBY frame MAY be bundled with a NEW_CONNECTION_ID frame or\r\n```",
              "createdAt": "2023-10-20T14:00:50Z",
              "updatedAt": "2023-10-20T14:02:25Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nPATH_RESPONSE frame in order to indicate the preferred path usage\r\n```",
              "createdAt": "2023-10-20T14:01:23Z",
              "updatedAt": "2023-10-20T14:02:25Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  MAY be used even if it is not yet in use over a path.\r\n```",
              "createdAt": "2023-10-20T14:01:51Z",
              "updatedAt": "2023-10-20T14:02:44Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nA PATH_AVAILABLE frame MAY be bundled with a NEW_CONNECTION_ID frame or\r\n```",
              "createdAt": "2023-10-20T14:02:00Z",
              "updatedAt": "2023-10-20T14:02:25Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nPATH_RESPONSE frame in order to indicate the preferred path usage\r\n```",
              "createdAt": "2023-10-20T14:02:13Z",
              "updatedAt": "2023-10-20T14:02:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kzhRC",
          "commit": {
            "abbreviatedOid": "5d6115f"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thank you for the PR.\r\n\r\nLooks good modulo editorial preferences.",
          "createdAt": "2023-10-21T09:58:35Z",
          "updatedAt": "2023-10-21T09:59:51Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n  MAY be specified even if it is not yet in use over a path.\r\n```\r\n\"specified\" in addition to @qdeconinck's suggestions.",
              "createdAt": "2023-10-21T09:58:35Z",
              "updatedAt": "2023-10-21T09:59:51Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  MAY be specified even if it is not yet in use over a path.\r\n```",
              "createdAt": "2023-10-21T09:59:17Z",
              "updatedAt": "2023-10-21T09:59:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kz_jp",
          "commit": {
            "abbreviatedOid": "daa8ca0"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This is fine. On one hand, it forces the implementers to remember available/standby status per CID, on the other hand, it suppresses a race condition. Since we already have to maintain sequence number state per CID, this is an acceptable tradeoff.",
          "createdAt": "2023-10-22T00:23:50Z",
          "updatedAt": "2023-10-22T00:23:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5k0Imm",
          "commit": {
            "abbreviatedOid": "daa8ca0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-22T07:54:23Z",
          "updatedAt": "2023-10-22T07:54:23Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Do we need to also mention PATH_CHALLENGE?",
              "createdAt": "2023-10-22T07:54:23Z",
              "updatedAt": "2023-10-22T07:54:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kz-3v",
          "commit": {
            "abbreviatedOid": "daa8ca0"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Some minor changes",
          "createdAt": "2023-10-21T23:38:54Z",
          "updatedAt": "2023-10-22T08:02:57Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  corresponds to. All Destination Connection IDs that have been issued\r\n```",
              "createdAt": "2023-10-21T23:38:54Z",
              "updatedAt": "2023-10-22T08:02:57Z"
            },
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n  MAY be specified, even if they are not yet in use over a path.\r\n```",
              "createdAt": "2023-10-21T23:39:10Z",
              "updatedAt": "2023-10-22T08:02:57Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\na PATH_RESPONSE frame in order to indicate the preferred path usage\r\n```",
              "createdAt": "2023-10-21T23:40:36Z",
              "updatedAt": "2023-10-22T08:02:57Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n  corresponds to. All Destination Connection IDs that have been issued\r\n```",
              "createdAt": "2023-10-21T23:43:17Z",
              "updatedAt": "2023-10-22T08:02:57Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  MAY be specified, even if they are not yet in use over a path.\r\n```",
              "createdAt": "2023-10-21T23:43:40Z",
              "updatedAt": "2023-10-22T08:02:57Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\na PATH_RESPONSE frame in order to indicate the preferred path usage\r\n```",
              "createdAt": "2023-10-21T23:43:55Z",
              "updatedAt": "2023-10-22T08:02:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5k0I7j",
          "commit": {
            "abbreviatedOid": "daa8ca0"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Looks good to me. Some minor changes. ",
          "createdAt": "2023-10-22T08:04:17Z",
          "updatedAt": "2023-10-22T08:04:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 278,
      "id": "PR_kwDOGNtpaM5dYpb-",
      "title": "New transport parameter value because of PR #242",
      "url": "https://github.com/quicwg/multipath/pull/278",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-20T13:51:58Z",
      "updatedAt": "2024-03-12T16:18:32Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "5d1c29fdb79ecf01f6e32c4e08bd335794986547",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-34",
      "headRefOid": "0f2ebb6fd570d7874856bbef9ef71588c1f8ed53",
      "closedAt": "2023-10-20T13:53:03Z",
      "mergedAt": "2023-10-20T13:53:03Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "f6b8ebbd4460d440fd62b32a6c748a1d29271cee"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 279,
      "id": "PR_kwDOGNtpaM5dcbBl",
      "title": "recommend bundle ACK_MP with PATH_RESPONSE",
      "url": "https://github.com/quicwg/multipath/pull/279",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #226 ",
      "createdAt": "2023-10-21T12:09:16Z",
      "updatedAt": "2023-10-22T11:03:54Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "38ec4b4461e1bc3d498560d5b5579b87145c6dd1",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-35",
      "headRefOid": "d91b158d9049b12927f878e2531a4bc7a9e8451f",
      "closedAt": "2023-10-22T11:03:51Z",
      "mergedAt": "2023-10-22T11:03:51Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "94d12769e12da75ee69d8dda9cd47ad66f793d90"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5kzmWd",
          "commit": {
            "abbreviatedOid": "eb2f719"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-21T12:16:48Z",
          "updatedAt": "2023-10-21T12:16:49Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nACK_MP frames (defined in {{ack-mp-frame}}) can be returned on any path.\r\n```",
              "createdAt": "2023-10-21T12:16:49Z",
              "updatedAt": "2023-10-21T12:16:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kzm7v",
          "commit": {
            "abbreviatedOid": "f133735"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks LG!",
          "createdAt": "2023-10-21T12:34:04Z",
          "updatedAt": "2023-10-21T12:34:18Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\npacket (see {{compute-rtt}} for further guidance), it can be beneficial to bundle an MP_ACK frame\r\n```\r\nIt might be a good idea to add reference to the section explaining why that might be a good strategy.",
              "createdAt": "2023-10-21T12:34:04Z",
              "updatedAt": "2023-10-21T13:26:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kzo8P",
          "commit": {
            "abbreviatedOid": "2aced09"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-21T13:27:11Z",
          "updatedAt": "2023-10-21T13:27:12Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\npacket (see {{compute-rtt}} for further guidance), it can be beneficial\r\nto bundle an MP_ACK frame with the PATH_RESPONSE frame during\r\npath validation.\r\n```",
              "createdAt": "2023-10-21T13:27:11Z",
              "updatedAt": "2023-10-21T13:27:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5kz_wd",
          "commit": {
            "abbreviatedOid": "a048c92"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-22T00:38:25Z",
          "updatedAt": "2023-10-22T00:38:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5k0G6p",
          "commit": {
            "abbreviatedOid": "a048c92"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-22T06:58:29Z",
          "updatedAt": "2023-10-22T06:58:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5kz-rO",
          "commit": {
            "abbreviatedOid": "a048c92"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-21T23:24:52Z",
          "updatedAt": "2023-10-22T08:01:15Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nto bundle an ACK_MP frame with the PATH_RESPONSE frame during\r\n```",
              "createdAt": "2023-10-21T23:24:52Z",
              "updatedAt": "2023-10-22T08:01:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5k0Oy_",
          "commit": {
            "abbreviatedOid": "74b12de"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Minor typo",
          "createdAt": "2023-10-22T11:02:17Z",
          "updatedAt": "2023-10-22T11:02:46Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nIf the ACK_MP is preferred to be sent on the same path as the acknowledged\r\n```",
              "createdAt": "2023-10-22T11:02:17Z",
              "updatedAt": "2023-10-22T11:02:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 287,
      "id": "PR_kwDOGNtpaM5ei4bY",
      "title": "send PATH_ABANDON after time-out on another path",
      "url": "https://github.com/quicwg/multipath/pull/287",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #210",
      "createdAt": "2023-11-03T14:35:51Z",
      "updatedAt": "2024-03-12T16:17:55Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "94d12769e12da75ee69d8dda9cd47ad66f793d90",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-32",
      "headRefOid": "4002235976e8de80b62691e214b1ada0776155a0",
      "closedAt": "2023-11-14T07:11:23Z",
      "mergedAt": "2023-11-14T07:11:23Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "19f21cd6c7a897d4d5d3d6c39a15272272f1e8f0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5mGoug",
          "commit": {
            "abbreviatedOid": "213b047"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-03T15:34:35Z",
          "updatedAt": "2023-11-03T15:34:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5mOjvk",
          "commit": {
            "abbreviatedOid": "213b047"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "With minor nit.",
          "createdAt": "2023-11-06T12:52:45Z",
          "updatedAt": "2023-11-06T12:53:02Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nsend a PATH_ABANDON frame after an idle time on another path.\r\n```",
              "createdAt": "2023-11-06T12:52:45Z",
              "updatedAt": "2023-11-06T12:53:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 288,
      "id": "PR_kwDOGNtpaM5ei-iw",
      "title": "clarify path validation on previously used paths",
      "url": "https://github.com/quicwg/multipath/pull/288",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "closes #235",
      "createdAt": "2023-11-03T14:51:13Z",
      "updatedAt": "2024-03-12T16:17:58Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "94d12769e12da75ee69d8dda9cd47ad66f793d90",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-35",
      "headRefOid": "bd825ff68eab832d08131c74c1e9daad1c800d1b",
      "closedAt": "2023-11-14T07:11:57Z",
      "mergedAt": "2023-11-14T07:11:57Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "bfbbf8fd94dc4ee070f040be90852b2d1ada2f48"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5mOkaK",
          "commit": {
            "abbreviatedOid": "bd825ff"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-06T12:53:59Z",
          "updatedAt": "2023-11-06T12:53:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 289,
      "id": "PR_kwDOGNtpaM5ejDEm",
      "title": "token usage",
      "url": "https://github.com/quicwg/multipath/pull/289",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "closes #262",
      "createdAt": "2023-11-03T15:02:35Z",
      "updatedAt": "2024-03-12T16:17:57Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "94d12769e12da75ee69d8dda9cd47ad66f793d90",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-36",
      "headRefOid": "26708cb4535842a67bfab04e6e7c62114df40924",
      "closedAt": "2023-11-14T07:12:29Z",
      "mergedAt": "2023-11-14T07:12:29Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "674c819488354a45fd12d56e6245b9aa9dd6f64a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5mHdSy",
          "commit": {
            "abbreviatedOid": "26708cb"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Sounds likes good guidance.",
          "createdAt": "2023-11-03T17:43:48Z",
          "updatedAt": "2023-11-03T17:43:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5mKxP0",
          "commit": {
            "abbreviatedOid": "26708cb"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-06T00:04:29Z",
          "updatedAt": "2023-11-06T00:04:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5mOi5E",
          "commit": {
            "abbreviatedOid": "26708cb"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-06T12:51:51Z",
          "updatedAt": "2023-11-06T12:51:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 292,
      "id": "PR_kwDOGNtpaM5f3aEh",
      "title": "[+] Explicit path identifier first shot",
      "url": "https://github.com/quicwg/multipath/pull/292",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As the design required revision of the entire draft, this PR attempts to be a start point.",
      "createdAt": "2023-11-20T04:48:03Z",
      "updatedAt": "2024-03-25T05:43:11Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "674c819488354a45fd12d56e6245b9aa9dd6f64a",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_id",
      "headRefOid": "8ce80b22bad741b788b56d0b2e8e2ded7803556f",
      "closedAt": "2024-03-25T05:43:11Z",
      "mergedAt": "2024-03-25T05:43:11Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "da86c1ed2f87f0e795b53382b4df0a2f6a2510df"
      },
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The biggest open question I have is what happens to the path identifier when peers have reached max_concurrent_paths. In your proposal, it sounds like path identifiers are reused. This might have weird corner cases when packets are delayed. The other way to implement this is to have path identifiers increment. We need to have a consistent view of how many paths are currently in use between the two peers.\r\n\r\nThat's an important point that we need to make it clear. I think it's better to reuse than increment, as we can add some limitation for the corner cases(e.g. Path Identifier can only be reused after 3 max PTOs after the path is abandoned and all the CIDs belonging to this path is retired). It's more friendly for resource limitation of endpoints. \r\n\r\nIf we use increment, then we need to discuss when to increase the max Path Identifier in the new connection IDs without breaking the limitation for max concurrent paths.",
          "createdAt": "2023-11-20T07:54:11Z",
          "updatedAt": "2023-11-20T07:54:11Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Thanks for doing this work. I think three key points need to be fixed:\r\n> \r\n> * the CID should be uniquely identified by their sequence number, not by the combination of path-id and sequence number.\r\n> * we do not need MP_RETIRE_CID\r\n> * we should never reuse path-ID, because they are part of the cryptographic nonce.\r\n\r\n@huitema I think the first 2 points are for the same design mechanism: whether the CID sequence should be allocated for per path. So basically we have 2 main issues here:\r\n\r\n* whether the CID sequence and Retire Prior to should be allocated for per path, or the whole connection use the same sequence:  For this part, my opinion is \"per path\" is better than \"the whole connection\". Because if different paths use the same sequence for CIDs, endpoints would not be able to use \"Retire Prior To\" to retire CIDs with continuous sequence. It will eventually retire CIDs from other paths and may have unexpected effects.\r\n* \"reuse\" or \"increase and no-reuse\" for path-ID:  For this part, I prefer \"increase and no-reuse\" for security consideration as Path ID are part of the cryptographic nonce. Then we will need mechanism for the limitation of max active Path IDs. Marten's design for PATH_LIMIT { highest path ID} frame might be an available way to solve this problem.",
          "createdAt": "2023-11-21T07:22:32Z",
          "updatedAt": "2023-11-21T07:23:57Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not sure how symmetrical path IDs would work in a world where both client and server probe paths. While the current document doesn't specify a more p2p-friendly QUIC, it would be nice if our path ID design didn't unnecessarily complicate the use in the p2p context.",
          "createdAt": "2024-02-23T00:15:03Z",
          "updatedAt": "2024-02-23T00:15:03Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm not sure how symmetrical path IDs would work in a world where both client and server probe paths. While the current document doesn't specify a more p2p-friendly QUIC, it would be nice if our path ID design didn't unnecessarily complicate the use in the p2p context.\r\n\r\nFor the client-server case, starting connections from the server will not work well because of NAT and firewall. That does not mean that we don't want the server to only accept connections at one address. The solution is to have the server send a frame \"Call me at address IP:port\". See for example the [ADD_ADDRESS Frame in Quentin and Olivier's original draft](https://datatracker.ietf.org/doc/html/draft-deconinck-quic-multipath-07#page-24). I think that a mechanism like that would work well for P2P as well, since we need something like ICE to start the P2P paths.\r\n\r\nSymmetrical path ID make path management significantly simpler in the client-server case. I believe that symmetrical path ID would also simplify the design of an ICE-like mechanism in the P2P case.\r\n\r\n",
          "createdAt": "2024-02-23T01:47:07Z",
          "updatedAt": "2024-02-23T01:47:07Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5npo6e",
          "commit": {
            "abbreviatedOid": "60a77c9"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Thank you @Yanmei-Liu! I added some suggestions.\r\n\r\nThe biggest open question I have is what happens to the path identifier when peers have reached max_concurrent_paths. In your proposal, it sounds like path identifiers are reused. This might have weird corner cases when packets are delayed.\r\nThe other way to implement this is to have path identifiers increment. We need to have a consistent view of how many paths are currently in use between the two peers.",
          "createdAt": "2023-11-20T05:07:36Z",
          "updatedAt": "2023-11-20T05:20:27Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "This should include a precise definition of what we mean by \"path\". Crucially, a \"path\" is **not** defined by the 5-tuple, since NAT rebindings change the 5-tuple without one of the peers knowing about it.\r\n\r\nInstead, a new path is opened when a peer **intentionally** starts sending packets from a new address.",
              "createdAt": "2023-11-20T05:07:36Z",
              "updatedAt": "2023-11-20T05:20:27Z"
            },
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n  Connection IDs are issued per path. When endpoints address a path in multipath control frames, \r\n```",
              "createdAt": "2023-11-20T05:08:35Z",
              "updatedAt": "2023-11-20T05:20:27Z"
            },
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n  a variable-length integer value specifying the maximum number of paths an endpoint is \r\n```",
              "createdAt": "2023-11-20T05:08:53Z",
              "updatedAt": "2023-11-20T05:20:27Z"
            },
            {
              "originalPosition": 22,
              "body": "Why not make this the value of `enable_multipath`? You only need a single transport parameter then.",
              "createdAt": "2023-11-20T05:10:02Z",
              "updatedAt": "2023-11-20T05:20:27Z"
            },
            {
              "originalPosition": 62,
              "body": "```suggestion\r\nTo open a new path, an endpoint needs to provide its peer with connection IDs\r\nfor a new path (as identified by the Path Identifier). \r\n```",
              "createdAt": "2023-11-20T05:11:44Z",
              "updatedAt": "2023-11-20T05:20:27Z"
            },
            {
              "originalPosition": 148,
              "body": "As the path identifier determines the sequence number space, I'd prefer to put it at the front.\r\n```suggestion\r\n  Path Identifier (i),\r\n  Sequence Number (i),\r\n  Retire Prior To (i),\r\n```",
              "createdAt": "2023-11-20T05:16:22Z",
              "updatedAt": "2023-11-20T05:20:27Z"
            },
            {
              "originalPosition": 181,
              "body": "Same here.",
              "createdAt": "2023-11-20T05:16:30Z",
              "updatedAt": "2023-11-20T05:20:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5npvvr",
          "commit": {
            "abbreviatedOid": "979bcd1"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T05:45:33Z",
          "updatedAt": "2023-11-20T05:45:34Z",
          "comments": [
            {
              "originalPosition": 181,
              "body": "Actually I think we should keep the Sequence Number of CID unique for the whole connection, although the CID is allocated for each path. Endpoints use the sequence number to find the corresponding CID.  \r\nWhen I went through the implementation, I found endpoints need to maintain all the unused CIDs under a connection CID set before it can create any new path. \r\n\r\nThat's a important point that we shouldn't change from RFC 9000, and that's why I prefer to keep the Path Identifier field after the Sequence Number.",
              "createdAt": "2023-11-20T05:45:33Z",
              "updatedAt": "2023-11-20T05:45:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5npwcB",
          "commit": {
            "abbreviatedOid": "979bcd1"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T05:49:08Z",
          "updatedAt": "2023-11-20T05:49:08Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Yes, we could use the same transport parameter.",
              "createdAt": "2023-11-20T05:49:08Z",
              "updatedAt": "2023-11-20T05:49:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5npwj0",
          "commit": {
            "abbreviatedOid": "60a77c9"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T05:49:46Z",
          "updatedAt": "2023-11-20T05:49:46Z",
          "comments": [
            {
              "originalPosition": 181,
              "body": "Unfortunately this breaks Retire Prior To, as that field would apply to CIDs from different paths, despite declaring that it only works on single path. When we designed the Retire Prior To mechanism, it was important that you can _atomically_ retire all existing CIDs _and_ provide a new CID.\r\n\r\n> Endpoints use the sequence number to find the corresponding CID.\r\n\r\nWhere is this is necessary? You'd use (path ID, CID Sequence number) to find the corresponding CID.",
              "createdAt": "2023-11-20T05:49:46Z",
              "updatedAt": "2023-11-20T05:49:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5npxox",
          "commit": {
            "abbreviatedOid": "979bcd1"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T05:55:17Z",
          "updatedAt": "2023-11-20T05:55:18Z",
          "comments": [
            {
              "originalPosition": 181,
              "body": "That's quite reasonable.",
              "createdAt": "2023-11-20T05:55:17Z",
              "updatedAt": "2023-11-20T05:55:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5npzCW",
          "commit": {
            "abbreviatedOid": "993332c"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T06:02:16Z",
          "updatedAt": "2023-11-20T06:02:16Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I prefer change it later as people may still need to be compatible to their implementations. We can combine these 2 transport parameters after this PR is agreed to be merged by the working group.",
              "createdAt": "2023-11-20T06:02:16Z",
              "updatedAt": "2023-11-20T06:02:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5np2XJ",
          "commit": {
            "abbreviatedOid": "60a77c9"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T06:17:47Z",
          "updatedAt": "2023-11-20T06:17:47Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Up to you. Since the mechanism described in this PR is significantly different from the current draft version, you could also bump the code point of `enable_multipath`.",
              "createdAt": "2023-11-20T06:17:47Z",
              "updatedAt": "2023-11-20T06:17:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5np-51",
          "commit": {
            "abbreviatedOid": "f926470"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T06:47:48Z",
          "updatedAt": "2023-11-20T06:47:48Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Updated that.",
              "createdAt": "2023-11-20T06:47:48Z",
              "updatedAt": "2023-11-20T06:47:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nqOgM",
          "commit": {
            "abbreviatedOid": "63bba98"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T07:43:24Z",
          "updatedAt": "2023-11-20T07:43:24Z",
          "comments": [
            {
              "originalPosition": 181,
              "body": "Updated and added more definition for the frame fields.",
              "createdAt": "2023-11-20T07:43:24Z",
              "updatedAt": "2023-11-20T07:43:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nrWDy",
          "commit": {
            "abbreviatedOid": "4cc7372"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T10:12:29Z",
          "updatedAt": "2023-11-20T10:12:29Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "This section was meant to explain the meaning of active_connection_id_limit when this extension is used. we still need that. I think with this PR it would apply per path...?",
              "createdAt": "2023-11-20T10:12:29Z",
              "updatedAt": "2023-11-20T10:12:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nrW9t",
          "commit": {
            "abbreviatedOid": "4cc7372"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T10:14:11Z",
          "updatedAt": "2023-11-20T10:14:11Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Yes, `active_connection_id_limit` would apply per path in my proposal (#214).",
              "createdAt": "2023-11-20T10:14:11Z",
              "updatedAt": "2023-11-20T10:14:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nslKN",
          "commit": {
            "abbreviatedOid": "4cc7372"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T12:52:41Z",
          "updatedAt": "2023-11-20T12:52:41Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Solved that.",
              "createdAt": "2023-11-20T12:52:41Z",
              "updatedAt": "2023-11-20T12:52:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nuU57",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I am really happy to see such a proposal as a PR. Here and there comments and suggestions.\r\n\r\nI think such a proposal also opens the door for a more explicit and controlled path management. While we could have up to `max_active_paths` paths, an endpoint could only enable its peer to open them when needed (e.g., by proposing a new Path ID when it thinks it would benefit from a new path). We could also revisit the notion of \"path abandon\" and make this a strong signal (i.e., retire the Path ID) instead of a recommendation (i.e., please remove associated CIDs and stop using the path).",
          "createdAt": "2023-11-20T16:12:00Z",
          "updatedAt": "2023-11-20T17:03:10Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Just to disambiguate.\r\n```suggestion\r\nWhen multipath is negotiated, each path ID is linked to a separate packet number space.\r\n```",
              "createdAt": "2023-11-20T16:12:00Z",
              "updatedAt": "2023-11-20T17:03:10Z"
            },
            {
              "originalPosition": 19,
              "body": "Same, to avoid the confusion with \"network path\".\r\n```suggestion\r\n  Connection IDs are issued per path ID. When endpoints address a path in \r\n```",
              "createdAt": "2023-11-20T16:13:05Z",
              "updatedAt": "2023-11-20T17:03:10Z"
            },
            {
              "originalPosition": 20,
              "body": "I failed to parse the initial sentence, I think this formulation is clearer.\r\n```suggestion\r\n  multipath control frames, it refers to the Path Identifier related to\r\n```",
              "createdAt": "2023-11-20T16:16:58Z",
              "updatedAt": "2023-11-20T17:03:10Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\nThe Path Identifier communicated when advertising a\r\nDestination Connection ID is used to associate a packet to a packet number space \r\n```",
              "createdAt": "2023-11-20T16:18:38Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 22,
              "body": "I agree with Marten that on the long run, we should not have two distinct transport parameters and `max_active_paths` should be used in place of `enable_multipath`. But I also agree with Yanmei that for experimentation purposes, having two transport parameters is fine for now.",
              "createdAt": "2023-11-20T16:22:33Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 71,
              "body": "We should probably state here the notion of \"active\" paths at a given point in time.\r\n```suggestion\r\n  a variable-length integer value specifying the maximum number of active concurrent paths an endpoint is \r\n```",
              "createdAt": "2023-11-20T16:24:25Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 75,
              "body": "If we have two transport parameters, we should not make any assumption about a non-advertised value.",
              "createdAt": "2023-11-20T16:26:06Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 119,
              "body": "```suggestion\r\nEndpoints use Path Identifier to address a path in the multipath control frames,\r\n```",
              "createdAt": "2023-11-20T16:29:09Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nPath Identifier associated with Destination Connection ID is used as numerical identifier\r\n```",
              "createdAt": "2023-11-20T16:30:32Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 132,
              "body": "```suggestion\r\nNote that the Path Identifier for the initial path is 0. Connection IDs\r\n```",
              "createdAt": "2023-11-20T16:30:58Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 183,
              "body": "I think mentioning the DCID here is not useful and confusing.\r\n```suggestion\r\nEndpoints use Path Identifier\r\n```",
              "createdAt": "2023-11-20T16:35:13Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 241,
              "body": "I do not think we need normative language here. Instead, proposing a CID with a new Path ID is actually a way for the endpoint to control how many paths its peer can use. The transport parameter is used to set a hard limit on the maximum number of concurrent paths, but an endpoint may want to reach this limit only under some conditions.",
              "createdAt": "2023-11-20T16:46:11Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 350,
              "body": "```suggestion\r\ncontains the receiver's Path Identifier associated with the Destination Connection ID\r\n```",
              "createdAt": "2023-11-20T16:48:05Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 411,
              "body": "Given the description of MP_NEW_CONNECTION_ID frame below, this would be clearer. Also need to update the text.\r\n\r\n```suggestion\r\n   1-RTT[]: MP_NEW_CONNECTION_ID[C1, Seq=0, PathID=1] -->\r\n             <-- 1-RTT[]: MP_NEW_CONNECTION_ID[S1, Seq=0, PathID=1]\r\n             <-- 1-RTT[]: MP_NEW_CONNECTION_ID[S2, Seq=0, PathID=2]\r\n```",
              "createdAt": "2023-11-20T16:51:36Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 466,
              "body": "The lines below should also be updated\r\n```suggestion\r\n1-RTT[U]: DCID=S3 MP_RETIRE_CONNECTION_ID[PathId=2, Seq=0], ACK_MP[PID=1, PN=Y] ->\r\n```",
              "createdAt": "2023-11-20T16:53:59Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 514,
              "body": "It depends on what \"paths\" means in this context. Actually, if they are pre-allocated, the relation between CIDs and Path IDs is fixed, and so the relation between CID and packet number spaces.",
              "createdAt": "2023-11-20T16:55:26Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 520,
              "body": "Just to clarify.\r\n```suggestion\r\nrotation happens within a given Path ID.\r\n```",
              "createdAt": "2023-11-20T16:56:02Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 531,
              "body": "```suggestion\r\n  unchanged when CID rotation happens.\r\n```",
              "createdAt": "2023-11-20T16:56:34Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            },
            {
              "originalPosition": 789,
              "body": "Unless path has been abandoned?",
              "createdAt": "2023-11-20T16:58:49Z",
              "updatedAt": "2023-11-20T17:03:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nvOIV",
          "commit": {
            "abbreviatedOid": "60a77c9"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T18:21:50Z",
          "updatedAt": "2023-11-20T18:21:51Z",
          "comments": [
            {
              "originalPosition": 181,
              "body": "I would not change the retire connection ID frame. I think keep a unique Sequence Number for each CID results in something simpler:\r\n\r\n* retire CID: the unique CID number is unambiguous.\r\n* retire CID prior: still works.\r\n\r\nThe main use case for \"retire prior\" is when CID depend of some key, and the key is renewed. That implies \"retire all CID allocated prior to a certain point\", and it should be independent of the path attribute of the CID.",
              "createdAt": "2023-11-20T18:21:50Z",
              "updatedAt": "2023-11-20T18:21:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nvP5u",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Thanks for doing this work. I think three key points need to be fixed:\r\n\r\n* the CID should be uniquely identified by their sequence number, not by the combination of path-id and sequence number.\r\n* we do not need MP_RETIRE_CID\r\n* we should never reuse path-ID, because they are part of the cryptographic nonce.",
          "createdAt": "2023-11-20T18:25:45Z",
          "updatedAt": "2023-11-20T18:48:56Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "We also need to specify the path identifier for the connection ID specified in the \"preferred address\" transport parameter. Logically, it should be #1.",
              "createdAt": "2023-11-20T18:25:45Z",
              "updatedAt": "2023-11-20T18:48:56Z"
            },
            {
              "originalPosition": 256,
              "body": "I think adding an MP_RETIRE_CONNECTION_ID is unnecessary, and complicates the design. It is simpler to keep connection sequence number unique globally, and leave the RETIRE CONNECTION ID unchanged.",
              "createdAt": "2023-11-20T18:28:38Z",
              "updatedAt": "2023-11-20T18:48:56Z"
            },
            {
              "originalPosition": 264,
              "body": "Retire Prior cannot be path specific. In practice, retire prior applies to all connection ID allocated before some event, such as rotation of the encryption key of connection ID used by the load balancer. In that scenario, repeating MP_RETIRE_CONNECTION_ID for every path would be very error prone.",
              "createdAt": "2023-11-20T18:32:41Z",
              "updatedAt": "2023-11-20T18:48:56Z"
            },
            {
              "originalPosition": 379,
              "body": "The path identifier is used to build the nonce. Reusing the same identifier would require either continuing the previously used sequence number space, otherwise the nonce would not be unique. But then that would require keeping these old number spaces in memory until the end of the connection, which seems like a waste of resource. Then there is the risk of confusion, what happens if old packets are delivered from a previous path using the path identifier.\r\n\r\nWe should make this very clear in the design. If the design goes for \"re-use\", then the node has to allocate an array of number spaces for the negotiated max number of spaces, and keep that for the duration of the connection. The effect of \"Abandon path\" becomes complicated -- if a CID for path N has never been used, should it be retired?\r\n\r\nIf the design goes for \"unique path ID\", the management of path and sequence numbers becomes simpler, but we need some logic to enforce the \"maximum number of active paths\". An advantage there is that endpoints can allocate more CID and more path than really needed, so the endpoint is always ready to start a new path after a previous one has been abandoned.",
              "createdAt": "2023-11-20T18:44:20Z",
              "updatedAt": "2023-11-20T18:48:56Z"
            },
            {
              "originalPosition": 395,
              "body": "See comments above. In my mind, using the path ID in the nonce pretty much mandates unique path ID. Something like a monotonously increasing number.",
              "createdAt": "2023-11-20T18:46:00Z",
              "updatedAt": "2023-11-20T18:48:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nxsw9",
          "commit": {
            "abbreviatedOid": "ec27dcb"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thank you for working on this.",
          "createdAt": "2023-11-21T04:06:04Z",
          "updatedAt": "2023-11-21T05:27:14Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "I'm not sure if \"pre-allocate\" is the correct phrase here, it is my understanding that the endpoint has to receive a connection ID belonging to a previously unused Path Identifier before starting path validation on a newly chosen path?\r\n\r\nSeparately, as the endpoints needs to use a new path ID for validating the path, I think it might make sense to move this sentence to the beginning of this paragraph.\r\n",
              "createdAt": "2023-11-21T04:06:04Z",
              "updatedAt": "2023-11-21T05:30:48Z"
            },
            {
              "originalPosition": 22,
              "body": "I think I agree with Marten. Now that we've bumped the codepoint of `enable_multipath`, there is nothing preventing us from changing the format of the payload of that codepoint. `enable_mulipath` can now carry the number of concurrent paths.",
              "createdAt": "2023-11-21T04:08:10Z",
              "updatedAt": "2023-11-21T05:27:14Z"
            },
            {
              "originalPosition": 145,
              "body": "```suggestion\r\nTo let the peer open a new path, an endpoint needs to provide its peer with connection IDs\r\nand associated Path Identifiers for the new path. \r\n```\r\nMaybe?",
              "createdAt": "2023-11-21T04:12:40Z",
              "updatedAt": "2023-11-21T05:27:14Z"
            },
            {
              "originalPosition": 379,
              "body": "I do not feel strongly, but I think current design is fine as is.\r\n\r\nIn the new design, a QUIC Multipath connection that support N concurrent paths is essentially equivalent to N QUIC v1 connections running in parallel. If we think that way, migrating a particular path of a multipath connection can be equivalent to QUIC v1 doing intentional path migration.\r\n\r\nI do not think we have a problem in the design of QUIC v1 doing path migration. Do we?\r\n\r\ncc: @marten-seemann as also brought up the point.",
              "createdAt": "2023-11-21T05:27:03Z",
              "updatedAt": "2023-11-21T05:27:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nx_v9",
          "commit": {
            "abbreviatedOid": "ec27dcb"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T05:46:09Z",
          "updatedAt": "2023-11-21T05:46:14Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "I don't think we should reuse path identifiers. As @huitema correctly points out, reusing path identifiers means we can't start the packet number at 0 for reused paths, since that would be nonce reuse. The situation is even worse: As packet numbers are encoded in a maximum of 4 bytes, it wouldn't be possible to reuse a path ID once packet numbers have surpassed 2^32, unless you want to keep state for retired paths.\r\n\r\nHere's an idea (not fully fleshed out): We could define a `PATH_LIMIT { HighestPathID (i) }` frame. The receiver of this frame can then issue CIDs up to the highest Path ID, and the sender can use this path as soon as it received CIDs.",
              "createdAt": "2023-11-21T05:46:10Z",
              "updatedAt": "2023-11-21T05:46:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyGGJ",
          "commit": {
            "abbreviatedOid": "91275e4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T06:13:42Z",
          "updatedAt": "2023-11-21T06:13:43Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "I also prefer \"unique path ID\" here for AEAD security consideration. Not reusing resources and less corner case.",
              "createdAt": "2023-11-21T06:13:42Z",
              "updatedAt": "2023-11-21T06:13:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyIKU",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T06:22:26Z",
          "updatedAt": "2023-11-21T06:22:26Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "@marten-seemann \r\n> As @huitema correctly points out, reusing path identifiers means we can't start the packet number at 0 for reused paths, since that would be nonce reuse. The situation is even worse: As packet numbers are encoded in a maximum of 4 bytes, it wouldn't be possible to reuse a path ID once packet numbers have surpassed 2^32, unless you want to keep state for retired paths.\r\n\r\nI'm afraid this analysis is incorrect (specifically the 2nd sentence).\r\n\r\nIn QUIC v1, we retain packet numbers and those information for one path. In Multipath QUIC, we can do the same for N concurrent paths.\r\n\r\nIt is as simple as that.\r\n\r\n@Yanmei-Liu \r\n> Not reusing resources and less corner case.\r\n\r\n\"Not reusing resources\" this is correct. But the downside of not reusing path identifiers is that and endpoint has to issue credit to the other side (like MAX_STREAMS or NEW_CONNECTION_ID of QUIC v1).\r\n\r\nIt is the trade off between the two.",
              "createdAt": "2023-11-21T06:22:26Z",
              "updatedAt": "2023-11-21T06:29:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyJf-",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T06:28:03Z",
          "updatedAt": "2023-11-21T06:28:03Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "For the purpose of pushing this PR forward as an experiment, I'm happy with going with the \"no-reuse\" route, but I want to have the records straight, as we will be coming back to the discussion of if the \"explicit path identifiers\" concept really makes sense.",
              "createdAt": "2023-11-21T06:28:03Z",
              "updatedAt": "2023-11-21T06:28:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyMx6",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T06:40:56Z",
          "updatedAt": "2023-11-21T06:40:57Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "> unless you want to keep state for retired paths\r\n\r\nI don't think my analysis is incorrect. You need to be able to reconstruct the packet number if you want to be able to decrypt the packet. So at the very least, you need to keep state to save the highest received packet number for every path ID.\r\n\r\nThat's not a lot of state, but there are other problems with reusing path IDs, namely that you're introducing much more reliance on timers than if you just keep incrementing. That's the reason why none of the other identifiers we use in the protocol ever wrap around (packet numbers, stream IDs, etc.).",
              "createdAt": "2023-11-21T06:40:57Z",
              "updatedAt": "2023-11-21T06:40:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyObJ",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T06:47:10Z",
          "updatedAt": "2023-11-21T06:47:10Z",
          "comments": [
            {
              "originalPosition": 514,
              "body": "Solved it.",
              "createdAt": "2023-11-21T06:47:10Z",
              "updatedAt": "2023-11-21T06:47:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyOdQ",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T06:47:16Z",
          "updatedAt": "2023-11-21T06:47:16Z",
          "comments": [
            {
              "originalPosition": 789,
              "body": "Solved it.",
              "createdAt": "2023-11-21T06:47:16Z",
              "updatedAt": "2023-11-21T06:47:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyPRP",
          "commit": {
            "abbreviatedOid": "476a3db"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T06:50:12Z",
          "updatedAt": "2023-11-21T06:50:13Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "I moved this sentence to beginning of this paragraph, that's right.\r\nI think \"pre-allocate\" is correct here, both endpoints need to pre-allocate CIDs for new path and issue them for the peer.",
              "createdAt": "2023-11-21T06:50:12Z",
              "updatedAt": "2023-11-21T06:50:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyQLO",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T06:53:36Z",
          "updatedAt": "2023-11-21T06:53:36Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "> I don't think my analysis is incorrect. You need to be able to reconstruct the packet number if you want to be able to decrypt the packet. So at the very least, you need to keep state to save the highest received packet number for every path ID.\r\n\r\nThe presumption of reusing path identifiers is, as @huitema points out, that the packet number space would be retained. Highest received packet number is a property of a packet number space, so it does not cause any _extra_ burden.",
              "createdAt": "2023-11-21T06:53:36Z",
              "updatedAt": "2023-11-21T06:53:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nygkp",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T07:44:14Z",
          "updatedAt": "2023-11-21T07:44:14Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "How about we use an interval for PATH_LIMIT { lowest path ID, highest path ID} frame here? \r\nTo inform the peer about the available range for Path IDs, and it has a clear signal for retirement of Path IDs.",
              "createdAt": "2023-11-21T07:44:14Z",
              "updatedAt": "2023-11-21T07:44:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyguF",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T07:44:36Z",
          "updatedAt": "2023-11-21T07:45:21Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "What happens if the one endpoint doesn't how many path is needed? In the case of a deteriorating wifi, the endpoint wants to switch to 5G, but finds itself with no Path ID to use? What is the pre-allocating strategy?",
              "createdAt": "2023-11-21T07:44:36Z",
              "updatedAt": "2023-11-21T07:45:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyjTg",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T07:49:52Z",
          "updatedAt": "2023-11-21T07:49:52Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Endpoints just need to decide the max concurrent path and pre-allocate at lease one unused CID for each path Identifier. Endpoints don't need to decide which Path Identifier to use until client start a new path and choose one available CID with the unused Path Identifers.",
              "createdAt": "2023-11-21T07:49:52Z",
              "updatedAt": "2023-11-21T07:49:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nykks",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T07:52:51Z",
          "updatedAt": "2023-11-21T07:52:51Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "@Yanmei-Liu I'm not sure if we can use a contiguous range for representing valid IDs.\r\n\r\nConsider the case of an endpoint sticking to using path ID 0, while retiring all paths between ID 2 to 9.\r\n\r\nI think it would make more sense to follow the design that we have for stream IDs / Connection IDs; i.e., have one frame that issues the new maximum, and another that informs the peer one path ID that is being disposed.",
              "createdAt": "2023-11-21T07:52:51Z",
              "updatedAt": "2023-11-21T07:52:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyt_Q",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T08:15:50Z",
          "updatedAt": "2023-11-21T08:19:21Z",
          "comments": [
            {
              "originalPosition": 167,
              "body": "```suggestion\r\none Connection ID (see {{Section 5.1.1 of QUIC-TRANSPORT}}), which is associated with an unused Path ID. \r\n```",
              "createdAt": "2023-11-21T08:15:50Z",
              "updatedAt": "2023-11-21T08:19:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nyv7R",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T08:20:12Z",
          "updatedAt": "2023-11-21T08:20:12Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I am thinking a situation where you want max of three paths. You have your first path established. Try to establish another two paths on the 2nd sim and 3rd sim but failed. Then you don't have a path ID to build a path on the 4th sim even though it is available to use and can give you in total 2 paths (< max_num_path)",
              "createdAt": "2023-11-21T08:20:12Z",
              "updatedAt": "2023-11-21T08:24:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ny1ua",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T08:32:15Z",
          "updatedAt": "2023-11-21T08:32:15Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Maybe using the scheme that we have for Connection IDs in QUIC v1 would drive the discussion.\r\n\r\nIf we do that, then\r\n* the user of path IDs will send a TP indicating the number of paths from which it can send packets concurrently,\r\n* the peer sends MAX_PATH_IDS frame signaling the maximum path ID the user can use (consider MAX_DATA or MAX_STREAMS as precedents),\r\n* the user uses the path ids, and when it is done, sends a RETIRE_PATH_ID carrying the path id to be retired. We cannot use PATH_ABANDON here because it serves a different purpose and sent in the opposite direction,\r\n* when receiving a RETIRE_PATH_ID frame, the peer may raise the limit advertised by MAX_PATH_IDS.",
              "createdAt": "2023-11-21T08:32:15Z",
              "updatedAt": "2023-11-21T08:32:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5ny7av",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T08:43:17Z",
          "updatedAt": "2023-11-21T08:43:17Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "Please check the MP_MAX_PATHS frames part, it's Marten's idea and he reminds me of the mechanism is quite the same with MAX_STREAMS. I also update the mechanism of transport parameter for \"initial_max_paths\". It's true that we will not be able use contiguous range. I just use the maximum value.",
              "createdAt": "2023-11-21T08:43:17Z",
              "updatedAt": "2023-11-21T08:43:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5nzgKA",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T09:53:08Z",
          "updatedAt": "2023-11-21T09:53:09Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "@kazuho 's idea is quite useful, I added these mechanism:\r\n\r\n* TP initial_max_paths for the initial max Path ID limitation.\r\n* MP_MAX_PATHS frames could solve this issue by raise the limit of Path Identifier.\r\n\r\nWe don't need a RETIRE_PATH_ID here because Path Abandon has already been a clear signal for Path ID retirement.",
              "createdAt": "2023-11-21T09:53:09Z",
              "updatedAt": "2023-11-21T09:53:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5n0Djn",
          "commit": {
            "abbreviatedOid": "6704fb2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T10:58:10Z",
          "updatedAt": "2023-11-21T10:58:11Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "Solved it.",
              "createdAt": "2023-11-21T10:58:11Z",
              "updatedAt": "2023-11-21T10:58:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5n0GA2",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T11:03:32Z",
          "updatedAt": "2023-11-21T11:03:32Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Thanks. I\u2019m afraid PATH_ABANDON cannot be used, as it is sent in the different direction. We need a new frame.\r\n\r\nIIUC, PATH_ABANDON is a frame sent by the issuer of CIDs (who will also the issuer of path IDs in the new design). It is a frame that \u201crequests the peer\u201d to abandon the path.\r\n\r\nWhat we are looking for now is a frame that is sent by the receiver (i.e., the user) of the CIDs / path IDs, that carries the fact that the path has been abandoned.",
              "createdAt": "2023-11-21T11:03:32Z",
              "updatedAt": "2023-11-21T11:03:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5n0Jiu",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T11:11:48Z",
          "updatedAt": "2023-11-21T11:11:49Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I think it's fine for the issuer of Path IDs to take responsibility of retiring them.\r\nBesides, the receiver of the Path IDs could also use the Path Abandon to trigger the retirement of Path Identifier for both sides. ",
              "createdAt": "2023-11-21T11:11:49Z",
              "updatedAt": "2023-11-21T11:11:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5n0U1Q",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T11:37:18Z",
          "updatedAt": "2023-11-21T11:37:18Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "> I think it's fine for the issuer of Path IDs to take responsibility of retiring them.\r\n\r\nConsider the case of an endpoint deciding to stop using a path on which it sends packets. That endpoint has to retire the CID (or the path identifier in the new design) that is issued by the peer.\r\n\r\nIn -05, we use RETIRE_CONNECTION_ID as a signal. But in the new design, we are splitting CIDs and path IDs. So we need a new frame.\r\n\r\n> Besides, the receiver of the Path IDs could also use the Path Abandon to trigger the retirement of Path Identifier for both sides.\r\n\r\nThe path ID space will be different for each endpoint, won't it be? This is because each endpoint has its own view of paths, similar to Connection IDs.\r\n\r\nIf we are to use PATH_ABANDON for requesting retirement of path ID that *the endpoint issued* and also for signalling that retirement of a path ID that *the peer issued*, we need to add a field indicating to which side of path ID space (i.e., the endpoint or the peer) that the frame is referring.\r\n\r\nBut as the role of the frame will be different (as said, one endpoint signals the *request* to retire path ID, whereas the other side signals the fact that the path ID has been retired; that is how PATH_ABANDON and RETIRE_CONNECTION_ID work today), it might be better to have a different frame.",
              "createdAt": "2023-11-21T11:37:18Z",
              "updatedAt": "2023-11-21T11:38:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5n0WEM",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T11:40:21Z",
          "updatedAt": "2023-11-21T11:40:22Z",
          "comments": [
            {
              "originalPosition": 241,
              "body": "That's true, endpoints could use the CID allocation as one possible way to control concurrent paths. \r\nI changed the normative description: Endpoints SHOULD issue at least one CID with unused Path Identifier for new paths.",
              "createdAt": "2023-11-21T11:40:21Z",
              "updatedAt": "2023-11-21T11:40:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5n0dJJ",
          "commit": {
            "abbreviatedOid": "60a77c9"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T11:56:50Z",
          "updatedAt": "2023-11-21T11:56:50Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I also update the definition for these transport parameter, combined 2 TPs and replace the old \"enable_multipath\" with \"initial_max_paths\". \r\nCode point of -07 would be able for implementations to be compatible.",
              "createdAt": "2023-11-21T11:56:50Z",
              "updatedAt": "2023-11-21T11:56:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5n0iEl",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T12:08:36Z",
          "updatedAt": "2023-11-21T12:08:36Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "Should we can keep using the Destination Connection ID sequence number for the nonce and use a common sequence number space for all CIDs (as I believe CIDs should probably to be unique as well)? That means the encryption changes when the CID changes but I don't think that is a big issue...?",
              "createdAt": "2023-11-21T12:08:36Z",
              "updatedAt": "2023-11-21T12:08:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5n9i4Y",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "yangfurong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-22T11:41:04Z",
          "updatedAt": "2023-11-22T11:41:04Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "First, I think the semantics of \"Path ID\" need to be clarified. For a specific bidirectional path, do both endpoints use the same path ID, or independently choose which path ID to use?",
              "createdAt": "2023-11-22T11:41:04Z",
              "updatedAt": "2023-11-22T11:41:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5n95EW",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "yangfurong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-22T12:34:10Z",
          "updatedAt": "2023-11-22T12:34:10Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "\r\n> The path ID space will be different for each endpoint, won't it be? This is because each endpoint has its own view of paths, similar to Connection IDs.\r\n\r\nWhy can't we use the same path ID space for both endpoints? I understand that it is necessary to have different spaces when the DCID sequence number is used for identifying paths. But, it is a result of using DCID sequence numbers as path identifiers which are not stable during the lifetime of paths. Since we are going to use explicit and stable path IDs, is it still necessary to have different ID spaces?",
              "createdAt": "2023-11-22T12:34:10Z",
              "updatedAt": "2023-11-22T12:34:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5n-EHW",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "yangfurong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-22T12:58:20Z",
          "updatedAt": "2023-11-22T12:58:21Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "If the two endpoints use the same path ID for a specific path, the situation becomes simpler. \r\n1. When the client finds the establishment of path1 and path2 fails, it should send two PATH_ABANDON frames to the server;\r\n2. Once the server receives the PATH_ABANDON frames, it should reply with two PATH_ABANDON frames and issue new CIDs associated with path3 and path4;\r\n3. When the client receives PATH_ABANDON frames from its peer, it should also issue new CIDs associated with path3 and path4;\r\n4. Once the client notices that both endpoints have available CIDs for the next path to be created and the active path count is less than the limit, it can request to open a new path.",
              "createdAt": "2023-11-22T12:58:21Z",
              "updatedAt": "2023-11-22T12:58:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5n-GSw",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "yangfurong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-22T13:03:11Z",
          "updatedAt": "2023-11-22T13:03:12Z",
          "comments": [
            {
              "originalPosition": 157,
              "body": "Can we treat this as a CID rotation on the initial path? If so, the path ID should remain 0.",
              "createdAt": "2023-11-22T13:03:11Z",
              "updatedAt": "2023-11-22T13:03:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oAZqO",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-22T17:00:05Z",
          "updatedAt": "2023-11-22T17:00:06Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I would keep the same logic as we did until now, i.e., each endpoint independently choose the Path ID it should use over a path. However, this \"Path ID\" (Flow ID may be more appropriate) would remain stable over a given path, even if the CID change.\r\n\r\nI have two concerns about forcing such synchronisation of Path ID:\r\n- Clients may try to create paths with Path IDs that are never seen by the server. For instance, Path ID 0 works, and it wants to try two additional paths, respectively with Path ID 1 and Path ID 2. However, the network path tried with Path ID 1 does not work and the server only sees Path ID 2 packets. If the client finally retires its Path ID 1, should the server also drop all related resources about its Path ID 1?\r\n- This would create issues if, for some use cases (like P2P), we would like the server to create paths to the client. What would happen if for some reason, both the client and the server try to open at the same time a path over the same network, but with different Path IDs?",
              "createdAt": "2023-11-22T17:00:05Z",
              "updatedAt": "2023-11-22T17:00:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oDCOU",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "yangfurong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-23T02:35:21Z",
          "updatedAt": "2023-11-23T02:35:21Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Indeed, if both endpoints are allowed to initiate paths, it is better to not sync path IDs. ",
              "createdAt": "2023-11-23T02:35:21Z",
              "updatedAt": "2023-11-23T02:35:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oDJY3",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-23T03:24:42Z",
          "updatedAt": "2023-11-23T03:24:43Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Using the same Path ID for both sides will introduce more negotiation and frame order dependency, we'd better avoid that. ",
              "createdAt": "2023-11-23T03:24:42Z",
              "updatedAt": "2023-11-23T03:24:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oDL8w",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-23T03:43:48Z",
          "updatedAt": "2023-11-23T03:43:48Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I'm considering add a retirement frame for Path ID. \r\nAs @kazuho points out,  we need retirement signals for both sides: \r\n\r\n* Although in normal situations Path Abandon could release the Path ID associated on both sides, but there're situations when endpoint try to create a new path by Path Challenge but the peer doesn't receive the packet and don't know what happened to the Path ID consumed. \r\n* Also, when endpoint allocates new CIDs for new Path IDs, it will not know whether it touch the max limit or not, as we don't have a retirement signal for Path ID and peer could maintain the history Path IDs. It's the same situation happens to CIDs, and that's why we need retirement frame and Retire Prior To field.",
              "createdAt": "2023-11-23T03:43:48Z",
              "updatedAt": "2023-11-23T03:44:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oF3Sn",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-23T12:35:29Z",
          "updatedAt": "2023-11-23T12:35:30Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I would **much** prefer if paths had the same identifier in both directions, just like streams do. If also servers will be able to open paths, client-initiated path could use even path IDs and server-initiated path odd path IDs -- a direct reuse of the stream design.",
              "createdAt": "2023-11-23T12:35:29Z",
              "updatedAt": "2023-11-23T12:35:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oF7ya",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-23T12:46:58Z",
          "updatedAt": "2023-11-23T12:46:58Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "> Using the same Path ID for both sides will introduce more negotiation and frame order dependency, we'd better avoid that.\r\n\r\nWhy is that? The connection IDs are signalled before the path is used and will uniquely identify the path; the first time a peer sees a connection ID used in a packet it can directly map the CID to a path which has a single stable path identifier. No negotiation or other extra signalling is needed.\r\n\r\nIf/when the protocol is extended to allow servers to initiate paths, the protocol should use even/odd path IDs, exactly like stream IDs are already used.",
              "createdAt": "2023-11-23T12:46:58Z",
              "updatedAt": "2023-11-23T12:46:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oGC4g",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-23T12:56:11Z",
          "updatedAt": "2023-11-23T12:56:11Z",
          "comments": [
            {
              "originalPosition": 256,
              "body": "I think that a per-path CID sequence number space is simpler, in particular since the `MP_NEW_CONNECTION_ID` has a `Retire Prior To` field. Retiring CIDs (which could be in use) for other paths when you get new CIDs for a path seems complex and not very useful.",
              "createdAt": "2023-11-23T12:56:11Z",
              "updatedAt": "2023-11-23T12:56:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oGNPk",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-23T13:20:45Z",
          "updatedAt": "2023-11-23T13:20:45Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "We should definitely not reuse path IDs. One of the nice things with QUIC is that it doesn't reuse any identifiers, not even packet numbers, which makes implementations cleaner and simpler.\r\n\r\nWhen it comes to limiting the number of paths, I think there are two main designs:\r\n\r\n1. Reuse the design for connection IDs: limit the number of **active** paths. The max number of active CIDs is signalled as a transport parameter (`active_connection_id_limit`) and an endpoint is allowed to issue a new CID only after the peer has retired a previous CID. Analogously, an endpoint would only issue CIDs for a new path after a previous path had been abandoned.\r\n2. Use a `MP_MAX_PATHS` frame to dynamically allow new paths (similar to a `MAX_STREAMS` frame).\r\n\r\nIn short summary, 1. has less signalling and 2. can dynamically adapt the number of concurrent paths. Both designs have prior art in RFC 9000.",
              "createdAt": "2023-11-23T13:20:45Z",
              "updatedAt": "2023-11-23T13:20:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oGTZg",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-23T13:35:28Z",
          "updatedAt": "2023-11-23T13:35:29Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "> Should we can keep using the Destination Connection ID sequence number for the nonce and use a common sequence number space for all CIDs (as I believe CIDs should probably to be unique as well)? That means the encryption changes when the CID changes but I don't think that is a big issue...?\r\n\r\nI don't think that a common sequence number space for all CIDs match well with the `Retire Prior To` field in the `MP_NEW_CONNECTION_ID` (see also other comment above) so using the path ID is a simpler way to get a unique nonce. When a packet is received, you anyway need to look up the per-path state, and the packet number space in particular, before you can expand the truncated packet number and then decrypt the packet which means that you can trivially also access the path ID.\r\n\r\nThere is also #215 (now closed) as another solution to the nonce handling.",
              "createdAt": "2023-11-23T13:35:28Z",
              "updatedAt": "2023-11-23T13:35:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oGuAO",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-23T14:36:38Z",
          "updatedAt": "2023-11-23T14:36:38Z",
          "comments": [
            {
              "originalPosition": 157,
              "body": "I tend to agree here. The advantage of having an explicit Path ID makes it clear if the 4-tuple changes, it is a migration event. Given the idea behind the preferred_address TP, I would not change its meaning here, and keep it as a CID having SeqNum 1 on Path ID 0.",
              "createdAt": "2023-11-23T14:36:38Z",
              "updatedAt": "2023-11-23T14:36:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oHoFq",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "yangfurong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-23T17:08:19Z",
          "updatedAt": "2023-11-23T17:08:19Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "> I would **much** prefer if paths had the same identifier in both directions, just like streams do. If also servers will be able to open paths, client-initiated path could use even path IDs and server-initiated path odd path IDs -- a direct reuse of the stream design.\r\n\r\nIt's actually another way to somehow ''split'' the path ID spaces of endpoints. It solves the second problem as @qdeconinck pointed out. The only thing is how we define the TPs which limit the number of concurrent paths.  There might be some options here. For examples:\r\n1. We use one TP to indicate the number of concurrent paths that the sender is willing to accept. For instance, if both endpoints send ''2'', there will be four concurrent paths at maximum (each endpoint can initiate two paths). \r\n2. We use two TPs where one indicates the max number of paths to be accepted by the sender and another one represents the max number of paths the sender wishes to initiate. This design allows endpoints to negotiate the total number of concurrent paths while the former one just informs the local decision to a peer.",
              "createdAt": "2023-11-23T17:08:19Z",
              "updatedAt": "2023-11-23T17:08:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oPDu0",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-25T04:58:42Z",
          "updatedAt": "2023-11-25T04:58:56Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "When it comes to path ID definition, the logic problem in the statement \"Path Identifier (Path ID): An identifier that is used to identify a path....\" lies in its redundancy and circular definition. It essentially defines a term using the same concept embedded within the term itself, which doesn't provide any additional information or clarity.",
              "createdAt": "2023-11-25T04:58:43Z",
              "updatedAt": "2023-11-25T04:58:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oReSZ",
          "commit": {
            "abbreviatedOid": "58ab583"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-26T20:22:48Z",
          "updatedAt": "2023-11-26T20:22:48Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "I like@kazuho's suggestion of using the same logic for controlling path ID as for controlling stream ID, but there is a little complicating factor. Stream ID are allocated in clear contexts (uni/bidir, client/server), and then the same stream ID is used in both directions. In the current design, stream IDs are allocated as part of CID, and there is no guarantee that client and server pick the same ID for a new path. DO we want to also handle that?",
              "createdAt": "2023-11-26T20:22:48Z",
              "updatedAt": "2023-11-26T20:22:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oRea0",
          "commit": {
            "abbreviatedOid": "af1429a"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-26T20:27:29Z",
          "updatedAt": "2023-11-26T20:27:29Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "We need more discussion of that specific point. The current situation is ambiguous. For example, what does \"Abandon path 17\" means? I am pretty sure that some implementations are going to get confused between \"the ID chosen by the server\" and \"the ID chosen by the client\".",
              "createdAt": "2023-11-26T20:27:29Z",
              "updatedAt": "2023-11-26T20:27:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5oRfHB",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-26T20:51:36Z",
          "updatedAt": "2023-11-26T20:51:37Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I think we need to get a consensus on the management of path identifiers. I also think that we would get much better clarity if the client and server ended up using the same path ID values. Something like:\r\n\r\n1. The client proposes an initial number of paths, which limits how many path ID the server can \"pre allocate\" (to use @Yanmei-Liu terms)\r\n2. Both the server and the client pre-allocate connection identifiers, with path ID lower than the proposed limits.\r\n3. Client that starts a new path picks one of the server allocated CID, selecting the path ID.\r\n4. Server receiving a packet referencing a not yet use path ID must reply with client-allocated connection ID mentioning the same path ID.\r\n    - If the client has not yet allocated any such path ID, the server cannot send data on that new path.\r\n    - the client can always provide a new CID in messages containing a path challenge.\r\n    - the server can control how many paths will be open by simply limiting how many path ID it mentions.\r\n3. \"Abandon path(N)\" is handled pretty much like connection close, but just for the path. Any peer can send it, but the path is only closed if both do, or if RTO pass.\r\n    - if a path is abandoned, we should say what happens if the peer keeps using it. Drop the packets? Repeat the Abandon Path message?\r\n4. Path ID cannot be reused. If a path_id is abandoned, all CID allocated for that path should be retired.\r\n5. The client can use a MAX_PATH_ID frame to increase the number of supported paths.\r\n\r\n",
              "createdAt": "2023-11-26T20:51:36Z",
              "updatedAt": "2023-11-26T20:51:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5pnWLi",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "tzaeschke",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-08T09:20:49Z",
          "updatedAt": "2023-12-08T09:20:49Z",
          "comments": [
            {
              "originalPosition": 746,
              "body": "Typo/missed change: I think the `Destination Connection ID Sequence Number` in the frame spec above needs to be replaced with `Path Identifier`?",
              "createdAt": "2023-12-08T09:20:49Z",
              "updatedAt": "2023-12-08T09:20:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5wgINO",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T02:59:43Z",
          "updatedAt": "2024-02-19T02:59:44Z",
          "comments": [
            {
              "originalPosition": 531,
              "body": "I think we should be a bit more prescriptive here. I would like MAX_PATHS to follow the same logic as MAX_STREAMS, and describe the number of paths that MAY be created by the peer. I would also like to exploit the asymmetry of clients and servers, in which only the clients create new paths. Something like:\r\n\r\n1. The server send MAX_PATHS to raise the maximum path number that it is willing to accept.\r\n2. The client sends MAX_PATHS to raise the maximum path number that it is willing to create.\r\n3. The server sends MP_NEW_CONNECTION_ID up to the min of client and server MAX_PATHS\r\n4. The client sends MP_NEW_CONNECTION_ID up to the min of client and server MAX_PATHS\r\n5. The client picks a server provided connection ID to create a new path, send a PATH CHALLENGE\r\n6. If the server receives the challenge, it picks a connection ID with the same path ID for sending the PATH RESPONSE\r\n\r\nWe have a set of error conditions:\r\n- Server sends MP_NEW_CONNECTION_ID with path ID larger than client limit -- protocol error\r\n- Client sends MP_NEW_CONNECTION_ID with path ID larger than server limit -- protocol error\r\n- Server receives a PATH CHALLENGE before receiving MP_NEW_CONNECTION_ID for the path -- not an error, but the PATH CHALLENGE is ignored, no response. Or, response is delayed until MP_NEW_CONNECTION_ID arrives.\r\n\r\nBut we also achieve path_id symmetry, I guess. Although there is probably some additional complexity with NAT Rebinding.",
              "createdAt": "2024-02-19T02:59:43Z",
              "updatedAt": "2024-02-19T02:59:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5wgNCc",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T03:28:37Z",
          "updatedAt": "2024-02-19T03:28:37Z",
          "comments": [
            {
              "originalPosition": 178,
              "body": "We need to be a bit more precise there. RFC 9000 suggests that the server sends two path challenges, one to the old client address and one to the new one. We need to specify what connection ID it picks.\r\n\r\n- for the old address, I assume the server should keep using the same MP_CONNECTION_ID, mapping to the same path ID.\r\n- for the new address, the server SHOULD pick an MP_CONNECTION_ID that has not been used yet. We have to discuss whether that new MP_CONNECTION_ID should point to the same path or to a different path.\r\n\r\nI would argue for \"same path\", for two reasons:\r\n\r\n1. We don't want the server to initiate new paths. If it did, there could be a race condition with the client deciding to use that path ID for a different 4-tuple.\r\n2. We don't want NAT rebinding to consume the path identifier budget at the server, because it is trivial for attackers to intercept a client's message, change the source IP, and forward the message to the server. If new path-ids are used each time, we have a path-id exhaustion attack.",
              "createdAt": "2024-02-19T03:28:37Z",
              "updatedAt": "2024-02-19T03:28:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5woT16",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T06:54:52Z",
          "updatedAt": "2024-02-20T06:54:53Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I think that if we go through the trouble of changing the current solution, we should go for having the same path ID in both directions. It will make management much simpler, and it is not very hard, see later comments.",
              "createdAt": "2024-02-20T06:54:53Z",
              "updatedAt": "2024-02-20T06:54:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5wr4it",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T14:19:33Z",
          "updatedAt": "2024-02-20T14:19:33Z",
          "comments": [
            {
              "originalPosition": 531,
              "body": "I agree, and this is more or less exactly how it is implemented in the Rask stack.",
              "createdAt": "2024-02-20T14:19:33Z",
              "updatedAt": "2024-02-20T14:19:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5xAAMi",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I think we can have \"symmetrical\" Path IDs where a (bidirectional) path is identified by the underlying Path ID of the packets' CID. Some comments regarding MAX_PATHS and Path ID value splitting for possible future extension.",
          "createdAt": "2024-02-22T13:14:47Z",
          "updatedAt": "2024-02-22T13:19:49Z",
          "comments": [
            {
              "originalPosition": 919,
              "body": "So coming back to the discussion about the MAX_PATHS frame, I pretty like the idea that it should indicate the maximum Path ID value that could be used from the sender's perspective (to keep the path management asymmetry where e.g., a client may want to open many paths, but the server wants to keep resources up to x paths). I would probably rename the \"Maximum paths\" field of the MAX_PATHS frame to \"Maximum Path ID\", so if a MAX_PATHS {\"Maximum Path ID\": 3} is received, it should be possible to open paths 0, 1, 2 and 3. This is mainly to limit the path IDs where MP_NEW_CONNECTION_ID frames could be received. But if the endpoint does not send MP_NEW_CONNECTION_ID frame for a given Path ID, the path cannot be opened by its peer anyway (no associated CID). This has also the nice property that endpoints could negotiate multipath with the `initial_max_paths` TP, initially with only one path allowed (if `initial_max_paths` is 0, as the initial path ID is 0; absence of this TP means multipath is not supported).\r\n\r\nA last point: I think we should decide whether the multipath extension leaves the door open to server-initiated paths in a latter extension. If this is the case, we should split the Path ID space in even (client-initiated) and odd (server-initiated) values, as done in e.g. stream IDs. For simplicity, the current extension could only allow client-initiated paths (so only even Path IDs).",
              "createdAt": "2024-02-22T13:14:47Z",
              "updatedAt": "2024-02-22T13:19:49Z"
            },
            {
              "originalPosition": 897,
              "body": "I think this should be \"Maximum Path Id\"",
              "createdAt": "2024-02-22T13:15:27Z",
              "updatedAt": "2024-02-22T13:19:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5xAIlx",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-22T13:30:23Z",
          "updatedAt": "2024-02-22T13:30:24Z",
          "comments": [
            {
              "originalPosition": 897,
              "body": "Note that `Maximum Paths` is symmetric to `Maximum Streams` in `MAX_STREAMS` frames, so keeping the field name might actually be clearer.",
              "createdAt": "2024-02-22T13:30:23Z",
              "updatedAt": "2024-02-22T13:30:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5xBdDS",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-22T15:48:07Z",
          "updatedAt": "2024-02-22T15:48:07Z",
          "comments": [
            {
              "originalPosition": 897,
              "body": "Leave it to max paths -- as Michael says, this is the same pattern as MAX_STREAMS.",
              "createdAt": "2024-02-22T15:48:07Z",
              "updatedAt": "2024-02-22T15:48:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5xM8wo",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-24T05:38:06Z",
          "updatedAt": "2024-02-24T05:38:06Z",
          "comments": [
            {
              "originalPosition": 531,
              "body": "There is another issue regarding probing for new paths. When a client wants to create a new path, it is supposed to use a \"new\" path_id, select CID that match the path ID, send a Path Challenge, and wait for the Path Response. The Path Response may well never arrive. That means that the Path ID is \"burned\" for the client, but also for the server. But the server does not know, will not know until the client sends a Path Abandon. We should be clear that the client should do that. We should also clarify how the Path Abandon causes all the CID allocated for the path ID to be retired.",
              "createdAt": "2024-02-24T05:38:06Z",
              "updatedAt": "2024-02-24T05:38:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5xNGhY",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-24T08:24:38Z",
          "updatedAt": "2024-02-24T08:24:38Z",
          "comments": [
            {
              "originalPosition": 264,
              "body": "OK, strike that. We are going for collection of CID per path (or per path ID), and identification of CID by the tuple {path_id, sequence}. So we pretty much need MP_RETIRE_CONNECTION_ID .",
              "createdAt": "2024-02-24T08:24:38Z",
              "updatedAt": "2024-02-24T08:24:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5xQTBg",
          "commit": {
            "abbreviatedOid": "60a77c9"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-26T07:20:43Z",
          "updatedAt": "2024-02-26T07:20:43Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I am implementing this right now. The good thing about the \"unique path ID\" is that the header now carries a clear intention. If the destination CID correspond to path X, then the intention was clearly to send the packet on path X -- even in cases when the CID is not exactly the same that was used for that path previously. This closes the ambiguity of \"CID renewal and NAT Rebinding at the same time\".",
              "createdAt": "2024-02-26T07:20:43Z",
              "updatedAt": "2024-02-26T07:20:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zGJwD",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T12:59:44Z",
          "updatedAt": "2024-03-12T12:59:45Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nWhen multipath is negotiated, each separate packet number space is linked to a path ID. \r\n```\r\nEditorial suggest and path ID wasn't introduced before.",
              "createdAt": "2024-03-12T12:59:44Z",
              "updatedAt": "2024-03-12T12:59:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zGQ1d",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T13:11:35Z",
          "updatedAt": "2024-03-12T13:11:35Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I create issue #294. Please continue the discussion there!",
              "createdAt": "2024-03-12T13:11:35Z",
              "updatedAt": "2024-03-12T13:11:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zGTjd",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T13:15:44Z",
          "updatedAt": "2024-03-12T13:15:45Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Actually think this is fine, because that's what it is and identifier to identify the concept of a path. I think what is not explained here is what's the concept of a path we are using or how a path is defined. However, that is defined later and I think becomes clear in the doc.\r\n\r\nWe could do a minor editorial change and say \"This identifier defines a path in a QUIC connection\" but I don't think it makes a real different.\r\n\r\n@yfmascgy do you have a proposal how to phrase it better?",
              "createdAt": "2024-03-12T13:15:45Z",
              "updatedAt": "2024-03-12T13:15:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zGb27",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T13:27:51Z",
          "updatedAt": "2024-03-12T13:27:51Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I created a new issue #295. Please continue the discussion there!",
              "createdAt": "2024-03-12T13:27:51Z",
              "updatedAt": "2024-03-12T13:27:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zGeHW",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T13:31:23Z",
          "updatedAt": "2024-03-12T13:31:23Z",
          "comments": [
            {
              "originalPosition": 157,
              "body": "```suggestion\r\nthe connection ID specified in the \"preferred address\" transport parameter is 0.\r\nUse of the \"preferred address\" is considered as a migration event\r\nthat does not change the path ID.\r\n```",
              "createdAt": "2024-03-12T13:31:23Z",
              "updatedAt": "2024-03-13T18:09:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zGjZH",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T13:39:50Z",
          "updatedAt": "2024-03-12T13:39:50Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "```suggestion\r\nas specified in {{Section 9.3 of QUIC-TRANSPORT}} by initiating path validation\r\nand using a new Connection ID for the same path ID.\r\n```",
              "createdAt": "2024-03-12T13:39:50Z",
              "updatedAt": "2024-03-12T13:39:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zGlhf",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T13:43:11Z",
          "updatedAt": "2024-03-12T13:43:11Z",
          "comments": [
            {
              "originalPosition": 178,
              "body": "I added a clarification above. Please have a look @huitema !\r\n\r\nHowever, why do you think we need t send two path challenges? On mitigation you don't send a path challenge to the old address in RFC9000. If path validation fails you keep the old path (and retire the new connection ID). If migration succeeds, you can retire the old connection ID.",
              "createdAt": "2024-03-12T13:43:11Z",
              "updatedAt": "2024-03-12T13:43:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zGnel",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T13:46:16Z",
          "updatedAt": "2024-03-12T13:46:16Z",
          "comments": [
            {
              "originalPosition": 256,
              "body": "I created issue #296. Please continue the discussion there.",
              "createdAt": "2024-03-12T13:46:16Z",
              "updatedAt": "2024-03-12T13:46:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zGplg",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T13:49:37Z",
          "updatedAt": "2024-03-12T13:49:38Z",
          "comments": [
            {
              "originalPosition": 264,
              "body": "See also issue #296.",
              "createdAt": "2024-03-12T13:49:38Z",
              "updatedAt": "2024-03-12T13:49:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zGr9t",
          "commit": {
            "abbreviatedOid": "515feec"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T13:53:00Z",
          "updatedAt": "2024-03-12T13:53:01Z",
          "comments": [
            {
              "originalPosition": 746,
              "body": "Done. Thanks!",
              "createdAt": "2024-03-12T13:53:00Z",
              "updatedAt": "2024-03-12T13:53:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zG4gN",
          "commit": {
            "abbreviatedOid": "515feec"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T14:09:48Z",
          "updatedAt": "2024-03-12T14:09:48Z",
          "comments": [
            {
              "originalPosition": 919,
              "body": "@qdeconinck I'm not sure if any action is needed here but if so, can you open one (or two) new issues?\r\n\r\nOtherwise, can I resolve this comment?",
              "createdAt": "2024-03-12T14:09:48Z",
              "updatedAt": "2024-03-12T14:09:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zHENh",
          "commit": {
            "abbreviatedOid": "515feec"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T14:26:22Z",
          "updatedAt": "2024-03-12T14:26:23Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "I opened issue #297 for further discussion there, if needed, otherwise please close!",
              "createdAt": "2024-03-12T14:26:22Z",
              "updatedAt": "2024-03-12T14:26:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zHGaE",
          "commit": {
            "abbreviatedOid": "515feec"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T14:29:34Z",
          "updatedAt": "2024-03-12T14:29:34Z",
          "comments": [
            {
              "originalPosition": 395,
              "body": "see also #297",
              "createdAt": "2024-03-12T14:29:34Z",
              "updatedAt": "2024-03-12T14:29:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zHRnA",
          "commit": {
            "abbreviatedOid": "515feec"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T14:46:09Z",
          "updatedAt": "2024-03-12T14:46:09Z",
          "comments": [
            {
              "originalPosition": 531,
              "body": "I created issue #298.",
              "createdAt": "2024-03-12T14:46:09Z",
              "updatedAt": "2024-03-12T14:46:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zHzth",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T15:33:24Z",
          "updatedAt": "2024-03-12T15:33:24Z",
          "comments": [
            {
              "originalPosition": 919,
              "body": "I think my main concern is, on the long term, to enable server-initiated paths, requiring to split the Path ID space from client-initiated paths to server-initiated ones. #294 seems to address this, so we can resolve this thread for now.",
              "createdAt": "2024-03-12T15:33:24Z",
              "updatedAt": "2024-03-12T15:33:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zH4BF",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T15:38:34Z",
          "updatedAt": "2024-03-12T15:38:34Z",
          "comments": [
            {
              "originalPosition": 919,
              "body": "okay, please feel free to add further comments to #294 then. I will mark it as resolved for now!",
              "createdAt": "2024-03-12T15:38:34Z",
              "updatedAt": "2024-03-12T15:38:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zU-4N",
          "commit": {
            "abbreviatedOid": "a39c426"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-13T18:10:02Z",
          "updatedAt": "2024-03-13T18:10:02Z",
          "comments": [
            {
              "originalPosition": 157,
              "body": "@qdeconinck @Yanmei-Liu should we commit this change?",
              "createdAt": "2024-03-13T18:10:02Z",
              "updatedAt": "2024-03-13T18:10:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zVCU5",
          "commit": {
            "abbreviatedOid": "c852dec"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-13T18:18:10Z",
          "updatedAt": "2024-03-13T18:18:11Z",
          "comments": [
            {
              "originalPosition": 157,
              "body": "Just committed.",
              "createdAt": "2024-03-13T18:18:10Z",
              "updatedAt": "2024-03-13T18:18:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zsReb",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "gloinul",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-16T07:13:39Z",
          "updatedAt": "2024-03-16T07:13:39Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I think one can clarify that a path is defined as unidirectional forwarding path from A to B. Where the path ID has a set of Destination CIDs that identify packets belonging to the ID. An endpoint will bind its local 5-tuple to the PATH ID when first sending or receiving on the ID. ",
              "createdAt": "2024-03-16T07:13:39Z",
              "updatedAt": "2024-03-16T07:13:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuGxk",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T12:45:32Z",
          "updatedAt": "2024-03-17T12:45:32Z",
          "comments": [
            {
              "originalPosition": 897,
              "body": "No strong opinion on the name, keeping things consistent seems fine. However, I had to read this thread to understand what was actually meant. It would probably help to add a description below the frame that describes that this is the maximum path ID.",
              "createdAt": "2024-03-17T12:45:32Z",
              "updatedAt": "2024-03-17T12:45:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuG3Y",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T12:47:25Z",
          "updatedAt": "2024-03-17T12:47:26Z",
          "comments": [
            {
              "originalPosition": 930,
              "body": "This is inconsistent with the other QUIC MAX_* frames. Path 3 should be allowed.",
              "createdAt": "2024-03-17T12:47:25Z",
              "updatedAt": "2024-03-17T12:47:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuG8W",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T12:49:04Z",
          "updatedAt": "2024-03-17T12:49:04Z",
          "comments": [
            {
              "originalPosition": 936,
              "body": "I believe this is more succinct and clearer:\r\n```suggestion\r\nAn endpoint MUST NOT initiate a path with a path ID higher than the Maximum Paths value.\r\nAn endpoint MUST terminate the a connection with an error of type MP_PROTOCOL_VIOLATION if a peer opens more paths than was permitted. \r\n```",
              "createdAt": "2024-03-17T12:49:04Z",
              "updatedAt": "2024-03-17T12:49:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuHAM",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T12:50:27Z",
          "updatedAt": "2024-03-17T12:50:27Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "Probably better: `initial_max_path_id`. This would mirror the meaning of the frame as suggested in https://github.com/quicwg/multipath/pull/292/files#r1527500161.",
              "createdAt": "2024-03-17T12:50:27Z",
              "updatedAt": "2024-03-17T12:50:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuHIZ",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T12:53:32Z",
          "updatedAt": "2024-03-17T12:53:32Z",
          "comments": [
            {
              "originalPosition": 263,
              "body": "Should PATH_ABANDON automatically retire the connection IDs, without the need to send any frames? It would be nice if we don't have to deal with a malicious / misbehaving peer that abandons a path, but keeps the CIDs active.",
              "createdAt": "2024-03-17T12:53:32Z",
              "updatedAt": "2024-03-17T12:53:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuHPP",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T12:55:28Z",
          "updatedAt": "2024-03-17T12:55:28Z",
          "comments": [
            {
              "originalPosition": 274,
              "body": "```suggestion\r\nA failed path validation consumes the Path ID used for probing of this path.\r\nAn endpoint MUST not use the same Path ID to probe a different path. Instead, it\r\nMUST send a PATH_ABANDON frame to retire the Path ID. \r\n```",
              "createdAt": "2024-03-17T12:55:28Z",
              "updatedAt": "2024-03-17T12:55:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuHXA",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T12:58:32Z",
          "updatedAt": "2024-03-17T12:58:32Z",
          "comments": [
            {
              "originalPosition": 289,
              "body": "This seems backwards. Connection IDs are issues for paths, not the other way around.\r\nAlso, if I allow you to open 1 million paths, you're probably wise to not issue me 1 million CIDs.",
              "createdAt": "2024-03-17T12:58:32Z",
              "updatedAt": "2024-03-17T12:58:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuHgj",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T12:59:38Z",
          "updatedAt": "2024-03-17T12:59:38Z",
          "comments": [
            {
              "originalPosition": 303,
              "body": "```suggestion\r\nwill not be used again. If the path is still active, the peer SHOULD replace it with a new connection ID using a MP_NEW_CONNECTION_ID frame.\r\n```",
              "createdAt": "2024-03-17T12:59:38Z",
              "updatedAt": "2024-03-17T12:59:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuHxA",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T13:05:56Z",
          "updatedAt": "2024-03-17T13:05:56Z",
          "comments": [
            {
              "originalPosition": 439,
              "body": "I don't understand how a key update protects against nonce reuse. I'd prefer to define the path ID as a value between 0 and 2^32-1. 4 billion paths should be fine for most applications.\r\n\r\nOf course, the varint format allows the encoding of up to 2^62-1, but this is something we can check immediately when decoding the transport parameter and the respective frames. There's plenty of precedent for limiting the range of acceptable values in RFC 9000.",
              "createdAt": "2024-03-17T13:05:56Z",
              "updatedAt": "2024-03-17T13:05:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuJYB",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T13:22:36Z",
          "updatedAt": "2024-03-17T13:22:36Z",
          "comments": [
            {
              "originalPosition": 439,
              "body": "Reading through the issues, I think this is what @gloinul pointed out in #307.",
              "createdAt": "2024-03-17T13:22:36Z",
              "updatedAt": "2024-03-17T13:22:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuOXp",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T14:57:17Z",
          "updatedAt": "2024-03-17T14:57:17Z",
          "comments": [
            {
              "originalPosition": 936,
              "body": "I think it should be \"An endpoint MUST NOT send an MP_NEW_CONNECTION_ID frame with a path ID higher than the Maximum Paths value\".",
              "createdAt": "2024-03-17T14:57:17Z",
              "updatedAt": "2024-03-17T14:57:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuOtM",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T15:04:43Z",
          "updatedAt": "2024-03-17T15:04:43Z",
          "comments": [
            {
              "originalPosition": 263,
              "body": "Yes, it should! Or at least the complete closing of a path, with dual `PATH_ABANDON` frames should.",
              "createdAt": "2024-03-17T15:04:43Z",
              "updatedAt": "2024-03-17T15:04:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuO7f",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T15:09:53Z",
          "updatedAt": "2024-03-17T15:09:54Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "I think it should remain `initial_max_paths` to be symmetric with `initial_max_streams_*`. \r\n\r\nThe explanation can be copied from [RFC 9000](https://www.rfc-editor.org/rfc/rfc9000.html#section-18.2-4.22.1):\r\n\r\n> Setting this parameter is equivalent to sending a MAX_PATHS of the corresponding type with the same value.",
              "createdAt": "2024-03-17T15:09:54Z",
              "updatedAt": "2024-03-17T15:09:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuPD-",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T15:13:00Z",
          "updatedAt": "2024-03-17T15:13:00Z",
          "comments": [
            {
              "originalPosition": 274,
              "body": "Wouldn't it be enough to retire the connection ID? Abandoning the whole (potential) path seems like overkill.",
              "createdAt": "2024-03-17T15:13:00Z",
              "updatedAt": "2024-03-17T15:13:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zud0i",
          "commit": {
            "abbreviatedOid": "5b85733"
          },
          "author": "yfmascgy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T18:26:09Z",
          "updatedAt": "2024-03-17T18:26:09Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "> I think one can clarify that a path is defined as unidirectional forwarding path from A to B. Where the path ID has a set of Destination CIDs that identify packets belonging to the ID. An endpoint will bind its local 5-tuple to the PATH ID when first sending or receiving on the ID.\r\n\r\nI can see the difficulty in path definition here, especially when continuity of a path is involved. I am not sure defining a path as \"unidirectional forwarding path from A to B\" is a good definition because it does provide a set of criteria that uniquely distinguishes a path from the others. ",
              "createdAt": "2024-03-17T18:26:09Z",
              "updatedAt": "2024-03-17T18:26:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zux5f",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-18T00:37:33Z",
          "updatedAt": "2024-03-18T00:37:34Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "My 2c: There's only so much value you get from consistency with RFC 9000. This has created a fair amount of confusion in the review of this PR, and it seems like calling it `initial_max_path_id` (and the corresponding renaming of the frame), would make it 100% clear what is meant, without the need for long explanations.",
              "createdAt": "2024-03-18T00:37:34Z",
              "updatedAt": "2024-03-18T00:37:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuzYu",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-18T00:40:22Z",
          "updatedAt": "2024-03-18T00:40:23Z",
          "comments": [
            {
              "originalPosition": 274,
              "body": "I think that complicates things. Path validation can fail for a number of reasons. In particular, either the forward path (client -> server) or the return path (server -> client) could be broken separately.\r\n\r\nTherefore, from the fact that path validation failed, you cannot conclude that the server didn't see that particular path ID. Nuking the entire path ID seems like the easiest way to avoid confusion between client and server.",
              "createdAt": "2024-03-18T00:40:22Z",
              "updatedAt": "2024-03-18T00:40:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zwujW",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-18T07:35:06Z",
          "updatedAt": "2024-03-18T07:35:06Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "Well, then I think that the frame type should be `MAX_PATH_ID` to further reduce the confusion and increase the multipath specification consistency.",
              "createdAt": "2024-03-18T07:35:06Z",
              "updatedAt": "2024-03-18T07:35:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5z8U9H",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-19T05:10:34Z",
          "updatedAt": "2024-03-19T05:10:35Z",
          "comments": [
            {
              "originalPosition": 439,
              "body": "We should and can limit the maximum to 2^32-1. Older versions of Multipath draft has had that limitation implicitly, due to the number of CIDs being limited to 2^32, and the number of paths that can be opened being no more than the maximum number of CIDs.",
              "createdAt": "2024-03-19T05:10:35Z",
              "updatedAt": "2024-03-19T05:10:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5z8vDU",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-19T06:27:14Z",
          "updatedAt": "2024-03-19T06:27:14Z",
          "comments": [
            {
              "originalPosition": 439,
              "body": "I think we have a consensus here that we need to limit the maximum of Path ID to 2^32-1 according to security consideration. It's updated in this PR.",
              "createdAt": "2024-03-19T06:27:14Z",
              "updatedAt": "2024-03-19T06:27:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM50XarO",
          "commit": {
            "abbreviatedOid": "60a77c9"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-21T13:54:08Z",
          "updatedAt": "2024-03-21T13:54:08Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Record in issue #291 ",
              "createdAt": "2024-03-21T13:54:08Z",
              "updatedAt": "2024-03-21T13:54:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM50XeT8",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-21T13:59:37Z",
          "updatedAt": "2024-03-21T13:59:37Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "Record in issue #324",
              "createdAt": "2024-03-21T13:59:37Z",
              "updatedAt": "2024-03-21T13:59:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM50XhZ0",
          "commit": {
            "abbreviatedOid": "60ea99c"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-21T14:04:08Z",
          "updatedAt": "2024-03-21T14:04:08Z",
          "comments": [
            {
              "originalPosition": 263,
              "body": "Record in #313 ",
              "createdAt": "2024-03-21T14:04:08Z",
              "updatedAt": "2024-03-21T14:04:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM50Xq-9",
          "commit": {
            "abbreviatedOid": "0025052"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-21T14:17:36Z",
          "updatedAt": "2024-03-21T14:17:51Z",
          "comments": [
            {
              "originalPosition": 289,
              "body": "Record in #325",
              "createdAt": "2024-03-21T14:17:36Z",
              "updatedAt": "2024-03-21T14:17:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 299,
      "id": "PR_kwDOGNtpaM5pZdoh",
      "title": "[+] Explicit path identifier first shot(clean version / same commit)",
      "url": "https://github.com/quicwg/multipath/pull/299",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-12T15:46:55Z",
      "updatedAt": "2024-03-27T05:26:32Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "674c819488354a45fd12d56e6245b9aa9dd6f64a",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_id_clear",
      "headRefOid": "a39c426c6fcb7fd6957830b2b1b0cee77aad9971",
      "closedAt": "2024-03-12T15:50:33Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 300,
      "id": "PR_kwDOGNtpaM5pZg65",
      "title": "[+] Explicit path identifier first shot(clean version / same commit) ",
      "url": "https://github.com/quicwg/multipath/pull/300",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-12T15:51:38Z",
      "updatedAt": "2024-03-13T03:31:53Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "674c819488354a45fd12d56e6245b9aa9dd6f64a",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_id_simple",
      "headRefOid": "a39c426c6fcb7fd6957830b2b1b0cee77aad9971",
      "closedAt": "2024-03-13T03:31:53Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 314,
      "id": "PR_kwDOGNtpaM5p2jkZ",
      "title": "[+] Explicit Path ID: solving issue #297",
      "url": "https://github.com/quicwg/multipath/pull/314",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-17T06:15:25Z",
      "updatedAt": "2024-03-25T05:42:36Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "dev/path_id",
      "baseRefOid": "60ea99c70220f3989c6a8247356a60236ef5d414",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_id_simple",
      "headRefOid": "1e1646f29eb091e16d3bc6b42e10afdefe603be4",
      "closedAt": "2024-03-25T05:42:36Z",
      "mergedAt": "2024-03-25T05:42:36Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "8ce80b22bad741b788b56d0b2e8e2ded7803556f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5zuIT7",
          "commit": {
            "abbreviatedOid": "1d99dcf"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-17T13:13:19Z",
          "updatedAt": "2024-03-17T13:13:40Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Once a Path ID is abandoned, it MUST NOT be reused on any other path.",
              "createdAt": "2024-03-17T13:13:20Z",
              "updatedAt": "2024-03-17T13:13:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM50Y_fv",
          "commit": {
            "abbreviatedOid": "1e1646f"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-21T16:09:23Z",
          "updatedAt": "2024-03-21T16:09:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 315,
      "id": "PR_kwDOGNtpaM5p209j",
      "title": "[+] Explicit Path ID: Clarify that endpoints use the same Path ID in both directions.",
      "url": "https://github.com/quicwg/multipath/pull/315",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Solving issue #294 ",
      "createdAt": "2024-03-17T10:15:59Z",
      "updatedAt": "2024-05-24T17:31:28Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "c142b9f1aa15e9d84762d4cc0795e02672703059",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_id_for_both_direction",
      "headRefOid": "a865fea1f2a8a2ca3e9c7d9bba559a580d99d0a4",
      "closedAt": "2024-05-24T17:31:27Z",
      "mergedAt": "2024-05-24T17:31:27Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "bdcb1031141a5dc47d89cdb66c1c4b0279c9ca2b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5zuIc_",
          "commit": {
            "abbreviatedOid": "d1d6c6e"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "This needs to be a MUST.",
          "createdAt": "2024-03-17T13:16:28Z",
          "updatedAt": "2024-03-17T13:17:07Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nThe client MUST choose a previously unused Path ID for which both endpoints have already issued at least one connection ID.\r\n```",
              "createdAt": "2024-03-17T13:16:28Z",
              "updatedAt": "2024-03-17T13:17:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM5zuIqG",
          "commit": {
            "abbreviatedOid": "a20fadb"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T13:18:56Z",
          "updatedAt": "2024-03-17T13:19:01Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\nWhen path validation of a new path fails, the client MUST consider the Path ID as consumed, and MUST abandon the path by sending a PATH_ABANDON frame.\r\n```",
              "createdAt": "2024-03-17T13:18:56Z",
              "updatedAt": "2024-03-17T13:19:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM50AtK-",
          "commit": {
            "abbreviatedOid": "4926786"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I am not sure to get the story about the PATH_RESPONSE.",
          "createdAt": "2024-03-19T14:05:26Z",
          "updatedAt": "2024-03-19T14:16:14Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nfor the specific path, it MAY choose to ignore the PATH_CHALLENGE, or it can\r\n```",
              "createdAt": "2024-03-19T14:05:26Z",
              "updatedAt": "2024-03-19T14:16:14Z"
            },
            {
              "originalPosition": 14,
              "body": "It is not clear to me how the server should send the PATH_RESPONSE. Over which Path ID?",
              "createdAt": "2024-03-19T14:15:29Z",
              "updatedAt": "2024-03-19T14:16:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM50ED9R",
          "commit": {
            "abbreviatedOid": "4926786"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-19T19:40:02Z",
          "updatedAt": "2024-03-19T19:40:02Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "The server shall pick a CID provided by the client with the same path_ID as the server provided CID that was used by the client to send the PATH_CHALLENGE. ",
              "createdAt": "2024-03-19T19:40:02Z",
              "updatedAt": "2024-03-19T19:40:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM50GPmW",
          "commit": {
            "abbreviatedOid": "4926786"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-20T01:10:19Z",
          "updatedAt": "2024-03-20T01:10:19Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "It's written in the last sentence of the previous paragraph",
              "createdAt": "2024-03-20T01:10:19Z",
              "updatedAt": "2024-03-20T01:10:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM50ZFTt",
          "commit": {
            "abbreviatedOid": "cab06c3"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-21T16:18:41Z",
          "updatedAt": "2024-03-21T16:18:41Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Oh, right. I thought it was possible to send the PATH_RESPONSE when you do not have the associated path ID (hence my misunderstanding), but by rereading, this is fine. Maybe rephrasing it to make it a bit clearer?\r\n```suggestion\r\nchoose to send the PATH_RESPONSE frame upon reception of a\r\nMP_NEW_CONNECTION_ID frame containing the corresponding Path ID.\r\n```",
              "createdAt": "2024-03-21T16:18:41Z",
              "updatedAt": "2024-03-21T16:18:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM558-1o",
          "commit": {
            "abbreviatedOid": "0cdd559"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-08T15:41:19Z",
          "updatedAt": "2024-05-08T15:41:20Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I think the client should only try to open a path if it had send CIDs for that path ID (and the reception has been ack'ed). Then if the server received a path challenges for a path ID it doesn't have a CID for, it should either be an error or it should send a path abandon on another path.",
              "createdAt": "2024-05-08T15:41:20Z",
              "updatedAt": "2024-05-08T15:41:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM558_NK",
          "commit": {
            "abbreviatedOid": "0cdd559"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-08T15:42:03Z",
          "updatedAt": "2024-05-08T15:42:03Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nPATH_ABANDON frame causes all CID allocated by both of the endpoints for the specified Path ID to be retired.\r\n```",
              "createdAt": "2024-05-08T15:42:03Z",
              "updatedAt": "2024-05-08T15:42:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM559AKI",
          "commit": {
            "abbreviatedOid": "0cdd559"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-08T15:43:49Z",
          "updatedAt": "2024-05-08T15:43:49Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nWhen path validation of a new path fails, the used Path ID is anyway consumed, \r\nand the endpoint MUST abandon the path by sending a PATH_ABANDON frame\r\non another path to inform the peer that the Path ID cannot be used anymore.\r\n```",
              "createdAt": "2024-05-08T15:43:49Z",
              "updatedAt": "2024-05-08T15:44:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM567mY9",
          "commit": {
            "abbreviatedOid": "479de5e"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Some typos fixes.",
          "createdAt": "2024-05-17T06:37:24Z",
          "updatedAt": "2024-05-17T06:48:15Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nFor a client-initiated path, the client decides which Path ID is used for the new path\r\nby picking one of the server allocated CID with the specified Path ID.\r\n```",
              "createdAt": "2024-05-17T06:37:24Z",
              "updatedAt": "2024-05-17T06:48:15Z"
            },
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nThen, the client sends a PATH_CHALLENGE with the chosen CID. If the server receives the PATH_CHALLENGE,\r\n```",
              "createdAt": "2024-05-17T06:37:55Z",
              "updatedAt": "2024-05-17T06:48:15Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nIf the server receives a PATH_CHALLENGE before receiving a MP_NEW_CONNECTION_ID\r\nfor the specific path, it MAY choose to ignore the PATH_CHALLENGE, or it can\r\n```",
              "createdAt": "2024-05-17T06:40:53Z",
              "updatedAt": "2024-05-17T06:48:15Z"
            },
            {
              "originalPosition": 14,
              "body": "> I think the client should only try to open a path if it had send CIDs for that path ID (and the reception has been ack'ed).\r\n\r\nWe could be in the situation where the server has sent MP_NEW_CONNECTION_ID frames to the client, and the client wants to open a new path by sending a PATH_CHALLENGE along with a MP_NEW_CONNECTION_ID frame with the associated Path ID.",
              "createdAt": "2024-05-17T06:46:00Z",
              "updatedAt": "2024-05-17T06:48:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM569D_X",
          "commit": {
            "abbreviatedOid": "479de5e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T09:42:42Z",
          "updatedAt": "2024-05-17T09:42:42Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Yes sending it in the same packet is fine as well because than it cannot be lost or reordered separately.",
              "createdAt": "2024-05-17T09:42:42Z",
              "updatedAt": "2024-05-17T09:42:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM56-YyK",
          "commit": {
            "abbreviatedOid": "d877959"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T11:54:06Z",
          "updatedAt": "2024-05-17T11:54:07Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nWhen path validation of a new path fails, the used Path ID is anyway consumed,\r\n```",
              "createdAt": "2024-05-17T11:54:06Z",
              "updatedAt": "2024-05-17T11:54:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57olfw",
          "commit": {
            "abbreviatedOid": "0cdd559"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-23T14:56:51Z",
          "updatedAt": "2024-05-23T14:56:52Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Actually this issue is not resolved because if you send it in the same packet, it's \"just\" a matter of processing it the right order. However, otherwise I don't think it's a good idea to save the path challenge for later because then you also have to specify how long to wait. ",
              "createdAt": "2024-05-23T14:56:51Z",
              "updatedAt": "2024-05-23T14:56:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57wHyd",
          "commit": {
            "abbreviatedOid": "7f6c5b4"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T08:24:52Z",
          "updatedAt": "2024-05-24T08:24:52Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nPATH_ABANDON frame causes all CIDs allocated by both\r\nof the endpoints for the specified Path ID to be retired.\r\n```",
              "createdAt": "2024-05-24T08:24:52Z",
              "updatedAt": "2024-05-24T08:24:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57wINX",
          "commit": {
            "abbreviatedOid": "6bf2d85"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T08:25:42Z",
          "updatedAt": "2024-05-24T08:25:42Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "Actually I'm not sure this sentence is correct. You still need to send a CID_RETIRE frame to actually retire the CIDs, no?",
              "createdAt": "2024-05-24T08:25:42Z",
              "updatedAt": "2024-05-24T08:25:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57wIeT",
          "commit": {
            "abbreviatedOid": "6bf2d85"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T08:26:15Z",
          "updatedAt": "2024-05-24T08:26:15Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\nThe same Path ID is used in both directions.\r\n```",
              "createdAt": "2024-05-24T08:26:15Z",
              "updatedAt": "2024-05-24T08:26:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57wPy6",
          "commit": {
            "abbreviatedOid": "60cf3fc"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T08:38:51Z",
          "updatedAt": "2024-05-24T08:38:51Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nmonotonically increasing and cannot be reused.\r\n```",
              "createdAt": "2024-05-24T08:38:51Z",
              "updatedAt": "2024-05-24T08:38:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57wSkT",
          "commit": {
            "abbreviatedOid": "0cdd559"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T08:44:13Z",
          "updatedAt": "2024-05-24T08:44:13Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I removed this text for now. I will create a separate PR (and issue) for this as soon as we have merged this PR.",
              "createdAt": "2024-05-24T08:44:13Z",
              "updatedAt": "2024-05-24T08:44:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57xA1_",
          "commit": {
            "abbreviatedOid": "5bf27b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T10:00:00Z",
          "updatedAt": "2024-05-24T10:00:00Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "This sentence is really unclear. It says \"for all corresponding CIDs used for this used\". However, there is only one CID in use at a time. \r\n\r\nIs this meant to mean that you should send multiple MP_RETIRE_CONNECTION_ID frames for all CIDs that have previously been issue for this path ID or only one frame for the one that is currently actively used?\r\n\r\nIf the former we should change the MP_RETIRE_CONNECTION_ID frame to be able to carry multiple CIDs.\r\n\r\n",
              "createdAt": "2024-05-24T10:00:00Z",
              "updatedAt": "2024-05-24T10:00:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57yHPB",
          "commit": {
            "abbreviatedOid": "5bf27b0"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T12:05:23Z",
          "updatedAt": "2024-05-24T12:22:10Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\nPATH_ABANDON frame triggers all CIDs allocated by both\r\n```",
              "createdAt": "2024-05-24T12:05:23Z",
              "updatedAt": "2024-05-24T12:22:10Z"
            },
            {
              "originalPosition": 53,
              "body": "This sentence try to explain that PATH_ABANDON trigger the CID retirement to start. \r\nBasically endpoints still need to send CID_RETIRE frame, but this action itself is caused by PATH_ABANDON.",
              "createdAt": "2024-05-24T12:09:46Z",
              "updatedAt": "2024-05-24T12:22:10Z"
            },
            {
              "originalPosition": 88,
              "body": "Actually endpoints do have chance to announce more than one unused CIDs for the corresponding path. \r\nThis mechanism try to explain: Endpoints need to send MP_RETIRE_CONNECTION_ID frames for each CID related to the Path ID, but only need one MP_RETIRE_CONNECTION_ID frame for each CID.\r\n\r\nI don't think we need to change the MP_RETIRE_CONNECTION_ID frame to be able to carry multiple CIDs, as in this part we try to keep the same habit with RFC9000, which only changes applied on each path. Endpoints could always put several MP_RETIRE_CONNECTION_ID frames in the same packet, then it will not affect the performance.",
              "createdAt": "2024-05-24T12:22:01Z",
              "updatedAt": "2024-05-24T12:22:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57ydcv",
          "commit": {
            "abbreviatedOid": "5bf27b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T12:44:20Z",
          "updatedAt": "2024-05-24T12:44:21Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "How about this:\r\n```suggestion\r\nWhen a path is abandoned, all CIDs allocated by both\r\nof the endpoints for the specified Path ID need to be retired.\r\n```",
              "createdAt": "2024-05-24T12:44:21Z",
              "updatedAt": "2024-05-24T12:44:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57ygCd",
          "commit": {
            "abbreviatedOid": "5bf27b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T12:49:20Z",
          "updatedAt": "2024-05-24T12:49:20Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "We anyway create a new frame. In RFC9000, there is usually not a need to retire multiple CIDs at once. However, when a path is abandoned, this can happen often with. Therefore we should optimise the MP_RETIRE_CONNECTION_ID for that case.\r\n\r\nHowever, I can open a separate issue of that. For now I propose the editorial change below to make it more clear:\r\n\r\n```suggestion\r\nbefore sending MP_RETIRE_CONNECTION_ID frames.\r\nThis is inline with the requirement of {{Section 10.2 of QUIC-TRANSPORT}}\r\nBoth endpoints SHOULD send MP_RETIRE_CONNECTION_ID frames\r\nfor all connection IDs associated to the Path ID of the abandoned path.\r\n```",
              "createdAt": "2024-05-24T12:49:20Z",
              "updatedAt": "2024-05-24T12:49:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57yiM0",
          "commit": {
            "abbreviatedOid": "5bf27b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T12:52:44Z",
          "updatedAt": "2024-05-24T12:52:44Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "However, I'm not sure if it would be better to remove this sentence. Path abandon should be discussed in the next subsection and not here. However, I don't think this sentence is needed in the next subsection as this is already explained normatively in more detail.",
              "createdAt": "2024-05-24T12:52:44Z",
              "updatedAt": "2024-05-24T12:53:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57zFZZ",
          "commit": {
            "abbreviatedOid": "ed01cd8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T13:48:35Z",
          "updatedAt": "2024-05-24T13:48:36Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "```suggestion\r\nbefore sending MP_RETIRE_CONNECTION_ID frames.\r\nThis is inline with the requirement of {{Section 10.2 of QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2024-05-24T13:48:35Z",
              "updatedAt": "2024-05-24T13:48:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57zF0T",
          "commit": {
            "abbreviatedOid": "30a56a5"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T13:49:08Z",
          "updatedAt": "2024-05-24T13:49:08Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "```suggestion\r\nfor all connection IDs associated to the Path ID of the abandoned path\r\n```",
              "createdAt": "2024-05-24T13:49:08Z",
              "updatedAt": "2024-05-24T13:49:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57zQQo",
          "commit": {
            "abbreviatedOid": "b22dbae"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T14:05:34Z",
          "updatedAt": "2024-05-24T14:05:35Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-05-24T14:05:35Z",
              "updatedAt": "2024-05-24T14:05:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57zXdB",
          "commit": {
            "abbreviatedOid": "902ab71"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T14:18:44Z",
          "updatedAt": "2024-05-24T14:18:44Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "```suggestion\r\nto issue Path ID-specific connections IDs.\r\n```",
              "createdAt": "2024-05-24T14:18:44Z",
              "updatedAt": "2024-05-24T14:18:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM570WGU",
          "commit": {
            "abbreviatedOid": "6bf2d85"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-24T16:01:31Z",
          "updatedAt": "2024-05-24T16:01:31Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "No, the previous writing is better. We would like the abandon path to just drop all the connection ID allocated for the path, without requiring explicit \"retire connection ID\" per path.\r\n\r\nBut this clearly needs more discussion.",
              "createdAt": "2024-05-24T16:01:31Z",
              "updatedAt": "2024-05-24T16:01:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 316,
      "id": "PR_kwDOGNtpaM5p3BjM",
      "title": "[+] Explicit Path ID: Clarify use of MAX_PATHS",
      "url": "https://github.com/quicwg/multipath/pull/316",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Solving issue #298. ",
      "createdAt": "2024-03-17T12:39:28Z",
      "updatedAt": "2024-05-14T10:57:29Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "dev/path_id",
      "baseRefOid": "8ce80b22bad741b788b56d0b2e8e2ded7803556f",
      "headRepository": "quicwg/multipath",
      "headRefName": "dev/path_id_max_paths",
      "headRefOid": "4bf6bdd2fbbe79dfa7e5b82078e65fcfb51788f5",
      "closedAt": "2024-05-14T10:57:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as obsoleted by #331 ",
          "createdAt": "2024-05-14T10:57:29Z",
          "updatedAt": "2024-05-14T10:57:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM5zuH6Y",
          "commit": {
            "abbreviatedOid": "54fdf74"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I'm not a fan of _negotiating_ the value. I'd much rather have peers _declare_ the maximum path ID they're willing to accept. This requires path IDs to be unidirectional.",
          "createdAt": "2024-03-17T13:09:31Z",
          "updatedAt": "2024-03-17T13:09:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM50AoqH",
          "commit": {
            "abbreviatedOid": "54fdf74"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-19T13:59:58Z",
          "updatedAt": "2024-03-19T14:02:31Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Small typo here. Also, I am not a big fan of the word \"accept\" from the server side.\r\n```suggestion\r\nFor example, the server sends MAX_PATHS to raise the maximum path number that it is willing to accept,\r\n```",
              "createdAt": "2024-03-19T13:59:58Z",
              "updatedAt": "2024-03-19T14:02:31Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nEndpoints MUST NOT issue new Connection ID with Path ID larger than the minimum of MAX_PATHS\r\n```",
              "createdAt": "2024-03-19T14:00:15Z",
              "updatedAt": "2024-03-19T14:02:31Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nPath ID up to the minimum of MAX_PATHS issued by client and server. The client sends \r\n```",
              "createdAt": "2024-03-19T14:00:35Z",
              "updatedAt": "2024-03-19T14:02:31Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nMP_NEW_CONNECTION_ID frame containing Path ID up to the minimum of MAX_PATHS issued by each sides.\r\n```",
              "createdAt": "2024-03-19T14:00:43Z",
              "updatedAt": "2024-03-19T14:02:31Z"
            },
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nthe minimum of MAX_PATHS announced by each sides, it MUST treat this as a connection error of type\r\n```",
              "createdAt": "2024-03-19T14:01:03Z",
              "updatedAt": "2024-03-19T14:02:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 329,
      "id": "PR_kwDOGNtpaM5r3yig",
      "title": "Split path identifiers as odd-even for client and server initiated",
      "url": "https://github.com/quicwg/multipath/pull/329",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "needs-discussion"
      ],
      "body": "During the IETF 119 meeting, we decided to split the path identifier space into even numbers for client initiated paths and odd numbers for server initiated paths. This PR implement the requested changes.",
      "createdAt": "2024-04-05T17:49:00Z",
      "updatedAt": "2024-05-14T10:57:55Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "e930829818ff3a52042bfa5195d8375a1dd9c4c1",
      "headRepository": "huitema/multipath",
      "headRefName": "path-id-odd-even",
      "headRefOid": "10fde70a6fa430276961c8247c846a46b35200ee",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks a lot for the PR! \r\nI have a suggestion on simplify the transport parameters: We could define the the new transport parameter \"initial_max_path_ids\" as \"the max initial Path IDs each endpoint is willing to accept\". Then we only need one new transport parameter(0x0f739bbc1b666d08):\r\n\r\n1. client send the \"initial_max_path_ids\":\"X\" to inform the server that it would only accept server-initialized paths with Path IDs between [0, X]; (even)\r\n2. server send the \"initial_max_path_ids\":\"Y\" to inform the client that it would only accept client-initialized paths with Path IDs between [1, Y]; (odd)\r\n3. After handshake is finished, client and server could decide by their own to create how many paths to use. Note that endpoints could always choose the Minimum value between the local strict concurrent paths and the remote strict number.\r\n4. Endpoints SHOULD issue at least one unused Path ID inside the available Path ID range, but endpoints could always choose to limit the number of Path IDs which is indeed issued inside the connection, as part of the strategy to limit the concurrent paths created by the remote.",
          "createdAt": "2024-04-10T15:19:23Z",
          "updatedAt": "2024-04-10T15:19:23Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@Yanmei-Liu sorry, but having each side just announcing a number of path that it is willing to accept does not work. \r\n\r\nThis multipath proposal requires nodes to maintain three resources:\r\n\r\n* Path contexts for all the paths that are created, including per path resource for number spaces.\r\n* Connection identifiers contexts for all paths for which the local party has sent MP_NEW_CONNECTION_ID\r\n* Connection identifiers contexts for all paths for which the local party has received MP_NEW_CONNECTION_ID from the peer.\r\n\r\nTake the example of the client originated path number 2.  It can only be created if the client has sent MP_NEW_CONNECTION_ID with Path-ID=2 to the peer, and has also received MP_NEW_CONNECTION_ID with Path-ID=2 from the peer. Each peer will publish both even and odds CID. Each peer will need to accept number-of-path*number-of-CID-per-path CID, and will need to store them in memory. To avoid risks of DOS attacks, we need to control the max number of path in each direction, and that requires two variables: the max number of even paths and the max number of odd paths.",
          "createdAt": "2024-04-10T22:55:15Z",
          "updatedAt": "2024-04-10T22:55:15Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I did the merge with draft 7. I think this PR is now ready, modulo one big question asked by Quentin in his review: _\"I don't know if we already need to define the server-initiated messages now, or if we only stick to the client-initiated ones for now (base draft), and let people define them in a future extension to multipath.\"_\r\n\r\nWe could absolutely simplify the PR by not defining the server initiated messages. In practice, the only change from draft 07 would be, \"the Path IDs are even numbers between 0 and 2^32 - 2.\" We would not need the second transport parameter, or the server variant of MAX PATH. The impact on implementations would be much smaller: multiply path-id by 2, change the name and ID of the \"enable multipath\" TP, change the name and ID of the \"max paths\" frame. This is very tempting, but I will not do that unless I get further feedback.",
          "createdAt": "2024-04-16T05:16:00Z",
          "updatedAt": "2024-04-16T05:16:00Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I did the merge with draft 7. I think this PR is now ready, modulo one big question asked by Quentin in his review: _\"I don't know if we already need to define the server-initiated messages now, or if we only stick to the client-initiated ones for now (base draft), and let people define them in a future extension to multipath.\"_\r\n> \r\n> We could absolutely simplify the PR by not defining the server initiated messages. In practice, the only change from draft 07 would be, \"the Path IDs are even numbers between 0 and 2^32 - 2.\" We would not need the second transport parameter, or the server variant of MAX PATH. The impact on implementations would be much smaller: multiply path-id by 2, change the name and ID of the \"enable multipath\" TP, change the name and ID of the \"max paths\" frame. This is very tempting, but I will not do that unless I get further feedback.\r\n\r\nAfter these days discussion, I'd support that we only add \"the Path IDs initialized by client are even numbers between 0 and 2^32 - 2\" at this time, keep the possibility that we can always add the mechanism for server-initialize paths when real scenarios appear at any time. We can always do that whenever people need, and even in a separate extension would work well with the original draft.",
          "createdAt": "2024-04-17T05:25:04Z",
          "updatedAt": "2024-04-17T05:25:04Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@Yanmei-Liu OK. I will probably do a separate PR for the \"trimmed\" version, that will be cleaner than writing it on top of this one.",
          "createdAt": "2024-04-17T05:46:32Z",
          "updatedAt": "2024-04-17T05:46:32Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "DO NOT MERGE THIS PLEASE!",
          "createdAt": "2024-04-17T05:46:49Z",
          "updatedAt": "2024-04-17T05:46:49Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "If we anyway need a second transport parameter to realise the server initiation, there is actually no difference if we do it now or later. So I guess we could keep it simple for now.",
          "createdAt": "2024-04-17T07:46:41Z",
          "updatedAt": "2024-04-17T07:46:41Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Check PR #331 as a much simpler way to reserve even path identifiers for future extension.",
          "createdAt": "2024-04-17T18:05:48Z",
          "updatedAt": "2024-04-17T18:05:48Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Just double-checking: this PR proposed two transport parameters. If that is needed it doesn't make a technical difference if they are defined in the same spec or as an extension later.\r\n\r\nHowever, it is not fully clear to me why two parameters are needed. Each endpoint needs to announce the max-path value (for one half of the path id space) but they could use the same transport parameter in each direction. Or why not?",
          "createdAt": "2024-05-07T17:13:21Z",
          "updatedAt": "2024-05-07T17:13:21Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Also, maybe I now manager to fully confuse myself, but why do we need the max path limit at all. I thought everything endpoint can implicitly control the max number of paths but not providing CID for more paths...?",
          "createdAt": "2024-05-07T17:20:37Z",
          "updatedAt": "2024-05-07T17:20:37Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "one more addition: My comments assume that the same path ID is used in both direction and always opens a bidirectional path and therefore both endpoint need to provide the respective CIDs first before you can open the paths. Note that this is connected to PR #315 and issue #294.",
          "createdAt": "2024-05-07T17:24:20Z",
          "updatedAt": "2024-05-07T17:24:20Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak I agree with the general comment that \"if we need two parameters, we should just define one now, and leave the other for an extension. \" That why I wrote a simpler proposal in PR #331. Can you review that too?\r\n\r\nSee [previous discussion](https://github.com/quicwg/multipath/pull/329#issuecomment-2048565142) for why we need two MAX PATHS.\r\n",
          "createdAt": "2024-05-07T18:49:41Z",
          "updatedAt": "2024-05-07T18:49:41Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema I read the previous discussion, however, it's still not clear to me. If the same path ID has to be used for a path in both directions, that means for me that you need to get CIDs for a path ID from both endpoints before you can start using that path ID. That means both sides have a way to control the maximum number of paths by only providing a certain number of path IDs even without the MAX_PATHS limit. Or what do I miss?",
          "createdAt": "2024-05-08T15:16:31Z",
          "updatedAt": "2024-05-08T15:16:31Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak Suppose the client publishes \"max server initiated paths = 1,000,000,000\", and proceeds to send MP_NEW_CONNECTION_IDs for all these paths. How is the server able to limit the number of CIDs that it will accept? ",
          "createdAt": "2024-05-08T20:29:51Z",
          "updatedAt": "2024-05-08T20:29:51Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah I didn't realize that we changed the active_connection_id_limit to be now per path. Is that really necessary or the correct thing to do?\r\n\r\nIf we can keep active_connection_id_limit to limit the total numbers of CID an endpoint is willing to maintain (because maintaining with or without a path ID associated to the CID is not really a difference), each endpoint can still control the maximum number of paths but announcing CIDs respectively.",
          "createdAt": "2024-05-10T09:31:56Z",
          "updatedAt": "2024-05-10T09:31:56Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mirjak Why don't you open an issue about reversing the decision to make max-CID a path property, versus a global property?\r\n\r\nIn the short term, given the uncertainties, my proposal would be to close this PR, and focus on PR #331 instead?",
          "createdAt": "2024-05-10T13:24:40Z",
          "updatedAt": "2024-05-10T13:24:40Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "I created issue #332.\r\n\r\nMy plan was merge #331 but still keep this PR open, so we can continue the discussion.\r\n\r\nFor me, if separate transport parameter are needed, it doesn't make a difference if this is one extension or two. However, if we don't need a separate transport parameter maybe it is easier to define the server-initiated paths right away. ",
          "createdAt": "2024-05-14T10:30:03Z",
          "updatedAt": "2024-05-14T10:30:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM52XqRn",
          "commit": {
            "abbreviatedOid": "8b988ed"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I agree that we need such splitting to enable server-initiated paths on the long run. The current text is a good first shot, though I wonder if we could take more inspiration on the MAX_STREAMS frame (with a cumulative count of open path relative to the initiator).\r\n\r\nAlso, I don't know if we already need to define the server-initiated messages now, or if we only stick to the client-initiated ones for now (base draft), and let people define them in a future extension to multipath.",
          "createdAt": "2024-04-08T09:32:21Z",
          "updatedAt": "2024-04-08T10:04:10Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "```suggestion\r\n  this parameter is equivalent to sending a MAX_SERVER_PATHS ({{max-paths-frame}}) \r\n```",
              "createdAt": "2024-04-08T09:32:22Z",
              "updatedAt": "2024-04-08T10:04:10Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\n  initial_max_server_paths is not advertised by both endpoints, servers\r\n```",
              "createdAt": "2024-04-08T09:32:44Z",
              "updatedAt": "2024-04-08T10:04:10Z"
            },
            {
              "originalPosition": 91,
              "body": "```suggestion\r\nThey MUST NOT issue Connection IDs with odd numbered Path Identifiers larger than \r\n```",
              "createdAt": "2024-04-08T09:33:53Z",
              "updatedAt": "2024-04-08T10:04:10Z"
            },
            {
              "originalPosition": 107,
              "body": "```suggestion\r\nand server-initiated paths have odd-numbered path IDs (with the bit set to 1).\r\n```",
              "createdAt": "2024-04-08T09:34:29Z",
              "updatedAt": "2024-04-08T10:04:10Z"
            },
            {
              "originalPosition": 113,
              "body": "```suggestion\r\nthe limits set by MAX_CLIENT_PATHS and MAX_SERVER_PATHS frames {{max-paths-frame}}.\r\n```",
              "createdAt": "2024-04-08T09:35:11Z",
              "updatedAt": "2024-04-08T10:04:10Z"
            },
            {
              "originalPosition": 170,
              "body": "```suggestion\r\nThe MAX_CLIENT_PATHS (type=0x15228c0c) and MAX_SERVER_PATHS (type=0x15228c0d) frames inform the peer of the cumulative\r\n```",
              "createdAt": "2024-04-08T09:43:50Z",
              "updatedAt": "2024-04-08T10:04:10Z"
            },
            {
              "originalPosition": 211,
              "body": "I am not sure about this. Why not communicating the \"count of the cumulative number of paths of the given initiator\", and then let endpoints derive the corresponding Path IDs (similarly to what is done by MAX_STREAMS frame)?",
              "createdAt": "2024-04-08T09:47:34Z",
              "updatedAt": "2024-04-08T10:04:10Z"
            },
            {
              "originalPosition": 221,
              "body": "Maybe to adapt w.r.t. the previous comment about the count of cumulative number of paths for a given initiator.",
              "createdAt": "2024-04-08T09:49:34Z",
              "updatedAt": "2024-04-08T10:04:10Z"
            },
            {
              "originalPosition": 223,
              "body": "I think the violation is always detected at reception side. Furthermore, assume the following situation where the client advertised a MAX_CLIENT_PATHS allowing Path ID 8, while the server only advertised a MAX_CLIENT_PATHS allowing up to Path ID 6. Here, it is clear that the client cannot advertise CIDs with the Path ID 8. However, one could allow the server to communicate in advance CIDs with Path ID 8 to the client, as the client advertised support for up to Path ID 8.\r\n```suggestion\r\nif a peer published MP_NEW_CONNECTION_ID frames with higher Path Identifiers than the\r\nrespective limit advertised by the receiving host.\r\n```",
              "createdAt": "2024-04-08T09:58:33Z",
              "updatedAt": "2024-04-08T10:04:10Z"
            },
            {
              "originalPosition": 248,
              "body": "```suggestion\r\nTBD-07 (experiments use 0x15228c0c)                  | MAX_CLIENT_PATHS       | {{max-paths-frame}}\r\nTBD-08 (experiments use 0x15228c0d)                  | MAX_SERVER_PATHS       | {{max-paths-frame}}\r\n```",
              "createdAt": "2024-04-08T09:58:53Z",
              "updatedAt": "2024-04-08T10:04:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM52d5yk",
          "commit": {
            "abbreviatedOid": "079c2f3"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-08T22:58:22Z",
          "updatedAt": "2024-04-08T22:58:22Z",
          "comments": [
            {
              "originalPosition": 211,
              "body": "Yes, we could do that. The logical solution would be to carry a \"number\" instead of an identifier, and to have a derivation function, such as 2\\*N for client paths and 2\\*N+1 for server paths. But I think we need to think a bit more. The purpose of the \"MAX_PATHS\" is to control the amount of resource dedicated to path managements. The resource comes in two modes:\r\n\r\n* The number of MP_CONNECTION_ID that the endpoint has to remember,\r\n* The number of path contexts that the endpoint will handle.\r\n\r\nI think that the main purpose of the MAX_PATHS is to limit the number of MP_CONNECTION_ID. The peer can only create a new path if it has received and sent an MP_CONNECTION_ID for that path. Endpoints can control the creation of paths by limiting the creation of MP_CONNECTION_ID, which is a local decision. But endpoints need to also control the number of MP_CONNECTION_ID that the peer can send -- otherwise, the peer could announce that it supports 2^31 paths, and send as many connection ID. That would blow the memory allocation.\r\n\r\nControlling a \"max number of paths\" is not sufficient. The malevolent peer could create lots of MP_CONNECTION_ID, then issue PATH_ABANDON, the create more of that. I am pretty sure that repeating that cycle many times could lead to a DOS attack. Also, we understand that \"number of paths\" is imprecise, because of transmission delays, packet loss, etc. It is simpler to have a \"MAX_PATHS\" value that state \"no path identifier larger than N\" (or 2\\*N+1). Once the number of connection ID is limited, the peers can control how much resource will be used.\r\n\r\nIf we agree on that, we also need to decide what \"MAX_SERVER_PATH=0\" means. Assume we agree that N=0 corresponds to path_ID=2\\*N+1 = 1. Does stating \"MAX_SERVER_PATH=0\" means that \"path 1 is OK\", or does it mean \"path 1 is not OK, because 1 >= 2\\*0 +1\" ?",
              "createdAt": "2024-04-08T22:58:22Z",
              "updatedAt": "2024-04-08T22:59:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM52fBMw",
          "commit": {
            "abbreviatedOid": "8b988ed"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-08T23:56:50Z",
          "updatedAt": "2024-04-08T23:56:51Z",
          "comments": [
            {
              "originalPosition": 221,
              "body": "See discussion above. we need to agree on principles before fixing the text.",
              "createdAt": "2024-04-08T23:56:50Z",
              "updatedAt": "2024-04-08T23:56:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM52qEQy",
          "commit": {
            "abbreviatedOid": "8b988ed"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-10T03:28:45Z",
          "updatedAt": "2024-04-10T03:28:45Z",
          "comments": [
            {
              "originalPosition": 211,
              "body": "@qdeconinck I think that the commit [reworking the max path frames](https://github.com/quicwg/multipath/pull/329/commits/46fb9fa7728789ab1271836c4d8562e8b4e755a8) fixes your issue. Please mark as resolved if it does.",
              "createdAt": "2024-04-10T03:28:45Z",
              "updatedAt": "2024-04-10T03:28:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM52q1nM",
          "commit": {
            "abbreviatedOid": "fd090a2"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-10T07:07:45Z",
          "updatedAt": "2024-04-10T07:24:09Z",
          "comments": [
            {
              "originalPosition": 685,
              "body": "```suggestion\r\n: A count of the cumulative number of respectively client-initiated or server-initiated paths that can be opened\r\n```",
              "createdAt": "2024-04-10T07:07:45Z",
              "updatedAt": "2024-04-10T07:24:09Z"
            },
            {
              "originalPosition": 690,
              "body": "This should be 2^31 - 1, right? (2^31 - 1) * 2 = 2^32 - 2 (max client-initiated path ID) and (2^31 - 1) * 2 + 1 =  2^32 - 1 (max client-server path ID)\r\n```suggestion\r\nplus 1. These values cannot exceed 2^31-1, as it is not\r\n```",
              "createdAt": "2024-04-10T07:11:55Z",
              "updatedAt": "2024-04-10T07:24:09Z"
            },
            {
              "originalPosition": 697,
              "body": "I think the aforementioned commit resolves the issue, modulo the removal of the old text referring to old frame versions.\r\n```suggestion\r\nas a connection error of type FRAME_ENCODING_ERROR.\r\n```",
              "createdAt": "2024-04-10T07:13:28Z",
              "updatedAt": "2024-04-10T07:24:09Z"
            },
            {
              "originalPosition": 211,
              "body": "Thanks for the reworked text! Modulo my suggestion to remove the trailing text, I think it is better now.\r\n\r\nOnly one point that we may need to discuss now is the meaning of MAX_SERVER_PATHS=0, but also MAX_CLIENT_PATHS=0. I think MAX_CLIENT_PATHS=0 should actually allow Path ID 0, while MAX_SERVER_PATHS=0 should also enable Path ID 1. I see two reasons for this. First, it would allow using the whole space of the identifiers, without needing to cope with an invalid 0 value -- Path ID 0 is always valid as it is the initial path of the connection. Second, MAX_CLIENT_PATHS frames only appear when multipath is negotiated.\r\n\r\nSide note related to this, I think the MAX_SERVER_PATHS should only appear when the initial_max_server_paths has been advertised by both endpoints. Otherwise, this should be a PROTOCOL_VIOLATION.",
              "createdAt": "2024-04-10T07:23:19Z",
              "updatedAt": "2024-04-10T07:24:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM52un1u",
          "commit": {
            "abbreviatedOid": "8b988ed"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-10T14:52:14Z",
          "updatedAt": "2024-04-10T14:52:14Z",
          "comments": [
            {
              "originalPosition": 221,
              "body": "I don't like the \"cumulative number of paths\" because it is ambiguous -- there are many cases in which the apparent number of paths is not the same at both ends, e.g., if probes are in progress or if abandon is in transit. \"MAX_STREAMS\" get around that by forcing an automatic opening of streams -- for example, if the only stream is stream 0 and the server receives something for stream 16, then streams 4, 8 and 12 are automatically opened.",
              "createdAt": "2024-04-10T14:52:14Z",
              "updatedAt": "2024-04-10T14:52:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM52uqeZ",
          "commit": {
            "abbreviatedOid": "8b988ed"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-10T14:54:19Z",
          "updatedAt": "2024-04-10T14:54:20Z",
          "comments": [
            {
              "originalPosition": 211,
              "body": "Yes, I struggled with that. if we add the text that \"MAX_SERVER_PATHS should only appear when the initial_max_server_paths has been advertised by both endpoints\", then \"0 allows 1 on server\" makes sense.\r\n\r\nOf course, if we decide to remove the server capability, then this becomes easier...",
              "createdAt": "2024-04-10T14:54:19Z",
              "updatedAt": "2024-04-10T14:54:20Z"
            }
          ]
        }
      ]
    },
    {
      "number": 330,
      "id": "PR_kwDOGNtpaM5sQ-3I",
      "title": "Fix errors and warning related to references",
      "url": "https://github.com/quicwg/multipath/pull/330",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Also seems like you had a load of trailing whitespace that would hurt the linter's feelings.",
      "createdAt": "2024-04-10T16:03:11Z",
      "updatedAt": "2024-04-11T03:06:41Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "da86c1ed2f87f0e795b53382b4df0a2f6a2510df",
      "headRepository": "quicwg/multipath",
      "headRefName": "fix-citation-errors-warnings",
      "headRefOid": "0bf075d5a32849edd9161d85f8c152751d2cd20d",
      "closedAt": "2024-04-11T03:06:40Z",
      "mergedAt": "2024-04-11T03:06:40Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "e930829818ff3a52042bfa5195d8375a1dd9c4c1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM52zeZL",
          "commit": {
            "abbreviatedOid": "0bf075d"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-11T03:03:05Z",
          "updatedAt": "2024-04-11T03:03:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 331,
      "id": "PR_kwDOGNtpaM5s9Nm0",
      "title": "Use even numbers for path ID",
      "url": "https://github.com/quicwg/multipath/pull/331",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "needs-discussion"
      ],
      "body": "This PR specifies using even number path identifiers. It anticipates the possibility of using the odd numbered identifiers for server-initiated paths, but does not specify how to do that. As a result, it is much simpler than PR #329.\r\n\r\nClose #328",
      "createdAt": "2024-04-17T18:04:35Z",
      "updatedAt": "2024-05-27T14:50:45Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "e930829818ff3a52042bfa5195d8375a1dd9c4c1",
      "headRepository": "huitema/multipath",
      "headRefName": "simply-even",
      "headRefOid": "ee958a18f4af5880e16c068135c9f95934c06568",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the fixes, @Yanmei-Liu ",
          "createdAt": "2024-04-18T06:19:16Z",
          "updatedAt": "2024-04-18T06:19:16Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we generally have consensus for the even/odd split? Or do we need to confirm this on the list/in the interim before we merge?\r\n\r\nAs I just wrote in PR #329 I don't think we fully have consensus yet if we want to specify the server-initiated paths part in this doc or separately. However, I think think we can already merge this PR and keep discussing in PR #329.",
          "createdAt": "2024-05-14T10:32:49Z",
          "updatedAt": "2024-05-14T10:32:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM53q_3q",
          "commit": {
            "abbreviatedOid": "07cf0da"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Thanks a lot for this new PR!\r\nI totally support it, try to help fix a few typo issue.",
          "createdAt": "2024-04-18T03:27:33Z",
          "updatedAt": "2024-04-18T03:41:42Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nserver-initiated paths, such as using even numbered path IDs for client-initiated paths\r\n```",
              "createdAt": "2024-04-18T03:27:33Z",
              "updatedAt": "2024-04-18T03:41:42Z"
            },
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nand odd numbered path IDs for server-initiated paths.\r\n```",
              "createdAt": "2024-04-18T03:27:55Z",
              "updatedAt": "2024-04-18T03:41:42Z"
            },
            {
              "originalPosition": 80,
              "body": "```suggestion\r\nwith Path ID value larger than authorized MUST be treated as\r\n```",
              "createdAt": "2024-04-18T03:36:52Z",
              "updatedAt": "2024-04-18T03:41:42Z"
            },
            {
              "originalPosition": 79,
              "body": "```suggestion\r\nbeen received. MP_NEW_CONNECTION_ID received\r\n```",
              "createdAt": "2024-04-18T03:37:15Z",
              "updatedAt": "2024-04-18T03:41:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM531hX5",
          "commit": {
            "abbreviatedOid": "2db3227"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-19T04:44:31Z",
          "updatedAt": "2024-04-19T04:44:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM5319bg",
          "commit": {
            "abbreviatedOid": "2db3227"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "So I suppose then that receiving a MAX_PATHS with a Maximum Paths value of 0 leads to a connection error. A bit too bad, but I can live with that.\r\n\r\nA small suggestion to make the example clearer, otherwise this looks good to me.",
          "createdAt": "2024-04-19T06:36:54Z",
          "updatedAt": "2024-04-19T06:39:15Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "A small suggestion to make this clearer (and avoid the potential reader ambiguity of the \"2\" value)\r\n```suggestion\r\nFor example, if an endpoint received a Maximum Paths value of 3,\r\nit may send MP_NEW_CONNECTION_ID with Path ID 0, 2 and 4, but not higher.\r\n```",
              "createdAt": "2024-04-19T06:36:54Z",
              "updatedAt": "2024-04-19T06:39:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM535joL",
          "commit": {
            "abbreviatedOid": "2db3227"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-19T14:23:35Z",
          "updatedAt": "2024-04-19T14:23:35Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "Yes, good idea.",
              "createdAt": "2024-04-19T14:23:35Z",
              "updatedAt": "2024-04-19T14:23:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 334,
      "id": "PR_kwDOGNtpaM5vbCvZ",
      "title": "Editorial pass on explicit Path ID",
      "url": "https://github.com/quicwg/multipath/pull/334",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I mainly merged the \"Path identifier\" section into the right place in the rest of the document. Having such a separate section did repeat the same things multiple time. That is usually very unfortunate because that means you have to change things in multiple places.\r\n\r\nFurther, some smaller editorial issue in the rest of the document.\r\n\r\nThis is only a first pass, I think we need more iterations.",
      "createdAt": "2024-05-14T16:01:57Z",
      "updatedAt": "2024-05-23T15:57:49Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "e930829818ff3a52042bfa5195d8375a1dd9c4c1",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-1",
      "headRefOid": "b8d60a0740442d93f070378ab7e1dc69dff3bf58",
      "closedAt": "2024-05-23T15:57:49Z",
      "mergedAt": "2024-05-23T15:57:49Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "c142b9f1aa15e9d84762d4cc0795e02672703059"
      },
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks a lot for all these work! Some minor suggestions.",
          "createdAt": "2024-05-17T11:47:06Z",
          "updatedAt": "2024-05-17T11:47:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM56itRg",
          "commit": {
            "abbreviatedOid": "e993617"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-14T16:40:33Z",
          "updatedAt": "2024-05-14T16:40:33Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nThis extension specifies a new Path Identifier (Path ID), which is an\r\n```",
              "createdAt": "2024-05-14T16:40:33Z",
              "updatedAt": "2024-05-14T16:40:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM56uXDr",
          "commit": {
            "abbreviatedOid": "3247fea"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good. Minor comments only.",
          "createdAt": "2024-05-15T20:38:58Z",
          "updatedAt": "2024-05-16T00:48:26Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "There is something missing in the first line of that paragraph. Maybe: \"The Path ID is used to\r\naddress a path *in* the new multipath control frames,\"\r\n",
              "createdAt": "2024-05-15T20:38:58Z",
              "updatedAt": "2024-05-16T00:48:26Z"
            },
            {
              "originalPosition": 100,
              "body": "Replace \"to a path identifier. And\" by \"to a path identifier, and\" ? Classic editing rule is to not start a sentence by a conjunction.",
              "createdAt": "2024-05-15T20:42:10Z",
              "updatedAt": "2024-05-16T00:48:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM567agl",
          "commit": {
            "abbreviatedOid": "3247fea"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This makes the draft a bit more readable. Some suggestions for typos + clarification purposes.",
          "createdAt": "2024-05-17T05:58:21Z",
          "updatedAt": "2024-05-17T06:35:11Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nThe Path ID is used to\r\naddress a path in the new multipath control frames,\r\n```",
              "createdAt": "2024-05-17T05:58:21Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            },
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nwhich are issued by a NEW_CONNECTION_ID frame {{Section 19.15. of QUIC-TRANSPORT}}\r\n```",
              "createdAt": "2024-05-17T05:59:09Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            },
            {
              "originalPosition": 35,
              "body": "I think I understand the meaning here, but the definition of \"packet number space\" in the first sentence (one per path) is not coherent with the second one (one per direction over a path). Here is a first try to better describe this, but I think we could do better.\r\n\r\n```suggestion\r\nThis extension uses multiple packet number spaces, one for each active path.\r\nAs such, each path maintains distinct packet number states for sending and receiving packets, as in {{QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2024-05-17T06:05:37Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            },
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n{{QUIC-RECOVERY}} on a per-path basis.\r\n```",
              "createdAt": "2024-05-17T06:06:10Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            },
            {
              "originalPosition": 44,
              "body": "```suggestion\r\nconstruct the packet protection nonce defined in {{multipath-aead}}.\r\n```",
              "createdAt": "2024-05-17T06:06:49Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            },
            {
              "originalPosition": 95,
              "body": "Agree with @huitema that it does not read well. What about this?\r\n\r\n```suggestion\r\nThe connection ID of a packet binds the packet to a path identifier, and therefore\r\nto a packet number space.\r\n```",
              "createdAt": "2024-05-17T06:11:36Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            },
            {
              "originalPosition": 208,
              "body": "I think we should clarify that we discuss Path ID 0 here. By design, proposing new connection IDs on other Path IDs is only possible using MP_NEW_CONNECTION_ID.",
              "createdAt": "2024-05-17T06:14:15Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            },
            {
              "originalPosition": 212,
              "body": "I think this is a bit ambiguous here, as the current text does not specify whether it refers to the value advertised by the sender, the receiver, or the minimum of both. To me, we should clarify this is relative to the value advertised by the peer.\r\n\r\n```suggestion\r\nEndpoints MUST NOT issue connection IDs with path identifiers larger than\r\nthe path limitation advertised by the peer, corresponding to the maximum value\r\nbetween the peer's initial_max_paths transport parameter and received\r\nMAX_PATHS frames.\r\n```\r\n\r\nAlso, I would expect discussing here how the receiver should react if it receives Connection IDs for non-authorised paths IDs. Closing the connection with some MP_PROTOCOL_VIOLATION error?",
              "createdAt": "2024-05-17T06:20:40Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            },
            {
              "originalPosition": 217,
              "body": "A typo. Also, given that we restrict now to only client-initiated paths, we could replace \"endpoint\" by \"client\". Then, we could specify that the server can reply to such path opening by sending packets with the newly seen Path ID on the perceived network path.\r\n\r\n```suggestion\r\nTo open a new path, an endpoint MUST use a connection ID associated with\r\n```",
              "createdAt": "2024-05-17T06:22:56Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            },
            {
              "originalPosition": 244,
              "body": "Just to clarify, but feel free to ignore if you do not think it is useful.\r\n```suggestion\r\neach endpoint uses MP_NEW_CONNECTION_ID frames\r\nto issue usable Path ID-specific connections IDs to reach it. As such to open\r\n```",
              "createdAt": "2024-05-17T06:27:16Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            },
            {
              "originalPosition": 400,
              "body": "```suggestion\r\nthe endpoint SHOULD send a PATH_ABANDON frame before closing the path.\r\n```",
              "createdAt": "2024-05-17T06:28:51Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            },
            {
              "originalPosition": 524,
              "body": "The current formulation is a bit implicit about what is meant by \"reused\". What about this? In my opinion, we could also drop the \"even on other network paths\" part.\r\n```suggestion\r\nendpoints MUST NOT send packets associated with that Path ID anymore,\r\neven on other network paths.\r\n```",
              "createdAt": "2024-05-17T06:33:30Z",
              "updatedAt": "2024-05-17T06:35:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM569XeR",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T10:12:03Z",
          "updatedAt": "2024-05-17T10:12:03Z",
          "comments": [
            {
              "originalPosition": 212,
              "body": "```suggestion\r\nfor at least one unused path identifier. Connection IDs for paths with Path IDs\r\nother than 0, can only be announced and retired with the new\r\nMP_NEW_CONNECTION_ID and MP_RETIRE_CONNECTION_ID frames.\r\nAfter a successful handshake indicating multipath support by both endpoints,\r\nendpoints SHOULD also use the MP_NEW_CONNECTION_ID and\r\nMP_RETIRE_CONNECTION_ID frames to provide new connection IDs\r\nor, respectively, retire them for the initial path with Path ID 0.\r\n```",
              "createdAt": "2024-05-17T10:12:03Z",
              "updatedAt": "2024-05-17T10:13:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM569YBn",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T10:13:22Z",
          "updatedAt": "2024-05-17T10:13:22Z",
          "comments": [
            {
              "originalPosition": 208,
              "body": "see below. Okay?",
              "createdAt": "2024-05-17T10:13:22Z",
              "updatedAt": "2024-05-17T10:13:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM566vNK",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T02:31:04Z",
          "updatedAt": "2024-05-17T11:44:51Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "The path ID is a new concept which differs from RFC9000. I think it's better to update the definition of path and path id, but not to delete all this definition of the new concept.",
              "createdAt": "2024-05-17T11:37:39Z",
              "updatedAt": "2024-05-17T11:44:51Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nthe connection ID specified in the \"preferred address\" transport parameter is 2.\r\n```",
              "createdAt": "2024-05-17T11:43:06Z",
              "updatedAt": "2024-05-17T11:44:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM56-XTK",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T11:51:45Z",
          "updatedAt": "2024-05-17T11:51:45Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": " it's already covered in the intro now.",
              "createdAt": "2024-05-17T11:51:45Z",
              "updatedAt": "2024-05-17T11:51:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM56-YLL",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T11:53:00Z",
          "updatedAt": "2024-05-17T11:53:00Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I think this change needs discussion. See issue #317 ",
              "createdAt": "2024-05-17T11:53:00Z",
              "updatedAt": "2024-05-17T11:53:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57Ga_K",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-20T03:33:00Z",
          "updatedAt": "2024-05-20T03:33:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM57Gc4c",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-20T03:46:33Z",
          "updatedAt": "2024-05-20T04:08:21Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nlength connection IDs in both directions.\r\n```",
              "createdAt": "2024-05-20T03:46:34Z",
              "updatedAt": "2024-05-20T04:08:21Z"
            },
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nFurther, connection IDs are issued per Path ID.\r\n```",
              "createdAt": "2024-05-20T03:47:49Z",
              "updatedAt": "2024-05-20T04:08:21Z"
            },
            {
              "originalPosition": 44,
              "body": "This sentence seems out of place here. Maybe just delete it?",
              "createdAt": "2024-05-20T03:50:19Z",
              "updatedAt": "2024-05-20T04:08:21Z"
            },
            {
              "originalPosition": 118,
              "body": "```suggestion\r\nMUST use non-zero length Source and Destination Connection IDs.\r\n```",
              "createdAt": "2024-05-20T03:52:40Z",
              "updatedAt": "2024-05-20T04:08:22Z"
            },
            {
              "originalPosition": 133,
              "body": "```suggestion\r\nThe active_connection_id_limit transport parameter\r\n```",
              "createdAt": "2024-05-20T03:53:15Z",
              "updatedAt": "2024-05-20T04:08:22Z"
            },
            {
              "originalPosition": 212,
              "body": "I don't understand the motivation behind\r\n> After a successful handshake indicating multipath support by both endpoints,\r\n\tendpoints SHOULD also use the MP_NEW_CONNECTION_ID and\r\n\tMP_RETIRE_CONNECTION_ID frames to provide new connection IDs\r\n\tor, respectively, retire them for the initial path with Path ID 0.\r\n\r\nWe can just say that MP_NEW_CONNECTION_ID with path ID 0 is equivalent to NEW_CONNECTION_ID. That's how we dealt with the fact that there's one bespoke value in RESET_STREAM_AT. It really doesn't matter which frame the peer uses, but in my code, I'd always go for the shortest encoding.",
              "createdAt": "2024-05-20T03:55:44Z",
              "updatedAt": "2024-05-20T04:08:22Z"
            },
            {
              "originalPosition": 240,
              "body": "The logic here doesn't really work out anymore, since CIDs are now bound to a path.",
              "createdAt": "2024-05-20T04:02:11Z",
              "updatedAt": "2024-05-20T04:08:22Z"
            },
            {
              "originalPosition": 293,
              "body": "That's incorrect. Multiple CIDs are associated with the same path ID.",
              "createdAt": "2024-05-20T04:02:47Z",
              "updatedAt": "2024-05-20T04:08:22Z"
            },
            {
              "originalPosition": 335,
              "body": "```suggestion\r\nconnection IDs will not retire the Path Identifier for the specific path.\r\n```",
              "createdAt": "2024-05-20T04:05:04Z",
              "updatedAt": "2024-05-20T04:08:22Z"
            },
            {
              "originalPosition": 337,
              "body": "I find this confusing, and I'm surprised one would even consider this. This is just plain RFC 9000 behavior.",
              "createdAt": "2024-05-20T04:05:43Z",
              "updatedAt": "2024-05-20T04:08:22Z"
            },
            {
              "originalPosition": 343,
              "body": "Same here, this is just RFC 9000. I don't think we need to call out anything specifically here.",
              "createdAt": "2024-05-20T04:06:35Z",
              "updatedAt": "2024-05-20T04:08:22Z"
            },
            {
              "originalPosition": 400,
              "body": "You don't necessarily send stream data.\r\n```suggestion\r\nthat the congestion control currently allow sending\r\n```",
              "createdAt": "2024-05-20T04:07:33Z",
              "updatedAt": "2024-05-20T04:08:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57GjaC",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-20T04:20:26Z",
          "updatedAt": "2024-05-20T04:20:26Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "We may discuss that later, but connection IDs are issued for the connection, because they must be unique withing the scope of the connection, and attached to a path-id.",
              "createdAt": "2024-05-20T04:20:26Z",
              "updatedAt": "2024-05-20T04:20:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57SsNV",
          "commit": {
            "abbreviatedOid": "61b55b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T12:28:43Z",
          "updatedAt": "2024-05-21T12:28:43Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\r\nUsing multiple packet number spaces requires changes in the way AEAD is\r\napplied for packet protection, as explained in {{multipath-aead}}. \r\nMore concretely, the path identifier is used to construct the\r\npacket protection nonce in addition to the packet number\r\nin order to enable use of the same packet number on different paths.\r\nFurther, tighter constraints for key updates are needed, as explained in {{multipath-key-update}}.\r\n```",
              "createdAt": "2024-05-21T12:28:43Z",
              "updatedAt": "2024-05-21T12:28:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57StX_",
          "commit": {
            "abbreviatedOid": "61b55b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T12:30:57Z",
          "updatedAt": "2024-05-21T12:30:57Z",
          "comments": [
            {
              "originalPosition": 212,
              "body": "True. However, this is meant to be an editorial PR. Given the SHOULD is already in the current version, maybe it cleaner to open and issue and then remove that eventually with a separate PR? ",
              "createdAt": "2024-05-21T12:30:57Z",
              "updatedAt": "2024-05-21T12:30:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57Su7Q",
          "commit": {
            "abbreviatedOid": "61b55b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T12:33:54Z",
          "updatedAt": "2024-05-21T12:33:54Z",
          "comments": [
            {
              "originalPosition": 240,
              "body": "This is still correct. CID need still to be unique per connection. However, I agree that this half sentence is probably simply unnecessary. ",
              "createdAt": "2024-05-21T12:33:54Z",
              "updatedAt": "2024-05-21T12:33:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57SvAj",
          "commit": {
            "abbreviatedOid": "61b55b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T12:34:03Z",
          "updatedAt": "2024-05-21T12:34:03Z",
          "comments": [
            {
              "originalPosition": 240,
              "body": "```suggestion\r\nOpening a new path requires the\r\n```",
              "createdAt": "2024-05-21T12:34:03Z",
              "updatedAt": "2024-05-21T12:34:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57SwTP",
          "commit": {
            "abbreviatedOid": "61b55b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T12:36:31Z",
          "updatedAt": "2024-05-21T12:36:31Z",
          "comments": [
            {
              "originalPosition": 293,
              "body": "This is correct because it doesn't say that it can be the same path ID. However, I agree it's confusing.",
              "createdAt": "2024-05-21T12:36:31Z",
              "updatedAt": "2024-05-21T12:36:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57SwgQ",
          "commit": {
            "abbreviatedOid": "61b55b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T12:36:55Z",
          "updatedAt": "2024-05-21T12:36:55Z",
          "comments": [
            {
              "originalPosition": 293,
              "body": "Not fully sure what to do here. Maybe just remove the sentence entirely?\r\n```suggestion\r\n```",
              "createdAt": "2024-05-21T12:36:55Z",
              "updatedAt": "2024-05-21T12:36:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57SxxY",
          "commit": {
            "abbreviatedOid": "61b55b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T12:39:18Z",
          "updatedAt": "2024-05-21T12:39:18Z",
          "comments": [
            {
              "originalPosition": 337,
              "body": "I agree that this seems weird if you don't have any context about the single packet number space approach. However, does it really hurt to have this sentence?\r\n\r\nI definitely planning for another editing pass, to stream-line the whole text. Maybe we can reconsider then.",
              "createdAt": "2024-05-21T12:39:18Z",
              "updatedAt": "2024-05-21T12:39:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57Sy0v",
          "commit": {
            "abbreviatedOid": "61b55b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T12:40:38Z",
          "updatedAt": "2024-05-21T12:40:38Z",
          "comments": [
            {
              "originalPosition": 343,
              "body": "True, we should at least not use normative language here as this is already normatively specified in RFC9000.\r\n```suggestion\r\nthat connection ID, but has to use a different connection ID when doing so.\r\n```",
              "createdAt": "2024-05-21T12:40:38Z",
              "updatedAt": "2024-05-21T12:40:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57SzXl",
          "commit": {
            "abbreviatedOid": "61b55b0"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T12:41:34Z",
          "updatedAt": "2024-05-21T12:41:34Z",
          "comments": [
            {
              "originalPosition": 400,
              "body": "Yes, if you don't send stream data flow control does not apply. However, when it applies you have to consider it. I think the sentence as is, is still more correct.",
              "createdAt": "2024-05-21T12:41:34Z",
              "updatedAt": "2024-05-21T12:41:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57Z-8h",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T07:50:54Z",
          "updatedAt": "2024-05-22T07:50:55Z",
          "comments": [
            {
              "originalPosition": 293,
              "body": "I'd suggest change the sentence into: \r\nEach endpoints _assign_ a Path Identifier for each new connection ID.",
              "createdAt": "2024-05-22T07:50:54Z",
              "updatedAt": "2024-05-22T07:50:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57aW0a",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T08:27:39Z",
          "updatedAt": "2024-05-22T08:27:40Z",
          "comments": [
            {
              "originalPosition": 293,
              "body": "I'd argue it's the wrong way around anyway. **First** you create the path ID, **then** you issue CIDs for this path.",
              "createdAt": "2024-05-22T08:27:40Z",
              "updatedAt": "2024-05-22T08:27:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57bJ3q",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T09:54:56Z",
          "updatedAt": "2024-05-22T09:54:57Z",
          "comments": [
            {
              "originalPosition": 293,
              "body": "That's true. So it's better to change the sentence into: \r\n'_Endpoints first allocate unused Path Identifiers, then they issue Connection IDs for each Path Identifier._'",
              "createdAt": "2024-05-22T09:54:56Z",
              "updatedAt": "2024-05-22T09:54:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57bK1L",
          "commit": {
            "abbreviatedOid": "61b55b0"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T09:56:43Z",
          "updatedAt": "2024-05-22T09:56:44Z",
          "comments": [
            {
              "originalPosition": 294,
              "body": "```suggestion\r\nEndpoints first allocate unused Path Identifiers, then they issue Connection IDs for each Path Identifier.\r\n```",
              "createdAt": "2024-05-22T09:56:44Z",
              "updatedAt": "2024-05-22T09:56:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57bQEs",
          "commit": {
            "abbreviatedOid": "c117861"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T10:02:35Z",
          "updatedAt": "2024-05-22T10:02:35Z",
          "comments": [
            {
              "originalPosition": 293,
              "body": "I don't think that is a useful sentence. I think we can just remove it. Or what do you think is missing if we remove it, @Yanmei-Liu ?",
              "createdAt": "2024-05-22T10:02:35Z",
              "updatedAt": "2024-05-22T10:02:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57bVv1",
          "commit": {
            "abbreviatedOid": "1ad59f7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T10:12:32Z",
          "updatedAt": "2024-05-22T10:12:32Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "@marten-seemann would that proposal work?",
              "createdAt": "2024-05-22T10:12:32Z",
              "updatedAt": "2024-05-22T10:12:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57cvDa",
          "commit": {
            "abbreviatedOid": "1ad59f7"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T13:01:15Z",
          "updatedAt": "2024-05-22T13:01:15Z",
          "comments": [
            {
              "originalPosition": 293,
              "body": "This sentence is certainly necessary, we should clarify the relationship between CID and PATH ID at the very beginning of this section.",
              "createdAt": "2024-05-22T13:01:15Z",
              "updatedAt": "2024-05-22T13:01:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57c4E0",
          "commit": {
            "abbreviatedOid": "1ad59f7"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T13:15:47Z",
          "updatedAt": "2024-05-22T13:15:47Z",
          "comments": [
            {
              "originalPosition": 400,
              "body": "The original statement is more accurate.",
              "createdAt": "2024-05-22T13:15:47Z",
              "updatedAt": "2024-05-22T13:15:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57f4nA",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T17:50:23Z",
          "updatedAt": "2024-05-22T17:50:23Z",
          "comments": [
            {
              "originalPosition": 337,
              "body": "in any case, \"uneffected\" --> \"unaffected\". ",
              "createdAt": "2024-05-22T17:50:23Z",
              "updatedAt": "2024-05-22T17:50:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57f5HD",
          "commit": {
            "abbreviatedOid": "daa270d"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T17:51:36Z",
          "updatedAt": "2024-05-22T17:51:36Z",
          "comments": [
            {
              "originalPosition": 400,
              "body": "I agree that the first version is better. If a frame is not subject to flow control, the flow control always allows it.",
              "createdAt": "2024-05-22T17:51:36Z",
              "updatedAt": "2024-05-22T17:51:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57f9wW",
          "commit": {
            "abbreviatedOid": "61b55b0"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T18:02:17Z",
          "updatedAt": "2024-05-22T18:02:17Z",
          "comments": [
            {
              "originalPosition": 294,
              "body": "I think the first version is better, \"Each endpoints pre-allocate a Path Identifier for each new connection ID.\" But the real process involves:\r\n\r\n* Endpoints decide for which paths they will allocate connection identifiers, subject to both the limits imposed by \"max paths\" and the limits of local resource. \r\n* Endpoint advertise connection identifiers for these paths.\r\n* Connection identifier values must be unique for the scope of the connection, regardless of path-id.\r\n* The number of connection-id active for a given path must not exceed the active_connection_id_limit.\r\n\r\nIt should be clear that at any given time there will be paths for which no connection ID is advertised yet, because the peer did not yet have the time or resource to advertise them. This is not an error. ",
              "createdAt": "2024-05-22T18:02:17Z",
              "updatedAt": "2024-05-22T18:02:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57kzdE",
          "commit": {
            "abbreviatedOid": "8480935"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-23T08:29:57Z",
          "updatedAt": "2024-05-23T08:29:58Z",
          "comments": [
            {
              "originalPosition": 212,
              "body": "Let's track this in #337 then.",
              "createdAt": "2024-05-23T08:29:58Z",
              "updatedAt": "2024-05-23T08:29:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57lK-H",
          "commit": {
            "abbreviatedOid": "8480935"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "A few suggestions, but I would suggest merging this and addressing remaining concerns in sub issues.",
          "createdAt": "2024-05-23T09:04:09Z",
          "updatedAt": "2024-05-23T09:10:05Z",
          "comments": [
            {
              "originalPosition": 340,
              "body": "```suggestion\r\nunaffected as the packet number space is associated with a path.\r\n```",
              "createdAt": "2024-05-23T09:04:09Z",
              "updatedAt": "2024-05-23T09:10:05Z"
            },
            {
              "originalPosition": 296,
              "body": "Based on the whole discussion, I suggest to make the sentence even simpler.\r\n```suggestion\r\nEach endpoints bind each Connection ID to a specific Path Identifier.\r\n```",
              "createdAt": "2024-05-23T09:08:27Z",
              "updatedAt": "2024-05-23T09:10:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57oI7H",
          "commit": {
            "abbreviatedOid": "8480935"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-23T14:16:54Z",
          "updatedAt": "2024-05-23T14:16:54Z",
          "comments": [
            {
              "originalPosition": 296,
              "body": "Maybe even simpler...?\r\n```suggestion\r\nEach connection ID is associated with a Path ID.\r\n```",
              "createdAt": "2024-05-23T14:16:54Z",
              "updatedAt": "2024-05-23T14:16:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57oKX1",
          "commit": {
            "abbreviatedOid": "488109e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-23T14:19:04Z",
          "updatedAt": "2024-05-23T14:19:05Z",
          "comments": [
            {
              "originalPosition": 294,
              "body": "We should rework this section in a separate PR.",
              "createdAt": "2024-05-23T14:19:04Z",
              "updatedAt": "2024-05-23T14:19:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57oMyq",
          "commit": {
            "abbreviatedOid": "488109e"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-23T14:22:30Z",
          "updatedAt": "2024-05-23T14:22:30Z",
          "comments": [
            {
              "originalPosition": 294,
              "body": "I created issue #338 ",
              "createdAt": "2024-05-23T14:22:30Z",
              "updatedAt": "2024-05-23T14:22:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM57oTkn",
          "commit": {
            "abbreviatedOid": "c82b82b"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-23T14:31:58Z",
          "updatedAt": "2024-05-23T14:31:58Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\napplied for packet protection, as explained in {{multipath-aead}}.\r\n```",
              "createdAt": "2024-05-23T14:31:58Z",
              "updatedAt": "2024-05-23T14:31:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 341,
      "id": "PR_kwDOGNtpaM5wffkj",
      "title": "ignore or wait if no CID for path ID is available on receipt of PATH_\u2026",
      "url": "https://github.com/quicwg/multipath/pull/341",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "needs-discussion"
      ],
      "body": "\u2026CHALLENGE\r\n\r\nThis PR is text from PR #315 that needs further discussion before merge. See issue #340 for discussion!",
      "createdAt": "2024-05-24T17:36:28Z",
      "updatedAt": "2024-05-27T20:40:30Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "bdcb1031141a5dc47d89cdb66c1c4b0279c9ca2b",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-2",
      "headRefOid": "8f0c6df98f78a7f5d2729fe42e91fb653af6434f",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 350,
      "id": "PR_kwDOGNtpaM5wiMJw",
      "title": "Editorial feedback by mbishop",
      "url": "https://github.com/quicwg/multipath/pull/350",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Smaller nits from my review. I *believe* these should be entirely editorial and uncontroversial. However, if there's anything you'd like me to lift into a separate PR for discussion, I will happily do so.",
      "createdAt": "2024-05-25T04:04:26Z",
      "updatedAt": "2024-05-27T14:47:21Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "711afed6c47a0a612b32f800cbf56a5f4b274e26",
      "headRepository": "MikeBishop/multipath",
      "headRefName": "mbishop/editorial-nits",
      "headRefOid": "1a87144d47b19162abc2fc7a344aec50720e2a37",
      "closedAt": "2024-05-27T14:47:21Z",
      "mergedAt": "2024-05-27T14:47:21Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "9c58bce4c04fdec7aaadd35ba17c944df030db3f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM58CkXD",
          "commit": {
            "abbreviatedOid": "f4b60fe"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T14:22:56Z",
          "updatedAt": "2024-05-27T14:22:57Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "```suggestion\r\nThe peer that sends the MP_RETIRE_CONNECTION_ID frame can keep sending data\r\non the path that the retired connection ID was used on but has\r\nto use a different connection ID for the same Path ID when doing so.\r\nIf no other connection ID for the same Path ID is available, the endpoint cannot send on\r\nthis path. This can happen if, e.g., the connection ID issuer requests retirement of a\r\nconnection ID using the Retire Prior To field in the MP_NEW_CONNECTION_ID frame but does\r\nprovide sufficient new CIDs.\r\n```",
              "createdAt": "2024-05-27T14:22:57Z",
              "updatedAt": "2024-05-27T14:23:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58CmOU",
          "commit": {
            "abbreviatedOid": "a044243"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T14:27:15Z",
          "updatedAt": "2024-05-27T14:27:15Z",
          "comments": [
            {
              "originalPosition": 264,
              "body": "```suggestion\r\nThe relation between packet number spaces and paths is fixed.\r\nCIDs are separately allocated for each Path ID. Rotating the connection ID on a\r\npath does not change the Path ID. NAT rebinding, though it changes the\r\n4-tuple of the path, also does not change the path identifier.\r\nThe packet number space does not change when connection ID \r\nrotation happens within a given Path ID.\r\n```",
              "createdAt": "2024-05-27T14:27:15Z",
              "updatedAt": "2024-05-27T14:27:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58CnBL",
          "commit": {
            "abbreviatedOid": "8779667"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T14:29:04Z",
          "updatedAt": "2024-05-27T14:29:05Z",
          "comments": [
            {
              "originalPosition": 311,
              "body": "```suggestion\r\nNote that connection IDs issued or retired in NEW_CONNECTION_ID frames MUST be treated as if\r\n```",
              "createdAt": "2024-05-27T14:29:05Z",
              "updatedAt": "2024-05-27T14:29:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58CnQz",
          "commit": {
            "abbreviatedOid": "72e2f35"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T14:29:38Z",
          "updatedAt": "2024-05-27T14:29:39Z",
          "comments": [
            {
              "originalPosition": 312,
              "body": "```suggestion\r\ntheir Path ID is 0 for compatibility with {{QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2024-05-27T14:29:38Z",
              "updatedAt": "2024-05-27T14:29:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58Cram",
          "commit": {
            "abbreviatedOid": "7394611"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T14:39:15Z",
          "updatedAt": "2024-05-27T14:39:16Z",
          "comments": [
            {
              "originalPosition": 269,
              "body": "```suggestion\r\nThe packet number space does not change when connection ID\r\n```",
              "createdAt": "2024-05-27T14:39:16Z",
              "updatedAt": "2024-05-27T14:39:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58CudB",
          "commit": {
            "abbreviatedOid": "e04f8c8"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T14:46:15Z",
          "updatedAt": "2024-05-27T14:46:15Z",
          "comments": [
            {
              "originalPosition": 187,
              "body": "```suggestion\r\neven if there is no valid connection ID associated with the path, both endpoints can still send\r\n```",
              "createdAt": "2024-05-27T14:46:15Z",
              "updatedAt": "2024-05-27T14:46:15Z"
            }
          ]
        }
      ]
    },
    {
      "number": 351,
      "id": "PR_kwDOGNtpaM5wiMhm",
      "title": "endhost -> endpoint",
      "url": "https://github.com/quicwg/multipath/pull/351",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The term \"endhost\" appears ~8 times, while \"endpoint\" appears ~70 times. Let's consolidate, unless there's a deliberate distinction.",
      "createdAt": "2024-05-25T04:06:55Z",
      "updatedAt": "2024-05-27T13:59:43Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "bdcb1031141a5dc47d89cdb66c1c4b0279c9ca2b",
      "headRepository": "MikeBishop/multipath",
      "headRefName": "endhost",
      "headRefOid": "9bb6738b48bc1fdf4244d0862f2785be2f0dc269",
      "closedAt": "2024-05-27T13:59:43Z",
      "mergedAt": "2024-05-27T13:59:43Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "711afed6c47a0a612b32f800cbf56a5f4b274e26"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 352,
      "id": "PR_kwDOGNtpaM5wqHNX",
      "title": "s/CID/connection ID/",
      "url": "https://github.com/quicwg/multipath/pull/352",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-27T12:29:46Z",
      "updatedAt": "2024-05-27T12:30:23Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "bdcb1031141a5dc47d89cdb66c1c4b0279c9ca2b",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-3",
      "headRefOid": "6e5b0728a9c1ccf07549ea0ab4ebd529008b5c15",
      "closedAt": "2024-05-27T12:30:22Z",
      "mergedAt": "2024-05-27T12:30:22Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "e1e4e547d35df734ff80161274e6f4b7ab361a6d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 353,
      "id": "PR_kwDOGNtpaM5wqI7k",
      "title": "In states figure: s/Path Blackhole/Idle timeout/",
      "url": "https://github.com/quicwg/multipath/pull/353",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-27T12:33:48Z",
      "updatedAt": "2024-05-27T12:34:49Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "e1e4e547d35df734ff80161274e6f4b7ab361a6d",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-4",
      "headRefOid": "3b72fdfeecfa9a73242bce6484732b513abe54b4",
      "closedAt": "2024-05-27T12:34:49Z",
      "mergedAt": "2024-05-27T12:34:49Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "39a52363fb786a54675bfc9881308dc8326de6d9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 354,
      "id": "PR_kwDOGNtpaM5wqYub",
      "title": "fix definition of MAX_PATHS frame",
      "url": "https://github.com/quicwg/multipath/pull/354",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-27T13:10:04Z",
      "updatedAt": "2024-05-27T21:50:24Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9c58bce4c04fdec7aaadd35ba17c944df030db3f",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-5",
      "headRefOid": "5da711580e8516ee49cb3f4bc6ba50e0f63adff0",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "> We really need a \"flow control\" section of some kind, explaining that we expect resource per active path (number space, ack list, pending packets) and per connection ID (memory), and how these resource are protected.\r\n\r\n@huitema can you open an issue for that? It should probably be part of the implementation section. However, we might even remove or merge some of the text we have there as things are actually less complicated now. See also PR #358 where I already removed some text that is outdated.",
          "createdAt": "2024-05-27T20:34:45Z",
          "updatedAt": "2024-05-27T20:34:45Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema as I also wrote in PR #355 I'm currently focusing first of all on defining things normatively only once. Further I really don#t think we should have normative requirements in the example section, so I also move most of this text now into the frame definition section. But I agree that it probably belongs in the path management section. I noticed this as well when I did another full editorial pass in #358. However, the clean up is my first priority now and then I would rather like to make another PR later to check all frame sections and move things accordingly.",
          "createdAt": "2024-05-27T20:39:52Z",
          "updatedAt": "2024-05-27T20:39:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM58CZgG",
          "commit": {
            "abbreviatedOid": "45d6705"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T14:04:34Z",
          "updatedAt": "2024-05-27T14:04:34Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "```suggestion\r\nthe Path ID announced in the Maximum Path Identifier field in the\r\n```",
              "createdAt": "2024-05-27T14:04:34Z",
              "updatedAt": "2024-05-27T14:04:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58CuDN",
          "commit": {
            "abbreviatedOid": "9f48711"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I like the idea of moving all the recommendations on path-ID in a single space. You choose to move that to the definition of the MAX_PATHS frame and that's clearly a possibility, but RFC 9000 uses a different approach. The stream-ID structure [2.1. ](https://www.rfc-editor.org/rfc/rfc9000.html#section-2.1)[Stream Types and Identifiers](https://www.rfc-editor.org/rfc/rfc9000.html#name-stream-types-and-identifier), and the restrictions on sending new streams are defined in [4.6. ](https://www.rfc-editor.org/rfc/rfc9000.html#section-4.6)[Controlling Concurrency](https://www.rfc-editor.org/rfc/rfc9000.html#name-controlling-concurrency). The frame descriptions just describe the encoding, with text like _\"Stream ID: A variable-length integer indicating the stream ID of the stream; see [Section 2.1](https://www.rfc-editor.org/rfc/rfc9000.html#stream-id).\"_\r\n\r\nOn the text itself, I struggled with the same issues when writing PR #331, and I added a clip of what I wrote in the comments.",
          "createdAt": "2024-05-27T14:45:22Z",
          "updatedAt": "2024-05-27T14:56:54Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "For information, I struggled with the same set of issues when writing the \"even numbers\" PR. The text that I came up with was:\r\n```\r\nMaximum Paths:\r\n: A count of the cumulative number of paths that can be opened\r\nover the lifetime of the connection.\r\n\r\nThe endpoint receiving this frame MAY send MP_NEW_CONNECTION_ID frames\r\nwith Path IDs strictly lower than twice the Maximum Paths.\r\nFor example, if an endpoint received a Maximum Paths value of 3,\r\nit may send MP_NEW_CONNECTION_ID with Path ID 0, 2 and 4, but not higher.\r\n\r\nThe Maximum Paths value cannot exceed 2^31-1, as it is not\r\npossible to encode Path IDs larger than 2^32-2. Receipt of a\r\nPath Identifier larger than this limit MUST be treated\r\nas a connection error of type FRAME_ENCODING_ERROR.\r\n\r\nThe Maximum Paths value MUST NOT be lower than the value\r\nadvertised in the \"initial_max_paths\" transport parameter. Receipt\r\nof a value lower than the \"initial_max_paths\" transport parameter\r\nMUST be treated as a connection error of type MP_PROTOCOL_ERROR.\r\n```\r\nSome of that text was motivated by the odd-even split, but a lot of it was about clarify how the path-ID is used.",
              "createdAt": "2024-05-27T14:45:22Z",
              "updatedAt": "2024-05-27T14:56:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58C46A",
          "commit": {
            "abbreviatedOid": "f961cf5"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think the MAX_PATHS should remain a unidirectional advertisement message (in the current text, I am not sure this intent is still kept) and the path ID management should be enforced on the available Connection IDs for some Path ID.",
          "createdAt": "2024-05-27T15:12:03Z",
          "updatedAt": "2024-05-27T15:31:54Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Note that the MAX_PATHS frame is a unidirectional advertisement.\r\n```suggestion\r\n: The largest Path ID that can be used for this connection by the receiving endpoint.\r\n```",
              "createdAt": "2024-05-27T15:12:03Z",
              "updatedAt": "2024-05-27T15:31:54Z"
            },
            {
              "originalPosition": 83,
              "body": "```suggestion\r\ncorresponds to the value of initial_max_paths transport parameter.\r\n```",
              "createdAt": "2024-05-27T15:13:10Z",
              "updatedAt": "2024-05-27T15:31:54Z"
            },
            {
              "originalPosition": 81,
              "body": "I think we should clarify that the MAX_PATHS frame is a unidirectional advertisement to the peer having the same semantic as the `initial_max_paths` TP. To that end, an endpoint MUST NOT issue new CIDs for a Path ID larger than the maximum one advertised by the peer (and not SHOULD NOT) and MUST terminate the a connection with an error of type MP_PROTOCOL_VIOLATION. Allowing (without recommending) an endpoint to issue CIDs with Path ID larger than supported by the receiving host pose security concerns from a resource exhaustion viewpoint.\r\n\r\nHowever, if the peer allows a maximum Path ID X that is larger than the local advertised maximum path ID Y (i.e., X > Y), then an endpoint may (MAY?) provides CIDs for Path IDs Z where Y < Z <= X.\r\n\r\nFurther, we probably mention the MAX_PATHS frame (and not MP_MAX_PATHS).",
              "createdAt": "2024-05-27T15:20:53Z",
              "updatedAt": "2024-05-27T15:31:54Z"
            },
            {
              "originalPosition": 87,
              "body": "To me, this whole paragraph can be removed once the corrections of the previous paragraph are integrated.",
              "createdAt": "2024-05-27T15:26:30Z",
              "updatedAt": "2024-05-27T15:31:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58D-jh",
          "commit": {
            "abbreviatedOid": "ecda708"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "We really need a \"flow control\" section of some kind, explaining that we expect resource per active path (number space, ack list, pending packets) and per connection ID (memory), and how these resource are protected.",
          "createdAt": "2024-05-27T20:00:33Z",
          "updatedAt": "2024-05-27T20:03:42Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Uh, no. We could encode up to 2^62 - 1. The real reason is that we cannot encode more than 32 bit of path-ID and 64 bit of packet number in the 96 bit AEAD nonce.",
              "createdAt": "2024-05-27T20:00:33Z",
              "updatedAt": "2024-05-27T20:03:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58ECZL",
          "commit": {
            "abbreviatedOid": "12e8647"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:22:14Z",
          "updatedAt": "2024-05-27T20:22:14Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "That doesn't make sense. In this case we would allow 2^62 - 1 path IDs but require a key update earlier.",
              "createdAt": "2024-05-27T20:22:14Z",
              "updatedAt": "2024-05-27T20:22:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EDMN",
          "commit": {
            "abbreviatedOid": "12e8647"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:27:36Z",
          "updatedAt": "2024-05-27T20:27:36Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "We can define the max paths as either the cumulative number of path over the whole life or the largest id. The part that I was trying to fix is that the frame figure said the field is called \"Maximum Paths\" but the text was defining \"Maximum Path Identifier\". I thought the later is clearer but in the end we just have to fix it such that it is correct, one or the other way. @huitema do you prefer \"Maximum Paths\"?",
              "createdAt": "2024-05-27T20:27:36Z",
              "updatedAt": "2024-05-27T20:27:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EG8i",
          "commit": {
            "abbreviatedOid": "ecda708"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:49:21Z",
          "updatedAt": "2024-05-27T20:49:21Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I would be fine with that. It was actually the original design. But there are complexities. For example, can you have both a long-lived path number 1 and then create path ID 2^32 + 1? ",
              "createdAt": "2024-05-27T20:49:21Z",
              "updatedAt": "2024-05-27T20:49:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EIVq",
          "commit": {
            "abbreviatedOid": "ecda708"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:58:57Z",
          "updatedAt": "2024-05-27T20:58:57Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "hm, okay I guess 2^32 - 1 paths are usually enough... In this case I think we need to actually use a MUST here and we should maybe remove the respective text from the intro in order to define it only once.\r\n\r\nIt's late here; I will update the PR accordingly tomorrow which gives also others a chance to comment.",
              "createdAt": "2024-05-27T20:58:57Z",
              "updatedAt": "2024-05-27T20:58:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EJMI",
          "commit": {
            "abbreviatedOid": "12e8647"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T21:05:02Z",
          "updatedAt": "2024-05-27T21:05:02Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "+1 to remove it",
              "createdAt": "2024-05-27T21:05:02Z",
              "updatedAt": "2024-05-27T21:05:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EJjH",
          "commit": {
            "abbreviatedOid": "9f48711"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T21:07:49Z",
          "updatedAt": "2024-05-27T21:07:49Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "MAX_PATHS, MAX_PATH_ID, [\"bonnet blanc et blanc bonnet\"](https://www.frenchlearner.com/expressions/cest-bonnet-blanc-et-blanc-bonnet/), as we say in French. I don't really care.",
              "createdAt": "2024-05-27T21:07:49Z",
              "updatedAt": "2024-05-27T23:09:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EKRy",
          "commit": {
            "abbreviatedOid": "12e8647"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T21:13:09Z",
          "updatedAt": "2024-05-27T21:13:09Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "But yes, we really need to clarify that the value is unidirectional. I was thinking at some point that this is a global value and thought that if the MAX_PATHS frame gets reordered, a MP_NEW_CONNECTION_ID frame using a new path id could arrive before. However, as MAX_PATHS is sent from one peer and MP_NEW_CONNECTION_ID from the other, this cannot happen. So this is should be a MUST NOT. I will propose further text to clarify tomorrow!\r\n\r\n```suggestion\r\nEndpoints MUST NOT issue new connection IDs which have path identifiers larger than\r\nthe Path ID announced by the peer in the Maximum Path Identifier field in the MAX_PATHS frame.\r\n```",
              "createdAt": "2024-05-27T21:13:09Z",
              "updatedAt": "2024-05-27T21:14:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EMWK",
          "commit": {
            "abbreviatedOid": "12e8647"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T21:19:09Z",
          "updatedAt": "2024-05-27T21:19:09Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Also based on @huitema text below we need to add this:\r\n\r\n```suggestion\r\n\r\nThe Maximum Path Identifier MUST NOT be lower than the value\r\nadvertised in the initial_max_paths transport parameter. Receipt\r\nof a Path ID lower than the value of initial_max_paths transport parameter\r\nMUST be treated as a connection error of type MP_PROTOCOL_VIOLATION.\r\n```",
              "createdAt": "2024-05-27T21:19:09Z",
              "updatedAt": "2024-05-27T21:27:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58ENVh",
          "commit": {
            "abbreviatedOid": "12e8647"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T21:27:22Z",
          "updatedAt": "2024-05-27T21:27:23Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "I don't think FRAME_ENCODING_ERROR is actually the right error here. It should be MP_PROTOCOL_VIOLATION.\r\n\r\n```suggestion\r\nMUST be treated as a connection error of type MP_PROTOCOL_VIOLATION.\r\n```",
              "createdAt": "2024-05-27T21:27:22Z",
              "updatedAt": "2024-05-27T21:35:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EOYf",
          "commit": {
            "abbreviatedOid": "12e8647"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T21:36:41Z",
          "updatedAt": "2024-05-27T21:36:41Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "```suggestion\r\nIf no MAX_PATHS frame was received yet, the Maximum Path Identifier\r\n```",
              "createdAt": "2024-05-27T21:36:41Z",
              "updatedAt": "2024-05-27T21:36:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EOce",
          "commit": {
            "abbreviatedOid": "5da7115"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T21:37:14Z",
          "updatedAt": "2024-05-27T21:37:14Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-05-27T21:37:14Z",
              "updatedAt": "2024-05-27T21:37:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EO5m",
          "commit": {
            "abbreviatedOid": "5da7115"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T21:41:20Z",
          "updatedAt": "2024-05-27T21:41:20Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "I also proposed to remove this sentence for now. First it is unclear what \"not enough\" means and second we have two open issues to discuss this further (see #325 and #338).\r\n\r\n```suggestion\r\n```",
              "createdAt": "2024-05-27T21:41:20Z",
              "updatedAt": "2024-05-27T21:41:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EP5x",
          "commit": {
            "abbreviatedOid": "5da7115"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T21:50:24Z",
          "updatedAt": "2024-05-27T21:50:24Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "Okay, but I guess if we use the max path id field, we should also rename the frame... \r\n\r\nLooking at this now again I guess renaming the field in the definition to \"Maximum Paths\" would have been the smaller chance. I'll revise this PR again tomorrow in order to keep chances as small as possible for now (but ensure things are correct). Sorry for forth and back.",
              "createdAt": "2024-05-27T21:50:24Z",
              "updatedAt": "2024-05-27T21:50:24Z"
            }
          ]
        }
      ]
    },
    {
      "number": 355,
      "id": "PR_kwDOGNtpaM5wqgFP",
      "title": "Move normative requirement away from example section",
      "url": "https://github.com/quicwg/multipath/pull/355",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-27T13:26:26Z",
      "updatedAt": "2024-05-27T20:31:29Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9c58bce4c04fdec7aaadd35ba17c944df030db3f",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-6",
      "headRefOid": "92a22bafe3bc4bc7080a52a37d16240e9b0100d5",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM58CaEM",
          "commit": {
            "abbreviatedOid": "2491cef"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T14:05:07Z",
          "updatedAt": "2024-05-27T14:05:07Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nAfter a path is abandoned, the Path ID MUST NOT be reused\r\n```",
              "createdAt": "2024-05-27T14:05:07Z",
              "updatedAt": "2024-05-27T14:05:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58C1zd",
          "commit": {
            "abbreviatedOid": "92a22ba"
          },
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "We should move 2 paragraphs, \"MUST NOT\" ad \"SHOULD\", not just \"MUST NOT\".",
          "createdAt": "2024-05-27T15:03:23Z",
          "updatedAt": "2024-05-27T15:04:08Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "We should also copy here the SHOULD requirement in the example text:\r\n```\r\nEndpoint SHOULD send MAX_PATHS frames {{max-paths-frame}} to raise\r\nthe limit of Path ID when endpoint finds there are not enough unused\r\nPath ID (e.g. more than half of the available Path ID are used).\r\n```",
              "createdAt": "2024-05-27T15:03:23Z",
              "updatedAt": "2024-05-27T15:04:08Z"
            },
            {
              "originalPosition": 17,
              "body": "We should also move the next paragraph.",
              "createdAt": "2024-05-27T15:03:26Z",
              "updatedAt": "2024-05-27T15:04:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58DBAI",
          "commit": {
            "abbreviatedOid": "92a22ba"
          },
          "author": "qdeconinck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Ok, with the provided suggestions.",
          "createdAt": "2024-05-27T15:34:31Z",
          "updatedAt": "2024-05-27T15:35:38Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Copying as suggestion what Christian suggests. Note that I am not sure that we need to provide the example of \"more than half of the available Path ID are used\".\r\n\r\n```suggestion\r\n\r\nEndpoint SHOULD send MAX_PATHS frames {{max-paths-frame}} to raise\r\nthe limit of Path ID when endpoint finds there are not enough unused\r\nPath ID (e.g. more than half of the available Path ID are used).\r\n```",
              "createdAt": "2024-05-27T15:34:31Z",
              "updatedAt": "2024-05-27T15:35:38Z"
            },
            {
              "originalPosition": 20,
              "body": "From the suggestion of Christian.\r\n```suggestion\r\n```",
              "createdAt": "2024-05-27T15:34:58Z",
              "updatedAt": "2024-05-27T15:35:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EBf5",
          "commit": {
            "abbreviatedOid": "92a22ba"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:18:04Z",
          "updatedAt": "2024-05-27T20:18:05Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "This is moved as part of PR #354. I moved it into the MAX_PATHS section. Maybe it should rather go above into the path closure section but I think there is actually more that needs moving.",
              "createdAt": "2024-05-27T20:18:04Z",
              "updatedAt": "2024-05-27T20:18:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EBnP",
          "commit": {
            "abbreviatedOid": "92a22ba"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:18:43Z",
          "updatedAt": "2024-05-27T20:18:44Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "This is moved as part of PR #354",
              "createdAt": "2024-05-27T20:18:43Z",
              "updatedAt": "2024-05-27T20:18:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EDwh",
          "commit": {
            "abbreviatedOid": "92a22ba"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:31:29Z",
          "updatedAt": "2024-05-27T20:31:29Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "PR #354 basically moves this text in the MAX_PATHS frame section. It might fit better here but my main intention is right now to have it only once normatively defined and not in a section where we shouldn't have normative language. I think I will make another paths later where we can again move things around. However, right now I'm really focusing on ensuring we have it defined only once and clearly.",
              "createdAt": "2024-05-27T20:31:29Z",
              "updatedAt": "2024-05-27T20:31:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 356,
      "id": "PR_kwDOGNtpaM5wqvNB",
      "title": "fix Path ID/path identifier capitalisation",
      "url": "https://github.com/quicwg/multipath/pull/356",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-27T13:56:49Z",
      "updatedAt": "2024-05-27T13:58:32Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "39a52363fb786a54675bfc9881308dc8326de6d9",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-7",
      "headRefOid": "b89ac34dde56e30b3dd69ec9eeb15795126d4dac",
      "closedAt": "2024-05-27T13:58:31Z",
      "mergedAt": "2024-05-27T13:58:31Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "7338e3ca341b312847da2601414043efca39d3ca"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM58CVeZ",
          "commit": {
            "abbreviatedOid": "2916931"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T13:57:47Z",
          "updatedAt": "2024-05-27T13:57:47Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "```suggestion\r\nin {{QUIC-TRANSPORT}}, do not have a\r\n```",
              "createdAt": "2024-05-27T13:57:47Z",
              "updatedAt": "2024-05-27T13:57:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 357,
      "id": "PR_kwDOGNtpaM5wrH-G",
      "title": "paths are closed not retired",
      "url": "https://github.com/quicwg/multipath/pull/357",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2024-05-27T14:53:08Z",
      "updatedAt": "2024-05-27T14:53:18Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9c58bce4c04fdec7aaadd35ba17c944df030db3f",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-8",
      "headRefOid": "5fb2e1c6b0be3bf61504f4ac73c5d93e0b20c578",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 358,
      "id": "PR_kwDOGNtpaM5wrt2j",
      "title": "Editorial pass",
      "url": "https://github.com/quicwg/multipath/pull/358",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-27T16:44:44Z",
      "updatedAt": "2024-05-27T23:04:46Z",
      "baseRepository": "quicwg/multipath",
      "baseRefName": "main",
      "baseRefOid": "9c58bce4c04fdec7aaadd35ba17c944df030db3f",
      "headRepository": "quicwg/multipath",
      "headRefName": "mirjak-patch-9",
      "headRefOid": "fa5ba3ae2a33060d8c42c1a17bd22a1a07305372",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM58ED6H",
          "commit": {
            "abbreviatedOid": "7fb82b1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:32:24Z",
          "updatedAt": "2024-05-27T20:32:25Z",
          "comments": [
            {
              "originalPosition": 191,
              "body": "```suggestion\r\nThe effect of receiving a MP_RETIRE_CONNECTION_ID frame is specified in\r\n```",
              "createdAt": "2024-05-27T20:32:25Z",
              "updatedAt": "2024-05-27T20:32:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58ED9D",
          "commit": {
            "abbreviatedOid": "7fb82b1"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:32:43Z",
          "updatedAt": "2024-05-27T20:32:43Z",
          "comments": [
            {
              "originalPosition": 559,
              "body": "```suggestion\r\nspace and as such per Path ID.\r\n```",
              "createdAt": "2024-05-27T20:32:43Z",
              "updatedAt": "2024-05-27T20:32:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EWiL",
          "commit": {
            "abbreviatedOid": "9a54f60"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T22:56:22Z",
          "updatedAt": "2024-05-27T22:56:23Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "```suggestion\r\neach endpoint uses the MP_NEW_CONNECTION_ID frame as specified in this extension\r\n```",
              "createdAt": "2024-05-27T22:56:23Z",
              "updatedAt": "2024-05-27T22:56:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EXPs",
          "commit": {
            "abbreviatedOid": "544d2e9"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T23:03:04Z",
          "updatedAt": "2024-05-27T23:03:04Z",
          "comments": [
            {
              "originalPosition": 671,
              "body": "```suggestion\r\nthat was issued by its peer. This includes the connection ID used\r\nduring the handshake for the initial path with Path ID 0.\r\n```",
              "createdAt": "2024-05-27T23:03:04Z",
              "updatedAt": "2024-05-27T23:03:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EXSt",
          "commit": {
            "abbreviatedOid": "1eec6c7"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T23:03:36Z",
          "updatedAt": "2024-05-27T23:03:37Z",
          "comments": [
            {
              "originalPosition": 677,
              "body": "```suggestion\r\ndelivered to a peer using the MP_NEW_CONNECTION_ID frame (see Section {{mp-new-conn-id-frame}}).\r\n```",
              "createdAt": "2024-05-27T23:03:37Z",
              "updatedAt": "2024-05-27T23:03:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EXXK",
          "commit": {
            "abbreviatedOid": "cbc3f65"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T23:04:25Z",
          "updatedAt": "2024-05-27T23:04:25Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nassociated with the old path. the multipath extension specified in this document requires\r\n```",
              "createdAt": "2024-05-27T23:04:25Z",
              "updatedAt": "2024-05-27T23:04:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM58EXYp",
          "commit": {
            "abbreviatedOid": "78cef61"
          },
          "author": "mirjak",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T23:04:42Z",
          "updatedAt": "2024-05-27T23:04:43Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nassociated with the old path. The multipath extension specified in this document requires\r\n```",
              "createdAt": "2024-05-27T23:04:43Z",
              "updatedAt": "2024-05-27T23:04:43Z"
            }
          ]
        }
      ]
    }
  ]
}